Dispatchers
===========

Dispatchers are a structure that was built primarily to support the subdriver structures (described in
:doc:`drivers <drivers>`) but can be used to handle any hierarchical message dispatching.  That is there
will be a single root dispatcher which may have many generations of descendants.  Each descendant represents a more
specific restriction on whether a message can be handled (i.e. all ancestors must have had their ``filter`` pass the message
through).  Once this hierarchical structure is built, a message can be passed to the root dispatcher and it will
recursively check descendants and pass the message to the most restrictive handler (i.e. the greatest descendant depth
that can handle it).  More discussion on how this works will happen below in the section on filters. In general, each
dispatcher contains 3 core components, as well as some additional, less impactful elements.  The sections below will
describe these in more detail.


default_handlers
~~~~~~~~~~~~~~~~

The purpose of ``default_handlers`` is to provide the logic to handle messages at a given level of the
hierarchy.

All handlers should be of the signature ``handler(driver, device, ...)`` where the
varargs are specific to the type of event the dispatcher is handling, but should be homogenous.  For example,
these could be the ``capability_handlers`` defined in the :doc:`Drivers <drivers>` document.  The specific structure of
these handlers is up to the type of message being handled, and the logic to find which default handler matches a given
message is unimplemented in the base class and is one of the pieces of logic that must be implemented by a child class
by implementing the function ``find_default_handlers(driver, device, ...)`` that will return a flat list of all default
handlers that match.

There are 2 special fields that can be included in the default_handlers table.

error
    This will be a handler that will be called when any of the handlers in this or any child dispatcher raise an error
    while processing a message.  The same arguments will be passed into this handler as were passed to the original
    handler.

fallback
    This handler will be called any time dispatch is called with a message/event with no handler being found for it.
    Note that if you set this on child dispatchers, it won't be called as a part of any message passed to the root
    dispatcher because the child dispatcher can_handle will be ``false`` without any matching handler.


dispatcher_filter
~~~~~~~~~~~~~~~~~

The ``dispatcher_filter`` is used to test if a message could potentially be handled by this dispatcher or its
descendants.  Note that this does not need to check for the existence of a matching default handler as that is handled
in a different step.  Instead, this will typically test some aspect of the device the message came from to
determine if this level of the hierarchy is appropriate to handle it.  In practice this is most commonly used to test
the manufacturer or model (or both) of the specific device to handle any behavior unique to the individual device.

``dispatcher_filters`` are implicitly chained through descendants.  That is, if a grandchild
of the root dispatcher is determined to be the correct handler for a message, it means that that message was passed
through the filters of all of its ancestors.

::

    root_dispatcher (all messages pass filter)
        child_1 (filter device manufacturer = "man one")
            grandchild_1 (filter device model = "model one")
            grandchild_2 (filter device model = "model two")
        child_2 (filter device manufacturer = "man two")
            grandchild_3 (filter device model = "model one")
            grandchild_4 (filter device model = "model two")


In the above example we can see a nested structure representing our dispatcher filter functions.  Note the duplicate
filter functions present within the structure with different ancestors.

Below is a table showing which of the above dispatchers would handle a message received from a given device
(assuming there are matching default handlers at each level):

===================================================== =================
Device                                                 dispatcher
===================================================== =================
Device(manufacturer = "man one", model = "model two")  grandchild_2
Device(manufacturer = "man two", model = "model two")  grandchild_4
Device(manufacturer = "man one", model = "other")      child_1
Device(manufacturer = "my man", model = "model two")   root_dispatcher
===================================================== =================


child_dispatchers
~~~~~~~~~~~~~~~~~

Each dispatcher can have any number of child dispatchers. These are
functionally identical at each level. The only difference is when they will be called to handle a message.  Where the
root dispatcher will be called upon to handle every message that a driver receives, the children will only be called if
their filter function matches, as well as the filter of all of their ancestors.


Additional Fields
~~~~~~~~~~~~~~~~~

In addition to the 3 core components described above that drive most of the functionality of dispatchers,
there are a number of other components that have additional usages.

name
    This is a human-readable name for what this dispatcher represents (e.g. "Manufacturer One"); used primarily in logging

dispatcher_class_name
    A human-readable name describing the class of messages this is meant to handle (e.g. "capability command
    dispatcher"); used primarily in logging


In addition there are a number of methods used for getting strings representing the dispatcher that can be used for
logging to help understand the structure.  These will be documented in the class docs below.

Class Documentation
~~~~~~~~~~~~~~~~~~~

.. lua:autoclass:: MessageDispatcher


ZigbeeMessageDispatcher
~~~~~~~~~~~~~~~~~~~~~~~

.. lua:autoclass:: ZigbeeMessageDispatcher


ZwaveDispatcher
~~~~~~~~~~~~~~~

.. lua:autoclass:: st.zwave.Dispatcher


CapabilityCommandDispatcher
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. lua:autoclass:: CapabilityCommandDispatcher
