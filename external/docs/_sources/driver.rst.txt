Driver
======

Drivers are the replacement for DTHs (Device Type Handlers) but are more specific in their responsibilities.  A driver represents
the code necessary to provide the needed behavior for a set of devices.  Within the Lua code base, a "driver"
represents a table containing the context necessary for executing device behaviors.  Unlike DTHs, a separate
driver instance will not run for each device; instead a single "driver" will handle all devices that are
set to use it.  Unlike DTHs, drivers behave functionally as if they are long running. That is,
the script will behave as if it is always running and waiting for input on the devices it is registered to
handle.  See :lua:class:`Driver <driver.Driver>` for the description of what a "driver" table will
contain.  There are additional functions and structures provided on a per-protocol basis that are specific to those
protocols.

For most use cases you can create a template that has some basic behavior defined for a driver and then pass it to
``Driver(<driver_name>, <driver_template>)`` to handle setting up most of the defaults.  Below is an
example of a driver setup:

.. code-block:: lua

    local driver = Driver("my fancy bulb", {
      capability_handlers = {
        [capabilities.switch.ID] = {
          [capabilities.switch.commands.on.NAME] = command_handlers.handle_switch_on,
          [capabilities.switch.commands.off.NAME] = command_handlers.handle_switch_off,
        },
        [capabilities.switchLevel.ID] = {
          [capabilities.switchLevel.commands.setLevel.NAME] = command_handlers.handle_set_level,
        },
        [capabilities.colorControl.ID] = {
          [capabilities.colorControl.commands.setColor.NAME] = command_handlers.handle_set_color,
          [capabilities.colorControl.commands.setHue.NAME] = command_handlers.handle_set_hue,
          [capabilities.colorControl.commands.setSaturation.NAME] = command_handlers.handle_set_saturation,
        },
        [capabilities.colorTemperature.ID] = {
          [capabilities.colorTemperature.commands.setColorTemperature.NAME] = command_handlers.handle_set_color_temp,
        }
      }
    })


In this case, the only pieces of the template being specified are the command handlers for capability commands for these
devices.  Also note that some specific protocols may have more tailored options, and a more tailored init function for
the driver contexts.  See the individual protocols for examples.


Driver Class Documentation
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. lua:autoclass:: Driver


Driver Template Options
~~~~~~~~~~~~~~~~~~~~~~~

To create a driver, use the ``Driver(<driver_name>, <driver_template>)`` call to
create the driver object.  There are a number of things that can be included within the driver template that is passed
in.

lifecycle_handlers
    A structure of registered handlers for a variety of different events pertaining to the lifecycle of devices

capability_handlers
    The structure mentioned in the :ref:`capabilities handlers <capability_handlers>` section used to handle
    SmartThings capability commands

sub_drivers
    The list of :ref:`sub drivers <sub_drivers>` that are under this driver.

driver_lifecycle
    A function used to respond to driver lifecycle events.  Contains two arguments.  The first argument is the ``Driver``
    the second argument is the string name of the event (currently ``"shutdown"`` is the only option)


.. _lifecycle_handlers

Lifecycle Event Handlers
++++++++++++++++++++++++

All drivers, regardless of the underlying protocol, will by default support the definition of a ``lifecycle_handlers``
structure that will allow you to provide a set of functions that will be called when any of the following device events
happen

init
    This device init function will be called any time a device object needs to be instantiated within the driver.
    There are 2 main cases where this happens: 1) the driver just started up and needs to create the objects for
    existing devices and 2) a device was newly added to the driver.

added
    A device was newly added to this driver.  This represents when the device is, for the first time, assigned to run
    with this driver.  For example, when it is first joined to the network and fingerprinted to this driver.

doConfigure
    This is an event that will be sent when the platform believes the device needs to go through provisioning for it to
    work as expected.  The most common situation for this is when the device is first added to the platform, but there
    are other protocol specific cases that this may be triggered as well.

infoChanged
    This represents a change that has happened in the data representing the device on the SmartThings platform.  An
    example could be a change to the name of the device.

driverSwitched
    This represents a device being switched from using a different driver, to using the current driver.  This will
    be sent after an ``added`` event and it can be used to determine if this device can properly be supported by
    the driver or not.  See ``Driver.default_capability_match_driverSwitched_handler`` as an example.  Updating the
    devices metadata field ``provisioning_state`` to either ``NONFUNCTIONAL`` or ``PROVISIONED`` can be used to indicate
    that the driver won't or will, respectively, function within this driver.

removed
    This represents a device being removed from this driver.


Each of these can be defined in the ``lifecycle_handlers`` table as a key with the corresponding function that will be
called when the event happens.  These functions will have the signature of
``event_handler(driver, device, event, args)`` where ``event`` is the string matching the above event and args is
a table with key-values specific to the event.  The only event that currently uses the ``args`` is the ``infoChanged``
event which provides the key arg ``old_st_store`` which is the table representation of the device info from before this
event happened with the ``device`` arg containing the new up to date information.

There is also some default behavior that will always happen for certain events.  ``added`` will also trigger an ``init``
after it has completed the ``added`` behavior.  ``removed`` will remove the device from the device cache and make
the device inoperable.

In addition there are 2 extra keys that can be added the ``fallback`` and ``error`` fields can be set to be used as
the special handlers for the :ref:`Dispatchers <dispatchers>` to be handlers that get called in the case of no other
matching handler or an error is encountered respectively.

Further these lifecycle handlers can be defined in :ref:`SubDrivers <sub_drivers>` if there is some differntiation
needed between devices within a driver.

example
~~~~~~~

Here is a simple example in which a device needs to do some specific configuration and setup.

.. code-block:: lua

    local capabilities = require "st.capabilities"
    local ZigbeeDriver = require "st.zigbee"
    local defaults = require "st.zigbee.defaults"

    local function configure_device(self, device)
        device:configure()
        -- some driver specific behavior
        self.arbitrary_value = self.arbitrary_value + 1
    end

    local device_init = function(self, device)
       self.device_tracker[device.id] = "device initted"
    end

    local zigbee_outlet_driver_template = {
      supported_capabilities = {
        capabilities.switch,
      },
      lifecycle_handlers = {
        init = device_init,
        doConfigure = configure_device
      },
      device_tracker = {}
    }

    defaults.register_for_default_handlers(zigbee_outlet_driver_template, zigbee_outlet_driver_template.supported_capabilities)
    local zigbee_outlet = ZigbeeDriver("zigbee_bulb", zigbee_outlet_driver_template)
    zigbee_outlet:run()


.. _capability_handlers:

Capability Command Handlers
+++++++++++++++++++++++++++

All drivers, regardless of the underlying protocol, will by default support the definition of a ``capability_handlers``
structure that will allow you to map the capability commands to a function meant to support that command.  For more
information about the use of capabilities within drivers, including the ``capability_handlers`` structure, see
:doc:`capabilities <capabilities>`.

.. _sub_drivers:

SubDrivers
++++++++++

Because drivers are no longer a separate instance for each device, it becomes much easier to support
multiple different-but-similar devices (e.g. both a Zigbee on/off/dim bulb and a Zigbee RGBW bulb) in the same driver
to maximize similar behavior between devices; a driver can support any number of different profiles.  However,
there still exists the problem of handling abnormal devices, for example a device that is exactly the same in handling
and behavior except for one command which has a slightly different handling.  You could register a single
:ref:`capability handler <capability_handlers>` (or other protocol specific handler) with branching within the handler
for each device variation.  However, this can quickly get out of control with long lists of if/else blocks.  This is the
problem that ``SubDrivers`` helps solve.  With this solution, each subdriver will provide a single ``can_handle``
function that can be used to determine if the given subdriver should handle _something_.  Below is the function
definition:

.. lua:function:: can_handle(opts, driver, device, ...)

    Check if this subdriver can handle a given context

    :param opts: A table containing optional arguments that can be used to determine if something is handleable
    :type opts: table
    :param driver: the driver context
    :type driver: Driver
    :param device: the device we are checking handling against
    :type device: Device
    :param ...: The additional context values, typically the message that is being checked for handling
    :type ...: vararg

As you can see, some of the args are a bit nebulous including a vararg option at the end.  This is to allow for the
flexibility of using the same function in many contexts.  However, the most common example would be to handle devices of
a specific model (or manufacturer) in which case the function can be very simple:

.. code-block:: lua

    local my_subdriver = {
        can_handle = function(opts, driver, device, ...)
            return device:get_model() == "modelOne"
        end
    }


In this case, this is for a :lua:class:`ZigbeeDriver <ZigbeeDriver>` so we are using the function to get the model of the
device and branching on that, and we will use that in all situations for the subdriver.

In addition to the ``can_handle`` function, you can incorporate :ref:`capability handlers <capability_handlers>` or any
other protocol specific handlers. These will be built into the :doc:`dispatcher <dispatchers>`
for these handlers, and follow the corresponding rules for dispatching to the correct handler in the context of that
dispatcher.  Additionally, this subdriver could be used for whatever driver-specific uses are needed, specific to your use case.

Example
#######

Below is an example showing a base driver utilizing subdrivers.  It has a base driver that provides the
Zigbee standard support for switch and switchLevel capabilities.  It registers 2 subdrivers, split into separate files
to make organization and understanding the blocks of behavior better.  First, it has a ``manufacturer_one.lua`` subdriver
whose ``can_handle`` verifies that the device has the correct manufacturer.  If the device does match that manufacturer,
then instead of using the standard switchLevel support it will arbitrarily generate an event 15 less than it would
otherwise when the device reports, and it will set it to 15 less than the commands sent to it.  Similarly, the
``manufacturer_two.lua`` works functionally the same but with a different manufacturer and different level offset.  The
complete driver could now support any standard Zigbee bulb that supported switch and switchLevel as well as two specific
manufacturers bulbs who arbitrarily offset the levels.


init.lua
________


.. code-block:: lua

    local capabilities = require "st.capabilities"
    local ZigbeeDriver = require "st.zigbee"
    local defaults = require "st.zigbee.defaults"

    local zigbee_man_model_driver_template = {
      NAME = "man-model-example",
      supported_capabilities = {
        capabilities.switch,
        capabilities.switchLevel,
      },
      sub_drivers = { require("manufacturer_one"), require("manufacturer_two") }
    }

    defaults.register_for_default_handlers(zigbee_man_model_driver_template,
                                           zigbee_man_model_driver_template.supported_capabilities)
    local zigbee_man_model_driver = ZigbeeDriver(zigbee_man_model_driver_template)
    zigbee_man_model_driver:run()


manufacturer_one.lua
____________________


.. code-block:: lua

    local zcl_clusters = require "st.zigbee.zcl.clusters"
    local Level = zcl_clusters.Level
    local capabilities = require "st.capabilities"

    local manufacturer_one_handler = {
      NAME = "ManufacturerOne",
      zigbee_handlers = {
        attr = {
          [Level.ID] = {
            [Level.attributes.CurrentLevel.ID] = function(driver, device, value)
              -- Arbitrarily subtract 15 for example purposes
              device:emit_event(capabilities.switchLevel.level(math.floor((value.value / 254.0 * 100) + 0.5) - 15))
            end
          }
        }
      },
      capability_handlers = {
        [capabilities.switchLevel.ID] = {
          [capabilities.switchLevel.commands.setLevel.ID] = function(driver, device, command)
            -- Arbitrarily subtract 15 for example purposes
            local level = math.floor((command.args.level - 15)/100.0 * 254)
            device:send(Level.commands.client.MoveToLevelWithOnOff(device, level, command.args.rate or 0xFFFF))
          end,
        }
      },
      sub_drivers = {}, -- could optionally nest further.  The can_handles would be chained
      can_handle = function(opts, driver, device, ...)
        return device:get_manufacturer() == "manufacturer_one"
      end,
    }

    return manufacturer_one_handler


manufacturer_two.lua
_____________________


.. code-block:: lua

    local capabilities = require "st.capabilities"
    local zcl_clusters = require "st.zigbee.zcl.clusters"
    local Level = zcl_clusters.Level

    local manufacturer_two = {
      NAME = "ManufacturerTwo",
      zigbee_handlers = {
        attr = {
          [Level.ID] = {
            [Level.attributes.CurrentLevel.ID] = function(driver, device, value)
              -- Arbitrarily subtract 5 for example purposes
              device:emit_event(capabilities.switchLevel.level(math.floor((value.value / 254.0 * 100) + 0.5) - 5))
            end
          }
        }
      },
      capability_handlers = {
        [capabilities.switchLevel.ID] = {
          [capabilities.switchLevel.commands.setLevel.ID] = function(driver, device, command)
            -- Arbitrarily subtract 5 for example purposes
            local level = math.floor((command.args.level - 5)/100.0 * 254)
            device:send(Level.commands.client.MoveToLevelWithOnOff(device, level, command.args.rate or 0xFFFF))
          end,
        }
      },
      sub_drivers = {},
      can_handle = function(opts, driver, device, ...)
        return device:get_manufacturer() == "manufacturer_two"
      end,
    }


SubDriver Class Documentation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. lua:autoclass:: SubDriver


Driver tests
++++++++++++

It is useful to have a set of unit tests for the functionality of your driver.  You can see documentation on how to
set up driver tests here :doc:`here <driver_tests>`
