Zigbee Data Types
=================

.. contents::
  :depth: 5

Module Description
------------------

This module contains implementations and utility functions around the usage of Zigbee data types in the lua
environment.  While the individual data types are all defined in their own files these files will be lazily
loaded when using a normal dot syntax with the module.  E.g. ``data_typs.Uint8`` will return the :lua:class:`Uint8 <Uint8>`
class after loading it from it's individual file.

All data type implementations will share a number of characteristics.  First, every data type will define the
following functions:

Instance functions

:serialize:
    This will serialize the data type into the bytes used to send in a Zigbee message (e.g. Uint16 with a value of 2
    would result in "\\x02\\x00" note that it will be little endian)
:get_length:
    This will return the length of this type in bytes when serialized (e.g. Uint16 would return 2)
:pretty_print:
    This will return a string with a human readable representation of the instance (e.g. "Uint16: 0x0002")

Static functions

:deserialize:
    This will convert from a stream of bytes into the parsed table structure
:__call:
    This is actually defined on the metatable but allows for creation of the type through call syntax (e.g. ``Uint16(0x0002)``)

In addition the data types will have the following fields defined

:ID:
    The Zigbee ZCL specified type ID for this type (e.g. 0x21 for Uint16)
:NAME:
    A string representing the name of the data type (e.g. "Uint16" for Uint16)
:is_discrete:
    A boolean defining if the type is a discrete type
:is_fixed_length:
     A boolean defining if the type is of fixed length

There are two exceptions to this rule.  The first is :lua:class:`ZigbeeDataType <ZigbeeDataType>` as this is a representation
of fields in Zigbee messages that represent the data type Ids.  Thus it does not have an ``ID`` field as it is not a
separate data type itself, but in all other functionality it works as a :lua:class:`Uint8 <Uint8>`.  The second
exception is :lua:class:`ZCLCommandId <ZCLCommandId>` for very similar reasons.  It is not an actual Zigbee data type
but is instead used when a message field represents a ZCL command ID.  It also does not have an ID field but otherwise
works identically to a :lua:class:`Uint8 <Uint8>`.

Examples
--------

Creating a Data Type Value
++++++++++++++++++++++++++
Simple creation of some types from raw values

.. code-block:: lua

    -- Import the module
    local data_types = require "st.zigbee.data_types"
    local utils = require "st.zigbee.utils"

    local uint = data_types.Uint16(0x0002)
    uint.NAME  -- "Uint16"
    uint.ID    -- 0x21
    uint.value -- 2

    local int = data_types.Int32(-5)
    int.NAME  -- "Int32"
    int.ID    -- 0x2B
    int.value -- -5
    print(utils.get_print_safe_string(int:serialize()))
    -- "\xFB\xFF\xFF\xFF"


In the context of writing an attribute

.. code-block:: lua

    -- Import the required libraries
    local data_types = require "st.zigbee.data_types"
    local zcl_commands = require "st.zigbee.zcl.global_commands"
    local constants = require "st.zigbee.constants"
    local IASZone = (require "st.zigbee.zcl.clusters").IASZone

    local cie_addr = data_types.IeeeAddress("\x01\x02\x03\x04\x05\x06\x07\x08")
    local attr_id = data_types.AttributeId(IASZone.attributes.IASCIEAddress.ID)
    local data_type_val = data_types.ZigbeeDataType(data_types.IeeeAddress.ID)
    local cie_attr_write = zcl_commands.WriteAttribute.AttributeRecord(attr_id, data_type_val, cie_addr)
    local write_body = zcl_commands.WriteAttribute({ cie_attr_write })

Parsing a Data Type Value From a Byte String
++++++++++++++++++++++++++++++++++++++++++++

.. code-block:: lua

    -- Import the required libraries
    local data_types = require "st.zigbee.data_types"

    local bytes = "\xFB\xFF\xFF\xFF"
    local parsed_val = data_types.parse_data_type(data_types.Int32.ID, bytes)
    parsed_val.NAME  -- "Int32"
    parsed_val.ID    -- 0x2B
    parsed_val.value -- -5

    local parsed_val_2 = data_types.Int32.deserialize(bytes)
    parsed_val_2.NAME  -- "Int32"
    parsed_val_2.ID    -- 0x2B
    parsed_val_2.value -- -5

Verifying Data Types as Arguments to Other Functions
++++++++++++++++++++++++++++++++++++++++++++++++++++

.. code-block:: lua

    -- Import the required libraries
    local data_types = require "st.zigbee.data_types"

    function build_attr_report_record(attr_id, data_type, value)
        local out = {}
        out.attr_id = data_types.validate_or_build_type(attr_id, data_types.AttributeId, "attr_id")
        out.data_type = data_types.validate_or_build_type(data_type, data_types.ZigbeeDataType, "data_type")
        out.data = data_types.validate_or_build_type(value, data_types.get_data_type_by_id(out.data_type.value), "data")
        return out
    end

    local out_table = build_attr_report_record(0x0000, 0x21, 0x0005)
    out_table.attr_id.value    -- 0x0000
    out_table.attr_id.ID       -- 0xE9
    out_table.attr_id.NAME     -- AttributeId
    out_table.data_type.value  -- 0x21
    out_table.data.value       -- 0x0005
    out_table.data.ID          -- 0x21
    out_table.data.NAME        -- Unt16

    local attr_id = data_types.AttributeId(0x0000)
    local data_type_val = data_types.ZigbeeDataType(0x21)
    local data = data_types.Uint16(0x0005)
    local out_table_2 = build_attr_report_record(attr_id, data_type_val, data)
    out_table_2.attr_id.value    -- 0x0000
    out_table_2.attr_id.ID       -- 0xE9
    out_table_2.attr_id.NAME     -- AttributeId
    out_table_2.data_type.value  -- 0x21
    out_table_2.data.value       -- 0x0005
    out_table_2.data.ID          -- 0x21
    out_table_2.data.NAME        -- Unt16


Utility Functions
--------------------

.. lua:automodule:: st.zigbee.data_types


Custom Data Types
-----------------

.. lua:autoclass:: st.zigbee.data_types.ZigbeeDataType
.. lua:autoclass:: st.zigbee.data_types.ZCLCommandId

Zigbee Data Types
-----------------

This is the base type of the DataType classes.  It is abstract and not instatiable itself, and contains no funcitonality
but defines the interface.

.. lua:autoclass:: st.zigbee.data_types.DataType

NoData
++++++
.. lua:autoclass:: st.zigbee.data_types.NoDataABC
.. lua:autoclass:: st.zigbee.data_types.NoData

Data
++++
.. lua:autoclass:: st.zigbee.data_types.DataABC
.. lua:autoclass:: st.zigbee.data_types.Data8
.. lua:autoclass:: st.zigbee.data_types.Data16
.. lua:autoclass:: st.zigbee.data_types.Data24
.. lua:autoclass:: st.zigbee.data_types.Data32
.. lua:autoclass:: st.zigbee.data_types.Data40
.. lua:autoclass:: st.zigbee.data_types.Data48
.. lua:autoclass:: st.zigbee.data_types.Data56
.. lua:autoclass:: st.zigbee.data_types.Data64

Boolean
+++++++
.. lua:autoclass:: st.zigbee.data_types.BooleanABC
.. lua:autoclass:: st.zigbee.data_types.Boolean

Bitmap
++++++
.. lua:autoclass:: st.zigbee.data_types.BitmapABC
.. lua:autoclass:: st.zigbee.data_types.Bitmap8
.. lua:autoclass:: st.zigbee.data_types.Bitmap16
.. lua:autoclass:: st.zigbee.data_types.Bitmap24
.. lua:autoclass:: st.zigbee.data_types.Bitmap32
.. lua:autoclass:: st.zigbee.data_types.Bitmap40
.. lua:autoclass:: st.zigbee.data_types.Bitmap48
.. lua:autoclass:: st.zigbee.data_types.Bitmap56
.. lua:autoclass:: st.zigbee.data_types.Bitmap64

Uint
++++
.. lua:autoclass:: st.zigbee.data_types.UintABC
.. lua:autoclass:: st.zigbee.data_types.Uint8
.. lua:autoclass:: st.zigbee.data_types.Uint16
.. lua:autoclass:: st.zigbee.data_types.Uint24
.. lua:autoclass:: st.zigbee.data_types.Uint32
.. lua:autoclass:: st.zigbee.data_types.Uint40
.. lua:autoclass:: st.zigbee.data_types.Uint48
.. lua:autoclass:: st.zigbee.data_types.Uint56
.. lua:autoclass:: st.zigbee.data_types.Uint64

Int
++++
.. lua:autoclass:: st.zigbee.data_types.IntABC
.. lua:autoclass:: st.zigbee.data_types.Int8
.. lua:autoclass:: st.zigbee.data_types.Int16
.. lua:autoclass:: st.zigbee.data_types.Int24
.. lua:autoclass:: st.zigbee.data_types.Int32
.. lua:autoclass:: st.zigbee.data_types.Int40
.. lua:autoclass:: st.zigbee.data_types.Int48
.. lua:autoclass:: st.zigbee.data_types.Int56
.. lua:autoclass:: st.zigbee.data_types.Int64

Enum
++++
.. lua:autoclass:: st.zigbee.data_types.EnumABC
.. lua:autoclass:: st.zigbee.data_types.Enum8
.. lua:autoclass:: st.zigbee.data_types.Enum16

Floating Points
+++++++++++++++
.. lua:autoclass:: st.zigbee.data_types.FloatABC
.. lua:autoclass:: st.zigbee.data_types.SemiPrecisionFloat
.. lua:autoclass:: st.zigbee.data_types.SinglePrecisionFloat
.. lua:autoclass:: st.zigbee.data_types.DoublePrecisionFloat

Strings
+++++++
.. lua:autoclass:: st.zigbee.data_types.StringABC
.. lua:autoclass:: st.zigbee.data_types.OctetString
.. lua:autoclass:: st.zigbee.data_types.CharString
.. lua:autoclass:: st.zigbee.data_types.LongOctetString
.. lua:autoclass:: st.zigbee.data_types.LongCharString

Ordered Sequences
+++++++++++++++++
.. lua:autoclass:: st.zigbee.data_types.ArrayABC
.. lua:autoclass:: st.zigbee.data_types.Array
.. lua:autoclass:: st.zigbee.data_types.StructureABC
.. lua:autoclass:: st.zigbee.data_types.Structure

Collections
+++++++++++
Set: Not yet implemented
Bag: Not yet implemented

Time
++++
.. lua:autoclass:: st.zigbee.data_types.TimeOfDayABC
.. lua:autoclass:: st.zigbee.data_types.TimeOfDay
.. lua:autoclass:: st.zigbee.data_types.DateABC
.. lua:autoclass:: st.zigbee.data_types.Date
.. lua:autoclass:: st.zigbee.data_types.UTCTime

Identifiers
+++++++++++
.. lua:autoclass:: st.zigbee.data_types.ClusterId
.. lua:autoclass:: st.zigbee.data_types.AttributeId
.. lua:autoclass:: st.zigbee.data_types.BACNetOId

Miscellaneous
+++++++++++++
.. lua:autoclass:: st.zigbee.data_types.IeeeAddress
.. lua:autoclass:: st.zigbee.data_types.SecurityKey
