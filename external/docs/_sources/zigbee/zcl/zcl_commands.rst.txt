ZCL Global Commands
===================

.. contents::
  :depth: 4

Module Description
------------------

This module includes implementations of ZCL global commands that can be used in conjunction with the
:doc:`Zigbee message module <../messages>` to either parse received messages from a device or to build and
send a command to a remote device.  Each command has its own module that can be required, or each one can be
referenced through the top level :ref:`global_commands <global_commands_module>` module.

Each of these command body definitions follow the same pattern as Data Types and messages in that they implement the
following functions:

:deserialize: for creating the table from a string of bytes
:get_length: for giving the length in bytes of this object if it were serialized
:pretty_print: for creating a human readable string representing this object
:serialize: for serializing the message frame back into a string of bytes

In addition most TX oriented messages (and some RX for testing purposes) implement

:from_values: for creating the table object from the component parts instead of parsing from a string. This should also
    be mapped to the metatable __call function for the table so the syntax Object(...) can be used for creation

Beyond those functions the individual fields for each command are called out below along with examples of the normal
interactions with those objects.  Note that in general you won't be using the `deserialize` functions directly on these
command classes as they will typically be parsed as a part of a top level
:lua:class:`ZigbeeMessageRx <messages.ZigbeeMessageRx>` object on message receipt.

Module Documentation
--------------------

Top Level Module
++++++++++++++++
.. _global_commands_module:

This provides a shortcut for referencing any of the ZCL global command bodies as well as provides some helpful
utility functions for parsing a body by command ID, which is the normal situation when receiving an unknown message
on the Zigbee message channel.

Examples
^^^^^^^^

Accessing and creating a Write Attribute command body through the `global_commands` module

.. code-block:: lua

    local global_commands = require "st.zigbee.zcl.global_commands"
    local data_types = require "st.zigbee.data_types"

    local cie_attr_write = global_commands.WriteAttribute.AttributeRecord(
        data_types.AttributeId(0x0010),
        data_types.ZigbeeDataType(data_types.IeeeAddress.ID),
        data_types.IeeeAddress("\x01\x02\x03\x04\x05\x06\x07\x08")
    )
    local write_body = global_commands.WriteAttribute({ cie_attr_write })

    write_body:pretty_print()
    --  WriteAttribute:
    --      AttributeRecord:
    --          AttributeId: 0x0010
    --          DataType: IEEEAddress
    --          IEEEAddress: 0102030405060708

    -- From here use the st.zigbee.messages module to construct a ZCLMessageTx with the above body

Parsing a command body from a byte string given the command ID

.. code-block:: lua

    local global_commands = require "st.zigbee.zcl.global_commands"

    local command_id = 0x0A -- ReportAttribute.ID
    local received_message_body_bytes = "\x21\x00\x20\x64"

    local ar = global_commands.parse_global_zcl_command(0x0A, received_message_body_bytes)

    ar:pretty_print()
    --  ReportAttribute:
    --      AttributeRecord:
    --          AttributeId: 0x0021
    --          DataType: Uint8
    --          Uint8: 0x64

Documentation
^^^^^^^^^^^^^

.. lua:automodule:: zcl.global_commands

Read Attribute
++++++++++++++

This command will primarily be used in TX messages as we typically are sending a command to read an attribute from a
remote device and would rerely receive a read attribute command from a remote device

Examples
^^^^^^^^

Read the battery percentage remaining attribute

.. code-block:: lua

    local read_attr = require "st.zigbee.zcl.global_commands.read_attribute"
    local data_types = require "st.zigbee.data_types"

    local battery_percentage_read = data_types.AttributeId(0x0021)
    local read_body = read_attr.ReadAttribute({ batter_percentage_read })
    -- From here use the st.zigbee.messages module to construct a ZCLMessageTx with the above body

Documentation
^^^^^^^^^^^^^

.. lua:automodule:: read_attr

Read Attribute Response
+++++++++++++++++++++++

This command will primarily be used in RX messages as we typically receive this after sending a read attribute command
to a remote device, and rarely are responding to a read attribute command originated from a remote device

Examples
^^^^^^^^

Receive the value of a read attribute on the battery percentage remaining attribute

.. code-block:: lua

    local read_attr_response = require "st.zigbee.zcl.global_commands.read_attribute_response"

    local received_message_body_bytes = "\x21\x00\x00\x20\x64"

    local rar = read_attr_response.ReadAttributeResponse.deserialize({}, received_message_body_bytes)
    rar.attr_records[1].attr_id.value   -- 0x0021
    rar.attr_records[1].status.value    -- 0x00
    rar.attr_records[1].data_type.value -- 0x20
    rar.attr_records[1].data.ID         -- 0x20
    rar.attr_records[1].data.value      -- 0x64 (100)


Receive the value of a read attribute on hue and saturation attributes

.. code-block:: lua

    local read_attr_response = require "st.zigbee.zcl.global_commands.read_attribute_response"

    local received_message_body_bytes = "\x00\x00\x00\x20\x01\x01\x00\x00\x20\x02"

    local rar = read_attr_response.ReadAttributeResponse.deserialize({}, received_message_body_bytes)
    rar.attr_records[1].attr_id.value   -- 0x0000
    rar.attr_records[1].status.value    -- 0x00
    rar.attr_records[1].data_type.value -- 0x20
    rar.attr_records[1].data.value      -- 0x01 (1)

    rar.attr_records[2].attr_id.value   -- 0x0001
    rar.attr_records[2].status.value    -- 0x00
    rar.attr_records[2].data_type.value -- 0x20
    rar.attr_records[2].data.value      -- 0x02 (2)

Documentation
^^^^^^^^^^^^^

.. lua:automodule:: read_attr_response

Write Attribute
+++++++++++++++

This command will primarily be used in TX messages as a command for a remote device, and rarely parsed from bytes as
the remote devices are unlikely to send the hub a write attribute command

Examples
^^^^^^^^

Write the CIE address on the IASZone cluster

.. code-block:: lua

    local write_attr = require "st.zigbee.zcl.global_commands.write_attribute"
    local data_types = require "st.zigbee.data_types"

    local cie_attr_write = write_attr.AttributeRecord(
        data_types.AttributeId(0x0010),
        data_types.ZigbeeDataType(data_types.IeeeAddress.ID),
        data_types.IeeeAddress("\x01\x02\x03\x04\x05\x06\x07\x08")
    )
    local write_body = write_attr.WriteAttribute({ cie_attr_write })
    -- From here use the st.zigbee.messages module to construct a ZCLMessageTx with the above body

Documentation
^^^^^^^^^^^^^

.. lua:automodule:: write_attr

Write Attribute Undivided
+++++++++++++++++++++++++

Not yet implemented

Write Attribute Response
++++++++++++++++++++++++

This command will primarily be used in RX messages as we typically receive this after writing an attribute to a remote
device, and rarely are responding to a write command originated from a remote device

Examples
^^^^^^^^

Verify the status of a write command where all attributes were written successfully

.. code-block:: lua

    local write_attr_response = require "st.zigbee.zcl.global_commands.write_attribute_response"
    local data_types = require "st.zigbee.data_types"

    local received_message_body_bytes = "\x00"
    local war = write_attr_response.WriteAttributeResponse.deserialize({}, received_message_body_bytes)

    if war.global_status ~= nil and war.global_status.value == Status.SUCCESS then
        print("Write was successful")
    end


Verify the status of a write command with mixed results

.. code-block:: lua

    local write_attr_response = require "st.zigbee.zcl.global_commands.write_attribute_response"
    local data_types = require "st.zigbee.data_types"

    local received_message_body_bytes = "\x86\x00\x00\x00\x01\x00"
    local war = write_attr_response.WriteAttributeResponse.deserialize({}, received_message_body_bytes)

    if war.attr_records ~= nil then
        for i, attr_record in ipairs(war.attr_records) do
            print(string.format("Write of attribute: %s finished with status: %s", attr_record.attr_id:pretty_print(), attr_record.status:pretty_print()))
            -- Write of attribute: AttributeId: 0x0000 finished with status: Status: 0x86
            -- Write of attribute: AttributeId: 0x0001 finished with status: Status: 0x00
        end
    end

Documentation
^^^^^^^^^^^^^

.. lua:automodule:: write_attr_response

Write Attribute No Response
+++++++++++++++++++++++++++

Not yet implemented

Configure Reporting
+++++++++++++++++++

This command will primarily be used in TX messages as we typically are sending the command to configure the reporting
of a remote device, and are rarely receiving such a request from a device

Examples
^^^^^^^^

Configure the OnOff attribute on the OnOff cluster to report

.. code-block:: lua

    local config_reporting = require "st.zigbee.zcl.global_commands.configure_reporting"
    local data_types = require "st.zigbee.data_types

    local conf_record = config_reporting.AttributeReportingConfiguration(
        {
          direction = data_types.Uint8(0),
          attr_id = data_types.AttributeId(0x0000),
          minimum_reporting_interval = data_types.Uint16(0),   -- Report any time it changes
          maximum_reporting_interval = data_types.Uint16(300), -- Report at least every 5 minutes even if it doesn't change
          data_type = data_types.ZigbeeDataType(data_types.Boolean.ID),
          -- reportable change omitted because Boolean is a discrete type
        }
    )
    local config_rep_body = config_reporting.ConfigureReporting({ conf_record })
    -- From here use the st.zigbee.messages module to construct a ZCLMessageTx with the above body

Documentation
^^^^^^^^^^^^^

.. lua:automodule:: config_reporting


Configure Reporting Response
++++++++++++++++++++++++++++

This command will primarily be used in RX messages as we typically receive this as a response to our configuration of a
remote device, and rarely do we get a configuration request that we would respond to.

Examples
^^^^^^^^

Verify the status of a configure reporting response where all attributes were configured successfully

.. code-block:: lua

    local config_rep_response = require "st.zigbee.zcl.global_commands.configure_reporting_response"
    local data_types = require "st.zigbee.data_types"

    local received_message_body_bytes = "\x00"
    local crr = config_rep_response.ConfigureReportingResponse.deserialize({}, received_message_body_bytes)

    if crr.global_status ~= nil and crr.global_status.value == Status.SUCCESS then
        print("Config was successful")
    end


Verify the status of a configure reporting response with mixed results

.. code-block:: lua

    local config_rep_response = require "st.zigbee.zcl.global_commands.configure_reporting_response"
    local data_types = require "st.zigbee.data_types"

    local received_message_body_bytes = "\x86\x00\x00\x00\x00\x00\x01\x00"
    local crr = config_rep_response.ConfigureReportingResponse.deserialize({}, received_message_body_bytes)

    crr.attr_records[1].status.value     -- 0x86
    crr.attr_records[1].direction.value  -- 0x00
    crr.attr_records[1].attr_id.value    -- 0x0000

    crr.attr_records[2].status.value     -- 0x00
    crr.attr_records[2].direction.value  -- 0x00
    crr.attr_records[2].attr_id.value    -- 0x0001


Documentation
^^^^^^^^^^^^^

.. lua:automodule:: config_rep_response

Read Reporting Configuration
++++++++++++++++++++++++++++

This command will primarily be used in TX messages as we typically send this as a command to read the current reporting
configuration of a remote device, and it would be unlikely that a remote device would send the request to us.

Examples
^^^^^^^^

Read the configuration for the battery percentage remaining attribute

.. code-block:: lua

    local read_rep_conf = require "st.zigbee.zcl.global_commands.read_reporting_configuration"
    local data_types = require "st.zigbee.data_types"

    local read_rep_record = read_rep_conf.ReadReportingConfigurationAttributeRecord(0x00, 0x0021)
    local read_rep_body = read_rep_conf.ReadReportingConfiguration({ read_rep_record })
    -- From here use the st.zigbee.messages module to construct a ZCLMessageTx with the above body

Documenation
^^^^^^^^^^^^

.. lua:automodule:: read_reporting_config

Read Reporting Configuration Response
+++++++++++++++++++++++++++++++++++++

This command will primarily be used in RX messages as we typically receive this as a response to request to read the
reporting configuration of a remote device, and rarely do we get a read request that we would respond to.

Examples
^^^^^^^^

Response from a configuration read of battery percentage remaining

.. code-block:: lua

    local read_config_response = require "st.zigbee.zcl.global_commands.read_reporting_configuration_response"

    local received_message_body_bytes = "\x00\x00\x21\x00\x20\x1E\x00\x2C\x01\x0A"
    local crr = read_config_response.ReadReportingConfigurationResponse.deserialize({}, received_message_body_bytes)

    crr:pretty_print()
    --  ReadReportingConfigurationResponse:
    --      ReportingConfigurationRecord:
    --          Status: SUCCESS
    --          direction: 0x00
    --          AttributeId: 0x0021
    --          DataType: Uint8
    --          minimum_reporting_interval: 0x001E
    --          maximum_reporting_interval: 0x012C
    --          reportable_change: 0x0A

Documenation
^^^^^^^^^^^^

.. lua:automodule:: read_reporting_config_resp

Report Attributes
+++++++++++++++++

This command will primarily be used in RX messages as we typically receive this as when a remote device reports an
attribute value, and rarely would we report an attribute to a remote device.

Examples
^^^^^^^^

Report of the battery percentage remaining

.. code-block:: lua

    local report_attr = require "st.zigbee.zcl.global_commands.report_attribute"

    local received_message_body_bytes = "\x21\x00\x20\x64"
    local ar = report_attr.ReportAttribute.deserialize({}, received_message_body_bytes)

    ar:pretty_print()
    --  ReportAttribute:
    --      AttributeRecord:
    --          AttributeId: 0x0021
    --          DataType: Uint8
    --          Uint8: 0x64


Documenation
^^^^^^^^^^^^

.. lua:automodule:: report_attr

Default Response
++++++++++++++++

This command will primarily be used in RX messages as we typically receive this as a default response to many commands
acknowledging that the command was received.  Any necessary default response that would need to be sent to the remote
device will be handled by the system.

Examples
^^^^^^^^

Default response to an OnOff cluster On command

.. code-block:: lua

    local default_response = require "st.zigbee.zcl.global_commands.default_response"

    local received_message_body_bytes = "\x01\x00"
    local dr = default_response.DefaultResponse.deserialize({}, received_message_body_bytes)

    dr:pretty_print()
    --  DefaultResponse:
    --      cmd: 0x01
    --      Status: SUCCESS


Documenation
^^^^^^^^^^^^

.. lua:automodule:: default_response

Discover Attributes
+++++++++++++++++++

Not yet implemented

Discover Attributes Response
++++++++++++++++++++++++++++

Not yet implemented

Read Attributes Structured
++++++++++++++++++++++++++

Not yet implemented

Write Attributes Structured
+++++++++++++++++++++++++++

Not yet implemented

Write Attributes Structured Response
++++++++++++++++++++++++++++++++++++

Not yet implemented

Discover Commands Received
++++++++++++++++++++++++++

Not yet implemented

Discover Commands Received Response
+++++++++++++++++++++++++++++++++++

Not yet implemented

Discover Commands Generated
+++++++++++++++++++++++++++

Not yet implemented

Discover Commands Generated Response
++++++++++++++++++++++++++++++++++++

Not yet implemented

Discover Attributes Extended
++++++++++++++++++++++++++++

Not yet implemented

Discover Attributes Extended Response
+++++++++++++++++++++++++++++++++++++

Not yet implemented

