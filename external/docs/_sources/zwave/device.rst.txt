Z-Wave Device Class
===================

The :lua:class:`st.zwave.Device <st.zwave.Device>` class inherits from :lua:class:`Device <Device>`, extending behavior
with Z-Wave-specific functionality.  Device objects are instantiated by the framework and passed to drivers as parameters
for device-related methods.

Sleepy devices
+++++++++++++++++++++++

Sleepy devices present unique use cases for a Z-Wave controller since communication can only occur when the device is awake.
One particular case is when a sleepy device's preferences are updated and it is asleep, any configuration commands for the
device cannot be sent until the device wakes up. To allow for sending device configuration commands when the device wakes up,
a driver can set an ``update_preferences`` function on a device which will get called when the device wakes up. The function is provided
``args`` which are similar to the args on the ``infoChanged`` lifecycle event and contain the ``old_st_store.preferences`` with the
preferences that were present the last time the device woke up. Note that there will still be an ``infoChanged`` event for
sleepy devices, and this automatic preference update mechanism only works for devices that support the WakeUp command class.
The following is an example of how this functionality should be handled in a driver that supports *both listening and
sleepy devices*:

.. code-block:: lua

    local capabilities = require "st.capabilities"
    --- @type st.zwave.Driver
    local ZwaveDriver = require "st.zwave"
    --- @type st.zwave.defaults
    local defaults = require "st.zwave.defaults"
    local cc = require "st.zwave.CommandClass"

    local function update_preferences(self, device, args)
      if args.old_st_store.prefrences["my_pref"] ~= device.preferences["my_pref"] then
        -- send commands if you need
      end
    end

    local function device_init(self, device)
      device:set_update_preferences_fn(update_preferences)
    end

    local function info_changed(self, device, event, args)
      -- only update preferences for devices we know are awake
      -- if this driver only supports sleepy devices, an infoChanged handler may not be needed at all.
      if ~device:is_cc_supported(cc.WAKE_UP) then
        update_preferences(self, device, args)
      end
    end

    local zwave_contact_driver = {
      supported_capabilities = {
        capabilities.contactSensor,
        capabilities.battery
      },
      lifecycle_handlers = {
        init = device_init,
        infoChanged = info_changed,
      },
    }

    defaults.register_for_default_handlers(zwave_contact_driver, zwave_contact_driver.supported_capabilities)
    --- @type st.zwave.Driver
    local contact_sensor = ZwaveDriver("zwave_contact_sensor", zwave_contact_driver)
    contact_sensor:run()


Parent/Child Devices
++++++++++++++++++++

There may be some situations where you prefer to model a single network device
as multiple SmartThings device records.  This can be done by creating "Child" devices to represent individual endpoints
on the device.  NOTE: If you aren't modeling each child as an endpoint, you won't be able to use the library
abstractions, but you can build your own handling of messages for whatever model you desire.

You can define a ``find_child`` function using the ``set_find_child`` method on device objects.  Then any use of
``emit_event_for_endpoint`` including the default capability handlers will use this to emit events on the appropriate
children.  The ``find_child`` function you define will be passed the source channel a message came from and should then
return the device object representing the child device that is responsible for that source channel, or ``nil`` if there
isn't one.

When deleting devices in a parent/child relationship, deleting the parent will result in the removal of all of the
children as well as all communication goes through the parent device.  However, you can delete individual children
without affecting the others.  It should be noted though that typically the only way to create the children is on device
join so if deleted getting the child devices back will often require deleting and re-onboarding the parent.


example
-------

Profile:

.. code-block:: yaml

    name: outlet
    components:
      - id: main
        capabilities:
          - id: switch
            version: 1
          - id: refresh
            version: 1
        categories:
          - name: Outlet


Driver:

.. code-block:: lua

    local capabilities = require "st.capabilities"
    local ZwaveDriver = require "st.zwave.driver"
    local defaults = require "st.zwave.defaults"
    local device_lib = require "st.device"
    local constants = require "st.zwave.constants"
    local cc  = require "st.zwave.CommandClass"
    local SwitchBinary = (require "st.zwave.CommandClass.SwitchBinary")({version=2,strict=true})

    -- These same handlers will work for both the parent and child devices
    local function report_handler(driver, device, cmd)
      local event
      if cmd.args.value == SwitchBinary.value.OFF_DISABLE then
        event = capabilities.switch.switch.off()
      else
        event = capabilities.switch.switch.on()
      end

      -- This device will _always_ be the parent because the parent is the only one actually on the network sending
      -- messages but this call to `emit_event_for_endpoint` will use the `find_child` function set below to find the
      -- child and emit the event for that SmartThings device instead
      device:emit_event_for_endpoint(cmd.src_channel, event)
    end

    local function on_handler(driver, device, command)
      -- Since we will receive commands separately for the different children, the device object here could be a parent
      -- or child.  The message building will work the same as the child will defer to the parent for addressing
      -- information. And similarly `send_to_component` on the child device will ultimately call send on the parent as
      -- that is the actual network device.
      device:send_to_component(
        SwitchBinary:Set({ target_value = SwitchBinary.value.ON_ENABLE, duration = 0}),
        command.component
      )
      local query_device = function()
        device:send_to_component(SwitchBinary:Get({}), command.component)
      end
      device.thread:call_with_delay(constants.DEFAULT_GET_STATUS_DELAY, query_device)
    end

    local capability_handlers = {}


    local function added(driver, device, event)
      -- Only create children for the actual Z-Wave device and not the children
      if device.network_type == device_lib.NETWORK_TYPE_ZWAVE then
        for i = 2, 5, 1 do
          local name = string.format("%s outlet %d", device.label, i)
          local metadata = {
            type = "EDGE_CHILD",
            label = name,
            profile = "outlet",
            parent_device_id = device.id,
            parent_assigned_child_key = string.format("%02X", i),
            vendor_provided_label = name,
          }
          driver:try_create_device(metadata)
        end
      end
    end

    local function find_child(parent, src_channel)
      return parent:get_child_by_parent_assigned_key(string.format("%02X", src_channel))
    end

    local function init(driver, device, event)
      if device.network_type == device_lib.NETWORK_TYPE_ZWAVE then
        device:set_find_child(find_child)
      end
    end

    local zwave_parent_child_switch_template = {
      supported_capabilities = {
        capabilities.switch,
      },
      zwave_handlers = {
        [cc.SWITCH_BINARY] = {
          [SwitchBinary.REPORT] = report_handler
        },
      },
      capability_handlers = {
        [capabilities.switch.ID] = {
          [capabilities.switch.commands.on.NAME] = on_handler,
          -- Off handler provided by defaults
        },
      },
      lifecycle_handlers = {
        added = added,
        init = init,
      },
    }

    -- The on_handler and on_off_attr_handler above would be covered by these defaults, but are included for example purposes
    defaults.register_for_default_handlers(zwave_parent_child_switch_template, zwave_parent_child_switch_template.supported_capabilities)
    local zwave_parent_child_switch = ZwaveDriver("child_device_example", zwave_parent_child_switch_template)
    zwave_parent_child_switch:run()



Class Documentation
+++++++++++++++++++

.. lua:autoclass:: st.zwave.Device

.. lua:autoclass:: st.zwave.ChildDevice
