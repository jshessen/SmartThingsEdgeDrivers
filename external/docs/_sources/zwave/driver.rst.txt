Z-Wave Driver Class
===================

An :lua:class:`st.zwave.Driver <st.zwave.Driver>` extends the :lua:class:`Driver <Driver>` class with structures and methods specific to Z-Wave devices.

Drivers are instantiated by passing a driver template into the :lua:meth:`st.zwave.Driver constructor <st.zwave.Driver.init>`, and then executing the driver :lua:meth:`run <Driver.run>` method:

.. code-block:: lua

    --- @type st.zwave.Driver
    local ZwaveDriver = require "st.zwave.driver"
    local driver_template = {}
    local driver = ZwaveDriver("driver_name", driver_template)
    driver:run()

Subsequently, the framework passes the driver instance back to methods executed on the driver object.

.. _zwave_handlers:

zwave_handlers
++++++++++++++

The :lua:attr:`zwave_handlers <st.zwave.Driver.Template.zwave_handlers>` field in the driver template defines callbacks to be executed on receipt of Z-Wave commands from the driver's Z-Wave devices.  These typically perform translation to SmartThings Capability events.

The :lua:attr:`zwave_handlers <st.zwave.Driver.Template.zwave_handlers>` table is nested and indexed by [command class][command id].  Inclusion of :lua:attr:`zwave_handlers <st.zwave.Driver.Template.zwave_handlers>` in the driver template and passage to the driver :lua:meth:`constructor <st.zwave.Driver.init>` registers callbacks for the Z-Wave command keys in the table:

.. code-block:: lua

    local capabilities = require "st.capabilities"
    --- @type st.zwave.CommandClass
    local cc = require "st.zwave.CommandClass"
    --- @type st.zwave.CommandClass.SwitchBinary
    local SwitchBinary = require "st.zwave.CommandClass.SwitchBinary"
    --- @type st.zwave.Driver
    local ZwaveDriver = require "st.zwave.driver"

    --- Handle a Z-Wave Command Class Switch Binary report, translate this to
    --- an equivalent SmartThings Capability event, and emit this to the
    --- SmartThings infrastructure.
    ---
    --- @param driver st.zwave.Driver
    --- @param device st.zwave.Device
    --- @param cmd st.zwave.CommandClass.SwitchBinary.Report
    local function report_handler(driver, device, cmd)
      if cmd.args.value == SwitchBinary.value.OFF_DISABLE then
        device:emit_event(capabilities.switch.switch.off())
      else
        device:emit_event(capabilities.switch.switch.on())
      end
    end

    local driver_template = {
      [cc.SWITCH_BINARY] = {
        [SwitchBinary.REPORT] = report_handler,
      },
    }

    local driver = ZwaveDriver("driver_name", driver_template)

In addition there are 2 extra keys that can be added to the `zwave_handlers` table. The ``fallback`` and ``error`` fields
can be set to be used as the special handlers for the :ref:`Dispatchers <dispatchers>` to be handlers that get called
in the case of no other matching handler or an error is encountered respectively.


.. _capability_handlers:

capability_handlers
++++++++++++++++++++

SmartThings Capability handlers are supported across all driver types, with support in the :lua:class:`st.zwave.Driver <st.zwave.Driver>` class inherited from :lua:class:`Driver <Driver>`.  Registration is by inclusion of a :lua:attr:`capability_handlers <st.zwave.Driver.Template.capability_handlers>` table in the Z-Wave driver :lua:class:`template <st.zwave.Driver.Template>`.  Capability handlers typically perform translation to Z-Wave commands for transmission to a Z-Wave device.

.. code-block:: lua

    local capabilities = require "st.capabilities"
    --- @type st.zwave.CommandClass.SwitchMultilevel
    local SwitchMultilevel = (require "st.zwave.CommandClass.SwitchMultilevel")({ version = 1 })
    --- @type st.zwave.Driver
    local ZwaveDriver = require "st.zwave.driver"

    --- Handle a SmartThings switch capability level-set command, translate to
    --- an equivalent Z-Wave command, and send this to the device.
    ---
    --- @param driver st.zwave.Driver
    --- @param device st.zwave.Device
    --- @param cmd table ST level capability command
    function level_set_handler(driver, device, cmd)
      device:send(SwitchMultilevel:Set({ value = cmd.args.level })
    end

    local driver_template = {
      capability_handlers = {
        [capabilities.switchLevel.commands.setLevel] = level_set_handler,
      },
    }

    local driver = ZwaveDriver("driver_name", driver_template)

Class Documentation
+++++++++++++++++++

.. lua:autoclass:: st.zwave.Driver
.. lua:autoclass:: st.zwave.Driver.Template
