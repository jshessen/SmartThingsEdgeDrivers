-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local BasicServerAttributes = require "st.matter.generated.zap_clusters.Basic.server.attributes"
local BasicServerCommands = require "st.matter.generated.zap_clusters.Basic.server.commands"
local BasicEvents = require "st.matter.generated.zap_clusters.Basic.server.events"
local BasicTypes = require "st.matter.generated.zap_clusters.Basic.types"

--- @class st.matter.generated.zap_clusters.Basic
--- @alias Basic
---
--- @field public ID number 0x0028 the ID of this cluster
--- @field public NAME string "Basic" the name of this cluster
--- @field public attributes st.matter.generated.zap_clusters.BasicServerAttributes | st.matter.generated.zap_clusters.BasicClientAttributes
--- @field public commands st.matter.generated.zap_clusters.BasicServerCommands | st.matter.generated.zap_clusters.BasicClientCommands
--- @field public types st.matter.generated.zap_clusters.BasicTypes

local Basic = {}

Basic.ID = 0x0028
Basic.NAME = "Basic"
Basic.server = {}
Basic.client = {}
Basic.server.attributes = BasicServerAttributes:set_parent_cluster(Basic)
Basic.server.commands = BasicServerCommands:set_parent_cluster(Basic)
Basic.server.events = BasicEvents:set_parent_cluster(Basic)
Basic.types = BasicTypes

-- Global Attributes Metadata
local GLOBAL_CLUSTER_REVISION_ATTRIBUTE = 0xFFFD

-- Represent the global attributes
local global_attr_id_map = {
  [GLOBAL_CLUSTER_REVISION_ATTRIBUTE] = {"cluster revision"},
}

--- Find an attribute by id
---
--- @param attr_id number
function Basic:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "DataModelRevision",
    [0x0001] = "VendorName",
    [0x0002] = "VendorID",
    [0x0003] = "ProductName",
    [0x0004] = "ProductID",
    [0x0005] = "NodeLabel",
    [0x0006] = "Location",
    [0x0007] = "HardwareVersion",
    [0x0008] = "HardwareVersionString",
    [0x0009] = "SoftwareVersion",
    [0x000A] = "SoftwareVersionString",
    [0x000B] = "ManufacturingDate",
    [0x000C] = "PartNumber",
    [0x000D] = "ProductURL",
    [0x000E] = "ProductLabel",
    [0x000F] = "SerialNumber",
    [0x0010] = "LocalConfigDisabled",
    [0x0011] = "Reachable",
    [0x0012] = "UniqueID",
    [0x0013] = "CapabilityMinima",
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function Basic:get_server_command_by_id(command_id)
  local server_id_map = {
    [0x0000] = "MfgSpecificPing",
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end


--- Find an event by id
---
--- @param event_id number
function Basic:get_event_by_id(event_id)
  local event_id_map = {
    [0x0000] = "StartUp",
    [0x0001] = "ShutDown",
    [0x0002] = "Leave",
    [0x0003] = "ReachableChanged",
  }
  if event_id_map[event_id] ~= nil then
    return self.server.events[event_id_map[event_id]]
  end
  return nil
end
-- Attribute Mapping
Basic.attribute_direction_map = {
  ["DataModelRevision"] = "server",
  ["VendorName"] = "server",
  ["VendorID"] = "server",
  ["ProductName"] = "server",
  ["ProductID"] = "server",
  ["NodeLabel"] = "server",
  ["Location"] = "server",
  ["HardwareVersion"] = "server",
  ["HardwareVersionString"] = "server",
  ["SoftwareVersion"] = "server",
  ["SoftwareVersionString"] = "server",
  ["ManufacturingDate"] = "server",
  ["PartNumber"] = "server",
  ["ProductURL"] = "server",
  ["ProductLabel"] = "server",
  ["SerialNumber"] = "server",
  ["LocalConfigDisabled"] = "server",
  ["Reachable"] = "server",
  ["UniqueID"] = "server",
  ["CapabilityMinima"] = "server",
  ["AcceptedCommandList"] = "server",
  ["AttributeList"] = "server",
}

-- Command Mapping
Basic.command_direction_map = {
  ["MfgSpecificPing"] = "server",
}

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = Basic.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, Basic.NAME))
  end
  return Basic[direction].attributes[key]
end
Basic.attributes = {}
setmetatable(Basic.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = Basic.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, Basic.NAME))
  end
  return Basic[direction].commands[key] 
end
Basic.commands = {}
setmetatable(Basic.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return Basic.server.events[key]
end
Basic.events = {}
setmetatable(Basic.events, event_helper_mt)

setmetatable(Basic, {__index = cluster_base})  

return Basic

