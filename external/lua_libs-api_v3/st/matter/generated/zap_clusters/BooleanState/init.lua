-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local BooleanStateServerAttributes = require "st.matter.generated.zap_clusters.BooleanState.server.attributes"
local BooleanStateServerCommands = require "st.matter.generated.zap_clusters.BooleanState.server.commands"
local BooleanStateEvents = require "st.matter.generated.zap_clusters.BooleanState.server.events"
local BooleanStateTypes = require "st.matter.generated.zap_clusters.BooleanState.types"

--- @class st.matter.generated.zap_clusters.BooleanState
--- @alias BooleanState
---
--- @field public ID number 0x0045 the ID of this cluster
--- @field public NAME string "BooleanState" the name of this cluster
--- @field public attributes st.matter.generated.zap_clusters.BooleanStateServerAttributes | st.matter.generated.zap_clusters.BooleanStateClientAttributes
--- @field public commands st.matter.generated.zap_clusters.BooleanStateServerCommands | st.matter.generated.zap_clusters.BooleanStateClientCommands
--- @field public types st.matter.generated.zap_clusters.BooleanStateTypes

local BooleanState = {}

BooleanState.ID = 0x0045
BooleanState.NAME = "BooleanState"
BooleanState.server = {}
BooleanState.client = {}
BooleanState.server.attributes = BooleanStateServerAttributes:set_parent_cluster(BooleanState)
BooleanState.server.commands = BooleanStateServerCommands:set_parent_cluster(BooleanState)
BooleanState.server.events = BooleanStateEvents:set_parent_cluster(BooleanState)
BooleanState.types = BooleanStateTypes

-- Global Attributes Metadata
local GLOBAL_CLUSTER_REVISION_ATTRIBUTE = 0xFFFD

-- Represent the global attributes
local global_attr_id_map = {
  [GLOBAL_CLUSTER_REVISION_ATTRIBUTE] = {"cluster revision"},
}

--- Find an attribute by id
---
--- @param attr_id number
function BooleanState:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "StateValue",
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function BooleanState:get_server_command_by_id(command_id)
  local server_id_map = {
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end


--- Find an event by id
---
--- @param event_id number
function BooleanState:get_event_by_id(event_id)
  local event_id_map = {
    [0x0000] = "StateChange",
  }
  if event_id_map[event_id] ~= nil then
    return self.server.events[event_id_map[event_id]]
  end
  return nil
end
-- Attribute Mapping
BooleanState.attribute_direction_map = {
  ["StateValue"] = "server",
  ["AcceptedCommandList"] = "server",
  ["AttributeList"] = "server",
}

-- Command Mapping
BooleanState.command_direction_map = {
}

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = BooleanState.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, BooleanState.NAME))
  end
  return BooleanState[direction].attributes[key]
end
BooleanState.attributes = {}
setmetatable(BooleanState.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = BooleanState.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, BooleanState.NAME))
  end
  return BooleanState[direction].commands[key] 
end
BooleanState.commands = {}
setmetatable(BooleanState.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return BooleanState.server.events[key]
end
BooleanState.events = {}
setmetatable(BooleanState.events, event_helper_mt)

setmetatable(BooleanState, {__index = cluster_base})  

return BooleanState

