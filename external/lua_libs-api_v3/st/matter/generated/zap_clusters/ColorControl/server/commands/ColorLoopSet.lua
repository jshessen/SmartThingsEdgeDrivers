-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local log = require "log"
local TLVParser = require "st.matter.TLV.TLVParser"
local ColorLoopUpdateFlagsType = require "st.matter.generated.zap_clusters.ColorControl.types.ColorLoopUpdateFlags"
local ColorLoopActionType = require "st.matter.generated.zap_clusters.ColorControl.types.ColorLoopAction"
local ColorLoopDirectionType = require "st.matter.generated.zap_clusters.ColorControl.types.ColorLoopDirection"

-----------------------------------------------------------
-- ColorControl command ColorLoopSet
-----------------------------------------------------------

--- @class st.matter.clusters.ColorControl.ColorLoopSet
--- @alias ColorLoopSet
---
--- @field public ID number 0x0044 the ID of this command
--- @field public NAME string "ColorLoopSet" the name of this command
--- @field public update_flags st.matter.clusters.ColorControl.types.ColorLoopUpdateFlags
--- @field public action st.matter.clusters.ColorControl.types.ColorLoopAction
--- @field public direction st.matter.clusters.ColorControl.types.ColorLoopDirection
--- @field public time data_types.Uint16
--- @field public start_hue data_types.Uint16
--- @field public options_mask data_types.Uint8
--- @field public options_override data_types.Uint8
local ColorLoopSet = {}

ColorLoopSet.NAME = "ColorLoopSet"
ColorLoopSet.ID = 0x0044
ColorLoopSet.field_defs = {
  {
    name = "update_flags",
    field_id = 0,
    optional = false,
    nullable = false,
    data_type = ColorLoopUpdateFlagsType,
  },
  {
    name = "action",
    field_id = 1,
    optional = false,
    nullable = false,
    data_type = ColorLoopActionType,
  },
  {
    name = "direction",
    field_id = 2,
    optional = false,
    nullable = false,
    data_type = ColorLoopDirectionType,
  },
  {
    name = "time",
    field_id = 3,
    optional = false,
    nullable = false,
    data_type = data_types.Uint16,
  },
  {
    name = "start_hue",
    field_id = 4,
    optional = false,
    nullable = false,
    data_type = data_types.Uint16,
  },
  {
    name = "options_mask",
    field_id = 5,
    optional = false,
    nullable = false,
    data_type = data_types.Uint8,
  },
  {
    name = "options_override",
    field_id = 6,
    optional = false,
    nullable = false,
    data_type = data_types.Uint8,
  },
}

--- Builds an ColorLoopSet test command reponse for the driver integration testing framework
---
--- @param device st.matter.Device the device to build this message to
--- @param endpoint_id number|nil
--- @param status string Interaction status associated with the path
--- @return st.matter.st.matter.interaction_model.InteractionResponse of type COMMAND_RESPONSE
function ColorLoopSet:build_test_command_response(device, endpoint_id, status)
  return self._cluster:build_test_command_response(
    device,
    endpoint_id,
    self._cluster.ID,
    self.ID,
    nil, --tlv
    status
  )
end

--- Initialize the ColorLoopSet command
---
--- @param self ColorLoopSet the template class for this command
--- @param device st.matter.Device the device to build this message to
--- @param update_flags st.matter.clusters.ColorControl.types.ColorLoopUpdateFlags
--- @param action st.matter.clusters.ColorControl.types.ColorLoopAction
--- @param direction st.matter.clusters.ColorControl.types.ColorLoopDirection
--- @param time st.matter.data_types.Uint16
--- @param start_hue st.matter.data_types.Uint16
--- @param options_mask st.matter.data_types.Uint8
--- @param options_override st.matter.data_types.Uint8

--- @return st.matter.interaction_model.InteractionRequest of type INVOKE
function ColorLoopSet:init(device, endpoint_id, update_flags, action, direction, time, start_hue, options_mask, options_override)
  local out = {}
  local args = {update_flags, action, direction, time, start_hue, options_mask, options_override}
  if #args > #self.field_defs then
    error(self.NAME .. " received too many arguments")
  end
  for i,v in ipairs(self.field_defs) do
    if v.optional and args[i] == nil then
      out[v.name] = nil
    elseif v.nullable and args[i] == nil then
      out[v.name] = data_types.validate_or_build_type(args[i], data_types.Null, v.name)
      out[v.name].field_id = v.field_id
    elseif not v.optional and args[i] == nil then
      out[v.name] = data_types.validate_or_build_type(v.default, v.data_type, v.name)
      out[v.name].field_id = v.field_id
    else
      out[v.name] = data_types.validate_or_build_type(args[i], v.data_type, v.name)
      out[v.name].field_id = v.field_id
    end
  end
  setmetatable(out, {
    __index = ColorLoopSet,
    __tostring = ColorLoopSet.pretty_print
  })
  return self._cluster:build_cluster_command(
    device,
    out,
    endpoint_id,
    self._cluster.ID,
    self.ID
  )
end

function ColorLoopSet:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

--- Add field names to each command field
---
--- @param base_type_obj st.matter.data_types.Structure
function ColorLoopSet:augment_type(base_type_obj)
  local elems = {}
  for _, v in ipairs(base_type_obj.elements) do
    for _, field_def in ipairs(self.field_defs) do
      if field_def.field_id == v.field_id and
         field_def.is_nullable and
         (v.value == nil and v.elements == nil) then
        elems[field_def.name] = data_types.validate_or_build_type(v, data_types.Null, field_def.field_name)
      elseif field_def.field_id == v.field_id and not
        (field_def.is_optional and v.value == nil) then
        elems[field_def.name] = data_types.validate_or_build_type(v, field_def.data_type, field_def.field_name)
      end
    end
  end
  base_type_obj.elements = elems
end

function ColorLoopSet:deserialize(tlv_buf)
  return TLVParser.decode_tlv(tlv_buf)
end

setmetatable(ColorLoopSet, {__call = ColorLoopSet.init})

return ColorLoopSet

