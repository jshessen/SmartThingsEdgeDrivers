-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.ColorControl.types.ColorCapabilities
--- @alias ColorCapabilities
---
--- @field public HUE_SATURATION_SUPPORTED number 1
--- @field public ENHANCED_HUE_SUPPORTED number 2
--- @field public COLOR_LOOP_SUPPORTED number 4
--- @field public XY_ATTRIBUTES_SUPPORTED number 8
--- @field public COLOR_TEMPERATURE_SUPPORTED number 16

local ColorCapabilities = {}
local new_mt = UintABC.new_mt({NAME = "ColorCapabilities", ID = data_types.name_to_id_map["Uint16"]}, 2)

ColorCapabilities.BASE_MASK = 0xFFFF
ColorCapabilities.HUE_SATURATION_SUPPORTED = 0x0001
ColorCapabilities.ENHANCED_HUE_SUPPORTED = 0x0002
ColorCapabilities.COLOR_LOOP_SUPPORTED = 0x0004
ColorCapabilities.XY_ATTRIBUTES_SUPPORTED = 0x0008
ColorCapabilities.COLOR_TEMPERATURE_SUPPORTED = 0x0010

ColorCapabilities.mask_fields = {
  BASE_MASK = 0xFFFF,
  HUE_SATURATION_SUPPORTED = 0x0001,
  ENHANCED_HUE_SUPPORTED = 0x0002,
  COLOR_LOOP_SUPPORTED = 0x0004,
  XY_ATTRIBUTES_SUPPORTED = 0x0008,
  COLOR_TEMPERATURE_SUPPORTED = 0x0010,
}

--- @function ColorCapabilities:is_hue_saturation_supported_set
--- @return boolean True if the value of HUE_SATURATION_SUPPORTED is non-zero
ColorCapabilities.is_hue_saturation_supported_set = function(self)
  return (self.value & self.HUE_SATURATION_SUPPORTED) ~= 0
end
 
--- @function ColorCapabilities:set_hue_saturation_supported
--- Set the value of the bit in the HUE_SATURATION_SUPPORTED field to 1
ColorCapabilities.set_hue_saturation_supported = function(self)
  if self.value ~= nil then
    self.value = self.value | self.HUE_SATURATION_SUPPORTED
  else
    self.value = self.HUE_SATURATION_SUPPORTED
  end
end

--- @function ColorCapabilities:unset_hue_saturation_supported
--- Set the value of the bits in the HUE_SATURATION_SUPPORTED field to 0
ColorCapabilities.unset_hue_saturation_supported = function(self)
  self.value = self.value & (~self.HUE_SATURATION_SUPPORTED & self.BASE_MASK)
end
--- @function ColorCapabilities:is_enhanced_hue_supported_set
--- @return boolean True if the value of ENHANCED_HUE_SUPPORTED is non-zero
ColorCapabilities.is_enhanced_hue_supported_set = function(self)
  return (self.value & self.ENHANCED_HUE_SUPPORTED) ~= 0
end
 
--- @function ColorCapabilities:set_enhanced_hue_supported
--- Set the value of the bit in the ENHANCED_HUE_SUPPORTED field to 1
ColorCapabilities.set_enhanced_hue_supported = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ENHANCED_HUE_SUPPORTED
  else
    self.value = self.ENHANCED_HUE_SUPPORTED
  end
end

--- @function ColorCapabilities:unset_enhanced_hue_supported
--- Set the value of the bits in the ENHANCED_HUE_SUPPORTED field to 0
ColorCapabilities.unset_enhanced_hue_supported = function(self)
  self.value = self.value & (~self.ENHANCED_HUE_SUPPORTED & self.BASE_MASK)
end
--- @function ColorCapabilities:is_color_loop_supported_set
--- @return boolean True if the value of COLOR_LOOP_SUPPORTED is non-zero
ColorCapabilities.is_color_loop_supported_set = function(self)
  return (self.value & self.COLOR_LOOP_SUPPORTED) ~= 0
end
 
--- @function ColorCapabilities:set_color_loop_supported
--- Set the value of the bit in the COLOR_LOOP_SUPPORTED field to 1
ColorCapabilities.set_color_loop_supported = function(self)
  if self.value ~= nil then
    self.value = self.value | self.COLOR_LOOP_SUPPORTED
  else
    self.value = self.COLOR_LOOP_SUPPORTED
  end
end

--- @function ColorCapabilities:unset_color_loop_supported
--- Set the value of the bits in the COLOR_LOOP_SUPPORTED field to 0
ColorCapabilities.unset_color_loop_supported = function(self)
  self.value = self.value & (~self.COLOR_LOOP_SUPPORTED & self.BASE_MASK)
end
--- @function ColorCapabilities:is_xy_attributes_supported_set
--- @return boolean True if the value of XY_ATTRIBUTES_SUPPORTED is non-zero
ColorCapabilities.is_xy_attributes_supported_set = function(self)
  return (self.value & self.XY_ATTRIBUTES_SUPPORTED) ~= 0
end
 
--- @function ColorCapabilities:set_xy_attributes_supported
--- Set the value of the bit in the XY_ATTRIBUTES_SUPPORTED field to 1
ColorCapabilities.set_xy_attributes_supported = function(self)
  if self.value ~= nil then
    self.value = self.value | self.XY_ATTRIBUTES_SUPPORTED
  else
    self.value = self.XY_ATTRIBUTES_SUPPORTED
  end
end

--- @function ColorCapabilities:unset_xy_attributes_supported
--- Set the value of the bits in the XY_ATTRIBUTES_SUPPORTED field to 0
ColorCapabilities.unset_xy_attributes_supported = function(self)
  self.value = self.value & (~self.XY_ATTRIBUTES_SUPPORTED & self.BASE_MASK)
end
--- @function ColorCapabilities:is_color_temperature_supported_set
--- @return boolean True if the value of COLOR_TEMPERATURE_SUPPORTED is non-zero
ColorCapabilities.is_color_temperature_supported_set = function(self)
  return (self.value & self.COLOR_TEMPERATURE_SUPPORTED) ~= 0
end
 
--- @function ColorCapabilities:set_color_temperature_supported
--- Set the value of the bit in the COLOR_TEMPERATURE_SUPPORTED field to 1
ColorCapabilities.set_color_temperature_supported = function(self)
  if self.value ~= nil then
    self.value = self.value | self.COLOR_TEMPERATURE_SUPPORTED
  else
    self.value = self.COLOR_TEMPERATURE_SUPPORTED
  end
end

--- @function ColorCapabilities:unset_color_temperature_supported
--- Set the value of the bits in the COLOR_TEMPERATURE_SUPPORTED field to 0
ColorCapabilities.unset_color_temperature_supported = function(self)
  self.value = self.value & (~self.COLOR_TEMPERATURE_SUPPORTED & self.BASE_MASK)
end


ColorCapabilities.mask_methods = {
  is_hue_saturation_supported_set = ColorCapabilities.is_hue_saturation_supported_set,
  set_hue_saturation_supported = ColorCapabilities.set_hue_saturation_supported,
  unset_hue_saturation_supported = ColorCapabilities.unset_hue_saturation_supported,
  is_enhanced_hue_supported_set = ColorCapabilities.is_enhanced_hue_supported_set,
  set_enhanced_hue_supported = ColorCapabilities.set_enhanced_hue_supported,
  unset_enhanced_hue_supported = ColorCapabilities.unset_enhanced_hue_supported,
  is_color_loop_supported_set = ColorCapabilities.is_color_loop_supported_set,
  set_color_loop_supported = ColorCapabilities.set_color_loop_supported,
  unset_color_loop_supported = ColorCapabilities.unset_color_loop_supported,
  is_xy_attributes_supported_set = ColorCapabilities.is_xy_attributes_supported_set,
  set_xy_attributes_supported = ColorCapabilities.set_xy_attributes_supported,
  unset_xy_attributes_supported = ColorCapabilities.unset_xy_attributes_supported,
  is_color_temperature_supported_set = ColorCapabilities.is_color_temperature_supported_set,
  set_color_temperature_supported = ColorCapabilities.set_color_temperature_supported,
  unset_color_temperature_supported = ColorCapabilities.unset_color_temperature_supported,
}

ColorCapabilities.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(ColorCapabilities, new_mt)

return ColorCapabilities

