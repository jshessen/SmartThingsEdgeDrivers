-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.DoorLock.types.DlDefaultConfigurationRegister
--- @alias DlDefaultConfigurationRegister
---
--- @field public ENABLE_LOCAL_PROGRAMMING_ENABLED number 1
--- @field public KEYPAD_INTERFACE_DEFAULT_ACCESS_ENABLED number 2
--- @field public REMOTE_INTERFACE_DEFAULT_ACCESS_IS_ENABLED number 4
--- @field public SOUND_ENABLED number 32
--- @field public AUTO_RELOCK_TIME_SET number 64
--- @field public LED_SETTINGS_SET number 128

local DlDefaultConfigurationRegister = {}
local new_mt = UintABC.new_mt({NAME = "DlDefaultConfigurationRegister", ID = data_types.name_to_id_map["Uint16"]}, 2)

DlDefaultConfigurationRegister.BASE_MASK = 0xFFFF
DlDefaultConfigurationRegister.ENABLE_LOCAL_PROGRAMMING_ENABLED = 0x0001
DlDefaultConfigurationRegister.KEYPAD_INTERFACE_DEFAULT_ACCESS_ENABLED = 0x0002
DlDefaultConfigurationRegister.REMOTE_INTERFACE_DEFAULT_ACCESS_IS_ENABLED = 0x0004
DlDefaultConfigurationRegister.SOUND_ENABLED = 0x0020
DlDefaultConfigurationRegister.AUTO_RELOCK_TIME_SET = 0x0040
DlDefaultConfigurationRegister.LED_SETTINGS_SET = 0x0080

DlDefaultConfigurationRegister.mask_fields = {
  BASE_MASK = 0xFFFF,
  ENABLE_LOCAL_PROGRAMMING_ENABLED = 0x0001,
  KEYPAD_INTERFACE_DEFAULT_ACCESS_ENABLED = 0x0002,
  REMOTE_INTERFACE_DEFAULT_ACCESS_IS_ENABLED = 0x0004,
  SOUND_ENABLED = 0x0020,
  AUTO_RELOCK_TIME_SET = 0x0040,
  LED_SETTINGS_SET = 0x0080,
}

--- @function DlDefaultConfigurationRegister:is_enable_local_programming_enabled_set
--- @return boolean True if the value of ENABLE_LOCAL_PROGRAMMING_ENABLED is non-zero
DlDefaultConfigurationRegister.is_enable_local_programming_enabled_set = function(self)
  return (self.value & self.ENABLE_LOCAL_PROGRAMMING_ENABLED) ~= 0
end
 
--- @function DlDefaultConfigurationRegister:set_enable_local_programming_enabled
--- Set the value of the bit in the ENABLE_LOCAL_PROGRAMMING_ENABLED field to 1
DlDefaultConfigurationRegister.set_enable_local_programming_enabled = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ENABLE_LOCAL_PROGRAMMING_ENABLED
  else
    self.value = self.ENABLE_LOCAL_PROGRAMMING_ENABLED
  end
end

--- @function DlDefaultConfigurationRegister:unset_enable_local_programming_enabled
--- Set the value of the bits in the ENABLE_LOCAL_PROGRAMMING_ENABLED field to 0
DlDefaultConfigurationRegister.unset_enable_local_programming_enabled = function(self)
  self.value = self.value & (~self.ENABLE_LOCAL_PROGRAMMING_ENABLED & self.BASE_MASK)
end
--- @function DlDefaultConfigurationRegister:is_keypad_interface_default_access_enabled_set
--- @return boolean True if the value of KEYPAD_INTERFACE_DEFAULT_ACCESS_ENABLED is non-zero
DlDefaultConfigurationRegister.is_keypad_interface_default_access_enabled_set = function(self)
  return (self.value & self.KEYPAD_INTERFACE_DEFAULT_ACCESS_ENABLED) ~= 0
end
 
--- @function DlDefaultConfigurationRegister:set_keypad_interface_default_access_enabled
--- Set the value of the bit in the KEYPAD_INTERFACE_DEFAULT_ACCESS_ENABLED field to 1
DlDefaultConfigurationRegister.set_keypad_interface_default_access_enabled = function(self)
  if self.value ~= nil then
    self.value = self.value | self.KEYPAD_INTERFACE_DEFAULT_ACCESS_ENABLED
  else
    self.value = self.KEYPAD_INTERFACE_DEFAULT_ACCESS_ENABLED
  end
end

--- @function DlDefaultConfigurationRegister:unset_keypad_interface_default_access_enabled
--- Set the value of the bits in the KEYPAD_INTERFACE_DEFAULT_ACCESS_ENABLED field to 0
DlDefaultConfigurationRegister.unset_keypad_interface_default_access_enabled = function(self)
  self.value = self.value & (~self.KEYPAD_INTERFACE_DEFAULT_ACCESS_ENABLED & self.BASE_MASK)
end
--- @function DlDefaultConfigurationRegister:is_remote_interface_default_access_is_enabled_set
--- @return boolean True if the value of REMOTE_INTERFACE_DEFAULT_ACCESS_IS_ENABLED is non-zero
DlDefaultConfigurationRegister.is_remote_interface_default_access_is_enabled_set = function(self)
  return (self.value & self.REMOTE_INTERFACE_DEFAULT_ACCESS_IS_ENABLED) ~= 0
end
 
--- @function DlDefaultConfigurationRegister:set_remote_interface_default_access_is_enabled
--- Set the value of the bit in the REMOTE_INTERFACE_DEFAULT_ACCESS_IS_ENABLED field to 1
DlDefaultConfigurationRegister.set_remote_interface_default_access_is_enabled = function(self)
  if self.value ~= nil then
    self.value = self.value | self.REMOTE_INTERFACE_DEFAULT_ACCESS_IS_ENABLED
  else
    self.value = self.REMOTE_INTERFACE_DEFAULT_ACCESS_IS_ENABLED
  end
end

--- @function DlDefaultConfigurationRegister:unset_remote_interface_default_access_is_enabled
--- Set the value of the bits in the REMOTE_INTERFACE_DEFAULT_ACCESS_IS_ENABLED field to 0
DlDefaultConfigurationRegister.unset_remote_interface_default_access_is_enabled = function(self)
  self.value = self.value & (~self.REMOTE_INTERFACE_DEFAULT_ACCESS_IS_ENABLED & self.BASE_MASK)
end
--- @function DlDefaultConfigurationRegister:is_sound_enabled_set
--- @return boolean True if the value of SOUND_ENABLED is non-zero
DlDefaultConfigurationRegister.is_sound_enabled_set = function(self)
  return (self.value & self.SOUND_ENABLED) ~= 0
end
 
--- @function DlDefaultConfigurationRegister:set_sound_enabled
--- Set the value of the bit in the SOUND_ENABLED field to 1
DlDefaultConfigurationRegister.set_sound_enabled = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SOUND_ENABLED
  else
    self.value = self.SOUND_ENABLED
  end
end

--- @function DlDefaultConfigurationRegister:unset_sound_enabled
--- Set the value of the bits in the SOUND_ENABLED field to 0
DlDefaultConfigurationRegister.unset_sound_enabled = function(self)
  self.value = self.value & (~self.SOUND_ENABLED & self.BASE_MASK)
end
--- @function DlDefaultConfigurationRegister:is_auto_relock_time_set_set
--- @return boolean True if the value of AUTO_RELOCK_TIME_SET is non-zero
DlDefaultConfigurationRegister.is_auto_relock_time_set_set = function(self)
  return (self.value & self.AUTO_RELOCK_TIME_SET) ~= 0
end
 
--- @function DlDefaultConfigurationRegister:set_auto_relock_time_set
--- Set the value of the bit in the AUTO_RELOCK_TIME_SET field to 1
DlDefaultConfigurationRegister.set_auto_relock_time_set = function(self)
  if self.value ~= nil then
    self.value = self.value | self.AUTO_RELOCK_TIME_SET
  else
    self.value = self.AUTO_RELOCK_TIME_SET
  end
end

--- @function DlDefaultConfigurationRegister:unset_auto_relock_time_set
--- Set the value of the bits in the AUTO_RELOCK_TIME_SET field to 0
DlDefaultConfigurationRegister.unset_auto_relock_time_set = function(self)
  self.value = self.value & (~self.AUTO_RELOCK_TIME_SET & self.BASE_MASK)
end
--- @function DlDefaultConfigurationRegister:is_led_settings_set_set
--- @return boolean True if the value of LED_SETTINGS_SET is non-zero
DlDefaultConfigurationRegister.is_led_settings_set_set = function(self)
  return (self.value & self.LED_SETTINGS_SET) ~= 0
end
 
--- @function DlDefaultConfigurationRegister:set_led_settings_set
--- Set the value of the bit in the LED_SETTINGS_SET field to 1
DlDefaultConfigurationRegister.set_led_settings_set = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LED_SETTINGS_SET
  else
    self.value = self.LED_SETTINGS_SET
  end
end

--- @function DlDefaultConfigurationRegister:unset_led_settings_set
--- Set the value of the bits in the LED_SETTINGS_SET field to 0
DlDefaultConfigurationRegister.unset_led_settings_set = function(self)
  self.value = self.value & (~self.LED_SETTINGS_SET & self.BASE_MASK)
end


DlDefaultConfigurationRegister.mask_methods = {
  is_enable_local_programming_enabled_set = DlDefaultConfigurationRegister.is_enable_local_programming_enabled_set,
  set_enable_local_programming_enabled = DlDefaultConfigurationRegister.set_enable_local_programming_enabled,
  unset_enable_local_programming_enabled = DlDefaultConfigurationRegister.unset_enable_local_programming_enabled,
  is_keypad_interface_default_access_enabled_set = DlDefaultConfigurationRegister.is_keypad_interface_default_access_enabled_set,
  set_keypad_interface_default_access_enabled = DlDefaultConfigurationRegister.set_keypad_interface_default_access_enabled,
  unset_keypad_interface_default_access_enabled = DlDefaultConfigurationRegister.unset_keypad_interface_default_access_enabled,
  is_remote_interface_default_access_is_enabled_set = DlDefaultConfigurationRegister.is_remote_interface_default_access_is_enabled_set,
  set_remote_interface_default_access_is_enabled = DlDefaultConfigurationRegister.set_remote_interface_default_access_is_enabled,
  unset_remote_interface_default_access_is_enabled = DlDefaultConfigurationRegister.unset_remote_interface_default_access_is_enabled,
  is_sound_enabled_set = DlDefaultConfigurationRegister.is_sound_enabled_set,
  set_sound_enabled = DlDefaultConfigurationRegister.set_sound_enabled,
  unset_sound_enabled = DlDefaultConfigurationRegister.unset_sound_enabled,
  is_auto_relock_time_set_set = DlDefaultConfigurationRegister.is_auto_relock_time_set_set,
  set_auto_relock_time_set = DlDefaultConfigurationRegister.set_auto_relock_time_set,
  unset_auto_relock_time_set = DlDefaultConfigurationRegister.unset_auto_relock_time_set,
  is_led_settings_set_set = DlDefaultConfigurationRegister.is_led_settings_set_set,
  set_led_settings_set = DlDefaultConfigurationRegister.set_led_settings_set,
  unset_led_settings_set = DlDefaultConfigurationRegister.unset_led_settings_set,
}

DlDefaultConfigurationRegister.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(DlDefaultConfigurationRegister, new_mt)

return DlDefaultConfigurationRegister

