-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.DoorLock.types.DlSupportedOperatingModes
--- @alias DlSupportedOperatingModes
---
--- @field public NORMAL number 1
--- @field public VACATION number 2
--- @field public PRIVACY number 4
--- @field public NO_REMOTE_LOCK_UNLOCK number 8
--- @field public PASSAGE number 16

local DlSupportedOperatingModes = {}
local new_mt = UintABC.new_mt({NAME = "DlSupportedOperatingModes", ID = data_types.name_to_id_map["Uint16"]}, 2)

DlSupportedOperatingModes.BASE_MASK = 0xFFFF
DlSupportedOperatingModes.NORMAL = 0x0001
DlSupportedOperatingModes.VACATION = 0x0002
DlSupportedOperatingModes.PRIVACY = 0x0004
DlSupportedOperatingModes.NO_REMOTE_LOCK_UNLOCK = 0x0008
DlSupportedOperatingModes.PASSAGE = 0x0010

DlSupportedOperatingModes.mask_fields = {
  BASE_MASK = 0xFFFF,
  NORMAL = 0x0001,
  VACATION = 0x0002,
  PRIVACY = 0x0004,
  NO_REMOTE_LOCK_UNLOCK = 0x0008,
  PASSAGE = 0x0010,
}

--- @function DlSupportedOperatingModes:is_normal_set
--- @return boolean True if the value of NORMAL is non-zero
DlSupportedOperatingModes.is_normal_set = function(self)
  return (self.value & self.NORMAL) ~= 0
end
 
--- @function DlSupportedOperatingModes:set_normal
--- Set the value of the bit in the NORMAL field to 1
DlSupportedOperatingModes.set_normal = function(self)
  if self.value ~= nil then
    self.value = self.value | self.NORMAL
  else
    self.value = self.NORMAL
  end
end

--- @function DlSupportedOperatingModes:unset_normal
--- Set the value of the bits in the NORMAL field to 0
DlSupportedOperatingModes.unset_normal = function(self)
  self.value = self.value & (~self.NORMAL & self.BASE_MASK)
end
--- @function DlSupportedOperatingModes:is_vacation_set
--- @return boolean True if the value of VACATION is non-zero
DlSupportedOperatingModes.is_vacation_set = function(self)
  return (self.value & self.VACATION) ~= 0
end
 
--- @function DlSupportedOperatingModes:set_vacation
--- Set the value of the bit in the VACATION field to 1
DlSupportedOperatingModes.set_vacation = function(self)
  if self.value ~= nil then
    self.value = self.value | self.VACATION
  else
    self.value = self.VACATION
  end
end

--- @function DlSupportedOperatingModes:unset_vacation
--- Set the value of the bits in the VACATION field to 0
DlSupportedOperatingModes.unset_vacation = function(self)
  self.value = self.value & (~self.VACATION & self.BASE_MASK)
end
--- @function DlSupportedOperatingModes:is_privacy_set
--- @return boolean True if the value of PRIVACY is non-zero
DlSupportedOperatingModes.is_privacy_set = function(self)
  return (self.value & self.PRIVACY) ~= 0
end
 
--- @function DlSupportedOperatingModes:set_privacy
--- Set the value of the bit in the PRIVACY field to 1
DlSupportedOperatingModes.set_privacy = function(self)
  if self.value ~= nil then
    self.value = self.value | self.PRIVACY
  else
    self.value = self.PRIVACY
  end
end

--- @function DlSupportedOperatingModes:unset_privacy
--- Set the value of the bits in the PRIVACY field to 0
DlSupportedOperatingModes.unset_privacy = function(self)
  self.value = self.value & (~self.PRIVACY & self.BASE_MASK)
end
--- @function DlSupportedOperatingModes:is_no_remote_lock_unlock_set
--- @return boolean True if the value of NO_REMOTE_LOCK_UNLOCK is non-zero
DlSupportedOperatingModes.is_no_remote_lock_unlock_set = function(self)
  return (self.value & self.NO_REMOTE_LOCK_UNLOCK) ~= 0
end
 
--- @function DlSupportedOperatingModes:set_no_remote_lock_unlock
--- Set the value of the bit in the NO_REMOTE_LOCK_UNLOCK field to 1
DlSupportedOperatingModes.set_no_remote_lock_unlock = function(self)
  if self.value ~= nil then
    self.value = self.value | self.NO_REMOTE_LOCK_UNLOCK
  else
    self.value = self.NO_REMOTE_LOCK_UNLOCK
  end
end

--- @function DlSupportedOperatingModes:unset_no_remote_lock_unlock
--- Set the value of the bits in the NO_REMOTE_LOCK_UNLOCK field to 0
DlSupportedOperatingModes.unset_no_remote_lock_unlock = function(self)
  self.value = self.value & (~self.NO_REMOTE_LOCK_UNLOCK & self.BASE_MASK)
end
--- @function DlSupportedOperatingModes:is_passage_set
--- @return boolean True if the value of PASSAGE is non-zero
DlSupportedOperatingModes.is_passage_set = function(self)
  return (self.value & self.PASSAGE) ~= 0
end
 
--- @function DlSupportedOperatingModes:set_passage
--- Set the value of the bit in the PASSAGE field to 1
DlSupportedOperatingModes.set_passage = function(self)
  if self.value ~= nil then
    self.value = self.value | self.PASSAGE
  else
    self.value = self.PASSAGE
  end
end

--- @function DlSupportedOperatingModes:unset_passage
--- Set the value of the bits in the PASSAGE field to 0
DlSupportedOperatingModes.unset_passage = function(self)
  self.value = self.value & (~self.PASSAGE & self.BASE_MASK)
end


DlSupportedOperatingModes.mask_methods = {
  is_normal_set = DlSupportedOperatingModes.is_normal_set,
  set_normal = DlSupportedOperatingModes.set_normal,
  unset_normal = DlSupportedOperatingModes.unset_normal,
  is_vacation_set = DlSupportedOperatingModes.is_vacation_set,
  set_vacation = DlSupportedOperatingModes.set_vacation,
  unset_vacation = DlSupportedOperatingModes.unset_vacation,
  is_privacy_set = DlSupportedOperatingModes.is_privacy_set,
  set_privacy = DlSupportedOperatingModes.set_privacy,
  unset_privacy = DlSupportedOperatingModes.unset_privacy,
  is_no_remote_lock_unlock_set = DlSupportedOperatingModes.is_no_remote_lock_unlock_set,
  set_no_remote_lock_unlock = DlSupportedOperatingModes.set_no_remote_lock_unlock,
  unset_no_remote_lock_unlock = DlSupportedOperatingModes.unset_no_remote_lock_unlock,
  is_passage_set = DlSupportedOperatingModes.is_passage_set,
  set_passage = DlSupportedOperatingModes.set_passage,
  unset_passage = DlSupportedOperatingModes.unset_passage,
}

DlSupportedOperatingModes.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(DlSupportedOperatingModes, new_mt)

return DlSupportedOperatingModes

