-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.DoorLock.types.DlUserType: st.matter.data_types.Uint8
--- @alias DlUserType
---
--- @field public byte_length number 1
--- @field public UNRESTRICTED_USER number 0
--- @field public YEAR_DAY_SCHEDULE_USER number 1
--- @field public WEEK_DAY_SCHEDULE_USER number 2
--- @field public PROGRAMMING_USER number 3
--- @field public NON_ACCESS_USER number 4
--- @field public FORCED_USER number 5
--- @field public DISPOSABLE_USER number 6
--- @field public EXPIRING_USER number 7
--- @field public SCHEDULE_RESTRICTED_USER number 8
--- @field public REMOTE_ONLY_USER number 9

local DlUserType = {}
local new_mt = UintABC.new_mt({NAME = "DlUserType", ID = data_types.name_to_id_map["Uint8"]}, 1)
new_mt.__index.pretty_print = function(self)
  local name_lookup = {
    [self.UNRESTRICTED_USER] = "UNRESTRICTED_USER",
    [self.YEAR_DAY_SCHEDULE_USER] = "YEAR_DAY_SCHEDULE_USER",
    [self.WEEK_DAY_SCHEDULE_USER] = "WEEK_DAY_SCHEDULE_USER",
    [self.PROGRAMMING_USER] = "PROGRAMMING_USER",
    [self.NON_ACCESS_USER] = "NON_ACCESS_USER",
    [self.FORCED_USER] = "FORCED_USER",
    [self.DISPOSABLE_USER] = "DISPOSABLE_USER",
    [self.EXPIRING_USER] = "EXPIRING_USER",
    [self.SCHEDULE_RESTRICTED_USER] = "SCHEDULE_RESTRICTED_USER",
    [self.REMOTE_ONLY_USER] = "REMOTE_ONLY_USER",
  }
  return string.format("%s: %s", self.field_name or self.NAME, name_lookup[self.value] or string.format("%d", self.value))
end
new_mt.__tostring = new_mt.__index.pretty_print

new_mt.__index.UNRESTRICTED_USER  = 0x00
new_mt.__index.YEAR_DAY_SCHEDULE_USER  = 0x01
new_mt.__index.WEEK_DAY_SCHEDULE_USER  = 0x02
new_mt.__index.PROGRAMMING_USER  = 0x03
new_mt.__index.NON_ACCESS_USER  = 0x04
new_mt.__index.FORCED_USER  = 0x05
new_mt.__index.DISPOSABLE_USER  = 0x06
new_mt.__index.EXPIRING_USER  = 0x07
new_mt.__index.SCHEDULE_RESTRICTED_USER  = 0x08
new_mt.__index.REMOTE_ONLY_USER  = 0x09

DlUserType.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(DlUserType, new_mt)

return DlUserType

