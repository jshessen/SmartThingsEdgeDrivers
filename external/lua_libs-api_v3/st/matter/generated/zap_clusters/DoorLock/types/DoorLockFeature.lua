-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.DoorLock.types.DoorLockFeature
--- @alias DoorLockFeature
---
--- @field public PIN_CREDENTIALS number 1
--- @field public RFID_CREDENTIALS number 2
--- @field public FINGER_CREDENTIALS number 4
--- @field public LOGGING number 8
--- @field public WEEK_DAY_SCHEDULES number 16
--- @field public DOOR_POSITION_SENSOR number 32
--- @field public FACE_CREDENTIALS number 64
--- @field public CREDENTIALSOTA number 128
--- @field public USERS_MANAGEMENT number 256
--- @field public NOTIFICATIONS number 512
--- @field public YEAR_DAY_SCHEDULES number 1024
--- @field public HOLIDAY_SCHEDULES number 2048

local DoorLockFeature = {}
local new_mt = UintABC.new_mt({NAME = "DoorLockFeature", ID = data_types.name_to_id_map["Uint32"]}, 4)

DoorLockFeature.BASE_MASK = 0xFFFF
DoorLockFeature.PIN_CREDENTIALS = 0x0001
DoorLockFeature.RFID_CREDENTIALS = 0x0002
DoorLockFeature.FINGER_CREDENTIALS = 0x0004
DoorLockFeature.LOGGING = 0x0008
DoorLockFeature.WEEK_DAY_SCHEDULES = 0x0010
DoorLockFeature.DOOR_POSITION_SENSOR = 0x0020
DoorLockFeature.FACE_CREDENTIALS = 0x0040
DoorLockFeature.CREDENTIALSOTA = 0x0080
DoorLockFeature.USERS_MANAGEMENT = 0x0100
DoorLockFeature.NOTIFICATIONS = 0x0200
DoorLockFeature.YEAR_DAY_SCHEDULES = 0x0400
DoorLockFeature.HOLIDAY_SCHEDULES = 0x0800

DoorLockFeature.mask_fields = {
  BASE_MASK = 0xFFFF,
  PIN_CREDENTIALS = 0x0001,
  RFID_CREDENTIALS = 0x0002,
  FINGER_CREDENTIALS = 0x0004,
  LOGGING = 0x0008,
  WEEK_DAY_SCHEDULES = 0x0010,
  DOOR_POSITION_SENSOR = 0x0020,
  FACE_CREDENTIALS = 0x0040,
  CREDENTIALSOTA = 0x0080,
  USERS_MANAGEMENT = 0x0100,
  NOTIFICATIONS = 0x0200,
  YEAR_DAY_SCHEDULES = 0x0400,
  HOLIDAY_SCHEDULES = 0x0800,
}

--- @function DoorLockFeature:is_pin_credentials_set
--- @return boolean True if the value of PIN_CREDENTIALS is non-zero
DoorLockFeature.is_pin_credentials_set = function(self)
  return (self.value & self.PIN_CREDENTIALS) ~= 0
end
 
--- @function DoorLockFeature:set_pin_credentials
--- Set the value of the bit in the PIN_CREDENTIALS field to 1
DoorLockFeature.set_pin_credentials = function(self)
  if self.value ~= nil then
    self.value = self.value | self.PIN_CREDENTIALS
  else
    self.value = self.PIN_CREDENTIALS
  end
end

--- @function DoorLockFeature:unset_pin_credentials
--- Set the value of the bits in the PIN_CREDENTIALS field to 0
DoorLockFeature.unset_pin_credentials = function(self)
  self.value = self.value & (~self.PIN_CREDENTIALS & self.BASE_MASK)
end
--- @function DoorLockFeature:is_rfid_credentials_set
--- @return boolean True if the value of RFID_CREDENTIALS is non-zero
DoorLockFeature.is_rfid_credentials_set = function(self)
  return (self.value & self.RFID_CREDENTIALS) ~= 0
end
 
--- @function DoorLockFeature:set_rfid_credentials
--- Set the value of the bit in the RFID_CREDENTIALS field to 1
DoorLockFeature.set_rfid_credentials = function(self)
  if self.value ~= nil then
    self.value = self.value | self.RFID_CREDENTIALS
  else
    self.value = self.RFID_CREDENTIALS
  end
end

--- @function DoorLockFeature:unset_rfid_credentials
--- Set the value of the bits in the RFID_CREDENTIALS field to 0
DoorLockFeature.unset_rfid_credentials = function(self)
  self.value = self.value & (~self.RFID_CREDENTIALS & self.BASE_MASK)
end
--- @function DoorLockFeature:is_finger_credentials_set
--- @return boolean True if the value of FINGER_CREDENTIALS is non-zero
DoorLockFeature.is_finger_credentials_set = function(self)
  return (self.value & self.FINGER_CREDENTIALS) ~= 0
end
 
--- @function DoorLockFeature:set_finger_credentials
--- Set the value of the bit in the FINGER_CREDENTIALS field to 1
DoorLockFeature.set_finger_credentials = function(self)
  if self.value ~= nil then
    self.value = self.value | self.FINGER_CREDENTIALS
  else
    self.value = self.FINGER_CREDENTIALS
  end
end

--- @function DoorLockFeature:unset_finger_credentials
--- Set the value of the bits in the FINGER_CREDENTIALS field to 0
DoorLockFeature.unset_finger_credentials = function(self)
  self.value = self.value & (~self.FINGER_CREDENTIALS & self.BASE_MASK)
end
--- @function DoorLockFeature:is_logging_set
--- @return boolean True if the value of LOGGING is non-zero
DoorLockFeature.is_logging_set = function(self)
  return (self.value & self.LOGGING) ~= 0
end
 
--- @function DoorLockFeature:set_logging
--- Set the value of the bit in the LOGGING field to 1
DoorLockFeature.set_logging = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LOGGING
  else
    self.value = self.LOGGING
  end
end

--- @function DoorLockFeature:unset_logging
--- Set the value of the bits in the LOGGING field to 0
DoorLockFeature.unset_logging = function(self)
  self.value = self.value & (~self.LOGGING & self.BASE_MASK)
end
--- @function DoorLockFeature:is_week_day_schedules_set
--- @return boolean True if the value of WEEK_DAY_SCHEDULES is non-zero
DoorLockFeature.is_week_day_schedules_set = function(self)
  return (self.value & self.WEEK_DAY_SCHEDULES) ~= 0
end
 
--- @function DoorLockFeature:set_week_day_schedules
--- Set the value of the bit in the WEEK_DAY_SCHEDULES field to 1
DoorLockFeature.set_week_day_schedules = function(self)
  if self.value ~= nil then
    self.value = self.value | self.WEEK_DAY_SCHEDULES
  else
    self.value = self.WEEK_DAY_SCHEDULES
  end
end

--- @function DoorLockFeature:unset_week_day_schedules
--- Set the value of the bits in the WEEK_DAY_SCHEDULES field to 0
DoorLockFeature.unset_week_day_schedules = function(self)
  self.value = self.value & (~self.WEEK_DAY_SCHEDULES & self.BASE_MASK)
end
--- @function DoorLockFeature:is_door_position_sensor_set
--- @return boolean True if the value of DOOR_POSITION_SENSOR is non-zero
DoorLockFeature.is_door_position_sensor_set = function(self)
  return (self.value & self.DOOR_POSITION_SENSOR) ~= 0
end
 
--- @function DoorLockFeature:set_door_position_sensor
--- Set the value of the bit in the DOOR_POSITION_SENSOR field to 1
DoorLockFeature.set_door_position_sensor = function(self)
  if self.value ~= nil then
    self.value = self.value | self.DOOR_POSITION_SENSOR
  else
    self.value = self.DOOR_POSITION_SENSOR
  end
end

--- @function DoorLockFeature:unset_door_position_sensor
--- Set the value of the bits in the DOOR_POSITION_SENSOR field to 0
DoorLockFeature.unset_door_position_sensor = function(self)
  self.value = self.value & (~self.DOOR_POSITION_SENSOR & self.BASE_MASK)
end
--- @function DoorLockFeature:is_face_credentials_set
--- @return boolean True if the value of FACE_CREDENTIALS is non-zero
DoorLockFeature.is_face_credentials_set = function(self)
  return (self.value & self.FACE_CREDENTIALS) ~= 0
end
 
--- @function DoorLockFeature:set_face_credentials
--- Set the value of the bit in the FACE_CREDENTIALS field to 1
DoorLockFeature.set_face_credentials = function(self)
  if self.value ~= nil then
    self.value = self.value | self.FACE_CREDENTIALS
  else
    self.value = self.FACE_CREDENTIALS
  end
end

--- @function DoorLockFeature:unset_face_credentials
--- Set the value of the bits in the FACE_CREDENTIALS field to 0
DoorLockFeature.unset_face_credentials = function(self)
  self.value = self.value & (~self.FACE_CREDENTIALS & self.BASE_MASK)
end
--- @function DoorLockFeature:is_credentialsota_set
--- @return boolean True if the value of CREDENTIALSOTA is non-zero
DoorLockFeature.is_credentialsota_set = function(self)
  return (self.value & self.CREDENTIALSOTA) ~= 0
end
 
--- @function DoorLockFeature:set_credentialsota
--- Set the value of the bit in the CREDENTIALSOTA field to 1
DoorLockFeature.set_credentialsota = function(self)
  if self.value ~= nil then
    self.value = self.value | self.CREDENTIALSOTA
  else
    self.value = self.CREDENTIALSOTA
  end
end

--- @function DoorLockFeature:unset_credentialsota
--- Set the value of the bits in the CREDENTIALSOTA field to 0
DoorLockFeature.unset_credentialsota = function(self)
  self.value = self.value & (~self.CREDENTIALSOTA & self.BASE_MASK)
end
--- @function DoorLockFeature:is_users_management_set
--- @return boolean True if the value of USERS_MANAGEMENT is non-zero
DoorLockFeature.is_users_management_set = function(self)
  return (self.value & self.USERS_MANAGEMENT) ~= 0
end
 
--- @function DoorLockFeature:set_users_management
--- Set the value of the bit in the USERS_MANAGEMENT field to 1
DoorLockFeature.set_users_management = function(self)
  if self.value ~= nil then
    self.value = self.value | self.USERS_MANAGEMENT
  else
    self.value = self.USERS_MANAGEMENT
  end
end

--- @function DoorLockFeature:unset_users_management
--- Set the value of the bits in the USERS_MANAGEMENT field to 0
DoorLockFeature.unset_users_management = function(self)
  self.value = self.value & (~self.USERS_MANAGEMENT & self.BASE_MASK)
end
--- @function DoorLockFeature:is_notifications_set
--- @return boolean True if the value of NOTIFICATIONS is non-zero
DoorLockFeature.is_notifications_set = function(self)
  return (self.value & self.NOTIFICATIONS) ~= 0
end
 
--- @function DoorLockFeature:set_notifications
--- Set the value of the bit in the NOTIFICATIONS field to 1
DoorLockFeature.set_notifications = function(self)
  if self.value ~= nil then
    self.value = self.value | self.NOTIFICATIONS
  else
    self.value = self.NOTIFICATIONS
  end
end

--- @function DoorLockFeature:unset_notifications
--- Set the value of the bits in the NOTIFICATIONS field to 0
DoorLockFeature.unset_notifications = function(self)
  self.value = self.value & (~self.NOTIFICATIONS & self.BASE_MASK)
end
--- @function DoorLockFeature:is_year_day_schedules_set
--- @return boolean True if the value of YEAR_DAY_SCHEDULES is non-zero
DoorLockFeature.is_year_day_schedules_set = function(self)
  return (self.value & self.YEAR_DAY_SCHEDULES) ~= 0
end
 
--- @function DoorLockFeature:set_year_day_schedules
--- Set the value of the bit in the YEAR_DAY_SCHEDULES field to 1
DoorLockFeature.set_year_day_schedules = function(self)
  if self.value ~= nil then
    self.value = self.value | self.YEAR_DAY_SCHEDULES
  else
    self.value = self.YEAR_DAY_SCHEDULES
  end
end

--- @function DoorLockFeature:unset_year_day_schedules
--- Set the value of the bits in the YEAR_DAY_SCHEDULES field to 0
DoorLockFeature.unset_year_day_schedules = function(self)
  self.value = self.value & (~self.YEAR_DAY_SCHEDULES & self.BASE_MASK)
end
--- @function DoorLockFeature:is_holiday_schedules_set
--- @return boolean True if the value of HOLIDAY_SCHEDULES is non-zero
DoorLockFeature.is_holiday_schedules_set = function(self)
  return (self.value & self.HOLIDAY_SCHEDULES) ~= 0
end
 
--- @function DoorLockFeature:set_holiday_schedules
--- Set the value of the bit in the HOLIDAY_SCHEDULES field to 1
DoorLockFeature.set_holiday_schedules = function(self)
  if self.value ~= nil then
    self.value = self.value | self.HOLIDAY_SCHEDULES
  else
    self.value = self.HOLIDAY_SCHEDULES
  end
end

--- @function DoorLockFeature:unset_holiday_schedules
--- Set the value of the bits in the HOLIDAY_SCHEDULES field to 0
DoorLockFeature.unset_holiday_schedules = function(self)
  self.value = self.value & (~self.HOLIDAY_SCHEDULES & self.BASE_MASK)
end

function DoorLockFeature.bits_are_valid(feature)
  local max = 
    DoorLockFeature.PIN_CREDENTIALS | 
    DoorLockFeature.RFID_CREDENTIALS | 
    DoorLockFeature.FINGER_CREDENTIALS | 
    DoorLockFeature.LOGGING | 
    DoorLockFeature.WEEK_DAY_SCHEDULES | 
    DoorLockFeature.DOOR_POSITION_SENSOR | 
    DoorLockFeature.FACE_CREDENTIALS | 
    DoorLockFeature.CREDENTIALSOTA | 
    DoorLockFeature.USERS_MANAGEMENT | 
    DoorLockFeature.NOTIFICATIONS | 
    DoorLockFeature.YEAR_DAY_SCHEDULES | 
    DoorLockFeature.HOLIDAY_SCHEDULES
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

DoorLockFeature.mask_methods = {
  is_pin_credentials_set = DoorLockFeature.is_pin_credentials_set,
  set_pin_credentials = DoorLockFeature.set_pin_credentials,
  unset_pin_credentials = DoorLockFeature.unset_pin_credentials,
  is_rfid_credentials_set = DoorLockFeature.is_rfid_credentials_set,
  set_rfid_credentials = DoorLockFeature.set_rfid_credentials,
  unset_rfid_credentials = DoorLockFeature.unset_rfid_credentials,
  is_finger_credentials_set = DoorLockFeature.is_finger_credentials_set,
  set_finger_credentials = DoorLockFeature.set_finger_credentials,
  unset_finger_credentials = DoorLockFeature.unset_finger_credentials,
  is_logging_set = DoorLockFeature.is_logging_set,
  set_logging = DoorLockFeature.set_logging,
  unset_logging = DoorLockFeature.unset_logging,
  is_week_day_schedules_set = DoorLockFeature.is_week_day_schedules_set,
  set_week_day_schedules = DoorLockFeature.set_week_day_schedules,
  unset_week_day_schedules = DoorLockFeature.unset_week_day_schedules,
  is_door_position_sensor_set = DoorLockFeature.is_door_position_sensor_set,
  set_door_position_sensor = DoorLockFeature.set_door_position_sensor,
  unset_door_position_sensor = DoorLockFeature.unset_door_position_sensor,
  is_face_credentials_set = DoorLockFeature.is_face_credentials_set,
  set_face_credentials = DoorLockFeature.set_face_credentials,
  unset_face_credentials = DoorLockFeature.unset_face_credentials,
  is_credentialsota_set = DoorLockFeature.is_credentialsota_set,
  set_credentialsota = DoorLockFeature.set_credentialsota,
  unset_credentialsota = DoorLockFeature.unset_credentialsota,
  is_users_management_set = DoorLockFeature.is_users_management_set,
  set_users_management = DoorLockFeature.set_users_management,
  unset_users_management = DoorLockFeature.unset_users_management,
  is_notifications_set = DoorLockFeature.is_notifications_set,
  set_notifications = DoorLockFeature.set_notifications,
  unset_notifications = DoorLockFeature.unset_notifications,
  is_year_day_schedules_set = DoorLockFeature.is_year_day_schedules_set,
  set_year_day_schedules = DoorLockFeature.set_year_day_schedules,
  unset_year_day_schedules = DoorLockFeature.unset_year_day_schedules,
  is_holiday_schedules_set = DoorLockFeature.is_holiday_schedules_set,
  set_holiday_schedules = DoorLockFeature.set_holiday_schedules,
  unset_holiday_schedules = DoorLockFeature.unset_holiday_schedules,
}

DoorLockFeature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(DoorLockFeature, new_mt)

return DoorLockFeature

