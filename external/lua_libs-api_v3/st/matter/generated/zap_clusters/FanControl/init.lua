-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local FanControlServerAttributes = require "st.matter.generated.zap_clusters.FanControl.server.attributes"
local FanControlServerCommands = require "st.matter.generated.zap_clusters.FanControl.server.commands"
local FanControlTypes = require "st.matter.generated.zap_clusters.FanControl.types"

--- @class st.matter.generated.zap_clusters.FanControl
--- @alias FanControl
---
--- @field public ID number 0x0202 the ID of this cluster
--- @field public NAME string "FanControl" the name of this cluster
--- @field public attributes st.matter.generated.zap_clusters.FanControlServerAttributes | st.matter.generated.zap_clusters.FanControlClientAttributes
--- @field public commands st.matter.generated.zap_clusters.FanControlServerCommands | st.matter.generated.zap_clusters.FanControlClientCommands
--- @field public types st.matter.generated.zap_clusters.FanControlTypes

local FanControl = {}

FanControl.ID = 0x0202
FanControl.NAME = "FanControl"
FanControl.server = {}
FanControl.client = {}
FanControl.server.attributes = FanControlServerAttributes:set_parent_cluster(FanControl)
FanControl.server.commands = FanControlServerCommands:set_parent_cluster(FanControl)
FanControl.types = FanControlTypes

-- Global Attributes Metadata
local GLOBAL_CLUSTER_REVISION_ATTRIBUTE = 0xFFFD

-- Represent the global attributes
local global_attr_id_map = {
  [GLOBAL_CLUSTER_REVISION_ATTRIBUTE] = {"cluster revision"},
}

--- Find an attribute by id
---
--- @param attr_id number
function FanControl:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "FanMode",
    [0x0001] = "FanModeSequence",
    [0x0002] = "PercentSetting",
    [0x0003] = "PercentCurrent",
    [0x0004] = "SpeedMax",
    [0x0005] = "SpeedSetting",
    [0x0006] = "SpeedCurrent",
    [0x0007] = "RockSupport",
    [0x0008] = "RockSetting",
    [0x0009] = "WindSupport",
    [0x000A] = "WindSetting",
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function FanControl:get_server_command_by_id(command_id)
  local server_id_map = {
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end


-- Attribute Mapping
FanControl.attribute_direction_map = {
  ["FanMode"] = "server",
  ["FanModeSequence"] = "server",
  ["PercentSetting"] = "server",
  ["PercentCurrent"] = "server",
  ["SpeedMax"] = "server",
  ["SpeedSetting"] = "server",
  ["SpeedCurrent"] = "server",
  ["RockSupport"] = "server",
  ["RockSetting"] = "server",
  ["WindSupport"] = "server",
  ["WindSetting"] = "server",
  ["AcceptedCommandList"] = "server",
  ["AttributeList"] = "server",
}

-- Command Mapping
FanControl.command_direction_map = {
}

FanControl.FeatureMap = FanControl.types.FanControlFeature

function FanControl.are_features_supported(feature, feature_map)
  if (FanControl.FeatureMap.bits_are_valid(feature)) then
    return (feature & feature_map) == feature
  end
  return false
end

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = FanControl.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, FanControl.NAME))
  end
  return FanControl[direction].attributes[key]
end
FanControl.attributes = {}
setmetatable(FanControl.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = FanControl.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, FanControl.NAME))
  end
  return FanControl[direction].commands[key] 
end
FanControl.commands = {}
setmetatable(FanControl.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return FanControl.server.events[key]
end
FanControl.events = {}
setmetatable(FanControl.events, event_helper_mt)

setmetatable(FanControl, {__index = cluster_base})  

return FanControl

