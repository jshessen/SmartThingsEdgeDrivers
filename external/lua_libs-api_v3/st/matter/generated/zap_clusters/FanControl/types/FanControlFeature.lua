-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.FanControl.types.FanControlFeature
--- @alias FanControlFeature
---
--- @field public MULTI_SPEED number 1
--- @field public AUTO number 2
--- @field public ROCKING number 4
--- @field public WIND number 8

local FanControlFeature = {}
local new_mt = UintABC.new_mt({NAME = "FanControlFeature", ID = data_types.name_to_id_map["Uint32"]}, 4)

FanControlFeature.BASE_MASK = 0xFFFF
FanControlFeature.MULTI_SPEED = 0x0001
FanControlFeature.AUTO = 0x0002
FanControlFeature.ROCKING = 0x0004
FanControlFeature.WIND = 0x0008

FanControlFeature.mask_fields = {
  BASE_MASK = 0xFFFF,
  MULTI_SPEED = 0x0001,
  AUTO = 0x0002,
  ROCKING = 0x0004,
  WIND = 0x0008,
}

--- @function FanControlFeature:is_multi_speed_set
--- @return boolean True if the value of MULTI_SPEED is non-zero
FanControlFeature.is_multi_speed_set = function(self)
  return (self.value & self.MULTI_SPEED) ~= 0
end
 
--- @function FanControlFeature:set_multi_speed
--- Set the value of the bit in the MULTI_SPEED field to 1
FanControlFeature.set_multi_speed = function(self)
  if self.value ~= nil then
    self.value = self.value | self.MULTI_SPEED
  else
    self.value = self.MULTI_SPEED
  end
end

--- @function FanControlFeature:unset_multi_speed
--- Set the value of the bits in the MULTI_SPEED field to 0
FanControlFeature.unset_multi_speed = function(self)
  self.value = self.value & (~self.MULTI_SPEED & self.BASE_MASK)
end
--- @function FanControlFeature:is_auto_set
--- @return boolean True if the value of AUTO is non-zero
FanControlFeature.is_auto_set = function(self)
  return (self.value & self.AUTO) ~= 0
end
 
--- @function FanControlFeature:set_auto
--- Set the value of the bit in the AUTO field to 1
FanControlFeature.set_auto = function(self)
  if self.value ~= nil then
    self.value = self.value | self.AUTO
  else
    self.value = self.AUTO
  end
end

--- @function FanControlFeature:unset_auto
--- Set the value of the bits in the AUTO field to 0
FanControlFeature.unset_auto = function(self)
  self.value = self.value & (~self.AUTO & self.BASE_MASK)
end
--- @function FanControlFeature:is_rocking_set
--- @return boolean True if the value of ROCKING is non-zero
FanControlFeature.is_rocking_set = function(self)
  return (self.value & self.ROCKING) ~= 0
end
 
--- @function FanControlFeature:set_rocking
--- Set the value of the bit in the ROCKING field to 1
FanControlFeature.set_rocking = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ROCKING
  else
    self.value = self.ROCKING
  end
end

--- @function FanControlFeature:unset_rocking
--- Set the value of the bits in the ROCKING field to 0
FanControlFeature.unset_rocking = function(self)
  self.value = self.value & (~self.ROCKING & self.BASE_MASK)
end
--- @function FanControlFeature:is_wind_set
--- @return boolean True if the value of WIND is non-zero
FanControlFeature.is_wind_set = function(self)
  return (self.value & self.WIND) ~= 0
end
 
--- @function FanControlFeature:set_wind
--- Set the value of the bit in the WIND field to 1
FanControlFeature.set_wind = function(self)
  if self.value ~= nil then
    self.value = self.value | self.WIND
  else
    self.value = self.WIND
  end
end

--- @function FanControlFeature:unset_wind
--- Set the value of the bits in the WIND field to 0
FanControlFeature.unset_wind = function(self)
  self.value = self.value & (~self.WIND & self.BASE_MASK)
end

function FanControlFeature.bits_are_valid(feature)
  local max = 
    FanControlFeature.MULTI_SPEED | 
    FanControlFeature.AUTO | 
    FanControlFeature.ROCKING | 
    FanControlFeature.WIND
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

FanControlFeature.mask_methods = {
  is_multi_speed_set = FanControlFeature.is_multi_speed_set,
  set_multi_speed = FanControlFeature.set_multi_speed,
  unset_multi_speed = FanControlFeature.unset_multi_speed,
  is_auto_set = FanControlFeature.is_auto_set,
  set_auto = FanControlFeature.set_auto,
  unset_auto = FanControlFeature.unset_auto,
  is_rocking_set = FanControlFeature.is_rocking_set,
  set_rocking = FanControlFeature.set_rocking,
  unset_rocking = FanControlFeature.unset_rocking,
  is_wind_set = FanControlFeature.is_wind_set,
  set_wind = FanControlFeature.set_wind,
  unset_wind = FanControlFeature.unset_wind,
}

FanControlFeature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(FanControlFeature, new_mt)

return FanControlFeature

