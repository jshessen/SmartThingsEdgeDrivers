-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.FanControl.types.RockSupportMask
--- @alias RockSupportMask
---
--- @field public ROCK_LEFT_RIGHT number 1
--- @field public ROCK_UP_DOWN number 2
--- @field public ROCK_ROUND number 4

local RockSupportMask = {}
local new_mt = UintABC.new_mt({NAME = "RockSupportMask", ID = data_types.name_to_id_map["Uint8"]}, 1)

RockSupportMask.BASE_MASK = 0xFFFF
RockSupportMask.ROCK_LEFT_RIGHT = 0x0001
RockSupportMask.ROCK_UP_DOWN = 0x0002
RockSupportMask.ROCK_ROUND = 0x0004

RockSupportMask.mask_fields = {
  BASE_MASK = 0xFFFF,
  ROCK_LEFT_RIGHT = 0x0001,
  ROCK_UP_DOWN = 0x0002,
  ROCK_ROUND = 0x0004,
}

--- @function RockSupportMask:is_rock_left_right_set
--- @return boolean True if the value of ROCK_LEFT_RIGHT is non-zero
RockSupportMask.is_rock_left_right_set = function(self)
  return (self.value & self.ROCK_LEFT_RIGHT) ~= 0
end
 
--- @function RockSupportMask:set_rock_left_right
--- Set the value of the bit in the ROCK_LEFT_RIGHT field to 1
RockSupportMask.set_rock_left_right = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ROCK_LEFT_RIGHT
  else
    self.value = self.ROCK_LEFT_RIGHT
  end
end

--- @function RockSupportMask:unset_rock_left_right
--- Set the value of the bits in the ROCK_LEFT_RIGHT field to 0
RockSupportMask.unset_rock_left_right = function(self)
  self.value = self.value & (~self.ROCK_LEFT_RIGHT & self.BASE_MASK)
end
--- @function RockSupportMask:is_rock_up_down_set
--- @return boolean True if the value of ROCK_UP_DOWN is non-zero
RockSupportMask.is_rock_up_down_set = function(self)
  return (self.value & self.ROCK_UP_DOWN) ~= 0
end
 
--- @function RockSupportMask:set_rock_up_down
--- Set the value of the bit in the ROCK_UP_DOWN field to 1
RockSupportMask.set_rock_up_down = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ROCK_UP_DOWN
  else
    self.value = self.ROCK_UP_DOWN
  end
end

--- @function RockSupportMask:unset_rock_up_down
--- Set the value of the bits in the ROCK_UP_DOWN field to 0
RockSupportMask.unset_rock_up_down = function(self)
  self.value = self.value & (~self.ROCK_UP_DOWN & self.BASE_MASK)
end
--- @function RockSupportMask:is_rock_round_set
--- @return boolean True if the value of ROCK_ROUND is non-zero
RockSupportMask.is_rock_round_set = function(self)
  return (self.value & self.ROCK_ROUND) ~= 0
end
 
--- @function RockSupportMask:set_rock_round
--- Set the value of the bit in the ROCK_ROUND field to 1
RockSupportMask.set_rock_round = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ROCK_ROUND
  else
    self.value = self.ROCK_ROUND
  end
end

--- @function RockSupportMask:unset_rock_round
--- Set the value of the bits in the ROCK_ROUND field to 0
RockSupportMask.unset_rock_round = function(self)
  self.value = self.value & (~self.ROCK_ROUND & self.BASE_MASK)
end


RockSupportMask.mask_methods = {
  is_rock_left_right_set = RockSupportMask.is_rock_left_right_set,
  set_rock_left_right = RockSupportMask.set_rock_left_right,
  unset_rock_left_right = RockSupportMask.unset_rock_left_right,
  is_rock_up_down_set = RockSupportMask.is_rock_up_down_set,
  set_rock_up_down = RockSupportMask.set_rock_up_down,
  unset_rock_up_down = RockSupportMask.unset_rock_up_down,
  is_rock_round_set = RockSupportMask.is_rock_round_set,
  set_rock_round = RockSupportMask.set_rock_round,
  unset_rock_round = RockSupportMask.unset_rock_round,
}

RockSupportMask.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(RockSupportMask, new_mt)

return RockSupportMask

