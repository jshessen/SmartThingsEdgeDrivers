-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.FanControl.types.WindSettingMask
--- @alias WindSettingMask
---
--- @field public SLEEP_WIND number 1
--- @field public NATURAL_WIND number 2

local WindSettingMask = {}
local new_mt = UintABC.new_mt({NAME = "WindSettingMask", ID = data_types.name_to_id_map["Uint8"]}, 1)

WindSettingMask.BASE_MASK = 0xFFFF
WindSettingMask.SLEEP_WIND = 0x0001
WindSettingMask.NATURAL_WIND = 0x0002

WindSettingMask.mask_fields = {
  BASE_MASK = 0xFFFF,
  SLEEP_WIND = 0x0001,
  NATURAL_WIND = 0x0002,
}

--- @function WindSettingMask:is_sleep_wind_set
--- @return boolean True if the value of SLEEP_WIND is non-zero
WindSettingMask.is_sleep_wind_set = function(self)
  return (self.value & self.SLEEP_WIND) ~= 0
end
 
--- @function WindSettingMask:set_sleep_wind
--- Set the value of the bit in the SLEEP_WIND field to 1
WindSettingMask.set_sleep_wind = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SLEEP_WIND
  else
    self.value = self.SLEEP_WIND
  end
end

--- @function WindSettingMask:unset_sleep_wind
--- Set the value of the bits in the SLEEP_WIND field to 0
WindSettingMask.unset_sleep_wind = function(self)
  self.value = self.value & (~self.SLEEP_WIND & self.BASE_MASK)
end
--- @function WindSettingMask:is_natural_wind_set
--- @return boolean True if the value of NATURAL_WIND is non-zero
WindSettingMask.is_natural_wind_set = function(self)
  return (self.value & self.NATURAL_WIND) ~= 0
end
 
--- @function WindSettingMask:set_natural_wind
--- Set the value of the bit in the NATURAL_WIND field to 1
WindSettingMask.set_natural_wind = function(self)
  if self.value ~= nil then
    self.value = self.value | self.NATURAL_WIND
  else
    self.value = self.NATURAL_WIND
  end
end

--- @function WindSettingMask:unset_natural_wind
--- Set the value of the bits in the NATURAL_WIND field to 0
WindSettingMask.unset_natural_wind = function(self)
  self.value = self.value & (~self.NATURAL_WIND & self.BASE_MASK)
end


WindSettingMask.mask_methods = {
  is_sleep_wind_set = WindSettingMask.is_sleep_wind_set,
  set_sleep_wind = WindSettingMask.set_sleep_wind,
  unset_sleep_wind = WindSettingMask.unset_sleep_wind,
  is_natural_wind_set = WindSettingMask.is_natural_wind_set,
  set_natural_wind = WindSettingMask.set_natural_wind,
  unset_natural_wind = WindSettingMask.unset_natural_wind,
}

WindSettingMask.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(WindSettingMask, new_mt)

return WindSettingMask

