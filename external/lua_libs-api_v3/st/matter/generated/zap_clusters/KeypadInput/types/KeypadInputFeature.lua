-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.KeypadInput.types.KeypadInputFeature
--- @alias KeypadInputFeature
---
--- @field public NAVIGATION_KEY_CODES number 1
--- @field public LOCATION_KEYS number 2
--- @field public NUMBER_KEYS number 4

local KeypadInputFeature = {}
local new_mt = UintABC.new_mt({NAME = "KeypadInputFeature", ID = data_types.name_to_id_map["Uint32"]}, 4)

KeypadInputFeature.BASE_MASK = 0xFFFF
KeypadInputFeature.NAVIGATION_KEY_CODES = 0x0001
KeypadInputFeature.LOCATION_KEYS = 0x0002
KeypadInputFeature.NUMBER_KEYS = 0x0004

KeypadInputFeature.mask_fields = {
  BASE_MASK = 0xFFFF,
  NAVIGATION_KEY_CODES = 0x0001,
  LOCATION_KEYS = 0x0002,
  NUMBER_KEYS = 0x0004,
}

--- @function KeypadInputFeature:is_navigation_key_codes_set
--- @return boolean True if the value of NAVIGATION_KEY_CODES is non-zero
KeypadInputFeature.is_navigation_key_codes_set = function(self)
  return (self.value & self.NAVIGATION_KEY_CODES) ~= 0
end
 
--- @function KeypadInputFeature:set_navigation_key_codes
--- Set the value of the bit in the NAVIGATION_KEY_CODES field to 1
KeypadInputFeature.set_navigation_key_codes = function(self)
  if self.value ~= nil then
    self.value = self.value | self.NAVIGATION_KEY_CODES
  else
    self.value = self.NAVIGATION_KEY_CODES
  end
end

--- @function KeypadInputFeature:unset_navigation_key_codes
--- Set the value of the bits in the NAVIGATION_KEY_CODES field to 0
KeypadInputFeature.unset_navigation_key_codes = function(self)
  self.value = self.value & (~self.NAVIGATION_KEY_CODES & self.BASE_MASK)
end
--- @function KeypadInputFeature:is_location_keys_set
--- @return boolean True if the value of LOCATION_KEYS is non-zero
KeypadInputFeature.is_location_keys_set = function(self)
  return (self.value & self.LOCATION_KEYS) ~= 0
end
 
--- @function KeypadInputFeature:set_location_keys
--- Set the value of the bit in the LOCATION_KEYS field to 1
KeypadInputFeature.set_location_keys = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LOCATION_KEYS
  else
    self.value = self.LOCATION_KEYS
  end
end

--- @function KeypadInputFeature:unset_location_keys
--- Set the value of the bits in the LOCATION_KEYS field to 0
KeypadInputFeature.unset_location_keys = function(self)
  self.value = self.value & (~self.LOCATION_KEYS & self.BASE_MASK)
end
--- @function KeypadInputFeature:is_number_keys_set
--- @return boolean True if the value of NUMBER_KEYS is non-zero
KeypadInputFeature.is_number_keys_set = function(self)
  return (self.value & self.NUMBER_KEYS) ~= 0
end
 
--- @function KeypadInputFeature:set_number_keys
--- Set the value of the bit in the NUMBER_KEYS field to 1
KeypadInputFeature.set_number_keys = function(self)
  if self.value ~= nil then
    self.value = self.value | self.NUMBER_KEYS
  else
    self.value = self.NUMBER_KEYS
  end
end

--- @function KeypadInputFeature:unset_number_keys
--- Set the value of the bits in the NUMBER_KEYS field to 0
KeypadInputFeature.unset_number_keys = function(self)
  self.value = self.value & (~self.NUMBER_KEYS & self.BASE_MASK)
end

function KeypadInputFeature.bits_are_valid(feature)
  local max = 
    KeypadInputFeature.NAVIGATION_KEY_CODES | 
    KeypadInputFeature.LOCATION_KEYS | 
    KeypadInputFeature.NUMBER_KEYS
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

KeypadInputFeature.mask_methods = {
  is_navigation_key_codes_set = KeypadInputFeature.is_navigation_key_codes_set,
  set_navigation_key_codes = KeypadInputFeature.set_navigation_key_codes,
  unset_navigation_key_codes = KeypadInputFeature.unset_navigation_key_codes,
  is_location_keys_set = KeypadInputFeature.is_location_keys_set,
  set_location_keys = KeypadInputFeature.set_location_keys,
  unset_location_keys = KeypadInputFeature.unset_location_keys,
  is_number_keys_set = KeypadInputFeature.is_number_keys_set,
  set_number_keys = KeypadInputFeature.set_number_keys,
  unset_number_keys = KeypadInputFeature.unset_number_keys,
}

KeypadInputFeature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(KeypadInputFeature, new_mt)

return KeypadInputFeature

