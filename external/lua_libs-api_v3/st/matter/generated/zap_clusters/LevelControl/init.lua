-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local LevelControlServerAttributes = require "st.matter.generated.zap_clusters.LevelControl.server.attributes"
local LevelControlServerCommands = require "st.matter.generated.zap_clusters.LevelControl.server.commands"
local LevelControlTypes = require "st.matter.generated.zap_clusters.LevelControl.types"

--- @class st.matter.generated.zap_clusters.LevelControl
--- @alias LevelControl
---
--- @field public ID number 0x0008 the ID of this cluster
--- @field public NAME string "LevelControl" the name of this cluster
--- @field public attributes st.matter.generated.zap_clusters.LevelControlServerAttributes | st.matter.generated.zap_clusters.LevelControlClientAttributes
--- @field public commands st.matter.generated.zap_clusters.LevelControlServerCommands | st.matter.generated.zap_clusters.LevelControlClientCommands
--- @field public types st.matter.generated.zap_clusters.LevelControlTypes

local LevelControl = {}

LevelControl.ID = 0x0008
LevelControl.NAME = "LevelControl"
LevelControl.server = {}
LevelControl.client = {}
LevelControl.server.attributes = LevelControlServerAttributes:set_parent_cluster(LevelControl)
LevelControl.server.commands = LevelControlServerCommands:set_parent_cluster(LevelControl)
LevelControl.types = LevelControlTypes

-- Global Attributes Metadata
local GLOBAL_CLUSTER_REVISION_ATTRIBUTE = 0xFFFD

-- Represent the global attributes
local global_attr_id_map = {
  [GLOBAL_CLUSTER_REVISION_ATTRIBUTE] = {"cluster revision"},
}

--- Find an attribute by id
---
--- @param attr_id number
function LevelControl:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "CurrentLevel",
    [0x0001] = "RemainingTime",
    [0x0002] = "MinLevel",
    [0x0003] = "MaxLevel",
    [0x0004] = "CurrentFrequency",
    [0x0005] = "MinFrequency",
    [0x0006] = "MaxFrequency",
    [0x000F] = "Options",
    [0x0010] = "OnOffTransitionTime",
    [0x0011] = "OnLevel",
    [0x0012] = "OnTransitionTime",
    [0x0013] = "OffTransitionTime",
    [0x0014] = "DefaultMoveRate",
    [0x4000] = "StartUpCurrentLevel",
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function LevelControl:get_server_command_by_id(command_id)
  local server_id_map = {
    [0x0000] = "MoveToLevel",
    [0x0001] = "Move",
    [0x0002] = "Step",
    [0x0003] = "Stop",
    [0x0004] = "MoveToLevelWithOnOff",
    [0x0005] = "MoveWithOnOff",
    [0x0006] = "StepWithOnOff",
    [0x0007] = "StopWithOnOff",
    [0x0008] = "MoveToClosestFrequency",
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end


-- Attribute Mapping
LevelControl.attribute_direction_map = {
  ["CurrentLevel"] = "server",
  ["RemainingTime"] = "server",
  ["MinLevel"] = "server",
  ["MaxLevel"] = "server",
  ["CurrentFrequency"] = "server",
  ["MinFrequency"] = "server",
  ["MaxFrequency"] = "server",
  ["Options"] = "server",
  ["OnOffTransitionTime"] = "server",
  ["OnLevel"] = "server",
  ["OnTransitionTime"] = "server",
  ["OffTransitionTime"] = "server",
  ["DefaultMoveRate"] = "server",
  ["StartUpCurrentLevel"] = "server",
  ["AcceptedCommandList"] = "server",
  ["AttributeList"] = "server",
}

-- Command Mapping
LevelControl.command_direction_map = {
  ["MoveToLevel"] = "server",
  ["Move"] = "server",
  ["Step"] = "server",
  ["Stop"] = "server",
  ["MoveToLevelWithOnOff"] = "server",
  ["MoveWithOnOff"] = "server",
  ["StepWithOnOff"] = "server",
  ["StopWithOnOff"] = "server",
  ["MoveToClosestFrequency"] = "server",
}

LevelControl.FeatureMap = LevelControl.types.LevelControlFeature

function LevelControl.are_features_supported(feature, feature_map)
  if (LevelControl.FeatureMap.bits_are_valid(feature)) then
    return (feature & feature_map) == feature
  end
  return false
end

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = LevelControl.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, LevelControl.NAME))
  end
  return LevelControl[direction].attributes[key]
end
LevelControl.attributes = {}
setmetatable(LevelControl.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = LevelControl.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, LevelControl.NAME))
  end
  return LevelControl[direction].commands[key] 
end
LevelControl.commands = {}
setmetatable(LevelControl.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return LevelControl.server.events[key]
end
LevelControl.events = {}
setmetatable(LevelControl.events, event_helper_mt)

setmetatable(LevelControl, {__index = cluster_base})  

return LevelControl

