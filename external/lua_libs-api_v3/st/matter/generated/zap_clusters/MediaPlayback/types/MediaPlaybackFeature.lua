-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.MediaPlayback.types.MediaPlaybackFeature
--- @alias MediaPlaybackFeature
---
--- @field public ADVANCED_SEEK number 1
--- @field public VARIABLE_SPEED number 2

local MediaPlaybackFeature = {}
local new_mt = UintABC.new_mt({NAME = "MediaPlaybackFeature", ID = data_types.name_to_id_map["Uint32"]}, 4)

MediaPlaybackFeature.BASE_MASK = 0xFFFF
MediaPlaybackFeature.ADVANCED_SEEK = 0x0001
MediaPlaybackFeature.VARIABLE_SPEED = 0x0002

MediaPlaybackFeature.mask_fields = {
  BASE_MASK = 0xFFFF,
  ADVANCED_SEEK = 0x0001,
  VARIABLE_SPEED = 0x0002,
}

--- @function MediaPlaybackFeature:is_advanced_seek_set
--- @return boolean True if the value of ADVANCED_SEEK is non-zero
MediaPlaybackFeature.is_advanced_seek_set = function(self)
  return (self.value & self.ADVANCED_SEEK) ~= 0
end
 
--- @function MediaPlaybackFeature:set_advanced_seek
--- Set the value of the bit in the ADVANCED_SEEK field to 1
MediaPlaybackFeature.set_advanced_seek = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ADVANCED_SEEK
  else
    self.value = self.ADVANCED_SEEK
  end
end

--- @function MediaPlaybackFeature:unset_advanced_seek
--- Set the value of the bits in the ADVANCED_SEEK field to 0
MediaPlaybackFeature.unset_advanced_seek = function(self)
  self.value = self.value & (~self.ADVANCED_SEEK & self.BASE_MASK)
end
--- @function MediaPlaybackFeature:is_variable_speed_set
--- @return boolean True if the value of VARIABLE_SPEED is non-zero
MediaPlaybackFeature.is_variable_speed_set = function(self)
  return (self.value & self.VARIABLE_SPEED) ~= 0
end
 
--- @function MediaPlaybackFeature:set_variable_speed
--- Set the value of the bit in the VARIABLE_SPEED field to 1
MediaPlaybackFeature.set_variable_speed = function(self)
  if self.value ~= nil then
    self.value = self.value | self.VARIABLE_SPEED
  else
    self.value = self.VARIABLE_SPEED
  end
end

--- @function MediaPlaybackFeature:unset_variable_speed
--- Set the value of the bits in the VARIABLE_SPEED field to 0
MediaPlaybackFeature.unset_variable_speed = function(self)
  self.value = self.value & (~self.VARIABLE_SPEED & self.BASE_MASK)
end

function MediaPlaybackFeature.bits_are_valid(feature)
  local max = 
    MediaPlaybackFeature.ADVANCED_SEEK | 
    MediaPlaybackFeature.VARIABLE_SPEED
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

MediaPlaybackFeature.mask_methods = {
  is_advanced_seek_set = MediaPlaybackFeature.is_advanced_seek_set,
  set_advanced_seek = MediaPlaybackFeature.set_advanced_seek,
  unset_advanced_seek = MediaPlaybackFeature.unset_advanced_seek,
  is_variable_speed_set = MediaPlaybackFeature.is_variable_speed_set,
  set_variable_speed = MediaPlaybackFeature.set_variable_speed,
  unset_variable_speed = MediaPlaybackFeature.unset_variable_speed,
}

MediaPlaybackFeature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(MediaPlaybackFeature, new_mt)

return MediaPlaybackFeature

