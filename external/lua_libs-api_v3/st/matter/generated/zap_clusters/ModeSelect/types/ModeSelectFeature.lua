-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.ModeSelect.types.ModeSelectFeature
--- @alias ModeSelectFeature
---
--- @field public DEPONOFF number 1

local ModeSelectFeature = {}
local new_mt = UintABC.new_mt({NAME = "ModeSelectFeature", ID = data_types.name_to_id_map["Uint32"]}, 4)

ModeSelectFeature.BASE_MASK = 0xFFFF
ModeSelectFeature.DEPONOFF = 0x0001

ModeSelectFeature.mask_fields = {
  BASE_MASK = 0xFFFF,
  DEPONOFF = 0x0001,
}

--- @function ModeSelectFeature:is_deponoff_set
--- @return boolean True if the value of DEPONOFF is non-zero
ModeSelectFeature.is_deponoff_set = function(self)
  return (self.value & self.DEPONOFF) ~= 0
end
 
--- @function ModeSelectFeature:set_deponoff
--- Set the value of the bit in the DEPONOFF field to 1
ModeSelectFeature.set_deponoff = function(self)
  if self.value ~= nil then
    self.value = self.value | self.DEPONOFF
  else
    self.value = self.DEPONOFF
  end
end

--- @function ModeSelectFeature:unset_deponoff
--- Set the value of the bits in the DEPONOFF field to 0
ModeSelectFeature.unset_deponoff = function(self)
  self.value = self.value & (~self.DEPONOFF & self.BASE_MASK)
end

function ModeSelectFeature.bits_are_valid(feature)
  local max = 
    ModeSelectFeature.DEPONOFF
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

ModeSelectFeature.mask_methods = {
  is_deponoff_set = ModeSelectFeature.is_deponoff_set,
  set_deponoff = ModeSelectFeature.set_deponoff,
  unset_deponoff = ModeSelectFeature.unset_deponoff,
}

ModeSelectFeature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(ModeSelectFeature, new_mt)

return ModeSelectFeature

