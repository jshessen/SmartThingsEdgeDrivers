-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local OccupancySensingServerAttributes = require "st.matter.generated.zap_clusters.OccupancySensing.server.attributes"
local OccupancySensingServerCommands = require "st.matter.generated.zap_clusters.OccupancySensing.server.commands"
local OccupancySensingTypes = require "st.matter.generated.zap_clusters.OccupancySensing.types"

--- @class st.matter.generated.zap_clusters.OccupancySensing
--- @alias OccupancySensing
---
--- @field public ID number 0x0406 the ID of this cluster
--- @field public NAME string "OccupancySensing" the name of this cluster
--- @field public attributes st.matter.generated.zap_clusters.OccupancySensingServerAttributes | st.matter.generated.zap_clusters.OccupancySensingClientAttributes
--- @field public commands st.matter.generated.zap_clusters.OccupancySensingServerCommands | st.matter.generated.zap_clusters.OccupancySensingClientCommands
--- @field public types st.matter.generated.zap_clusters.OccupancySensingTypes

local OccupancySensing = {}

OccupancySensing.ID = 0x0406
OccupancySensing.NAME = "OccupancySensing"
OccupancySensing.server = {}
OccupancySensing.client = {}
OccupancySensing.server.attributes = OccupancySensingServerAttributes:set_parent_cluster(OccupancySensing)
OccupancySensing.server.commands = OccupancySensingServerCommands:set_parent_cluster(OccupancySensing)
OccupancySensing.types = OccupancySensingTypes

-- Global Attributes Metadata
local GLOBAL_CLUSTER_REVISION_ATTRIBUTE = 0xFFFD

-- Represent the global attributes
local global_attr_id_map = {
  [GLOBAL_CLUSTER_REVISION_ATTRIBUTE] = {"cluster revision"},
}

--- Find an attribute by id
---
--- @param attr_id number
function OccupancySensing:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "Occupancy",
    [0x0001] = "OccupancySensorType",
    [0x0002] = "OccupancySensorTypeBitmap",
    [0x0010] = "PirOccupiedToUnoccupiedDelay",
    [0x0011] = "PirUnoccupiedToOccupiedDelay",
    [0x0012] = "PirUnoccupiedToOccupiedThreshold",
    [0x0020] = "UltrasonicOccupiedToUnoccupiedDelay",
    [0x0021] = "UltrasonicUnoccupiedToOccupiedDelay",
    [0x0022] = "UltrasonicUnoccupiedToOccupiedThreshold",
    [0x0030] = "PhysicalContactOccupiedToUnoccupiedDelay",
    [0x0031] = "PhysicalContactUnoccupiedToOccupiedDelay",
    [0x0032] = "PhysicalContactUnoccupiedToOccupiedThreshold",
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function OccupancySensing:get_server_command_by_id(command_id)
  local server_id_map = {
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end


-- Attribute Mapping
OccupancySensing.attribute_direction_map = {
  ["Occupancy"] = "server",
  ["OccupancySensorType"] = "server",
  ["OccupancySensorTypeBitmap"] = "server",
  ["PirOccupiedToUnoccupiedDelay"] = "server",
  ["PirUnoccupiedToOccupiedDelay"] = "server",
  ["PirUnoccupiedToOccupiedThreshold"] = "server",
  ["UltrasonicOccupiedToUnoccupiedDelay"] = "server",
  ["UltrasonicUnoccupiedToOccupiedDelay"] = "server",
  ["UltrasonicUnoccupiedToOccupiedThreshold"] = "server",
  ["PhysicalContactOccupiedToUnoccupiedDelay"] = "server",
  ["PhysicalContactUnoccupiedToOccupiedDelay"] = "server",
  ["PhysicalContactUnoccupiedToOccupiedThreshold"] = "server",
  ["AcceptedCommandList"] = "server",
  ["AttributeList"] = "server",
}

-- Command Mapping
OccupancySensing.command_direction_map = {
}

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = OccupancySensing.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, OccupancySensing.NAME))
  end
  return OccupancySensing[direction].attributes[key]
end
OccupancySensing.attributes = {}
setmetatable(OccupancySensing.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = OccupancySensing.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, OccupancySensing.NAME))
  end
  return OccupancySensing[direction].commands[key] 
end
OccupancySensing.commands = {}
setmetatable(OccupancySensing.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return OccupancySensing.server.events[key]
end
OccupancySensing.events = {}
setmetatable(OccupancySensing.events, event_helper_mt)

setmetatable(OccupancySensing, {__index = cluster_base})  

return OccupancySensing

