-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local OnOffServerAttributes = require "st.matter.generated.zap_clusters.OnOff.server.attributes"
local OnOffServerCommands = require "st.matter.generated.zap_clusters.OnOff.server.commands"
local OnOffTypes = require "st.matter.generated.zap_clusters.OnOff.types"

--- @class st.matter.generated.zap_clusters.OnOff
--- @alias OnOff
---
--- @field public ID number 0x0006 the ID of this cluster
--- @field public NAME string "OnOff" the name of this cluster
--- @field public attributes st.matter.generated.zap_clusters.OnOffServerAttributes | st.matter.generated.zap_clusters.OnOffClientAttributes
--- @field public commands st.matter.generated.zap_clusters.OnOffServerCommands | st.matter.generated.zap_clusters.OnOffClientCommands
--- @field public types st.matter.generated.zap_clusters.OnOffTypes

local OnOff = {}

OnOff.ID = 0x0006
OnOff.NAME = "OnOff"
OnOff.server = {}
OnOff.client = {}
OnOff.server.attributes = OnOffServerAttributes:set_parent_cluster(OnOff)
OnOff.server.commands = OnOffServerCommands:set_parent_cluster(OnOff)
OnOff.types = OnOffTypes

-- Global Attributes Metadata
local GLOBAL_CLUSTER_REVISION_ATTRIBUTE = 0xFFFD

-- Represent the global attributes
local global_attr_id_map = {
  [GLOBAL_CLUSTER_REVISION_ATTRIBUTE] = {"cluster revision"},
}

--- Find an attribute by id
---
--- @param attr_id number
function OnOff:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "OnOff",
    [0x4000] = "GlobalSceneControl",
    [0x4001] = "OnTime",
    [0x4002] = "OffWaitTime",
    [0x4003] = "StartUpOnOff",
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function OnOff:get_server_command_by_id(command_id)
  local server_id_map = {
    [0x0000] = "Off",
    [0x0001] = "On",
    [0x0002] = "Toggle",
    [0x0040] = "OffWithEffect",
    [0x0041] = "OnWithRecallGlobalScene",
    [0x0042] = "OnWithTimedOff",
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end


-- Attribute Mapping
OnOff.attribute_direction_map = {
  ["OnOff"] = "server",
  ["GlobalSceneControl"] = "server",
  ["OnTime"] = "server",
  ["OffWaitTime"] = "server",
  ["StartUpOnOff"] = "server",
  ["AcceptedCommandList"] = "server",
  ["AttributeList"] = "server",
}

-- Command Mapping
OnOff.command_direction_map = {
  ["Off"] = "server",
  ["On"] = "server",
  ["Toggle"] = "server",
  ["OffWithEffect"] = "server",
  ["OnWithRecallGlobalScene"] = "server",
  ["OnWithTimedOff"] = "server",
}

OnOff.FeatureMap = OnOff.types.OnOffFeature

function OnOff.are_features_supported(feature, feature_map)
  if (OnOff.FeatureMap.bits_are_valid(feature)) then
    return (feature & feature_map) == feature
  end
  return false
end

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = OnOff.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, OnOff.NAME))
  end
  return OnOff[direction].attributes[key]
end
OnOff.attributes = {}
setmetatable(OnOff.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = OnOff.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, OnOff.NAME))
  end
  return OnOff[direction].commands[key] 
end
OnOff.commands = {}
setmetatable(OnOff.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return OnOff.server.events[key]
end
OnOff.events = {}
setmetatable(OnOff.events, event_helper_mt)

setmetatable(OnOff, {__index = cluster_base})  

return OnOff

