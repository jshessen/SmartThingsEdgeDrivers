-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.OnOff.types.OnOffFeature
--- @alias OnOffFeature
---
--- @field public LIGHTING number 1

local OnOffFeature = {}
local new_mt = UintABC.new_mt({NAME = "OnOffFeature", ID = data_types.name_to_id_map["Uint32"]}, 4)

OnOffFeature.BASE_MASK = 0xFFFF
OnOffFeature.LIGHTING = 0x0001

OnOffFeature.mask_fields = {
  BASE_MASK = 0xFFFF,
  LIGHTING = 0x0001,
}

--- @function OnOffFeature:is_lighting_set
--- @return boolean True if the value of LIGHTING is non-zero
OnOffFeature.is_lighting_set = function(self)
  return (self.value & self.LIGHTING) ~= 0
end
 
--- @function OnOffFeature:set_lighting
--- Set the value of the bit in the LIGHTING field to 1
OnOffFeature.set_lighting = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LIGHTING
  else
    self.value = self.LIGHTING
  end
end

--- @function OnOffFeature:unset_lighting
--- Set the value of the bits in the LIGHTING field to 0
OnOffFeature.unset_lighting = function(self)
  self.value = self.value & (~self.LIGHTING & self.BASE_MASK)
end

function OnOffFeature.bits_are_valid(feature)
  local max = 
    OnOffFeature.LIGHTING
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

OnOffFeature.mask_methods = {
  is_lighting_set = OnOffFeature.is_lighting_set,
  set_lighting = OnOffFeature.set_lighting,
  unset_lighting = OnOffFeature.unset_lighting,
}

OnOffFeature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(OnOffFeature, new_mt)

return OnOffFeature

