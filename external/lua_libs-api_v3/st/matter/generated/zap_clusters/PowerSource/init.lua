-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local PowerSourceServerAttributes = require "st.matter.generated.zap_clusters.PowerSource.server.attributes"
local PowerSourceServerCommands = require "st.matter.generated.zap_clusters.PowerSource.server.commands"
local PowerSourceTypes = require "st.matter.generated.zap_clusters.PowerSource.types"

--- @class st.matter.generated.zap_clusters.PowerSource
--- @alias PowerSource
---
--- @field public ID number 0x002F the ID of this cluster
--- @field public NAME string "PowerSource" the name of this cluster
--- @field public attributes st.matter.generated.zap_clusters.PowerSourceServerAttributes | st.matter.generated.zap_clusters.PowerSourceClientAttributes
--- @field public commands st.matter.generated.zap_clusters.PowerSourceServerCommands | st.matter.generated.zap_clusters.PowerSourceClientCommands
--- @field public types st.matter.generated.zap_clusters.PowerSourceTypes

local PowerSource = {}

PowerSource.ID = 0x002F
PowerSource.NAME = "PowerSource"
PowerSource.server = {}
PowerSource.client = {}
PowerSource.server.attributes = PowerSourceServerAttributes:set_parent_cluster(PowerSource)
PowerSource.server.commands = PowerSourceServerCommands:set_parent_cluster(PowerSource)
PowerSource.types = PowerSourceTypes

-- Global Attributes Metadata
local GLOBAL_CLUSTER_REVISION_ATTRIBUTE = 0xFFFD

-- Represent the global attributes
local global_attr_id_map = {
  [GLOBAL_CLUSTER_REVISION_ATTRIBUTE] = {"cluster revision"},
}

--- Find an attribute by id
---
--- @param attr_id number
function PowerSource:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "Status",
    [0x0001] = "Order",
    [0x0002] = "Description",
    [0x0003] = "WiredAssessedInputVoltage",
    [0x0004] = "WiredAssessedInputFrequency",
    [0x0005] = "WiredCurrentType",
    [0x0006] = "WiredAssessedCurrent",
    [0x0007] = "WiredNominalVoltage",
    [0x0008] = "WiredMaximumCurrent",
    [0x0009] = "WiredPresent",
    [0x000A] = "ActiveWiredFaults",
    [0x000B] = "BatVoltage",
    [0x000C] = "BatPercentRemaining",
    [0x000D] = "BatTimeRemaining",
    [0x000E] = "BatChargeLevel",
    [0x000F] = "BatReplacementNeeded",
    [0x0010] = "BatReplaceability",
    [0x0011] = "BatPresent",
    [0x0012] = "ActiveBatFaults",
    [0x0013] = "BatReplacementDescription",
    [0x0014] = "BatCommonDesignation",
    [0x0015] = "BatANSIDesignation",
    [0x0016] = "BatIECDesignation",
    [0x0017] = "BatApprovedChemistry",
    [0x0018] = "BatCapacity",
    [0x0019] = "BatQuantity",
    [0x001A] = "BatChargeState",
    [0x001B] = "BatTimeToFullCharge",
    [0x001C] = "BatFunctionalWhileCharging",
    [0x001D] = "BatChargingCurrent",
    [0x001E] = "ActiveBatChargeFaults",
    [0xFFF9] = "AcceptedCommandList",
    [0xFFFB] = "AttributeList",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end

--- Find a server command by id
---
--- @param command_id number
function PowerSource:get_server_command_by_id(command_id)
  local server_id_map = {
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end


-- Attribute Mapping
PowerSource.attribute_direction_map = {
  ["Status"] = "server",
  ["Order"] = "server",
  ["Description"] = "server",
  ["WiredAssessedInputVoltage"] = "server",
  ["WiredAssessedInputFrequency"] = "server",
  ["WiredCurrentType"] = "server",
  ["WiredAssessedCurrent"] = "server",
  ["WiredNominalVoltage"] = "server",
  ["WiredMaximumCurrent"] = "server",
  ["WiredPresent"] = "server",
  ["ActiveWiredFaults"] = "server",
  ["BatVoltage"] = "server",
  ["BatPercentRemaining"] = "server",
  ["BatTimeRemaining"] = "server",
  ["BatChargeLevel"] = "server",
  ["BatReplacementNeeded"] = "server",
  ["BatReplaceability"] = "server",
  ["BatPresent"] = "server",
  ["ActiveBatFaults"] = "server",
  ["BatReplacementDescription"] = "server",
  ["BatCommonDesignation"] = "server",
  ["BatANSIDesignation"] = "server",
  ["BatIECDesignation"] = "server",
  ["BatApprovedChemistry"] = "server",
  ["BatCapacity"] = "server",
  ["BatQuantity"] = "server",
  ["BatChargeState"] = "server",
  ["BatTimeToFullCharge"] = "server",
  ["BatFunctionalWhileCharging"] = "server",
  ["BatChargingCurrent"] = "server",
  ["ActiveBatChargeFaults"] = "server",
  ["AcceptedCommandList"] = "server",
  ["AttributeList"] = "server",
}

-- Command Mapping
PowerSource.command_direction_map = {
}

PowerSource.FeatureMap = PowerSource.types.PowerSourceFeature

function PowerSource.are_features_supported(feature, feature_map)
  if (PowerSource.FeatureMap.bits_are_valid(feature)) then
    return (feature & feature_map) == feature
  end
  return false
end

-- Cluster Completion
local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = PowerSource.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, PowerSource.NAME))
  end
  return PowerSource[direction].attributes[key]
end
PowerSource.attributes = {}
setmetatable(PowerSource.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = PowerSource.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, PowerSource.NAME))
  end
  return PowerSource[direction].commands[key] 
end
PowerSource.commands = {}
setmetatable(PowerSource.commands, command_helper_mt)

local event_helper_mt = {}
event_helper_mt.__index = function(self, key)
  return PowerSource.server.events[key]
end
PowerSource.events = {}
setmetatable(PowerSource.events, event_helper_mt)

setmetatable(PowerSource, {__index = cluster_base})  

return PowerSource

