-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.PowerSource.types.PowerSourceFeature
--- @alias PowerSourceFeature
---
--- @field public WIRED number 1
--- @field public BATTERY number 2
--- @field public RECHARGEABLE number 4
--- @field public REPLACEABLE number 8

local PowerSourceFeature = {}
local new_mt = UintABC.new_mt({NAME = "PowerSourceFeature", ID = data_types.name_to_id_map["Uint32"]}, 4)

PowerSourceFeature.BASE_MASK = 0xFFFF
PowerSourceFeature.WIRED = 0x0001
PowerSourceFeature.BATTERY = 0x0002
PowerSourceFeature.RECHARGEABLE = 0x0004
PowerSourceFeature.REPLACEABLE = 0x0008

PowerSourceFeature.mask_fields = {
  BASE_MASK = 0xFFFF,
  WIRED = 0x0001,
  BATTERY = 0x0002,
  RECHARGEABLE = 0x0004,
  REPLACEABLE = 0x0008,
}

--- @function PowerSourceFeature:is_wired_set
--- @return boolean True if the value of WIRED is non-zero
PowerSourceFeature.is_wired_set = function(self)
  return (self.value & self.WIRED) ~= 0
end
 
--- @function PowerSourceFeature:set_wired
--- Set the value of the bit in the WIRED field to 1
PowerSourceFeature.set_wired = function(self)
  if self.value ~= nil then
    self.value = self.value | self.WIRED
  else
    self.value = self.WIRED
  end
end

--- @function PowerSourceFeature:unset_wired
--- Set the value of the bits in the WIRED field to 0
PowerSourceFeature.unset_wired = function(self)
  self.value = self.value & (~self.WIRED & self.BASE_MASK)
end
--- @function PowerSourceFeature:is_battery_set
--- @return boolean True if the value of BATTERY is non-zero
PowerSourceFeature.is_battery_set = function(self)
  return (self.value & self.BATTERY) ~= 0
end
 
--- @function PowerSourceFeature:set_battery
--- Set the value of the bit in the BATTERY field to 1
PowerSourceFeature.set_battery = function(self)
  if self.value ~= nil then
    self.value = self.value | self.BATTERY
  else
    self.value = self.BATTERY
  end
end

--- @function PowerSourceFeature:unset_battery
--- Set the value of the bits in the BATTERY field to 0
PowerSourceFeature.unset_battery = function(self)
  self.value = self.value & (~self.BATTERY & self.BASE_MASK)
end
--- @function PowerSourceFeature:is_rechargeable_set
--- @return boolean True if the value of RECHARGEABLE is non-zero
PowerSourceFeature.is_rechargeable_set = function(self)
  return (self.value & self.RECHARGEABLE) ~= 0
end
 
--- @function PowerSourceFeature:set_rechargeable
--- Set the value of the bit in the RECHARGEABLE field to 1
PowerSourceFeature.set_rechargeable = function(self)
  if self.value ~= nil then
    self.value = self.value | self.RECHARGEABLE
  else
    self.value = self.RECHARGEABLE
  end
end

--- @function PowerSourceFeature:unset_rechargeable
--- Set the value of the bits in the RECHARGEABLE field to 0
PowerSourceFeature.unset_rechargeable = function(self)
  self.value = self.value & (~self.RECHARGEABLE & self.BASE_MASK)
end
--- @function PowerSourceFeature:is_replaceable_set
--- @return boolean True if the value of REPLACEABLE is non-zero
PowerSourceFeature.is_replaceable_set = function(self)
  return (self.value & self.REPLACEABLE) ~= 0
end
 
--- @function PowerSourceFeature:set_replaceable
--- Set the value of the bit in the REPLACEABLE field to 1
PowerSourceFeature.set_replaceable = function(self)
  if self.value ~= nil then
    self.value = self.value | self.REPLACEABLE
  else
    self.value = self.REPLACEABLE
  end
end

--- @function PowerSourceFeature:unset_replaceable
--- Set the value of the bits in the REPLACEABLE field to 0
PowerSourceFeature.unset_replaceable = function(self)
  self.value = self.value & (~self.REPLACEABLE & self.BASE_MASK)
end

function PowerSourceFeature.bits_are_valid(feature)
  local max = 
    PowerSourceFeature.WIRED | 
    PowerSourceFeature.BATTERY | 
    PowerSourceFeature.RECHARGEABLE | 
    PowerSourceFeature.REPLACEABLE
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

PowerSourceFeature.mask_methods = {
  is_wired_set = PowerSourceFeature.is_wired_set,
  set_wired = PowerSourceFeature.set_wired,
  unset_wired = PowerSourceFeature.unset_wired,
  is_battery_set = PowerSourceFeature.is_battery_set,
  set_battery = PowerSourceFeature.set_battery,
  unset_battery = PowerSourceFeature.unset_battery,
  is_rechargeable_set = PowerSourceFeature.is_rechargeable_set,
  set_rechargeable = PowerSourceFeature.set_rechargeable,
  unset_rechargeable = PowerSourceFeature.unset_rechargeable,
  is_replaceable_set = PowerSourceFeature.is_replaceable_set,
  set_replaceable = PowerSourceFeature.set_replaceable,
  unset_replaceable = PowerSourceFeature.unset_replaceable,
}

PowerSourceFeature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(PowerSourceFeature, new_mt)

return PowerSourceFeature

