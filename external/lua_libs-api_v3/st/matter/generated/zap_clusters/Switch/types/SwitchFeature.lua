-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.Switch.types.SwitchFeature
--- @alias SwitchFeature
---
--- @field public LATCHING_SWITCH number 1
--- @field public MOMENTARY_SWITCH number 2
--- @field public MOMENTARY_SWITCH_RELEASE number 4
--- @field public MOMENTARY_SWITCH_LONG_PRESS number 8
--- @field public MOMENTARY_SWITCH_MULTI_PRESS number 16

local SwitchFeature = {}
local new_mt = UintABC.new_mt({NAME = "SwitchFeature", ID = data_types.name_to_id_map["Uint32"]}, 4)

SwitchFeature.BASE_MASK = 0xFFFF
SwitchFeature.LATCHING_SWITCH = 0x0001
SwitchFeature.MOMENTARY_SWITCH = 0x0002
SwitchFeature.MOMENTARY_SWITCH_RELEASE = 0x0004
SwitchFeature.MOMENTARY_SWITCH_LONG_PRESS = 0x0008
SwitchFeature.MOMENTARY_SWITCH_MULTI_PRESS = 0x0010

SwitchFeature.mask_fields = {
  BASE_MASK = 0xFFFF,
  LATCHING_SWITCH = 0x0001,
  MOMENTARY_SWITCH = 0x0002,
  MOMENTARY_SWITCH_RELEASE = 0x0004,
  MOMENTARY_SWITCH_LONG_PRESS = 0x0008,
  MOMENTARY_SWITCH_MULTI_PRESS = 0x0010,
}

--- @function SwitchFeature:is_latching_switch_set
--- @return boolean True if the value of LATCHING_SWITCH is non-zero
SwitchFeature.is_latching_switch_set = function(self)
  return (self.value & self.LATCHING_SWITCH) ~= 0
end
 
--- @function SwitchFeature:set_latching_switch
--- Set the value of the bit in the LATCHING_SWITCH field to 1
SwitchFeature.set_latching_switch = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LATCHING_SWITCH
  else
    self.value = self.LATCHING_SWITCH
  end
end

--- @function SwitchFeature:unset_latching_switch
--- Set the value of the bits in the LATCHING_SWITCH field to 0
SwitchFeature.unset_latching_switch = function(self)
  self.value = self.value & (~self.LATCHING_SWITCH & self.BASE_MASK)
end
--- @function SwitchFeature:is_momentary_switch_set
--- @return boolean True if the value of MOMENTARY_SWITCH is non-zero
SwitchFeature.is_momentary_switch_set = function(self)
  return (self.value & self.MOMENTARY_SWITCH) ~= 0
end
 
--- @function SwitchFeature:set_momentary_switch
--- Set the value of the bit in the MOMENTARY_SWITCH field to 1
SwitchFeature.set_momentary_switch = function(self)
  if self.value ~= nil then
    self.value = self.value | self.MOMENTARY_SWITCH
  else
    self.value = self.MOMENTARY_SWITCH
  end
end

--- @function SwitchFeature:unset_momentary_switch
--- Set the value of the bits in the MOMENTARY_SWITCH field to 0
SwitchFeature.unset_momentary_switch = function(self)
  self.value = self.value & (~self.MOMENTARY_SWITCH & self.BASE_MASK)
end
--- @function SwitchFeature:is_momentary_switch_release_set
--- @return boolean True if the value of MOMENTARY_SWITCH_RELEASE is non-zero
SwitchFeature.is_momentary_switch_release_set = function(self)
  return (self.value & self.MOMENTARY_SWITCH_RELEASE) ~= 0
end
 
--- @function SwitchFeature:set_momentary_switch_release
--- Set the value of the bit in the MOMENTARY_SWITCH_RELEASE field to 1
SwitchFeature.set_momentary_switch_release = function(self)
  if self.value ~= nil then
    self.value = self.value | self.MOMENTARY_SWITCH_RELEASE
  else
    self.value = self.MOMENTARY_SWITCH_RELEASE
  end
end

--- @function SwitchFeature:unset_momentary_switch_release
--- Set the value of the bits in the MOMENTARY_SWITCH_RELEASE field to 0
SwitchFeature.unset_momentary_switch_release = function(self)
  self.value = self.value & (~self.MOMENTARY_SWITCH_RELEASE & self.BASE_MASK)
end
--- @function SwitchFeature:is_momentary_switch_long_press_set
--- @return boolean True if the value of MOMENTARY_SWITCH_LONG_PRESS is non-zero
SwitchFeature.is_momentary_switch_long_press_set = function(self)
  return (self.value & self.MOMENTARY_SWITCH_LONG_PRESS) ~= 0
end
 
--- @function SwitchFeature:set_momentary_switch_long_press
--- Set the value of the bit in the MOMENTARY_SWITCH_LONG_PRESS field to 1
SwitchFeature.set_momentary_switch_long_press = function(self)
  if self.value ~= nil then
    self.value = self.value | self.MOMENTARY_SWITCH_LONG_PRESS
  else
    self.value = self.MOMENTARY_SWITCH_LONG_PRESS
  end
end

--- @function SwitchFeature:unset_momentary_switch_long_press
--- Set the value of the bits in the MOMENTARY_SWITCH_LONG_PRESS field to 0
SwitchFeature.unset_momentary_switch_long_press = function(self)
  self.value = self.value & (~self.MOMENTARY_SWITCH_LONG_PRESS & self.BASE_MASK)
end
--- @function SwitchFeature:is_momentary_switch_multi_press_set
--- @return boolean True if the value of MOMENTARY_SWITCH_MULTI_PRESS is non-zero
SwitchFeature.is_momentary_switch_multi_press_set = function(self)
  return (self.value & self.MOMENTARY_SWITCH_MULTI_PRESS) ~= 0
end
 
--- @function SwitchFeature:set_momentary_switch_multi_press
--- Set the value of the bit in the MOMENTARY_SWITCH_MULTI_PRESS field to 1
SwitchFeature.set_momentary_switch_multi_press = function(self)
  if self.value ~= nil then
    self.value = self.value | self.MOMENTARY_SWITCH_MULTI_PRESS
  else
    self.value = self.MOMENTARY_SWITCH_MULTI_PRESS
  end
end

--- @function SwitchFeature:unset_momentary_switch_multi_press
--- Set the value of the bits in the MOMENTARY_SWITCH_MULTI_PRESS field to 0
SwitchFeature.unset_momentary_switch_multi_press = function(self)
  self.value = self.value & (~self.MOMENTARY_SWITCH_MULTI_PRESS & self.BASE_MASK)
end

function SwitchFeature.bits_are_valid(feature)
  local max = 
    SwitchFeature.LATCHING_SWITCH | 
    SwitchFeature.MOMENTARY_SWITCH | 
    SwitchFeature.MOMENTARY_SWITCH_RELEASE | 
    SwitchFeature.MOMENTARY_SWITCH_LONG_PRESS | 
    SwitchFeature.MOMENTARY_SWITCH_MULTI_PRESS
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

SwitchFeature.mask_methods = {
  is_latching_switch_set = SwitchFeature.is_latching_switch_set,
  set_latching_switch = SwitchFeature.set_latching_switch,
  unset_latching_switch = SwitchFeature.unset_latching_switch,
  is_momentary_switch_set = SwitchFeature.is_momentary_switch_set,
  set_momentary_switch = SwitchFeature.set_momentary_switch,
  unset_momentary_switch = SwitchFeature.unset_momentary_switch,
  is_momentary_switch_release_set = SwitchFeature.is_momentary_switch_release_set,
  set_momentary_switch_release = SwitchFeature.set_momentary_switch_release,
  unset_momentary_switch_release = SwitchFeature.unset_momentary_switch_release,
  is_momentary_switch_long_press_set = SwitchFeature.is_momentary_switch_long_press_set,
  set_momentary_switch_long_press = SwitchFeature.set_momentary_switch_long_press,
  unset_momentary_switch_long_press = SwitchFeature.unset_momentary_switch_long_press,
  is_momentary_switch_multi_press_set = SwitchFeature.is_momentary_switch_multi_press_set,
  set_momentary_switch_multi_press = SwitchFeature.set_momentary_switch_multi_press,
  unset_momentary_switch_multi_press = SwitchFeature.unset_momentary_switch_multi_press,
}

SwitchFeature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(SwitchFeature, new_mt)

return SwitchFeature

