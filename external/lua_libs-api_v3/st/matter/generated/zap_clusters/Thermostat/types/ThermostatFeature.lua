-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.Thermostat.types.ThermostatFeature
--- @alias ThermostatFeature
---
--- @field public HEATING number 1
--- @field public COOLING number 2
--- @field public OCCUPANCY number 4
--- @field public SCHEDULE number 8
--- @field public SETBACK number 16
--- @field public AUTOMODE number 32

local ThermostatFeature = {}
local new_mt = UintABC.new_mt({NAME = "ThermostatFeature", ID = data_types.name_to_id_map["Uint32"]}, 4)

ThermostatFeature.BASE_MASK = 0xFFFF
ThermostatFeature.HEATING = 0x0001
ThermostatFeature.COOLING = 0x0002
ThermostatFeature.OCCUPANCY = 0x0004
ThermostatFeature.SCHEDULE = 0x0008
ThermostatFeature.SETBACK = 0x0010
ThermostatFeature.AUTOMODE = 0x0020

ThermostatFeature.mask_fields = {
  BASE_MASK = 0xFFFF,
  HEATING = 0x0001,
  COOLING = 0x0002,
  OCCUPANCY = 0x0004,
  SCHEDULE = 0x0008,
  SETBACK = 0x0010,
  AUTOMODE = 0x0020,
}

--- @function ThermostatFeature:is_heating_set
--- @return boolean True if the value of HEATING is non-zero
ThermostatFeature.is_heating_set = function(self)
  return (self.value & self.HEATING) ~= 0
end
 
--- @function ThermostatFeature:set_heating
--- Set the value of the bit in the HEATING field to 1
ThermostatFeature.set_heating = function(self)
  if self.value ~= nil then
    self.value = self.value | self.HEATING
  else
    self.value = self.HEATING
  end
end

--- @function ThermostatFeature:unset_heating
--- Set the value of the bits in the HEATING field to 0
ThermostatFeature.unset_heating = function(self)
  self.value = self.value & (~self.HEATING & self.BASE_MASK)
end
--- @function ThermostatFeature:is_cooling_set
--- @return boolean True if the value of COOLING is non-zero
ThermostatFeature.is_cooling_set = function(self)
  return (self.value & self.COOLING) ~= 0
end
 
--- @function ThermostatFeature:set_cooling
--- Set the value of the bit in the COOLING field to 1
ThermostatFeature.set_cooling = function(self)
  if self.value ~= nil then
    self.value = self.value | self.COOLING
  else
    self.value = self.COOLING
  end
end

--- @function ThermostatFeature:unset_cooling
--- Set the value of the bits in the COOLING field to 0
ThermostatFeature.unset_cooling = function(self)
  self.value = self.value & (~self.COOLING & self.BASE_MASK)
end
--- @function ThermostatFeature:is_occupancy_set
--- @return boolean True if the value of OCCUPANCY is non-zero
ThermostatFeature.is_occupancy_set = function(self)
  return (self.value & self.OCCUPANCY) ~= 0
end
 
--- @function ThermostatFeature:set_occupancy
--- Set the value of the bit in the OCCUPANCY field to 1
ThermostatFeature.set_occupancy = function(self)
  if self.value ~= nil then
    self.value = self.value | self.OCCUPANCY
  else
    self.value = self.OCCUPANCY
  end
end

--- @function ThermostatFeature:unset_occupancy
--- Set the value of the bits in the OCCUPANCY field to 0
ThermostatFeature.unset_occupancy = function(self)
  self.value = self.value & (~self.OCCUPANCY & self.BASE_MASK)
end
--- @function ThermostatFeature:is_schedule_set
--- @return boolean True if the value of SCHEDULE is non-zero
ThermostatFeature.is_schedule_set = function(self)
  return (self.value & self.SCHEDULE) ~= 0
end
 
--- @function ThermostatFeature:set_schedule
--- Set the value of the bit in the SCHEDULE field to 1
ThermostatFeature.set_schedule = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SCHEDULE
  else
    self.value = self.SCHEDULE
  end
end

--- @function ThermostatFeature:unset_schedule
--- Set the value of the bits in the SCHEDULE field to 0
ThermostatFeature.unset_schedule = function(self)
  self.value = self.value & (~self.SCHEDULE & self.BASE_MASK)
end
--- @function ThermostatFeature:is_setback_set
--- @return boolean True if the value of SETBACK is non-zero
ThermostatFeature.is_setback_set = function(self)
  return (self.value & self.SETBACK) ~= 0
end
 
--- @function ThermostatFeature:set_setback
--- Set the value of the bit in the SETBACK field to 1
ThermostatFeature.set_setback = function(self)
  if self.value ~= nil then
    self.value = self.value | self.SETBACK
  else
    self.value = self.SETBACK
  end
end

--- @function ThermostatFeature:unset_setback
--- Set the value of the bits in the SETBACK field to 0
ThermostatFeature.unset_setback = function(self)
  self.value = self.value & (~self.SETBACK & self.BASE_MASK)
end
--- @function ThermostatFeature:is_automode_set
--- @return boolean True if the value of AUTOMODE is non-zero
ThermostatFeature.is_automode_set = function(self)
  return (self.value & self.AUTOMODE) ~= 0
end
 
--- @function ThermostatFeature:set_automode
--- Set the value of the bit in the AUTOMODE field to 1
ThermostatFeature.set_automode = function(self)
  if self.value ~= nil then
    self.value = self.value | self.AUTOMODE
  else
    self.value = self.AUTOMODE
  end
end

--- @function ThermostatFeature:unset_automode
--- Set the value of the bits in the AUTOMODE field to 0
ThermostatFeature.unset_automode = function(self)
  self.value = self.value & (~self.AUTOMODE & self.BASE_MASK)
end

function ThermostatFeature.bits_are_valid(feature)
  local max = 
    ThermostatFeature.HEATING | 
    ThermostatFeature.COOLING | 
    ThermostatFeature.OCCUPANCY | 
    ThermostatFeature.SCHEDULE | 
    ThermostatFeature.SETBACK | 
    ThermostatFeature.AUTOMODE
  if (feature <= max) and (feature >= 1) then
    return true
  else
    return false
  end
end

ThermostatFeature.mask_methods = {
  is_heating_set = ThermostatFeature.is_heating_set,
  set_heating = ThermostatFeature.set_heating,
  unset_heating = ThermostatFeature.unset_heating,
  is_cooling_set = ThermostatFeature.is_cooling_set,
  set_cooling = ThermostatFeature.set_cooling,
  unset_cooling = ThermostatFeature.unset_cooling,
  is_occupancy_set = ThermostatFeature.is_occupancy_set,
  set_occupancy = ThermostatFeature.set_occupancy,
  unset_occupancy = ThermostatFeature.unset_occupancy,
  is_schedule_set = ThermostatFeature.is_schedule_set,
  set_schedule = ThermostatFeature.set_schedule,
  unset_schedule = ThermostatFeature.unset_schedule,
  is_setback_set = ThermostatFeature.is_setback_set,
  set_setback = ThermostatFeature.set_setback,
  unset_setback = ThermostatFeature.unset_setback,
  is_automode_set = ThermostatFeature.is_automode_set,
  set_automode = ThermostatFeature.set_automode,
  unset_automode = ThermostatFeature.unset_automode,
}

ThermostatFeature.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(ThermostatFeature, new_mt)

return ThermostatFeature

