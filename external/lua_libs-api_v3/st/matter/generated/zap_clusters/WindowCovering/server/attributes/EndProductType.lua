-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local data_types = require "st.matter.data_types"
local TLVParser = require "st.matter.TLV.TLVParser"

--- @class st.matter.clusters.WindowCovering.EndProductType
--- @alias EndProductType
---
--- @field public ID number 0x000D the ID of this attribute
--- @field public NAME string "EndProductType" the name of this attribute
--- @field public data_type st.matter.data_types.Uint8 the data type of this attribute
--- @field public ROLLER_SHADE number 0
--- @field public ROMAN_SHADE number 1
--- @field public BALLOON_SHADE number 2
--- @field public WOVEN_WOOD number 3
--- @field public PLEATED_SHADE number 4
--- @field public CELLULAR_SHADE number 5
--- @field public LAYERED_SHADE number 6
--- @field public LAYERED_SHADE2D number 7
--- @field public SHEER_SHADE number 8
--- @field public TILT_ONLY_INTERIOR_BLIND number 9
--- @field public INTERIOR_BLIND number 10
--- @field public VERTICAL_BLIND_STRIP_CURTAIN number 11
--- @field public INTERIOR_VENETIAN_BLIND number 12
--- @field public EXTERIOR_VENETIAN_BLIND number 13
--- @field public LATERAL_LEFT_CURTAIN number 14
--- @field public LATERAL_RIGHT_CURTAIN number 15
--- @field public CENTRAL_CURTAIN number 16
--- @field public ROLLER_SHUTTER number 17
--- @field public EXTERIOR_VERTICAL_SCREEN number 18
--- @field public AWNING_TERRACE_PATIO number 19
--- @field public AWNING_VERTICAL_SCREEN number 20
--- @field public TILT_ONLY_PERGOLA number 21
--- @field public SWINGING_SHUTTER number 22
--- @field public SLIDING_SHUTTER number 23
--- @field public UNKNOWN number 255

local EndProductType = {
  ID = 0x000D,
  NAME = "EndProductType",
  base_type = data_types.Uint8,
}
EndProductType.ROLLER_SHADE = 0x00
EndProductType.ROMAN_SHADE = 0x01
EndProductType.BALLOON_SHADE = 0x02
EndProductType.WOVEN_WOOD = 0x03
EndProductType.PLEATED_SHADE = 0x04
EndProductType.CELLULAR_SHADE = 0x05
EndProductType.LAYERED_SHADE = 0x06
EndProductType.LAYERED_SHADE2D = 0x07
EndProductType.SHEER_SHADE = 0x08
EndProductType.TILT_ONLY_INTERIOR_BLIND = 0x09
EndProductType.INTERIOR_BLIND = 0x0A
EndProductType.VERTICAL_BLIND_STRIP_CURTAIN = 0x0B
EndProductType.INTERIOR_VENETIAN_BLIND = 0x0C
EndProductType.EXTERIOR_VENETIAN_BLIND = 0x0D
EndProductType.LATERAL_LEFT_CURTAIN = 0x0E
EndProductType.LATERAL_RIGHT_CURTAIN = 0x0F
EndProductType.CENTRAL_CURTAIN = 0x10
EndProductType.ROLLER_SHUTTER = 0x11
EndProductType.EXTERIOR_VERTICAL_SCREEN = 0x12
EndProductType.AWNING_TERRACE_PATIO = 0x13
EndProductType.AWNING_VERTICAL_SCREEN = 0x14
EndProductType.TILT_ONLY_PERGOLA = 0x15
EndProductType.SWINGING_SHUTTER = 0x16
EndProductType.SLIDING_SHUTTER = 0x17
EndProductType.UNKNOWN = 0xFF

EndProductType.enum_fields = {
  [EndProductType.ROLLER_SHADE] = "ROLLER_SHADE",
  [EndProductType.ROMAN_SHADE] = "ROMAN_SHADE",
  [EndProductType.BALLOON_SHADE] = "BALLOON_SHADE",
  [EndProductType.WOVEN_WOOD] = "WOVEN_WOOD",
  [EndProductType.PLEATED_SHADE] = "PLEATED_SHADE",
  [EndProductType.CELLULAR_SHADE] = "CELLULAR_SHADE",
  [EndProductType.LAYERED_SHADE] = "LAYERED_SHADE",
  [EndProductType.LAYERED_SHADE2D] = "LAYERED_SHADE2D",
  [EndProductType.SHEER_SHADE] = "SHEER_SHADE",
  [EndProductType.TILT_ONLY_INTERIOR_BLIND] = "TILT_ONLY_INTERIOR_BLIND",
  [EndProductType.INTERIOR_BLIND] = "INTERIOR_BLIND",
  [EndProductType.VERTICAL_BLIND_STRIP_CURTAIN] = "VERTICAL_BLIND_STRIP_CURTAIN",
  [EndProductType.INTERIOR_VENETIAN_BLIND] = "INTERIOR_VENETIAN_BLIND",
  [EndProductType.EXTERIOR_VENETIAN_BLIND] = "EXTERIOR_VENETIAN_BLIND",
  [EndProductType.LATERAL_LEFT_CURTAIN] = "LATERAL_LEFT_CURTAIN",
  [EndProductType.LATERAL_RIGHT_CURTAIN] = "LATERAL_RIGHT_CURTAIN",
  [EndProductType.CENTRAL_CURTAIN] = "CENTRAL_CURTAIN",
  [EndProductType.ROLLER_SHUTTER] = "ROLLER_SHUTTER",
  [EndProductType.EXTERIOR_VERTICAL_SCREEN] = "EXTERIOR_VERTICAL_SCREEN",
  [EndProductType.AWNING_TERRACE_PATIO] = "AWNING_TERRACE_PATIO",
  [EndProductType.AWNING_VERTICAL_SCREEN] = "AWNING_VERTICAL_SCREEN",
  [EndProductType.TILT_ONLY_PERGOLA] = "TILT_ONLY_PERGOLA",
  [EndProductType.SWINGING_SHUTTER] = "SWINGING_SHUTTER",
  [EndProductType.SLIDING_SHUTTER] = "SLIDING_SHUTTER",
  [EndProductType.UNKNOWN] = "UNKNOWN",
}

--- Add additional functionality to the base type object
---
--- @param base_type_obj st.matter.data_types.Uint8 the base data type object to add functionality to
function EndProductType:augment_type(base_type_obj)
  base_type_obj.field_name = self.NAME
  base_type_obj.pretty_print = self.pretty_print
end

function EndProductType.pretty_print(value_obj)
  return string.format("%s.%s", value_obj.field_name or value_obj.NAME, EndProductType.enum_fields[value_obj.value])
end
--- Create a Uint8 object of this attribute with any additional features provided for the attribute
--- This is also usable with the EndProductType(...) syntax
---
--- @vararg vararg the values needed to construct a Uint8
--- @return st.matter.data_types.Uint8
function EndProductType:new_value(...)
  local o = self.base_type(table.unpack({...}))
  self:augment_type(o)
  return o
end

--- Constructs an st.matter.interaction_model.InteractionRequest to read
--- this attribute from a device
--- @param device st.matter.Device
--- @param endpoint_id number|nil
--- @return st.matter.interaction_model.InteractionRequest containing an Interaction Request
function EndProductType:read(device, endpoint_id)
  return cluster_base.read(
    device,
    endpoint_id,
    self._cluster.ID,
    self.ID,
    nil --event_id
  )
end


--- Reporting policy: EndProductType => true => mandatory

--- Sets up a Subscribe Interaction
---
--- @param device any
--- @param endpoint_id number|nil
--- @return any
function EndProductType:subscribe(device, endpoint_id)
  return cluster_base.subscribe(
    device,
    endpoint_id,
    self._cluster.ID,
    self.ID,
    nil --event_id
  )
end

function EndProductType:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

--- Builds an EndProductType test attribute reponse for the driver integration testing framework
---
--- @param device st.matter.Device the device to build this message for
--- @param endpoint_id number|nil
--- @param value any
--- @param status string Interaction status associated with the path
--- @return st.matter.interaction_model.InteractionResponse of type REPORT_DATA
function EndProductType:build_test_report_data(
  device,
  endpoint_id,
  value,
  status
)
  local data = data_types.validate_or_build_type(value, self.base_type)
  self:augment_type(data)
  return cluster_base.build_test_report_data(
    device,
    endpoint_id,
    self._cluster.ID,
    self.ID,
    data,
    status
  )
end

function EndProductType:deserialize(tlv_buf)
  local data = TLVParser.decode_tlv(tlv_buf)
  self:augment_type(data)
  return data
end

setmetatable(EndProductType, {__call = EndProductType.new_value})
return EndProductType

