-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local cluster_base = require "st.matter.cluster_base"
local data_types = require "st.matter.data_types"
local TLVParser = require "st.matter.TLV.TLVParser"

--- @class st.matter.clusters.WindowCovering.Type
--- @alias Type
---
--- @field public ID number 0x0000 the ID of this attribute
--- @field public NAME string "Type" the name of this attribute
--- @field public data_type st.matter.data_types.Uint8 the data type of this attribute
--- @field public ROLLER_SHADE number 0
--- @field public ROLLER_SHADE2_MOTOR number 1
--- @field public ROLLER_SHADE_EXTERIOR number 2
--- @field public ROLLER_SHADE_EXTERIOR2_MOTOR number 3
--- @field public DRAPERY number 4
--- @field public AWNING number 5
--- @field public SHUTTER number 6
--- @field public TILT_BLIND_TILT_ONLY number 7
--- @field public TILT_BLIND_LIFT_AND_TILT number 8
--- @field public PROJECTOR_SCREEN number 9
--- @field public UNKNOWN number 255

local Type = {
  ID = 0x0000,
  NAME = "Type",
  base_type = data_types.Uint8,
}
Type.ROLLER_SHADE = 0x00
Type.ROLLER_SHADE2_MOTOR = 0x01
Type.ROLLER_SHADE_EXTERIOR = 0x02
Type.ROLLER_SHADE_EXTERIOR2_MOTOR = 0x03
Type.DRAPERY = 0x04
Type.AWNING = 0x05
Type.SHUTTER = 0x06
Type.TILT_BLIND_TILT_ONLY = 0x07
Type.TILT_BLIND_LIFT_AND_TILT = 0x08
Type.PROJECTOR_SCREEN = 0x09
Type.UNKNOWN = 0xFF

Type.enum_fields = {
  [Type.ROLLER_SHADE] = "ROLLER_SHADE",
  [Type.ROLLER_SHADE2_MOTOR] = "ROLLER_SHADE2_MOTOR",
  [Type.ROLLER_SHADE_EXTERIOR] = "ROLLER_SHADE_EXTERIOR",
  [Type.ROLLER_SHADE_EXTERIOR2_MOTOR] = "ROLLER_SHADE_EXTERIOR2_MOTOR",
  [Type.DRAPERY] = "DRAPERY",
  [Type.AWNING] = "AWNING",
  [Type.SHUTTER] = "SHUTTER",
  [Type.TILT_BLIND_TILT_ONLY] = "TILT_BLIND_TILT_ONLY",
  [Type.TILT_BLIND_LIFT_AND_TILT] = "TILT_BLIND_LIFT_AND_TILT",
  [Type.PROJECTOR_SCREEN] = "PROJECTOR_SCREEN",
  [Type.UNKNOWN] = "UNKNOWN",
}

--- Add additional functionality to the base type object
---
--- @param base_type_obj st.matter.data_types.Uint8 the base data type object to add functionality to
function Type:augment_type(base_type_obj)
  base_type_obj.field_name = self.NAME
  base_type_obj.pretty_print = self.pretty_print
end

function Type.pretty_print(value_obj)
  return string.format("%s.%s", value_obj.field_name or value_obj.NAME, Type.enum_fields[value_obj.value])
end
--- Create a Uint8 object of this attribute with any additional features provided for the attribute
--- This is also usable with the Type(...) syntax
---
--- @vararg vararg the values needed to construct a Uint8
--- @return st.matter.data_types.Uint8
function Type:new_value(...)
  local o = self.base_type(table.unpack({...}))
  self:augment_type(o)
  return o
end

--- Constructs an st.matter.interaction_model.InteractionRequest to read
--- this attribute from a device
--- @param device st.matter.Device
--- @param endpoint_id number|nil
--- @return st.matter.interaction_model.InteractionRequest containing an Interaction Request
function Type:read(device, endpoint_id)
  return cluster_base.read(
    device,
    endpoint_id,
    self._cluster.ID,
    self.ID,
    nil --event_id
  )
end


--- Reporting policy: Type => true => mandatory

--- Sets up a Subscribe Interaction
---
--- @param device any
--- @param endpoint_id number|nil
--- @return any
function Type:subscribe(device, endpoint_id)
  return cluster_base.subscribe(
    device,
    endpoint_id,
    self._cluster.ID,
    self.ID,
    nil --event_id
  )
end

function Type:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

--- Builds an Type test attribute reponse for the driver integration testing framework
---
--- @param device st.matter.Device the device to build this message for
--- @param endpoint_id number|nil
--- @param value any
--- @param status string Interaction status associated with the path
--- @return st.matter.interaction_model.InteractionResponse of type REPORT_DATA
function Type:build_test_report_data(
  device,
  endpoint_id,
  value,
  status
)
  local data = data_types.validate_or_build_type(value, self.base_type)
  self:augment_type(data)
  return cluster_base.build_test_report_data(
    device,
    endpoint_id,
    self._cluster.ID,
    self.ID,
    data,
    status
  )
end

function Type:deserialize(tlv_buf)
  local data = TLVParser.decode_tlv(tlv_buf)
  self:augment_type(data)
  return data
end

setmetatable(Type, {__call = Type.new_value})
return Type

