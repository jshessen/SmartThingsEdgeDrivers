-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.WindowCovering.types.ConfigStatus
--- @alias ConfigStatus
---
--- @field public OPERATIONAL number 1
--- @field public ONLINE_RESERVED number 2
--- @field public LIFT_MOVEMENT_REVERSED number 4
--- @field public LIFT_POSITION_AWARE number 8
--- @field public TILT_POSITION_AWARE number 16
--- @field public LIFT_ENCODER_CONTROLLED number 32
--- @field public TILT_ENCODER_CONTROLLED number 64

local ConfigStatus = {}
local new_mt = UintABC.new_mt({NAME = "ConfigStatus", ID = data_types.name_to_id_map["Uint8"]}, 1)

ConfigStatus.BASE_MASK = 0xFFFF
ConfigStatus.OPERATIONAL = 0x0001
ConfigStatus.ONLINE_RESERVED = 0x0002
ConfigStatus.LIFT_MOVEMENT_REVERSED = 0x0004
ConfigStatus.LIFT_POSITION_AWARE = 0x0008
ConfigStatus.TILT_POSITION_AWARE = 0x0010
ConfigStatus.LIFT_ENCODER_CONTROLLED = 0x0020
ConfigStatus.TILT_ENCODER_CONTROLLED = 0x0040

ConfigStatus.mask_fields = {
  BASE_MASK = 0xFFFF,
  OPERATIONAL = 0x0001,
  ONLINE_RESERVED = 0x0002,
  LIFT_MOVEMENT_REVERSED = 0x0004,
  LIFT_POSITION_AWARE = 0x0008,
  TILT_POSITION_AWARE = 0x0010,
  LIFT_ENCODER_CONTROLLED = 0x0020,
  TILT_ENCODER_CONTROLLED = 0x0040,
}

--- @function ConfigStatus:is_operational_set
--- @return boolean True if the value of OPERATIONAL is non-zero
ConfigStatus.is_operational_set = function(self)
  return (self.value & self.OPERATIONAL) ~= 0
end
 
--- @function ConfigStatus:set_operational
--- Set the value of the bit in the OPERATIONAL field to 1
ConfigStatus.set_operational = function(self)
  if self.value ~= nil then
    self.value = self.value | self.OPERATIONAL
  else
    self.value = self.OPERATIONAL
  end
end

--- @function ConfigStatus:unset_operational
--- Set the value of the bits in the OPERATIONAL field to 0
ConfigStatus.unset_operational = function(self)
  self.value = self.value & (~self.OPERATIONAL & self.BASE_MASK)
end
--- @function ConfigStatus:is_online_reserved_set
--- @return boolean True if the value of ONLINE_RESERVED is non-zero
ConfigStatus.is_online_reserved_set = function(self)
  return (self.value & self.ONLINE_RESERVED) ~= 0
end
 
--- @function ConfigStatus:set_online_reserved
--- Set the value of the bit in the ONLINE_RESERVED field to 1
ConfigStatus.set_online_reserved = function(self)
  if self.value ~= nil then
    self.value = self.value | self.ONLINE_RESERVED
  else
    self.value = self.ONLINE_RESERVED
  end
end

--- @function ConfigStatus:unset_online_reserved
--- Set the value of the bits in the ONLINE_RESERVED field to 0
ConfigStatus.unset_online_reserved = function(self)
  self.value = self.value & (~self.ONLINE_RESERVED & self.BASE_MASK)
end
--- @function ConfigStatus:is_lift_movement_reversed_set
--- @return boolean True if the value of LIFT_MOVEMENT_REVERSED is non-zero
ConfigStatus.is_lift_movement_reversed_set = function(self)
  return (self.value & self.LIFT_MOVEMENT_REVERSED) ~= 0
end
 
--- @function ConfigStatus:set_lift_movement_reversed
--- Set the value of the bit in the LIFT_MOVEMENT_REVERSED field to 1
ConfigStatus.set_lift_movement_reversed = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LIFT_MOVEMENT_REVERSED
  else
    self.value = self.LIFT_MOVEMENT_REVERSED
  end
end

--- @function ConfigStatus:unset_lift_movement_reversed
--- Set the value of the bits in the LIFT_MOVEMENT_REVERSED field to 0
ConfigStatus.unset_lift_movement_reversed = function(self)
  self.value = self.value & (~self.LIFT_MOVEMENT_REVERSED & self.BASE_MASK)
end
--- @function ConfigStatus:is_lift_position_aware_set
--- @return boolean True if the value of LIFT_POSITION_AWARE is non-zero
ConfigStatus.is_lift_position_aware_set = function(self)
  return (self.value & self.LIFT_POSITION_AWARE) ~= 0
end
 
--- @function ConfigStatus:set_lift_position_aware
--- Set the value of the bit in the LIFT_POSITION_AWARE field to 1
ConfigStatus.set_lift_position_aware = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LIFT_POSITION_AWARE
  else
    self.value = self.LIFT_POSITION_AWARE
  end
end

--- @function ConfigStatus:unset_lift_position_aware
--- Set the value of the bits in the LIFT_POSITION_AWARE field to 0
ConfigStatus.unset_lift_position_aware = function(self)
  self.value = self.value & (~self.LIFT_POSITION_AWARE & self.BASE_MASK)
end
--- @function ConfigStatus:is_tilt_position_aware_set
--- @return boolean True if the value of TILT_POSITION_AWARE is non-zero
ConfigStatus.is_tilt_position_aware_set = function(self)
  return (self.value & self.TILT_POSITION_AWARE) ~= 0
end
 
--- @function ConfigStatus:set_tilt_position_aware
--- Set the value of the bit in the TILT_POSITION_AWARE field to 1
ConfigStatus.set_tilt_position_aware = function(self)
  if self.value ~= nil then
    self.value = self.value | self.TILT_POSITION_AWARE
  else
    self.value = self.TILT_POSITION_AWARE
  end
end

--- @function ConfigStatus:unset_tilt_position_aware
--- Set the value of the bits in the TILT_POSITION_AWARE field to 0
ConfigStatus.unset_tilt_position_aware = function(self)
  self.value = self.value & (~self.TILT_POSITION_AWARE & self.BASE_MASK)
end
--- @function ConfigStatus:is_lift_encoder_controlled_set
--- @return boolean True if the value of LIFT_ENCODER_CONTROLLED is non-zero
ConfigStatus.is_lift_encoder_controlled_set = function(self)
  return (self.value & self.LIFT_ENCODER_CONTROLLED) ~= 0
end
 
--- @function ConfigStatus:set_lift_encoder_controlled
--- Set the value of the bit in the LIFT_ENCODER_CONTROLLED field to 1
ConfigStatus.set_lift_encoder_controlled = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LIFT_ENCODER_CONTROLLED
  else
    self.value = self.LIFT_ENCODER_CONTROLLED
  end
end

--- @function ConfigStatus:unset_lift_encoder_controlled
--- Set the value of the bits in the LIFT_ENCODER_CONTROLLED field to 0
ConfigStatus.unset_lift_encoder_controlled = function(self)
  self.value = self.value & (~self.LIFT_ENCODER_CONTROLLED & self.BASE_MASK)
end
--- @function ConfigStatus:is_tilt_encoder_controlled_set
--- @return boolean True if the value of TILT_ENCODER_CONTROLLED is non-zero
ConfigStatus.is_tilt_encoder_controlled_set = function(self)
  return (self.value & self.TILT_ENCODER_CONTROLLED) ~= 0
end
 
--- @function ConfigStatus:set_tilt_encoder_controlled
--- Set the value of the bit in the TILT_ENCODER_CONTROLLED field to 1
ConfigStatus.set_tilt_encoder_controlled = function(self)
  if self.value ~= nil then
    self.value = self.value | self.TILT_ENCODER_CONTROLLED
  else
    self.value = self.TILT_ENCODER_CONTROLLED
  end
end

--- @function ConfigStatus:unset_tilt_encoder_controlled
--- Set the value of the bits in the TILT_ENCODER_CONTROLLED field to 0
ConfigStatus.unset_tilt_encoder_controlled = function(self)
  self.value = self.value & (~self.TILT_ENCODER_CONTROLLED & self.BASE_MASK)
end


ConfigStatus.mask_methods = {
  is_operational_set = ConfigStatus.is_operational_set,
  set_operational = ConfigStatus.set_operational,
  unset_operational = ConfigStatus.unset_operational,
  is_online_reserved_set = ConfigStatus.is_online_reserved_set,
  set_online_reserved = ConfigStatus.set_online_reserved,
  unset_online_reserved = ConfigStatus.unset_online_reserved,
  is_lift_movement_reversed_set = ConfigStatus.is_lift_movement_reversed_set,
  set_lift_movement_reversed = ConfigStatus.set_lift_movement_reversed,
  unset_lift_movement_reversed = ConfigStatus.unset_lift_movement_reversed,
  is_lift_position_aware_set = ConfigStatus.is_lift_position_aware_set,
  set_lift_position_aware = ConfigStatus.set_lift_position_aware,
  unset_lift_position_aware = ConfigStatus.unset_lift_position_aware,
  is_tilt_position_aware_set = ConfigStatus.is_tilt_position_aware_set,
  set_tilt_position_aware = ConfigStatus.set_tilt_position_aware,
  unset_tilt_position_aware = ConfigStatus.unset_tilt_position_aware,
  is_lift_encoder_controlled_set = ConfigStatus.is_lift_encoder_controlled_set,
  set_lift_encoder_controlled = ConfigStatus.set_lift_encoder_controlled,
  unset_lift_encoder_controlled = ConfigStatus.unset_lift_encoder_controlled,
  is_tilt_encoder_controlled_set = ConfigStatus.is_tilt_encoder_controlled_set,
  set_tilt_encoder_controlled = ConfigStatus.set_tilt_encoder_controlled,
  unset_tilt_encoder_controlled = ConfigStatus.unset_tilt_encoder_controlled,
}

ConfigStatus.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(ConfigStatus, new_mt)

return ConfigStatus

