-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.WindowCovering.types.Mode
--- @alias Mode
---
--- @field public MOTOR_DIRECTION_REVERSED number 1
--- @field public CALIBRATION_MODE number 2
--- @field public MAINTENANCE_MODE number 4
--- @field public LED_FEEDBACK number 8

local Mode = {}
local new_mt = UintABC.new_mt({NAME = "Mode", ID = data_types.name_to_id_map["Uint8"]}, 1)

Mode.BASE_MASK = 0xFFFF
Mode.MOTOR_DIRECTION_REVERSED = 0x0001
Mode.CALIBRATION_MODE = 0x0002
Mode.MAINTENANCE_MODE = 0x0004
Mode.LED_FEEDBACK = 0x0008

Mode.mask_fields = {
  BASE_MASK = 0xFFFF,
  MOTOR_DIRECTION_REVERSED = 0x0001,
  CALIBRATION_MODE = 0x0002,
  MAINTENANCE_MODE = 0x0004,
  LED_FEEDBACK = 0x0008,
}

--- @function Mode:is_motor_direction_reversed_set
--- @return boolean True if the value of MOTOR_DIRECTION_REVERSED is non-zero
Mode.is_motor_direction_reversed_set = function(self)
  return (self.value & self.MOTOR_DIRECTION_REVERSED) ~= 0
end
 
--- @function Mode:set_motor_direction_reversed
--- Set the value of the bit in the MOTOR_DIRECTION_REVERSED field to 1
Mode.set_motor_direction_reversed = function(self)
  if self.value ~= nil then
    self.value = self.value | self.MOTOR_DIRECTION_REVERSED
  else
    self.value = self.MOTOR_DIRECTION_REVERSED
  end
end

--- @function Mode:unset_motor_direction_reversed
--- Set the value of the bits in the MOTOR_DIRECTION_REVERSED field to 0
Mode.unset_motor_direction_reversed = function(self)
  self.value = self.value & (~self.MOTOR_DIRECTION_REVERSED & self.BASE_MASK)
end
--- @function Mode:is_calibration_mode_set
--- @return boolean True if the value of CALIBRATION_MODE is non-zero
Mode.is_calibration_mode_set = function(self)
  return (self.value & self.CALIBRATION_MODE) ~= 0
end
 
--- @function Mode:set_calibration_mode
--- Set the value of the bit in the CALIBRATION_MODE field to 1
Mode.set_calibration_mode = function(self)
  if self.value ~= nil then
    self.value = self.value | self.CALIBRATION_MODE
  else
    self.value = self.CALIBRATION_MODE
  end
end

--- @function Mode:unset_calibration_mode
--- Set the value of the bits in the CALIBRATION_MODE field to 0
Mode.unset_calibration_mode = function(self)
  self.value = self.value & (~self.CALIBRATION_MODE & self.BASE_MASK)
end
--- @function Mode:is_maintenance_mode_set
--- @return boolean True if the value of MAINTENANCE_MODE is non-zero
Mode.is_maintenance_mode_set = function(self)
  return (self.value & self.MAINTENANCE_MODE) ~= 0
end
 
--- @function Mode:set_maintenance_mode
--- Set the value of the bit in the MAINTENANCE_MODE field to 1
Mode.set_maintenance_mode = function(self)
  if self.value ~= nil then
    self.value = self.value | self.MAINTENANCE_MODE
  else
    self.value = self.MAINTENANCE_MODE
  end
end

--- @function Mode:unset_maintenance_mode
--- Set the value of the bits in the MAINTENANCE_MODE field to 0
Mode.unset_maintenance_mode = function(self)
  self.value = self.value & (~self.MAINTENANCE_MODE & self.BASE_MASK)
end
--- @function Mode:is_led_feedback_set
--- @return boolean True if the value of LED_FEEDBACK is non-zero
Mode.is_led_feedback_set = function(self)
  return (self.value & self.LED_FEEDBACK) ~= 0
end
 
--- @function Mode:set_led_feedback
--- Set the value of the bit in the LED_FEEDBACK field to 1
Mode.set_led_feedback = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LED_FEEDBACK
  else
    self.value = self.LED_FEEDBACK
  end
end

--- @function Mode:unset_led_feedback
--- Set the value of the bits in the LED_FEEDBACK field to 0
Mode.unset_led_feedback = function(self)
  self.value = self.value & (~self.LED_FEEDBACK & self.BASE_MASK)
end


Mode.mask_methods = {
  is_motor_direction_reversed_set = Mode.is_motor_direction_reversed_set,
  set_motor_direction_reversed = Mode.set_motor_direction_reversed,
  unset_motor_direction_reversed = Mode.unset_motor_direction_reversed,
  is_calibration_mode_set = Mode.is_calibration_mode_set,
  set_calibration_mode = Mode.set_calibration_mode,
  unset_calibration_mode = Mode.unset_calibration_mode,
  is_maintenance_mode_set = Mode.is_maintenance_mode_set,
  set_maintenance_mode = Mode.set_maintenance_mode,
  unset_maintenance_mode = Mode.unset_maintenance_mode,
  is_led_feedback_set = Mode.is_led_feedback_set,
  set_led_feedback = Mode.set_led_feedback,
  unset_led_feedback = Mode.unset_led_feedback,
}

Mode.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(Mode, new_mt)

return Mode

