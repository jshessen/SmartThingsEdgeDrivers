-- Copyright 2022 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by ZCL Advanced Platform generator.

local data_types = require "st.matter.data_types"
local UintABC = require "st.matter.data_types.base_defs.UintABC"

--- @class st.matter.clusters.WindowCovering.types.OperationalStatus
--- @alias OperationalStatus
---
--- @field public GLOBAL number 3
--- @field public LIFT number 12
--- @field public TILT number 48

local OperationalStatus = {}
local new_mt = UintABC.new_mt({NAME = "OperationalStatus", ID = data_types.name_to_id_map["Uint8"]}, 1)

OperationalStatus.BASE_MASK = 0xFFFF
OperationalStatus.GLOBAL = 0x0003
OperationalStatus.LIFT = 0x000C
OperationalStatus.TILT = 0x0030

OperationalStatus.mask_fields = {
  BASE_MASK = 0xFFFF,
  GLOBAL = 0x0003,
  LIFT = 0x000C,
  TILT = 0x0030,
}

--- @function OperationalStatus:is_global_set
--- @return boolean True if the value of GLOBAL is non-zero
OperationalStatus.is_global_set = function(self)
  return (self.value & self.GLOBAL) ~= 0
end
 
--- @function OperationalStatus:set_global
--- Set the value of the bit in the GLOBAL field to 1
OperationalStatus.set_global = function(self)
  if self.value ~= nil then
    self.value = self.value | self.GLOBAL
  else
    self.value = self.GLOBAL
  end
end

--- @function OperationalStatus:unset_global
--- Set the value of the bits in the GLOBAL field to 0
OperationalStatus.unset_global = function(self)
  self.value = self.value & (~self.GLOBAL & self.BASE_MASK)
end
--- @function OperationalStatus:is_lift_set
--- @return boolean True if the value of LIFT is non-zero
OperationalStatus.is_lift_set = function(self)
  return (self.value & self.LIFT) ~= 0
end
 
--- @function OperationalStatus:set_lift
--- Set the value of the bit in the LIFT field to 1
OperationalStatus.set_lift = function(self)
  if self.value ~= nil then
    self.value = self.value | self.LIFT
  else
    self.value = self.LIFT
  end
end

--- @function OperationalStatus:unset_lift
--- Set the value of the bits in the LIFT field to 0
OperationalStatus.unset_lift = function(self)
  self.value = self.value & (~self.LIFT & self.BASE_MASK)
end
--- @function OperationalStatus:is_tilt_set
--- @return boolean True if the value of TILT is non-zero
OperationalStatus.is_tilt_set = function(self)
  return (self.value & self.TILT) ~= 0
end
 
--- @function OperationalStatus:set_tilt
--- Set the value of the bit in the TILT field to 1
OperationalStatus.set_tilt = function(self)
  if self.value ~= nil then
    self.value = self.value | self.TILT
  else
    self.value = self.TILT
  end
end

--- @function OperationalStatus:unset_tilt
--- Set the value of the bits in the TILT field to 0
OperationalStatus.unset_tilt = function(self)
  self.value = self.value & (~self.TILT & self.BASE_MASK)
end


OperationalStatus.mask_methods = {
  is_global_set = OperationalStatus.is_global_set,
  set_global = OperationalStatus.set_global,
  unset_global = OperationalStatus.unset_global,
  is_lift_set = OperationalStatus.is_lift_set,
  set_lift = OperationalStatus.set_lift,
  unset_lift = OperationalStatus.unset_lift,
  is_tilt_set = OperationalStatus.is_tilt_set,
  set_tilt = OperationalStatus.set_tilt,
  unset_tilt = OperationalStatus.unset_tilt,
}

OperationalStatus.augment_type = function(cls, val)
  setmetatable(val, new_mt)
end

setmetatable(OperationalStatus, new_mt)

return OperationalStatus

