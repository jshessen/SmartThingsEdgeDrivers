local data_types = require "st.zigbee.data_types"
local BitmapABC = require "st.zigbee.data_types.base_defs.BitmapABC"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.types.IasZoneStatus: st.zigbee.data_types.Bitmap16
--- @alias IasZoneStatus
---
--- @field public byte_length number 2
--- @field public ALARM1 number 1
--- @field public ALARM2 number 2
--- @field public TAMPER number 4
--- @field public BATTERY_LOW number 8
--- @field public SUPERVISION_NOTIFY number 16
--- @field public RESTORE_NOTIFY number 32
--- @field public TROUBLE number 64
--- @field public AC_MAINS_FAULT number 128
--- @field public TEST number 256
--- @field public BATTERY_DEFECT number 512
local IasZoneStatus = {}
local new_mt = BitmapABC.new_mt({NAME = "IasZoneStatus", ID = data_types.name_to_id_map["Bitmap16"]}, 2)
new_mt.__index.BASE_MASK          = 0xFFFF
new_mt.__index.ALARM1             = 0x0001
new_mt.__index.ALARM2             = 0x0002
new_mt.__index.TAMPER             = 0x0004
new_mt.__index.BATTERY_LOW        = 0x0008
new_mt.__index.SUPERVISION_NOTIFY = 0x0010
new_mt.__index.RESTORE_NOTIFY     = 0x0020
new_mt.__index.TROUBLE            = 0x0040
new_mt.__index.AC_MAINS_FAULT     = 0x0080
new_mt.__index.TEST               = 0x0100
new_mt.__index.BATTERY_DEFECT     = 0x0200

--- @function IasZoneStatus:is_alarm1_set
--- @return boolean True if the value of ALARM1 is non-zero
new_mt.__index.is_alarm1_set = function(self)
  return (self.value & self.ALARM1) ~= 0
end
 
--- @function IasZoneStatus:set_alarm1
--- Set the value of the bit in the ALARM1 field to 1
new_mt.__index.set_alarm1 = function(self)
  self.value = self.value | self.ALARM1
end

--- @function IasZoneStatus:unset_alarm1
--- Set the value of the bits in the ALARM1 field to 0
new_mt.__index.unset_alarm1 = function(self)
  self.value = self.value & (~self.ALARM1 & self.BASE_MASK)
end

--- @function IasZoneStatus:is_alarm2_set
--- @return boolean True if the value of ALARM2 is non-zero
new_mt.__index.is_alarm2_set = function(self)
  return (self.value & self.ALARM2) ~= 0
end
 
--- @function IasZoneStatus:set_alarm2
--- Set the value of the bit in the ALARM2 field to 1
new_mt.__index.set_alarm2 = function(self)
  self.value = self.value | self.ALARM2
end

--- @function IasZoneStatus:unset_alarm2
--- Set the value of the bits in the ALARM2 field to 0
new_mt.__index.unset_alarm2 = function(self)
  self.value = self.value & (~self.ALARM2 & self.BASE_MASK)
end

--- @function IasZoneStatus:is_tamper_set
--- @return boolean True if the value of TAMPER is non-zero
new_mt.__index.is_tamper_set = function(self)
  return (self.value & self.TAMPER) ~= 0
end
 
--- @function IasZoneStatus:set_tamper
--- Set the value of the bit in the TAMPER field to 1
new_mt.__index.set_tamper = function(self)
  self.value = self.value | self.TAMPER
end

--- @function IasZoneStatus:unset_tamper
--- Set the value of the bits in the TAMPER field to 0
new_mt.__index.unset_tamper = function(self)
  self.value = self.value & (~self.TAMPER & self.BASE_MASK)
end

--- @function IasZoneStatus:is_battery_low_set
--- @return boolean True if the value of BATTERY_LOW is non-zero
new_mt.__index.is_battery_low_set = function(self)
  return (self.value & self.BATTERY_LOW) ~= 0
end
 
--- @function IasZoneStatus:set_battery_low
--- Set the value of the bit in the BATTERY_LOW field to 1
new_mt.__index.set_battery_low = function(self)
  self.value = self.value | self.BATTERY_LOW
end

--- @function IasZoneStatus:unset_battery_low
--- Set the value of the bits in the BATTERY_LOW field to 0
new_mt.__index.unset_battery_low = function(self)
  self.value = self.value & (~self.BATTERY_LOW & self.BASE_MASK)
end

--- @function IasZoneStatus:is_supervision_notify_set
--- @return boolean True if the value of SUPERVISION_NOTIFY is non-zero
new_mt.__index.is_supervision_notify_set = function(self)
  return (self.value & self.SUPERVISION_NOTIFY) ~= 0
end
 
--- @function IasZoneStatus:set_supervision_notify
--- Set the value of the bit in the SUPERVISION_NOTIFY field to 1
new_mt.__index.set_supervision_notify = function(self)
  self.value = self.value | self.SUPERVISION_NOTIFY
end

--- @function IasZoneStatus:unset_supervision_notify
--- Set the value of the bits in the SUPERVISION_NOTIFY field to 0
new_mt.__index.unset_supervision_notify = function(self)
  self.value = self.value & (~self.SUPERVISION_NOTIFY & self.BASE_MASK)
end

--- @function IasZoneStatus:is_restore_notify_set
--- @return boolean True if the value of RESTORE_NOTIFY is non-zero
new_mt.__index.is_restore_notify_set = function(self)
  return (self.value & self.RESTORE_NOTIFY) ~= 0
end
 
--- @function IasZoneStatus:set_restore_notify
--- Set the value of the bit in the RESTORE_NOTIFY field to 1
new_mt.__index.set_restore_notify = function(self)
  self.value = self.value | self.RESTORE_NOTIFY
end

--- @function IasZoneStatus:unset_restore_notify
--- Set the value of the bits in the RESTORE_NOTIFY field to 0
new_mt.__index.unset_restore_notify = function(self)
  self.value = self.value & (~self.RESTORE_NOTIFY & self.BASE_MASK)
end

--- @function IasZoneStatus:is_trouble_set
--- @return boolean True if the value of TROUBLE is non-zero
new_mt.__index.is_trouble_set = function(self)
  return (self.value & self.TROUBLE) ~= 0
end
 
--- @function IasZoneStatus:set_trouble
--- Set the value of the bit in the TROUBLE field to 1
new_mt.__index.set_trouble = function(self)
  self.value = self.value | self.TROUBLE
end

--- @function IasZoneStatus:unset_trouble
--- Set the value of the bits in the TROUBLE field to 0
new_mt.__index.unset_trouble = function(self)
  self.value = self.value & (~self.TROUBLE & self.BASE_MASK)
end

--- @function IasZoneStatus:is_ac_mains_fault_set
--- @return boolean True if the value of AC_MAINS_FAULT is non-zero
new_mt.__index.is_ac_mains_fault_set = function(self)
  return (self.value & self.AC_MAINS_FAULT) ~= 0
end
 
--- @function IasZoneStatus:set_ac_mains_fault
--- Set the value of the bit in the AC_MAINS_FAULT field to 1
new_mt.__index.set_ac_mains_fault = function(self)
  self.value = self.value | self.AC_MAINS_FAULT
end

--- @function IasZoneStatus:unset_ac_mains_fault
--- Set the value of the bits in the AC_MAINS_FAULT field to 0
new_mt.__index.unset_ac_mains_fault = function(self)
  self.value = self.value & (~self.AC_MAINS_FAULT & self.BASE_MASK)
end

--- @function IasZoneStatus:is_test_set
--- @return boolean True if the value of TEST is non-zero
new_mt.__index.is_test_set = function(self)
  return (self.value & self.TEST) ~= 0
end
 
--- @function IasZoneStatus:set_test
--- Set the value of the bit in the TEST field to 1
new_mt.__index.set_test = function(self)
  self.value = self.value | self.TEST
end

--- @function IasZoneStatus:unset_test
--- Set the value of the bits in the TEST field to 0
new_mt.__index.unset_test = function(self)
  self.value = self.value & (~self.TEST & self.BASE_MASK)
end

--- @function IasZoneStatus:is_battery_defect_set
--- @return boolean True if the value of BATTERY_DEFECT is non-zero
new_mt.__index.is_battery_defect_set = function(self)
  return (self.value & self.BATTERY_DEFECT) ~= 0
end
 
--- @function IasZoneStatus:set_battery_defect
--- Set the value of the bit in the BATTERY_DEFECT field to 1
new_mt.__index.set_battery_defect = function(self)
  self.value = self.value | self.BATTERY_DEFECT
end

--- @function IasZoneStatus:unset_battery_defect
--- Set the value of the bits in the BATTERY_DEFECT field to 0
new_mt.__index.unset_battery_defect = function(self)
  self.value = self.value & (~self.BATTERY_DEFECT & self.BASE_MASK)
end

setmetatable(IasZoneStatus, new_mt)
return IasZoneStatus
