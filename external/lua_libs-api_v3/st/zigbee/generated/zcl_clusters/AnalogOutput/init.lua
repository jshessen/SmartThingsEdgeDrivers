local cluster_base = require "st.zigbee.cluster_base"
local AnalogOutputClientAttributes = require "st.zigbee.generated.zcl_clusters.AnalogOutput.client.attributes" 
local AnalogOutputServerAttributes = require "st.zigbee.generated.zcl_clusters.AnalogOutput.server.attributes" 
local AnalogOutputClientCommands = require "st.zigbee.generated.zcl_clusters.AnalogOutput.client.commands"
local AnalogOutputServerCommands = require "st.zigbee.generated.zcl_clusters.AnalogOutput.server.commands"
local AnalogOutputTypes = require "st.zigbee.generated.zcl_clusters.AnalogOutput.types"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2
-- This is generated from an incomplete definition and is not a complete description of the cluster.

--- @class st.zigbee.zcl.clusters.AnalogOutput
--- @alias AnalogOutput
---
--- @field public ID number 0x000D the ID of this cluster
--- @field public NAME string "AnalogOutput" the name of this cluster
--- @field public attributes st.zigbee.zcl.clusters.AnalogOutputServerAttributes | st.zigbee.zcl.clusters.AnalogOutputClientAttributes
--- @field public commands st.zigbee.zcl.clusters.AnalogOutputServerCommands | st.zigbee.zcl.clusters.AnalogOutputClientCommands
--- @field public types st.zigbee.zcl.clusters.AnalogOutputTypes
local AnalogOutput = {}

AnalogOutput.ID = 0x000D
AnalogOutput.NAME = "AnalogOutput"
AnalogOutput.server = {}
AnalogOutput.client = {}
AnalogOutput.server.attributes = AnalogOutputServerAttributes:set_parent_cluster(AnalogOutput) 
AnalogOutput.client.attributes = AnalogOutputClientAttributes:set_parent_cluster(AnalogOutput) 
AnalogOutput.server.commands = AnalogOutputServerCommands:set_parent_cluster(AnalogOutput)
AnalogOutput.client.commands = AnalogOutputClientCommands:set_parent_cluster(AnalogOutput)
AnalogOutput.types = AnalogOutputTypes

--- Find an attribute by id
---
--- @param attr_id number
function AnalogOutput:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x001C] = "Description",
    [0x0041] = "MaxPresentValue",
    [0x0045] = "MinPresentValue",
    [0x0051] = "OutOfService",
    [0x0055] = "PresentValue",
    [0x0067] = "Reliability",
    [0x0068] = "RelinquishDefault",
    [0x006A] = "Resolution",
    [0x006F] = "StatusFlags",
    [0x0075] = "EngineeringUnits",
    [0x0100] = "ApplicationType",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end
  
--- Find a server command by id
---
--- @param command_id number
function AnalogOutput:get_server_command_by_id(command_id)
  local server_id_map = {
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end

--- Find a client command by id
---
--- @param command_id number
function AnalogOutput:get_client_command_by_id(command_id)
  local client_id_map = {
  }
  if client_id_map[command_id] ~= nil then
    return self.client.commands[client_id_map[command_id]]
  end
  return nil
end

AnalogOutput.attribute_direction_map = {
  ["Description"] = "server",
  ["MaxPresentValue"] = "server",
  ["MinPresentValue"] = "server",
  ["OutOfService"] = "server",
  ["PresentValue"] = "server",
  ["Reliability"] = "server",
  ["RelinquishDefault"] = "server",
  ["Resolution"] = "server",
  ["StatusFlags"] = "server",
  ["EngineeringUnits"] = "server",
  ["ApplicationType"] = "server",
}
AnalogOutput.command_direction_map = {}

local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = AnalogOutput.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, AnalogOutput.NAME))
  end
  return AnalogOutput[direction].attributes[key] 
end
AnalogOutput.attributes = {}
setmetatable(AnalogOutput.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = AnalogOutput.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, AnalogOutput.NAME))
  end
  return AnalogOutput[direction].commands[key] 
end
AnalogOutput.commands = {}
setmetatable(AnalogOutput.commands, command_helper_mt)

setmetatable(AnalogOutput, {__index = cluster_base})

return AnalogOutput
