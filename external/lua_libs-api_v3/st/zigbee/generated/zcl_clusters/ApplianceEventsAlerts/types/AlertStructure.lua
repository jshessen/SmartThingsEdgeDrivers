local data_types = require "st.zigbee.data_types"
local UintABC = require "st.zigbee.data_types.base_defs.UintABC"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.ApplianceEventsAlerts.types.AlertStructure: st.zigbee.data_types.Uint24
--- @alias AlertStructure
---
--- @field public byte_length number 3
--- @field public ALERT_ID number 255
--- @field public CATEGORY number 3840
--- @field public PRESENCE_RECOVERY number 12288
--- @field public UNUSED number 49152
--- @field public MANUFACTURER_SPECIFIC number 16711680
local AlertStructure = {}
local new_mt = UintABC.new_mt({NAME = "AlertStructure", ID = data_types.name_to_id_map["Uint24"]}, 3)
new_mt.__index.BASE_MASK             = 0xFFFFFF
new_mt.__index.ALERT_ID              = 0x0000FF
new_mt.__index.CATEGORY              = 0x000F00
new_mt.__index.PRESENCE_RECOVERY     = 0x003000
new_mt.__index.UNUSED                = 0x00C000
new_mt.__index.MANUFACTURER_SPECIFIC = 0xFF0000

--- @function AlertStructure:is_alert_id_set
--- @return boolean True if the value of ALERT_ID is non-zero
new_mt.__index.is_alert_id_set = function(self)
  return (self.value & self.ALERT_ID) ~= 0
end
 
--- @function AlertStructure:set_alert_id
--- Set the value of the bits in the ALERT_ID field
--- @param fieldVal number the value to set the bitfield to
new_mt.__index.set_alert_id = function(self, fieldVal)
  if ((fieldVal & ~(self.ALERT_ID >> 0)) ~= 0) then
    error("value too large for ALERT_ID")
  end
  self.value = self.value | (fieldVal << 0)
end

--- @function AlertStructure:get_alert_id
--- Get the value of the bits in the ALERT_ID field
new_mt.__index.get_alert_id = function(self)
  return ((self.value & self.ALERT_ID)) >> 0
end

--- @function AlertStructure:unset_alert_id
--- Set the value of the bits in the ALERT_ID field to 0
new_mt.__index.unset_alert_id = function(self)
  self.value = self.value & (~self.ALERT_ID & self.BASE_MASK)
end

--- @function AlertStructure:is_category_set
--- @return boolean True if the value of CATEGORY is non-zero
new_mt.__index.is_category_set = function(self)
  return (self.value & self.CATEGORY) ~= 0
end
 
--- @function AlertStructure:set_category
--- Set the value of the bits in the CATEGORY field
--- @param fieldVal number the value to set the bitfield to
new_mt.__index.set_category = function(self, fieldVal)
  if ((fieldVal & ~(self.CATEGORY >> 8)) ~= 0) then
    error("value too large for CATEGORY")
  end
  self.value = self.value | (fieldVal << 8)
end

--- @function AlertStructure:get_category
--- Get the value of the bits in the CATEGORY field
new_mt.__index.get_category = function(self)
  return ((self.value & self.CATEGORY)) >> 8
end

--- @function AlertStructure:unset_category
--- Set the value of the bits in the CATEGORY field to 0
new_mt.__index.unset_category = function(self)
  self.value = self.value & (~self.CATEGORY & self.BASE_MASK)
end

--- @function AlertStructure:is_presence_recovery_set
--- @return boolean True if the value of PRESENCE_RECOVERY is non-zero
new_mt.__index.is_presence_recovery_set = function(self)
  return (self.value & self.PRESENCE_RECOVERY) ~= 0
end
 
--- @function AlertStructure:set_presence_recovery
--- Set the value of the bits in the PRESENCE_RECOVERY field
--- @param fieldVal number the value to set the bitfield to
new_mt.__index.set_presence_recovery = function(self, fieldVal)
  if ((fieldVal & ~(self.PRESENCE_RECOVERY >> 12)) ~= 0) then
    error("value too large for PRESENCE_RECOVERY")
  end
  self.value = self.value | (fieldVal << 12)
end

--- @function AlertStructure:get_presence_recovery
--- Get the value of the bits in the PRESENCE_RECOVERY field
new_mt.__index.get_presence_recovery = function(self)
  return ((self.value & self.PRESENCE_RECOVERY)) >> 12
end

--- @function AlertStructure:unset_presence_recovery
--- Set the value of the bits in the PRESENCE_RECOVERY field to 0
new_mt.__index.unset_presence_recovery = function(self)
  self.value = self.value & (~self.PRESENCE_RECOVERY & self.BASE_MASK)
end

--- @function AlertStructure:is_unused_set
--- @return boolean True if the value of UNUSED is non-zero
new_mt.__index.is_unused_set = function(self)
  return (self.value & self.UNUSED) ~= 0
end
 
--- @function AlertStructure:set_unused
--- Set the value of the bits in the UNUSED field
--- @param fieldVal number the value to set the bitfield to
new_mt.__index.set_unused = function(self, fieldVal)
  if ((fieldVal & ~(self.UNUSED >> 14)) ~= 0) then
    error("value too large for UNUSED")
  end
  self.value = self.value | (fieldVal << 14)
end

--- @function AlertStructure:get_unused
--- Get the value of the bits in the UNUSED field
new_mt.__index.get_unused = function(self)
  return ((self.value & self.UNUSED)) >> 14
end

--- @function AlertStructure:unset_unused
--- Set the value of the bits in the UNUSED field to 0
new_mt.__index.unset_unused = function(self)
  self.value = self.value & (~self.UNUSED & self.BASE_MASK)
end

--- @function AlertStructure:is_manufacturer_specific_set
--- @return boolean True if the value of MANUFACTURER_SPECIFIC is non-zero
new_mt.__index.is_manufacturer_specific_set = function(self)
  return (self.value & self.MANUFACTURER_SPECIFIC) ~= 0
end
 
--- @function AlertStructure:set_manufacturer_specific
--- Set the value of the bits in the MANUFACTURER_SPECIFIC field
--- @param fieldVal number the value to set the bitfield to
new_mt.__index.set_manufacturer_specific = function(self, fieldVal)
  if ((fieldVal & ~(self.MANUFACTURER_SPECIFIC >> 16)) ~= 0) then
    error("value too large for MANUFACTURER_SPECIFIC")
  end
  self.value = self.value | (fieldVal << 16)
end

--- @function AlertStructure:get_manufacturer_specific
--- Get the value of the bits in the MANUFACTURER_SPECIFIC field
new_mt.__index.get_manufacturer_specific = function(self)
  return ((self.value & self.MANUFACTURER_SPECIFIC)) >> 16
end

--- @function AlertStructure:unset_manufacturer_specific
--- Set the value of the bits in the MANUFACTURER_SPECIFIC field to 0
new_mt.__index.unset_manufacturer_specific = function(self)
  self.value = self.value & (~self.MANUFACTURER_SPECIFIC & self.BASE_MASK)
end

setmetatable(AlertStructure, new_mt)
return AlertStructure
