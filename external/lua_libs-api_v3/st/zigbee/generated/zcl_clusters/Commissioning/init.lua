local cluster_base = require "st.zigbee.cluster_base"
local CommissioningClientAttributes = require "st.zigbee.generated.zcl_clusters.Commissioning.client.attributes" 
local CommissioningServerAttributes = require "st.zigbee.generated.zcl_clusters.Commissioning.server.attributes" 
local CommissioningClientCommands = require "st.zigbee.generated.zcl_clusters.Commissioning.client.commands"
local CommissioningServerCommands = require "st.zigbee.generated.zcl_clusters.Commissioning.server.commands"
local CommissioningTypes = require "st.zigbee.generated.zcl_clusters.Commissioning.types"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.Commissioning
--- @alias Commissioning
---
--- @field public ID number 0x0015 the ID of this cluster
--- @field public NAME string "Commissioning" the name of this cluster
--- @field public attributes st.zigbee.zcl.clusters.CommissioningServerAttributes | st.zigbee.zcl.clusters.CommissioningClientAttributes
--- @field public commands st.zigbee.zcl.clusters.CommissioningServerCommands | st.zigbee.zcl.clusters.CommissioningClientCommands
--- @field public types st.zigbee.zcl.clusters.CommissioningTypes
local Commissioning = {}

Commissioning.ID = 0x0015
Commissioning.NAME = "Commissioning"
Commissioning.server = {}
Commissioning.client = {}
Commissioning.server.attributes = CommissioningServerAttributes:set_parent_cluster(Commissioning) 
Commissioning.client.attributes = CommissioningClientAttributes:set_parent_cluster(Commissioning) 
Commissioning.server.commands = CommissioningServerCommands:set_parent_cluster(Commissioning)
Commissioning.client.commands = CommissioningClientCommands:set_parent_cluster(Commissioning)
Commissioning.types = CommissioningTypes

--- Find an attribute by id
---
--- @param attr_id number
function Commissioning:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "ShortAddress",
    [0x0001] = "ExtendedPANId",
    [0x0002] = "PANId",
    [0x0003] = "ChannelMask",
    [0x0004] = "ProtocolVersion",
    [0x0005] = "StackProfile",
    [0x0006] = "StartupControl",
    [0x0010] = "TrustCenterAddress",
    [0x0011] = "TrustCenterMasterKey",
    [0x0012] = "NetworkKey",
    [0x0013] = "UseInsecureJoin",
    [0x0014] = "PreconfiguredLinkKey",
    [0x0015] = "NetworkKeySeqNum",
    [0x0016] = "NetworkKeyType",
    [0x0017] = "NetworkManagerAddress",
    [0x0020] = "ScanAttempts",
    [0x0021] = "TimeBetweenScans",
    [0x0022] = "RejoinInterval",
    [0x0023] = "MaxRejoinInterval",
    [0x0030] = "IndirectPollRate",
    [0x0031] = "ParentRetryThreshold",
    [0x0040] = "ConcentratorFlag",
    [0x0041] = "ConcentratorRadius",
    [0x0042] = "ConcentratorDiscoveryTime",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end
  
--- Find a server command by id
---
--- @param command_id number
function Commissioning:get_server_command_by_id(command_id)
  local server_id_map = {
    [0x00] = "RestartDevice",
    [0x01] = "SaveStartupParameters",
    [0x02] = "RestoreStartupParameters",
    [0x03] = "ResetStartupParameters",
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end

--- Find a client command by id
---
--- @param command_id number
function Commissioning:get_client_command_by_id(command_id)
  local client_id_map = {
    [0x00] = "RestartDeviceResponse",
    [0x01] = "SaveStartupParametersResponse",
    [0x02] = "RestoreStartupParametersResponse",
    [0x03] = "ResetStartupParametersResponse",
  }
  if client_id_map[command_id] ~= nil then
    return self.client.commands[client_id_map[command_id]]
  end
  return nil
end

Commissioning.attribute_direction_map = {
  ["ShortAddress"] = "server",
  ["ExtendedPANId"] = "server",
  ["PANId"] = "server",
  ["ChannelMask"] = "server",
  ["ProtocolVersion"] = "server",
  ["StackProfile"] = "server",
  ["StartupControl"] = "server",
  ["TrustCenterAddress"] = "server",
  ["TrustCenterMasterKey"] = "server",
  ["NetworkKey"] = "server",
  ["UseInsecureJoin"] = "server",
  ["PreconfiguredLinkKey"] = "server",
  ["NetworkKeySeqNum"] = "server",
  ["NetworkKeyType"] = "server",
  ["NetworkManagerAddress"] = "server",
  ["ScanAttempts"] = "server",
  ["TimeBetweenScans"] = "server",
  ["RejoinInterval"] = "server",
  ["MaxRejoinInterval"] = "server",
  ["IndirectPollRate"] = "server",
  ["ParentRetryThreshold"] = "server",
  ["ConcentratorFlag"] = "server",
  ["ConcentratorRadius"] = "server",
  ["ConcentratorDiscoveryTime"] = "server",
}
Commissioning.command_direction_map = {
  ["RestartDeviceResponse"] = "client",
  ["SaveStartupParametersResponse"] = "client",
  ["RestoreStartupParametersResponse"] = "client",
  ["ResetStartupParametersResponse"] = "client",
  ["RestartDevice"] = "server",
  ["SaveStartupParameters"] = "server",
  ["RestoreStartupParameters"] = "server",
  ["ResetStartupParameters"] = "server",
}

local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = Commissioning.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, Commissioning.NAME))
  end
  return Commissioning[direction].attributes[key] 
end
Commissioning.attributes = {}
setmetatable(Commissioning.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = Commissioning.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, Commissioning.NAME))
  end
  return Commissioning[direction].commands[key] 
end
Commissioning.commands = {}
setmetatable(Commissioning.commands, command_helper_mt)

setmetatable(Commissioning, {__index = cluster_base})

return Commissioning
