local cluster_base = require "st.zigbee.cluster_base"
local data_types = require "st.zigbee.data_types"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.DoorLock.RFIDProgrammingEventMask
--- @alias RFIDProgrammingEventMask
---
--- @field public ID number 0x0047 the ID of this attribute
--- @field public NAME string "RFIDProgrammingEventMask" the name of this attribute
--- @field public data_type st.zigbee.data_types.Bitmap16 the data type of this attribute
--- @field public RFID_PROG_UNKNOWN_OR_MS number 1
--- @field public RFID_PROG_RFID_ADDED number 32
--- @field public RFID_PROG_RFID_DELETED number 64
local RFIDProgrammingEventMask = {
  ID = 0x0047,
  NAME = "RFIDProgrammingEventMask",
  base_type = data_types.Bitmap16,
}

RFIDProgrammingEventMask.BASE_MASK               = 0xFFFF
RFIDProgrammingEventMask.RFID_PROG_UNKNOWN_OR_MS = 0x0001
RFIDProgrammingEventMask.RFID_PROG_RFID_ADDED    = 0x0020
RFIDProgrammingEventMask.RFID_PROG_RFID_DELETED  = 0x0040


RFIDProgrammingEventMask.mask_fields = {
  BASE_MASK = 0xFFFF,
  RFID_PROG_UNKNOWN_OR_MS = 0x0001,
  RFID_PROG_RFID_ADDED = 0x0020,
  RFID_PROG_RFID_DELETED = 0x0040,
}


--- @function RFIDProgrammingEventMask:is_rfid_prog_unknown_or_ms_set
--- @return boolean True if the value of RFID_PROG_UNKNOWN_OR_MS is non-zero
RFIDProgrammingEventMask.is_rfid_prog_unknown_or_ms_set = function(self)
  return (self.value & self.RFID_PROG_UNKNOWN_OR_MS) ~= 0
end
 
--- @function RFIDProgrammingEventMask:set_rfid_prog_unknown_or_ms
--- Set the value of the bit in the RFID_PROG_UNKNOWN_OR_MS field to 1
RFIDProgrammingEventMask.set_rfid_prog_unknown_or_ms = function(self)
  self.value = self.value | self.RFID_PROG_UNKNOWN_OR_MS
end

--- @function RFIDProgrammingEventMask:unset_rfid_prog_unknown_or_ms
--- Set the value of the bits in the RFID_PROG_UNKNOWN_OR_MS field to 0
RFIDProgrammingEventMask.unset_rfid_prog_unknown_or_ms = function(self)
  self.value = self.value & (~self.RFID_PROG_UNKNOWN_OR_MS & self.BASE_MASK)
end

--- @function RFIDProgrammingEventMask:is_rfid_prog_rfid_added_set
--- @return boolean True if the value of RFID_PROG_RFID_ADDED is non-zero
RFIDProgrammingEventMask.is_rfid_prog_rfid_added_set = function(self)
  return (self.value & self.RFID_PROG_RFID_ADDED) ~= 0
end
 
--- @function RFIDProgrammingEventMask:set_rfid_prog_rfid_added
--- Set the value of the bit in the RFID_PROG_RFID_ADDED field to 1
RFIDProgrammingEventMask.set_rfid_prog_rfid_added = function(self)
  self.value = self.value | self.RFID_PROG_RFID_ADDED
end

--- @function RFIDProgrammingEventMask:unset_rfid_prog_rfid_added
--- Set the value of the bits in the RFID_PROG_RFID_ADDED field to 0
RFIDProgrammingEventMask.unset_rfid_prog_rfid_added = function(self)
  self.value = self.value & (~self.RFID_PROG_RFID_ADDED & self.BASE_MASK)
end

--- @function RFIDProgrammingEventMask:is_rfid_prog_rfid_deleted_set
--- @return boolean True if the value of RFID_PROG_RFID_DELETED is non-zero
RFIDProgrammingEventMask.is_rfid_prog_rfid_deleted_set = function(self)
  return (self.value & self.RFID_PROG_RFID_DELETED) ~= 0
end
 
--- @function RFIDProgrammingEventMask:set_rfid_prog_rfid_deleted
--- Set the value of the bit in the RFID_PROG_RFID_DELETED field to 1
RFIDProgrammingEventMask.set_rfid_prog_rfid_deleted = function(self)
  self.value = self.value | self.RFID_PROG_RFID_DELETED
end

--- @function RFIDProgrammingEventMask:unset_rfid_prog_rfid_deleted
--- Set the value of the bits in the RFID_PROG_RFID_DELETED field to 0
RFIDProgrammingEventMask.unset_rfid_prog_rfid_deleted = function(self)
  self.value = self.value & (~self.RFID_PROG_RFID_DELETED & self.BASE_MASK)
end


RFIDProgrammingEventMask.mask_methods = {
  is_rfid_prog_unknown_or_ms_set = RFIDProgrammingEventMask.is_rfid_prog_unknown_or_ms_set,
  set_rfid_prog_unknown_or_ms = RFIDProgrammingEventMask.set_rfid_prog_unknown_or_ms,
  unset_rfid_prog_unknown_or_ms = RFIDProgrammingEventMask.unset_rfid_prog_unknown_or_ms,
  is_rfid_prog_rfid_added_set = RFIDProgrammingEventMask.is_rfid_prog_rfid_added_set,
  set_rfid_prog_rfid_added = RFIDProgrammingEventMask.set_rfid_prog_rfid_added,
  unset_rfid_prog_rfid_added = RFIDProgrammingEventMask.unset_rfid_prog_rfid_added,
  is_rfid_prog_rfid_deleted_set = RFIDProgrammingEventMask.is_rfid_prog_rfid_deleted_set,
  set_rfid_prog_rfid_deleted = RFIDProgrammingEventMask.set_rfid_prog_rfid_deleted,
  unset_rfid_prog_rfid_deleted = RFIDProgrammingEventMask.unset_rfid_prog_rfid_deleted,
}

--- Add additional functionality to the base type object
---
--- @param base_type_obj st.zigbee.data_types.Bitmap16 the base data type object to add functionality to
function RFIDProgrammingEventMask:augment_type(base_type_obj)
  for k, v in pairs(self.mask_fields) do
    base_type_obj[k] = v
  end
  for k, v in pairs(self.mask_methods) do
    base_type_obj[k] = v
  end
  
  base_type_obj.field_name = self.NAME
  base_type_obj.pretty_print = self.pretty_print
end

function RFIDProgrammingEventMask.pretty_print(value_obj)
  local zb_utils = require "st.zigbee.utils" 
  local pattern = ">I" .. value_obj.byte_length
  return string.format("%s: %s[0x]", value_obj.field_name or value_obj.NAME, RFIDProgrammingEventMask.NAME, zb_utils.pretty_print_hex_str(string.pack(pattern, value_obj.value)))
end

--- @function RFIDProgrammingEventMask:build_test_attr_report
---
--- Build a Rx Zigbee message as if a device reported this attribute
--- @param device st.zigbee.Device
--- @param data st.zigbee.data_types.Bitmap16 the attribute value
--- @return st.zigbee.ZigbeeMessageRx containing an AttributeReport body
RFIDProgrammingEventMask.build_test_attr_report = cluster_base.build_test_attr_report

--- @function RFIDProgrammingEventMask:build_test_read_attr_response
---
--- Build a Rx Zigbee message as if a device sent a read response for this attribute
--- @param device st.zigbee.Device
--- @param data st.zigbee.data_types.Bitmap16 the attribute value
--- @return st.zigbee.ZigbeeMessageRx containing an ReadAttributeResponse body
RFIDProgrammingEventMask.build_test_read_attr_response = cluster_base.build_test_read_attr_response

--- Create a Bitmap16 object of this attribute with any additional features provided for the attribute
---
--- This is also usable with the RFIDProgrammingEventMask(...) syntax
---
--- @vararg vararg the values needed to construct a Bitmap16
--- @return st.zigbee.data_types.Bitmap16
function RFIDProgrammingEventMask:new_value(...)
    local o = self.base_type(table.unpack({...}))
    self:augment_type(o)
    return o
end

--- Construct a st.zigbee.ZigbeeMessageTx to read this attribute from a device
---
--- @param device st.zigbee.Device
--- @return st.zigbee.ZigbeeMessageTx containing a ReadAttribute body
function RFIDProgrammingEventMask:read(device)
    return cluster_base.read_attribute(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID))
end

--- Construct a st.zigbee.ZigbeeMessageTx to configure this attribute for reporting on a device
---
--- @param device st.zigbee.Device
--- @param min_rep_int number|st.zigbee.data_types.Uint16 the minimum interval allowed between reports of this attribute
--- @param max_rep_int number|st.zigbee.data_types.Uint16 the maximum interval allowed between reports of this attribute
--- @return st.zigbee.ZigbeeMessageTx containing a ConfigureReporting body
function RFIDProgrammingEventMask:configure_reporting(device, min_rep_int, max_rep_int)
  local min = data_types.validate_or_build_type(min_rep_int, data_types.Uint16, "minimum_reporting_interval")
  local max = data_types.validate_or_build_type(max_rep_int, data_types.Uint16, "maximum_reporting_interval")
  local rep_change = nil
  return cluster_base.configure_reporting(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID), data_types.ZigbeeDataType(self.base_type.ID), min, max, rep_change)
end

--- Write a value to this attribute on a device
---
--- @param device st.zigbee.Device
--- @param value st.zigbee.data_types.Bitmap16 the value to write
function RFIDProgrammingEventMask:write(device, value)
  local data = data_types.validate_or_build_type(value, self.base_type)
  self:augment_type(data)
  return cluster_base.write_attribute(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID), data)
end

function RFIDProgrammingEventMask:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(RFIDProgrammingEventMask, {__call = RFIDProgrammingEventMask.new_value})
return RFIDProgrammingEventMask
