local cluster_base = require "st.zigbee.cluster_base"
local data_types = require "st.zigbee.data_types"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.DoorLock.RFProgrammingEventMask
--- @alias RFProgrammingEventMask
---
--- @field public ID number 0x0046 the ID of this attribute
--- @field public NAME string "RFProgrammingEventMask" the name of this attribute
--- @field public data_type st.zigbee.data_types.Bitmap16 the data type of this attribute
--- @field public RF_PROG_UNKNOWN_OR_MS number 1
--- @field public RF_PROG_PIN_ADDED number 4
--- @field public RF_PROG_PIN_DELETED number 8
--- @field public RF_PROG_PIN_CHANGED number 16
--- @field public RF_PROG_RFID_ADDED number 32
--- @field public RF_PROG_RFID_DELETED number 64
local RFProgrammingEventMask = {
  ID = 0x0046,
  NAME = "RFProgrammingEventMask",
  base_type = data_types.Bitmap16,
}

RFProgrammingEventMask.BASE_MASK             = 0xFFFF
RFProgrammingEventMask.RF_PROG_UNKNOWN_OR_MS = 0x0001
RFProgrammingEventMask.RF_PROG_PIN_ADDED     = 0x0004
RFProgrammingEventMask.RF_PROG_PIN_DELETED   = 0x0008
RFProgrammingEventMask.RF_PROG_PIN_CHANGED   = 0x0010
RFProgrammingEventMask.RF_PROG_RFID_ADDED    = 0x0020
RFProgrammingEventMask.RF_PROG_RFID_DELETED  = 0x0040


RFProgrammingEventMask.mask_fields = {
  BASE_MASK = 0xFFFF,
  RF_PROG_UNKNOWN_OR_MS = 0x0001,
  RF_PROG_PIN_ADDED = 0x0004,
  RF_PROG_PIN_DELETED = 0x0008,
  RF_PROG_PIN_CHANGED = 0x0010,
  RF_PROG_RFID_ADDED = 0x0020,
  RF_PROG_RFID_DELETED = 0x0040,
}


--- @function RFProgrammingEventMask:is_rf_prog_unknown_or_ms_set
--- @return boolean True if the value of RF_PROG_UNKNOWN_OR_MS is non-zero
RFProgrammingEventMask.is_rf_prog_unknown_or_ms_set = function(self)
  return (self.value & self.RF_PROG_UNKNOWN_OR_MS) ~= 0
end
 
--- @function RFProgrammingEventMask:set_rf_prog_unknown_or_ms
--- Set the value of the bit in the RF_PROG_UNKNOWN_OR_MS field to 1
RFProgrammingEventMask.set_rf_prog_unknown_or_ms = function(self)
  self.value = self.value | self.RF_PROG_UNKNOWN_OR_MS
end

--- @function RFProgrammingEventMask:unset_rf_prog_unknown_or_ms
--- Set the value of the bits in the RF_PROG_UNKNOWN_OR_MS field to 0
RFProgrammingEventMask.unset_rf_prog_unknown_or_ms = function(self)
  self.value = self.value & (~self.RF_PROG_UNKNOWN_OR_MS & self.BASE_MASK)
end

--- @function RFProgrammingEventMask:is_rf_prog_pin_added_set
--- @return boolean True if the value of RF_PROG_PIN_ADDED is non-zero
RFProgrammingEventMask.is_rf_prog_pin_added_set = function(self)
  return (self.value & self.RF_PROG_PIN_ADDED) ~= 0
end
 
--- @function RFProgrammingEventMask:set_rf_prog_pin_added
--- Set the value of the bit in the RF_PROG_PIN_ADDED field to 1
RFProgrammingEventMask.set_rf_prog_pin_added = function(self)
  self.value = self.value | self.RF_PROG_PIN_ADDED
end

--- @function RFProgrammingEventMask:unset_rf_prog_pin_added
--- Set the value of the bits in the RF_PROG_PIN_ADDED field to 0
RFProgrammingEventMask.unset_rf_prog_pin_added = function(self)
  self.value = self.value & (~self.RF_PROG_PIN_ADDED & self.BASE_MASK)
end

--- @function RFProgrammingEventMask:is_rf_prog_pin_deleted_set
--- @return boolean True if the value of RF_PROG_PIN_DELETED is non-zero
RFProgrammingEventMask.is_rf_prog_pin_deleted_set = function(self)
  return (self.value & self.RF_PROG_PIN_DELETED) ~= 0
end
 
--- @function RFProgrammingEventMask:set_rf_prog_pin_deleted
--- Set the value of the bit in the RF_PROG_PIN_DELETED field to 1
RFProgrammingEventMask.set_rf_prog_pin_deleted = function(self)
  self.value = self.value | self.RF_PROG_PIN_DELETED
end

--- @function RFProgrammingEventMask:unset_rf_prog_pin_deleted
--- Set the value of the bits in the RF_PROG_PIN_DELETED field to 0
RFProgrammingEventMask.unset_rf_prog_pin_deleted = function(self)
  self.value = self.value & (~self.RF_PROG_PIN_DELETED & self.BASE_MASK)
end

--- @function RFProgrammingEventMask:is_rf_prog_pin_changed_set
--- @return boolean True if the value of RF_PROG_PIN_CHANGED is non-zero
RFProgrammingEventMask.is_rf_prog_pin_changed_set = function(self)
  return (self.value & self.RF_PROG_PIN_CHANGED) ~= 0
end
 
--- @function RFProgrammingEventMask:set_rf_prog_pin_changed
--- Set the value of the bit in the RF_PROG_PIN_CHANGED field to 1
RFProgrammingEventMask.set_rf_prog_pin_changed = function(self)
  self.value = self.value | self.RF_PROG_PIN_CHANGED
end

--- @function RFProgrammingEventMask:unset_rf_prog_pin_changed
--- Set the value of the bits in the RF_PROG_PIN_CHANGED field to 0
RFProgrammingEventMask.unset_rf_prog_pin_changed = function(self)
  self.value = self.value & (~self.RF_PROG_PIN_CHANGED & self.BASE_MASK)
end

--- @function RFProgrammingEventMask:is_rf_prog_rfid_added_set
--- @return boolean True if the value of RF_PROG_RFID_ADDED is non-zero
RFProgrammingEventMask.is_rf_prog_rfid_added_set = function(self)
  return (self.value & self.RF_PROG_RFID_ADDED) ~= 0
end
 
--- @function RFProgrammingEventMask:set_rf_prog_rfid_added
--- Set the value of the bit in the RF_PROG_RFID_ADDED field to 1
RFProgrammingEventMask.set_rf_prog_rfid_added = function(self)
  self.value = self.value | self.RF_PROG_RFID_ADDED
end

--- @function RFProgrammingEventMask:unset_rf_prog_rfid_added
--- Set the value of the bits in the RF_PROG_RFID_ADDED field to 0
RFProgrammingEventMask.unset_rf_prog_rfid_added = function(self)
  self.value = self.value & (~self.RF_PROG_RFID_ADDED & self.BASE_MASK)
end

--- @function RFProgrammingEventMask:is_rf_prog_rfid_deleted_set
--- @return boolean True if the value of RF_PROG_RFID_DELETED is non-zero
RFProgrammingEventMask.is_rf_prog_rfid_deleted_set = function(self)
  return (self.value & self.RF_PROG_RFID_DELETED) ~= 0
end
 
--- @function RFProgrammingEventMask:set_rf_prog_rfid_deleted
--- Set the value of the bit in the RF_PROG_RFID_DELETED field to 1
RFProgrammingEventMask.set_rf_prog_rfid_deleted = function(self)
  self.value = self.value | self.RF_PROG_RFID_DELETED
end

--- @function RFProgrammingEventMask:unset_rf_prog_rfid_deleted
--- Set the value of the bits in the RF_PROG_RFID_DELETED field to 0
RFProgrammingEventMask.unset_rf_prog_rfid_deleted = function(self)
  self.value = self.value & (~self.RF_PROG_RFID_DELETED & self.BASE_MASK)
end


RFProgrammingEventMask.mask_methods = {
  is_rf_prog_unknown_or_ms_set = RFProgrammingEventMask.is_rf_prog_unknown_or_ms_set,
  set_rf_prog_unknown_or_ms = RFProgrammingEventMask.set_rf_prog_unknown_or_ms,
  unset_rf_prog_unknown_or_ms = RFProgrammingEventMask.unset_rf_prog_unknown_or_ms,
  is_rf_prog_pin_added_set = RFProgrammingEventMask.is_rf_prog_pin_added_set,
  set_rf_prog_pin_added = RFProgrammingEventMask.set_rf_prog_pin_added,
  unset_rf_prog_pin_added = RFProgrammingEventMask.unset_rf_prog_pin_added,
  is_rf_prog_pin_deleted_set = RFProgrammingEventMask.is_rf_prog_pin_deleted_set,
  set_rf_prog_pin_deleted = RFProgrammingEventMask.set_rf_prog_pin_deleted,
  unset_rf_prog_pin_deleted = RFProgrammingEventMask.unset_rf_prog_pin_deleted,
  is_rf_prog_pin_changed_set = RFProgrammingEventMask.is_rf_prog_pin_changed_set,
  set_rf_prog_pin_changed = RFProgrammingEventMask.set_rf_prog_pin_changed,
  unset_rf_prog_pin_changed = RFProgrammingEventMask.unset_rf_prog_pin_changed,
  is_rf_prog_rfid_added_set = RFProgrammingEventMask.is_rf_prog_rfid_added_set,
  set_rf_prog_rfid_added = RFProgrammingEventMask.set_rf_prog_rfid_added,
  unset_rf_prog_rfid_added = RFProgrammingEventMask.unset_rf_prog_rfid_added,
  is_rf_prog_rfid_deleted_set = RFProgrammingEventMask.is_rf_prog_rfid_deleted_set,
  set_rf_prog_rfid_deleted = RFProgrammingEventMask.set_rf_prog_rfid_deleted,
  unset_rf_prog_rfid_deleted = RFProgrammingEventMask.unset_rf_prog_rfid_deleted,
}

--- Add additional functionality to the base type object
---
--- @param base_type_obj st.zigbee.data_types.Bitmap16 the base data type object to add functionality to
function RFProgrammingEventMask:augment_type(base_type_obj)
  for k, v in pairs(self.mask_fields) do
    base_type_obj[k] = v
  end
  for k, v in pairs(self.mask_methods) do
    base_type_obj[k] = v
  end
  
  base_type_obj.field_name = self.NAME
  base_type_obj.pretty_print = self.pretty_print
end

function RFProgrammingEventMask.pretty_print(value_obj)
  local zb_utils = require "st.zigbee.utils" 
  local pattern = ">I" .. value_obj.byte_length
  return string.format("%s: %s[0x]", value_obj.field_name or value_obj.NAME, RFProgrammingEventMask.NAME, zb_utils.pretty_print_hex_str(string.pack(pattern, value_obj.value)))
end

--- @function RFProgrammingEventMask:build_test_attr_report
---
--- Build a Rx Zigbee message as if a device reported this attribute
--- @param device st.zigbee.Device
--- @param data st.zigbee.data_types.Bitmap16 the attribute value
--- @return st.zigbee.ZigbeeMessageRx containing an AttributeReport body
RFProgrammingEventMask.build_test_attr_report = cluster_base.build_test_attr_report

--- @function RFProgrammingEventMask:build_test_read_attr_response
---
--- Build a Rx Zigbee message as if a device sent a read response for this attribute
--- @param device st.zigbee.Device
--- @param data st.zigbee.data_types.Bitmap16 the attribute value
--- @return st.zigbee.ZigbeeMessageRx containing an ReadAttributeResponse body
RFProgrammingEventMask.build_test_read_attr_response = cluster_base.build_test_read_attr_response

--- Create a Bitmap16 object of this attribute with any additional features provided for the attribute
---
--- This is also usable with the RFProgrammingEventMask(...) syntax
---
--- @vararg vararg the values needed to construct a Bitmap16
--- @return st.zigbee.data_types.Bitmap16
function RFProgrammingEventMask:new_value(...)
    local o = self.base_type(table.unpack({...}))
    self:augment_type(o)
    return o
end

--- Construct a st.zigbee.ZigbeeMessageTx to read this attribute from a device
---
--- @param device st.zigbee.Device
--- @return st.zigbee.ZigbeeMessageTx containing a ReadAttribute body
function RFProgrammingEventMask:read(device)
    return cluster_base.read_attribute(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID))
end

--- Construct a st.zigbee.ZigbeeMessageTx to configure this attribute for reporting on a device
---
--- @param device st.zigbee.Device
--- @param min_rep_int number|st.zigbee.data_types.Uint16 the minimum interval allowed between reports of this attribute
--- @param max_rep_int number|st.zigbee.data_types.Uint16 the maximum interval allowed between reports of this attribute
--- @return st.zigbee.ZigbeeMessageTx containing a ConfigureReporting body
function RFProgrammingEventMask:configure_reporting(device, min_rep_int, max_rep_int)
  local min = data_types.validate_or_build_type(min_rep_int, data_types.Uint16, "minimum_reporting_interval")
  local max = data_types.validate_or_build_type(max_rep_int, data_types.Uint16, "maximum_reporting_interval")
  local rep_change = nil
  return cluster_base.configure_reporting(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID), data_types.ZigbeeDataType(self.base_type.ID), min, max, rep_change)
end

--- Write a value to this attribute on a device
---
--- @param device st.zigbee.Device
--- @param value st.zigbee.data_types.Bitmap16 the value to write
function RFProgrammingEventMask:write(device, value)
  local data = data_types.validate_or_build_type(value, self.base_type)
  self:augment_type(data)
  return cluster_base.write_attribute(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID), data)
end

function RFProgrammingEventMask:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(RFProgrammingEventMask, {__call = RFProgrammingEventMask.new_value})
return RFProgrammingEventMask
