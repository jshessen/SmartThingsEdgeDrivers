local data_types = require "st.zigbee.data_types"
local utils = require "st.zigbee.utils"
local log = require "log"
local ProfileIntervalPeriod = require "st.zigbee.generated.types.ProfileIntervalPeriod"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

-----------------------------------------------------------
-- ElectricalMeasurement command GetProfileInfoResponse
-----------------------------------------------------------

--- @class st.zigbee.zcl.clusters.ElectricalMeasurement.GetProfileInfoResponse
--- @alias GetProfileInfoResponse
---
--- @field public ID number 0x00 the ID of this command
--- @field public NAME string "GetProfileInfoResponse" the name of this command
--- @field public profile_count st.zigbee.data_types.Uint8
--- @field public profile_interval_period st.zigbee.data_types.ProfileIntervalPeriod
--- @field public max_number_of_intervals st.zigbee.data_types.Uint8
--- @field public list_of_attributes_list st.zigbee.data_types.AttributeId[]
local GetProfileInfoResponse = {}
GetProfileInfoResponse.NAME = "GetProfileInfoResponse"
GetProfileInfoResponse.ID = 0x00
GetProfileInfoResponse.args_def = {
  {
    name = "profile_count",
    optional = false,
    data_type = data_types.Uint8,
    is_complex = false,
    is_array = false,
    default = 0x00,
  },
  {
    name = "profile_interval_period",
    optional = false,
    data_type = ProfileIntervalPeriod,
    is_complex = false,
    is_array = false,
  },
  {
    name = "max_number_of_intervals",
    optional = false,
    data_type = data_types.Uint8,
    is_complex = false,
    is_array = false,
    default = 0x00,
  },
  {
    name = "list_of_attributes",
    optional = false,
    data_type = data_types.AttributeId,
    is_complex = false,
    is_array = true,
    array_length_size = 0,
  },
}

function GetProfileInfoResponse:get_fields()
  local fields = {}
  for _, v in ipairs(self.args_def) do
    if v.is_array then
      if v.array_length_size ~= 0 then
        fields[#fields + 1] = self[v.name .. "_length"]
      end
      if self[v.name .. "_list"] ~= nil then
        for _, entry in ipairs(self[v.name .. "_list"]) do
          fields[#fields + 1] = entry
        end
      end
    else
      if self[v.name] ~= nil then
        fields[#fields + 1] = self[v.name]
      end
    end
  end
  return fields
end

GetProfileInfoResponse.get_length = utils.length_from_fields
GetProfileInfoResponse._serialize = utils.serialize_from_fields
GetProfileInfoResponse.pretty_print = utils.print_from_fields

--- Deserialize this command
---
--- @param buf buf the bytes of the command body
--- @return GetProfileInfoResponse
function GetProfileInfoResponse.deserialize(buf)
  local out = {}
  for _, v in ipairs(GetProfileInfoResponse.args_def) do
    if buf:remain() > 0 then
      if v.is_array then
        if v.array_length_size ~= 0 then
          local entry_name = v.name .. "_length"
          local len = v.array_length_size or 1
          -- Start a 1 byte lenght at Uint8 and increment from there
          local len_data_type_id = 0x1F + len
          out[entry_name] = data_types.parse_data_type(len_data_type_id, buf, entry_name)
        end
        local entry_name = v.name .. "_list"
        out[entry_name] = {}
        while buf:remain() > 0 do
          out[entry_name][#out[entry_name] + 1] = v.data_type.deserialize(buf)
        end
      else
        out[v.name] = v.data_type.deserialize(buf)
      end
    elseif not v.optional then
      log.debug_with({ hub_logs = true }, "Missing command arg " .. v.name .. " for deserializing GetProfileInfoResponse")
    end
  end
  setmetatable(out, {__index = GetProfileInfoResponse})
  out:set_field_names()
  return out
end

function GetProfileInfoResponse:set_field_names()
  for _, v in ipairs(self.args_def) do
    if self[v.name] ~= nil then
      self[v.name].field_name = v.name
    end
  end
end

--- Build a version of this message as if it came from the device
---
--- @param device st.zigbee.Device the device to build the message from
--- @param profile_count st.zigbee.data_types.Uint8
--- @param profile_interval_period st.zigbee.data_types.ProfileIntervalPeriod
--- @param max_number_of_intervals st.zigbee.data_types.Uint8
--- @param list_of_attributes st.zigbee.data_types.AttributeId[]
--- @return st.zigbee.ZigbeeMessageRx The full Zigbee message containing this command body
function GetProfileInfoResponse.build_test_rx(device, profile_count, profile_interval_period, max_number_of_intervals, list_of_attributes)
  local out = {}
  local args = {profile_count, profile_interval_period, max_number_of_intervals, list_of_attributes}
  for i,v in ipairs(GetProfileInfoResponse.args_def) do
    if v.optional and args[i] == nil then
      out[v.name] = nil
    elseif not v.optional and args[i] == nil then
      out[v.name] = data_types.validate_or_build_type(v.default, v.data_type, v.name)   
    elseif v.is_array then
      local validated_list = {}
      for j, entry in ipairs(args[i]) do
        validated_list[j] = data_types.validate_or_build_type(entry, v.data_type, v.name .. tostring(j))
      end
      if v.array_length_size ~= 0 then
        local len_name =  v.name .. "_length"
        local len = v.array_length_size or 1
        -- Start a 1 byte lenght at Uint8 and increment from there
        local len_data_type = data_types.get_data_type_by_id(0x1F + len)
        out[len_name] = data_types.validate_or_build_type(#validated_list, len_data_type, len_name)
      end
      out[v.name .. "_list"] = validated_list
    else
      out[v.name] = data_types.validate_or_build_type(args[i], v.data_type, v.name)
    end
  end
  setmetatable(out, {__index = GetProfileInfoResponse})
  out:set_field_names()
  return GetProfileInfoResponse._cluster:build_test_rx_cluster_specific_command(device, out, "client")
end

--- Initialize the GetProfileInfoResponse command
---
--- @param self GetProfileInfoResponse the template class for this command
--- @param device st.zigbee.Device the device to build this message to
--- @param profile_count st.zigbee.data_types.Uint8
--- @param profile_interval_period st.zigbee.data_types.ProfileIntervalPeriod
--- @param max_number_of_intervals st.zigbee.data_types.Uint8
--- @param list_of_attributes st.zigbee.data_types.AttributeId[]
--- @return st.zigbee.ZigbeeMessageTx the full command addressed to the device
function GetProfileInfoResponse:init(device, profile_count, profile_interval_period, max_number_of_intervals, list_of_attributes)
  local out = {}
  local args = {profile_count, profile_interval_period, max_number_of_intervals, list_of_attributes}
  if #args > #self.args_def then
    error(self.NAME .. " received too many arguments")
  end
  for i,v in ipairs(self.args_def) do
    if v.optional and args[i] == nil then
      out[v.name] = nil
    elseif not v.optional and args[i] == nil then
      out[v.name] = data_types.validate_or_build_type(v.default, v.data_type, v.name)   
    elseif v.is_array then
      local validated_list = {}
      for j, entry in ipairs(args[i]) do
        validated_list[j] = data_types.validate_or_build_type(entry, v.data_type, v.name .. tostring(j))
      end
      if v.array_length_size ~= 0 then
        local len_name =  v.name .. "_length"
        local len = v.array_length_size or 1
        -- Start a 1 byte lenght at Uint8 and increment from there
        local len_data_type = data_types.get_data_type_by_id(0x1F + len)
        out[len_name] = data_types.validate_or_build_type(#validated_list, len_data_type, len_name)
      end
      out[v.name .. "_list"] = validated_list
    else
      out[v.name] = data_types.validate_or_build_type(args[i], v.data_type, v.name)
    end
  end
  setmetatable(out, {
    __index = GetProfileInfoResponse,
    __tostring = GetProfileInfoResponse.pretty_print
  })
  out:set_field_names()
  return self._cluster:build_cluster_specific_command(device, out, "client")
end

function GetProfileInfoResponse:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(GetProfileInfoResponse, {__call = GetProfileInfoResponse.init})

return GetProfileInfoResponse
