local data_types = require "st.zigbee.data_types"
local BitmapABC = require "st.zigbee.data_types.base_defs.BitmapABC"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.IASWD.types.SirenConfiguration: st.zigbee.data_types.Bitmap8
--- @alias SirenConfiguration
---
--- @field public byte_length number 1
--- @field public SIREN_LEVEL number 3
--- @field public STROBE number 12
--- @field public WARNING_MODE number 240
local SirenConfiguration = {}
local new_mt = BitmapABC.new_mt({NAME = "SirenConfiguration", ID = data_types.name_to_id_map["Bitmap8"]}, 1)
new_mt.__index.BASE_MASK    = 0xFF
new_mt.__index.SIREN_LEVEL  = 0x03
new_mt.__index.STROBE       = 0x0C
new_mt.__index.WARNING_MODE = 0xF0

--- @function SirenConfiguration:is_siren_level_set
--- @return boolean True if the value of SIREN_LEVEL is non-zero
new_mt.__index.is_siren_level_set = function(self)
  return (self.value & self.SIREN_LEVEL) ~= 0
end
 
--- @function SirenConfiguration:set_siren_level
--- Set the value of the bits in the SIREN_LEVEL field
--- @param fieldVal number the value to set the bitfield to
new_mt.__index.set_siren_level = function(self, fieldVal)
  if ((fieldVal & ~(self.SIREN_LEVEL >> 0)) ~= 0) then
    error("value too large for SIREN_LEVEL")
  end
  self.value = self.value | (fieldVal << 0)
end

--- @function SirenConfiguration:get_siren_level
--- Get the value of the bits in the SIREN_LEVEL field
new_mt.__index.get_siren_level = function(self)
  return ((self.value & self.SIREN_LEVEL)) >> 0
end

--- @function SirenConfiguration:unset_siren_level
--- Set the value of the bits in the SIREN_LEVEL field to 0
new_mt.__index.unset_siren_level = function(self)
  self.value = self.value & (~self.SIREN_LEVEL & self.BASE_MASK)
end

--- @function SirenConfiguration:is_strobe_set
--- @return boolean True if the value of STROBE is non-zero
new_mt.__index.is_strobe_set = function(self)
  return (self.value & self.STROBE) ~= 0
end
 
--- @function SirenConfiguration:set_strobe
--- Set the value of the bits in the STROBE field
--- @param fieldVal number the value to set the bitfield to
new_mt.__index.set_strobe = function(self, fieldVal)
  if ((fieldVal & ~(self.STROBE >> 2)) ~= 0) then
    error("value too large for STROBE")
  end
  self.value = self.value | (fieldVal << 2)
end

--- @function SirenConfiguration:get_strobe
--- Get the value of the bits in the STROBE field
new_mt.__index.get_strobe = function(self)
  return ((self.value & self.STROBE)) >> 2
end

--- @function SirenConfiguration:unset_strobe
--- Set the value of the bits in the STROBE field to 0
new_mt.__index.unset_strobe = function(self)
  self.value = self.value & (~self.STROBE & self.BASE_MASK)
end

--- @function SirenConfiguration:is_warning_mode_set
--- @return boolean True if the value of WARNING_MODE is non-zero
new_mt.__index.is_warning_mode_set = function(self)
  return (self.value & self.WARNING_MODE) ~= 0
end
 
--- @function SirenConfiguration:set_warning_mode
--- Set the value of the bits in the WARNING_MODE field
--- @param fieldVal number the value to set the bitfield to
new_mt.__index.set_warning_mode = function(self, fieldVal)
  if ((fieldVal & ~(self.WARNING_MODE >> 4)) ~= 0) then
    error("value too large for WARNING_MODE")
  end
  self.value = self.value | (fieldVal << 4)
end

--- @function SirenConfiguration:get_warning_mode
--- Get the value of the bits in the WARNING_MODE field
new_mt.__index.get_warning_mode = function(self)
  return ((self.value & self.WARNING_MODE)) >> 4
end

--- @function SirenConfiguration:unset_warning_mode
--- Set the value of the bits in the WARNING_MODE field to 0
new_mt.__index.unset_warning_mode = function(self)
  self.value = self.value & (~self.WARNING_MODE & self.BASE_MASK)
end

setmetatable(SirenConfiguration, new_mt)
return SirenConfiguration
