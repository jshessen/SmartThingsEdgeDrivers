local cluster_base = require "st.zigbee.cluster_base"
local IASZoneClientAttributes = require "st.zigbee.generated.zcl_clusters.IASZone.client.attributes" 
local IASZoneServerAttributes = require "st.zigbee.generated.zcl_clusters.IASZone.server.attributes" 
local IASZoneClientCommands = require "st.zigbee.generated.zcl_clusters.IASZone.client.commands"
local IASZoneServerCommands = require "st.zigbee.generated.zcl_clusters.IASZone.server.commands"
local IASZoneTypes = require "st.zigbee.generated.zcl_clusters.IASZone.types"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.IASZone
--- @alias IASZone
---
--- @field public ID number 0x0500 the ID of this cluster
--- @field public NAME string "IASZone" the name of this cluster
--- @field public attributes st.zigbee.zcl.clusters.IASZoneServerAttributes | st.zigbee.zcl.clusters.IASZoneClientAttributes
--- @field public commands st.zigbee.zcl.clusters.IASZoneServerCommands | st.zigbee.zcl.clusters.IASZoneClientCommands
--- @field public types st.zigbee.zcl.clusters.IASZoneTypes
local IASZone = {}

IASZone.ID = 0x0500
IASZone.NAME = "IASZone"
IASZone.server = {}
IASZone.client = {}
IASZone.server.attributes = IASZoneServerAttributes:set_parent_cluster(IASZone) 
IASZone.client.attributes = IASZoneClientAttributes:set_parent_cluster(IASZone) 
IASZone.server.commands = IASZoneServerCommands:set_parent_cluster(IASZone)
IASZone.client.commands = IASZoneClientCommands:set_parent_cluster(IASZone)
IASZone.types = IASZoneTypes

--- Find an attribute by id
---
--- @param attr_id number
function IASZone:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "ZoneState",
    [0x0001] = "ZoneType",
    [0x0002] = "ZoneStatus",
    [0x0010] = "IASCIEAddress",
    [0x0011] = "ZoneID",
    [0x0012] = "NumberOfZoneSensitivityLevelsSupported",
    [0x0013] = "CurrentZoneSensitivityLevel",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end
  
--- Find a server command by id
---
--- @param command_id number
function IASZone:get_server_command_by_id(command_id)
  local server_id_map = {
    [0x00] = "ZoneEnrollResponse",
    [0x01] = "InitiateNormalOperationMode",
    [0x02] = "InitiateTestMode",
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end

--- Find a client command by id
---
--- @param command_id number
function IASZone:get_client_command_by_id(command_id)
  local client_id_map = {
    [0x00] = "ZoneStatusChangeNotification",
    [0x01] = "ZoneEnrollRequest",
  }
  if client_id_map[command_id] ~= nil then
    return self.client.commands[client_id_map[command_id]]
  end
  return nil
end

IASZone.attribute_direction_map = {
  ["ZoneState"] = "server",
  ["ZoneType"] = "server",
  ["ZoneStatus"] = "server",
  ["IASCIEAddress"] = "server",
  ["ZoneID"] = "server",
  ["NumberOfZoneSensitivityLevelsSupported"] = "server",
  ["CurrentZoneSensitivityLevel"] = "server",
}
IASZone.command_direction_map = {
  ["ZoneStatusChangeNotification"] = "client",
  ["ZoneEnrollRequest"] = "client",
  ["ZoneEnrollResponse"] = "server",
  ["InitiateNormalOperationMode"] = "server",
  ["InitiateTestMode"] = "server",
}

local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = IASZone.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, IASZone.NAME))
  end
  return IASZone[direction].attributes[key] 
end
IASZone.attributes = {}
setmetatable(IASZone.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = IASZone.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, IASZone.NAME))
  end
  return IASZone[direction].commands[key] 
end
IASZone.commands = {}
setmetatable(IASZone.commands, command_helper_mt)

setmetatable(IASZone, {__index = cluster_base})

return IASZone
