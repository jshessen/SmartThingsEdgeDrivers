local cluster_base = require "st.zigbee.cluster_base"
local LevelClientAttributes = require "st.zigbee.generated.zcl_clusters.Level.client.attributes" 
local LevelServerAttributes = require "st.zigbee.generated.zcl_clusters.Level.server.attributes" 
local LevelClientCommands = require "st.zigbee.generated.zcl_clusters.Level.client.commands"
local LevelServerCommands = require "st.zigbee.generated.zcl_clusters.Level.server.commands"
local LevelTypes = require "st.zigbee.generated.zcl_clusters.Level.types"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.Level
--- @alias Level
---
--- @field public ID number 0x0008 the ID of this cluster
--- @field public NAME string "Level" the name of this cluster
--- @field public attributes st.zigbee.zcl.clusters.LevelServerAttributes | st.zigbee.zcl.clusters.LevelClientAttributes
--- @field public commands st.zigbee.zcl.clusters.LevelServerCommands | st.zigbee.zcl.clusters.LevelClientCommands
--- @field public types st.zigbee.zcl.clusters.LevelTypes
local Level = {}

Level.ID = 0x0008
Level.NAME = "Level"
Level.server = {}
Level.client = {}
Level.server.attributes = LevelServerAttributes:set_parent_cluster(Level) 
Level.client.attributes = LevelClientAttributes:set_parent_cluster(Level) 
Level.server.commands = LevelServerCommands:set_parent_cluster(Level)
Level.client.commands = LevelClientCommands:set_parent_cluster(Level)
Level.types = LevelTypes

--- Find an attribute by id
---
--- @param attr_id number
function Level:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "CurrentLevel",
    [0x0001] = "RemainingTime",
    [0x0002] = "MinLevel",
    [0x0003] = "MaxLevel",
    [0x0004] = "CurrentFrequency",
    [0x0005] = "MinFrequency",
    [0x0006] = "MaxFrequency",
    [0x0010] = "OnOffTransitionTime",
    [0x0011] = "OnLevel",
    [0x0012] = "OnTransitionTime",
    [0x0013] = "OffTransitionTime",
    [0x0014] = "DefaultMoveRate",
    [0x000F] = "Options",
    [0x4000] = "StartUpCurrentLevel",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end
  
--- Find a server command by id
---
--- @param command_id number
function Level:get_server_command_by_id(command_id)
  local server_id_map = {
    [0x00] = "MoveToLevel",
    [0x01] = "Move",
    [0x02] = "Step",
    [0x03] = "Stop",
    [0x04] = "MoveToLevelWithOnOff",
    [0x05] = "MoveWithOnOff",
    [0x06] = "StepWithOnOff",
    [0x07] = "StopWithOnOff",
    [0x08] = "MoveToClosestFrequency",
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end

--- Find a client command by id
---
--- @param command_id number
function Level:get_client_command_by_id(command_id)
  local client_id_map = {
  }
  if client_id_map[command_id] ~= nil then
    return self.client.commands[client_id_map[command_id]]
  end
  return nil
end

Level.attribute_direction_map = {
  ["CurrentLevel"] = "server",
  ["RemainingTime"] = "server",
  ["MinLevel"] = "server",
  ["MaxLevel"] = "server",
  ["CurrentFrequency"] = "server",
  ["MinFrequency"] = "server",
  ["MaxFrequency"] = "server",
  ["OnOffTransitionTime"] = "server",
  ["OnLevel"] = "server",
  ["OnTransitionTime"] = "server",
  ["OffTransitionTime"] = "server",
  ["DefaultMoveRate"] = "server",
  ["Options"] = "server",
  ["StartUpCurrentLevel"] = "server",
}
Level.command_direction_map = {
  ["MoveToLevel"] = "server",
  ["Move"] = "server",
  ["Step"] = "server",
  ["Stop"] = "server",
  ["MoveToLevelWithOnOff"] = "server",
  ["MoveWithOnOff"] = "server",
  ["StepWithOnOff"] = "server",
  ["StopWithOnOff"] = "server",
  ["MoveToClosestFrequency"] = "server",
}

local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = Level.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, Level.NAME))
  end
  return Level[direction].attributes[key] 
end
Level.attributes = {}
setmetatable(Level.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = Level.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, Level.NAME))
  end
  return Level[direction].commands[key] 
end
Level.commands = {}
setmetatable(Level.commands, command_helper_mt)

setmetatable(Level, {__index = cluster_base})

return Level
