local data_types = require "st.zigbee.data_types"
local EnumABC = require "st.zigbee.data_types.base_defs.EnumABC"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.OTAUpgrade.types.PayloadType: st.zigbee.data_types.Enum8
--- @alias PayloadType
---
--- @field public byte_length number 1
--- @field public QUERY_JITTER number 0
--- @field public QUERY_JITTER_AND_MANUFACTURER_CODE number 1
--- @field public QUERY_JITTER_MANUFACTURER_CODE_AND_IMAGE_TYPE number 2
--- @field public QUERY_JITTER_MANUFACTURER_CODE_IMAGE_TYPE_AND_NEW_FILE_VERSION number 3
local PayloadType = {}
local new_mt = EnumABC.new_mt({NAME = "PayloadType", ID = data_types.name_to_id_map["Enum8"]}, 1)
new_mt.__index.pretty_print = function(self)
  local name_lookup = {
    [self.QUERY_JITTER]                                                   = "QUERY_JITTER",
    [self.QUERY_JITTER_AND_MANUFACTURER_CODE]                             = "QUERY_JITTER_AND_MANUFACTURER_CODE",
    [self.QUERY_JITTER_MANUFACTURER_CODE_AND_IMAGE_TYPE]                  = "QUERY_JITTER_MANUFACTURER_CODE_AND_IMAGE_TYPE",
    [self.QUERY_JITTER_MANUFACTURER_CODE_IMAGE_TYPE_AND_NEW_FILE_VERSION] = "QUERY_JITTER_MANUFACTURER_CODE_IMAGE_TYPE_AND_NEW_FILE_VERSION",
  }
  return string.format("%s: %s", self.NAME or self.field_name, name_lookup[self.value] or string.format("%d", self.value))
end
new_mt.__tostring = new_mt.__index.pretty_print
new_mt.__index.QUERY_JITTER                                                   = 0x00
new_mt.__index.QUERY_JITTER_AND_MANUFACTURER_CODE                             = 0x01
new_mt.__index.QUERY_JITTER_MANUFACTURER_CODE_AND_IMAGE_TYPE                  = 0x02
new_mt.__index.QUERY_JITTER_MANUFACTURER_CODE_IMAGE_TYPE_AND_NEW_FILE_VERSION = 0x03

setmetatable(PayloadType, new_mt)

return PayloadType
