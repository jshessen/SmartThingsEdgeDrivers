local data_types = require "st.zigbee.data_types"
local EnumABC = require "st.zigbee.data_types.base_defs.EnumABC"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.PowerConfiguration.types.BatterySize: st.zigbee.data_types.Enum8
--- @alias BatterySize
---
--- @field public byte_length number 1
--- @field public NO_BATTERY number 0
--- @field public BUILT_IN number 1
--- @field public OTHER number 2
--- @field public AA number 3
--- @field public AAA number 4
--- @field public C number 5
--- @field public D number 6
--- @field public CR2 number 7
--- @field public CR123A number 8
--- @field public UNKNOWN number 255
local BatterySize = {}
local new_mt = EnumABC.new_mt({NAME = "BatterySize", ID = data_types.name_to_id_map["Enum8"]}, 1)
new_mt.__index.pretty_print = function(self)
  local name_lookup = {
    [self.NO_BATTERY] = "NO_BATTERY",
    [self.BUILT_IN]   = "BUILT_IN",
    [self.OTHER]      = "OTHER",
    [self.AA]         = "AA",
    [self.AAA]        = "AAA",
    [self.C]          = "C",
    [self.D]          = "D",
    [self.CR2]        = "CR2",
    [self.CR123A]     = "CR123A",
    [self.UNKNOWN]    = "UNKNOWN",
  }
  return string.format("%s: %s", self.NAME or self.field_name, name_lookup[self.value] or string.format("%d", self.value))
end
new_mt.__tostring = new_mt.__index.pretty_print
new_mt.__index.NO_BATTERY = 0x00
new_mt.__index.BUILT_IN   = 0x01
new_mt.__index.OTHER      = 0x02
new_mt.__index.AA         = 0x03
new_mt.__index.AAA        = 0x04
new_mt.__index.C          = 0x05
new_mt.__index.D          = 0x06
new_mt.__index.CR2        = 0x07
new_mt.__index.CR123A     = 0x08
new_mt.__index.UNKNOWN    = 0xFF

setmetatable(BatterySize, new_mt)

return BatterySize
