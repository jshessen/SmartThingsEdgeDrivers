local cluster_base = require "st.zigbee.cluster_base"
local PressureMeasurementClientAttributes = require "st.zigbee.generated.zcl_clusters.PressureMeasurement.client.attributes" 
local PressureMeasurementServerAttributes = require "st.zigbee.generated.zcl_clusters.PressureMeasurement.server.attributes" 
local PressureMeasurementClientCommands = require "st.zigbee.generated.zcl_clusters.PressureMeasurement.client.commands"
local PressureMeasurementServerCommands = require "st.zigbee.generated.zcl_clusters.PressureMeasurement.server.commands"
local PressureMeasurementTypes = require "st.zigbee.generated.zcl_clusters.PressureMeasurement.types"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.PressureMeasurement
--- @alias PressureMeasurement
---
--- @field public ID number 0x0403 the ID of this cluster
--- @field public NAME string "PressureMeasurement" the name of this cluster
--- @field public attributes st.zigbee.zcl.clusters.PressureMeasurementServerAttributes | st.zigbee.zcl.clusters.PressureMeasurementClientAttributes
--- @field public commands st.zigbee.zcl.clusters.PressureMeasurementServerCommands | st.zigbee.zcl.clusters.PressureMeasurementClientCommands
--- @field public types st.zigbee.zcl.clusters.PressureMeasurementTypes
local PressureMeasurement = {}

PressureMeasurement.ID = 0x0403
PressureMeasurement.NAME = "PressureMeasurement"
PressureMeasurement.server = {}
PressureMeasurement.client = {}
PressureMeasurement.server.attributes = PressureMeasurementServerAttributes:set_parent_cluster(PressureMeasurement) 
PressureMeasurement.client.attributes = PressureMeasurementClientAttributes:set_parent_cluster(PressureMeasurement) 
PressureMeasurement.server.commands = PressureMeasurementServerCommands:set_parent_cluster(PressureMeasurement)
PressureMeasurement.client.commands = PressureMeasurementClientCommands:set_parent_cluster(PressureMeasurement)
PressureMeasurement.types = PressureMeasurementTypes

--- Find an attribute by id
---
--- @param attr_id number
function PressureMeasurement:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "MeasuredValue",
    [0x0001] = "MinMeasuredValue",
    [0x0002] = "MaxMeasuredValue",
    [0x0003] = "Tolerance",
    [0x0010] = "ScaledValue",
    [0x0011] = "MinScaledValue",
    [0x0012] = "MaxScaledValue",
    [0x0013] = "ScaledTolerance",
    [0x0014] = "Scale",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end
  
--- Find a server command by id
---
--- @param command_id number
function PressureMeasurement:get_server_command_by_id(command_id)
  local server_id_map = {
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end

--- Find a client command by id
---
--- @param command_id number
function PressureMeasurement:get_client_command_by_id(command_id)
  local client_id_map = {
  }
  if client_id_map[command_id] ~= nil then
    return self.client.commands[client_id_map[command_id]]
  end
  return nil
end

PressureMeasurement.attribute_direction_map = {
  ["MeasuredValue"] = "server",
  ["MinMeasuredValue"] = "server",
  ["MaxMeasuredValue"] = "server",
  ["Tolerance"] = "server",
  ["ScaledValue"] = "server",
  ["MinScaledValue"] = "server",
  ["MaxScaledValue"] = "server",
  ["ScaledTolerance"] = "server",
  ["Scale"] = "server",
}
PressureMeasurement.command_direction_map = {}

local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = PressureMeasurement.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, PressureMeasurement.NAME))
  end
  return PressureMeasurement[direction].attributes[key] 
end
PressureMeasurement.attributes = {}
setmetatable(PressureMeasurement.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = PressureMeasurement.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, PressureMeasurement.NAME))
  end
  return PressureMeasurement[direction].commands[key] 
end
PressureMeasurement.commands = {}
setmetatable(PressureMeasurement.commands, command_helper_mt)

setmetatable(PressureMeasurement, {__index = cluster_base})

return PressureMeasurement
