local cluster_base = require "st.zigbee.cluster_base"
local data_types = require "st.zigbee.data_types"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.PumpConfigurationAndControl.AlarmMask
--- @alias AlarmMask
---
--- @field public ID number 0x0022 the ID of this attribute
--- @field public NAME string "AlarmMask" the name of this attribute
--- @field public data_type st.zigbee.data_types.Bitmap16 the data type of this attribute
--- @field public SUPPLY_VOLTAGE_TOO_LOW number 1
--- @field public SUPPLY_VOLTAGE_TOO_HIGH number 2
--- @field public POWER_MISSING_PHASE number 4
--- @field public SYSTEM_PRESSURE_TOO_LOW number 8
--- @field public SYSTEM_PRESSURE_TOO_HIGH number 16
--- @field public DRY_RUNNING number 32
--- @field public MOTOR_TEMPERATURE_TOO_HIGH number 64
--- @field public PUMP_MOTOR_HAS_FATAL_FAILURE number 128
--- @field public ELECTRONIC_TEMPERATURE_TOO_HIGH number 256
--- @field public PUMP_BLOCKED number 512
--- @field public SENSOR_FAILURE number 1024
--- @field public ELECTRONIC_NON_FATAL_FAILURE number 2048
--- @field public ELECTRONIC_FATAL_FAILURE number 4096
--- @field public GENERAL_FAULT number 8192
local AlarmMask = {
  ID = 0x0022,
  NAME = "AlarmMask",
  base_type = data_types.Bitmap16,
}

AlarmMask.BASE_MASK                       = 0xFFFF
AlarmMask.SUPPLY_VOLTAGE_TOO_LOW          = 0x0001
AlarmMask.SUPPLY_VOLTAGE_TOO_HIGH         = 0x0002
AlarmMask.POWER_MISSING_PHASE             = 0x0004
AlarmMask.SYSTEM_PRESSURE_TOO_LOW         = 0x0008
AlarmMask.SYSTEM_PRESSURE_TOO_HIGH        = 0x0010
AlarmMask.DRY_RUNNING                     = 0x0020
AlarmMask.MOTOR_TEMPERATURE_TOO_HIGH      = 0x0040
AlarmMask.PUMP_MOTOR_HAS_FATAL_FAILURE    = 0x0080
AlarmMask.ELECTRONIC_TEMPERATURE_TOO_HIGH = 0x0100
AlarmMask.PUMP_BLOCKED                    = 0x0200
AlarmMask.SENSOR_FAILURE                  = 0x0400
AlarmMask.ELECTRONIC_NON_FATAL_FAILURE    = 0x0800
AlarmMask.ELECTRONIC_FATAL_FAILURE        = 0x1000
AlarmMask.GENERAL_FAULT                   = 0x2000


AlarmMask.mask_fields = {
  BASE_MASK = 0xFFFF,
  SUPPLY_VOLTAGE_TOO_LOW = 0x0001,
  SUPPLY_VOLTAGE_TOO_HIGH = 0x0002,
  POWER_MISSING_PHASE = 0x0004,
  SYSTEM_PRESSURE_TOO_LOW = 0x0008,
  SYSTEM_PRESSURE_TOO_HIGH = 0x0010,
  DRY_RUNNING = 0x0020,
  MOTOR_TEMPERATURE_TOO_HIGH = 0x0040,
  PUMP_MOTOR_HAS_FATAL_FAILURE = 0x0080,
  ELECTRONIC_TEMPERATURE_TOO_HIGH = 0x0100,
  PUMP_BLOCKED = 0x0200,
  SENSOR_FAILURE = 0x0400,
  ELECTRONIC_NON_FATAL_FAILURE = 0x0800,
  ELECTRONIC_FATAL_FAILURE = 0x1000,
  GENERAL_FAULT = 0x2000,
}


--- @function AlarmMask:is_supply_voltage_too_low_set
--- @return boolean True if the value of SUPPLY_VOLTAGE_TOO_LOW is non-zero
AlarmMask.is_supply_voltage_too_low_set = function(self)
  return (self.value & self.SUPPLY_VOLTAGE_TOO_LOW) ~= 0
end
 
--- @function AlarmMask:set_supply_voltage_too_low
--- Set the value of the bit in the SUPPLY_VOLTAGE_TOO_LOW field to 1
AlarmMask.set_supply_voltage_too_low = function(self)
  self.value = self.value | self.SUPPLY_VOLTAGE_TOO_LOW
end

--- @function AlarmMask:unset_supply_voltage_too_low
--- Set the value of the bits in the SUPPLY_VOLTAGE_TOO_LOW field to 0
AlarmMask.unset_supply_voltage_too_low = function(self)
  self.value = self.value & (~self.SUPPLY_VOLTAGE_TOO_LOW & self.BASE_MASK)
end

--- @function AlarmMask:is_supply_voltage_too_high_set
--- @return boolean True if the value of SUPPLY_VOLTAGE_TOO_HIGH is non-zero
AlarmMask.is_supply_voltage_too_high_set = function(self)
  return (self.value & self.SUPPLY_VOLTAGE_TOO_HIGH) ~= 0
end
 
--- @function AlarmMask:set_supply_voltage_too_high
--- Set the value of the bit in the SUPPLY_VOLTAGE_TOO_HIGH field to 1
AlarmMask.set_supply_voltage_too_high = function(self)
  self.value = self.value | self.SUPPLY_VOLTAGE_TOO_HIGH
end

--- @function AlarmMask:unset_supply_voltage_too_high
--- Set the value of the bits in the SUPPLY_VOLTAGE_TOO_HIGH field to 0
AlarmMask.unset_supply_voltage_too_high = function(self)
  self.value = self.value & (~self.SUPPLY_VOLTAGE_TOO_HIGH & self.BASE_MASK)
end

--- @function AlarmMask:is_power_missing_phase_set
--- @return boolean True if the value of POWER_MISSING_PHASE is non-zero
AlarmMask.is_power_missing_phase_set = function(self)
  return (self.value & self.POWER_MISSING_PHASE) ~= 0
end
 
--- @function AlarmMask:set_power_missing_phase
--- Set the value of the bit in the POWER_MISSING_PHASE field to 1
AlarmMask.set_power_missing_phase = function(self)
  self.value = self.value | self.POWER_MISSING_PHASE
end

--- @function AlarmMask:unset_power_missing_phase
--- Set the value of the bits in the POWER_MISSING_PHASE field to 0
AlarmMask.unset_power_missing_phase = function(self)
  self.value = self.value & (~self.POWER_MISSING_PHASE & self.BASE_MASK)
end

--- @function AlarmMask:is_system_pressure_too_low_set
--- @return boolean True if the value of SYSTEM_PRESSURE_TOO_LOW is non-zero
AlarmMask.is_system_pressure_too_low_set = function(self)
  return (self.value & self.SYSTEM_PRESSURE_TOO_LOW) ~= 0
end
 
--- @function AlarmMask:set_system_pressure_too_low
--- Set the value of the bit in the SYSTEM_PRESSURE_TOO_LOW field to 1
AlarmMask.set_system_pressure_too_low = function(self)
  self.value = self.value | self.SYSTEM_PRESSURE_TOO_LOW
end

--- @function AlarmMask:unset_system_pressure_too_low
--- Set the value of the bits in the SYSTEM_PRESSURE_TOO_LOW field to 0
AlarmMask.unset_system_pressure_too_low = function(self)
  self.value = self.value & (~self.SYSTEM_PRESSURE_TOO_LOW & self.BASE_MASK)
end

--- @function AlarmMask:is_system_pressure_too_high_set
--- @return boolean True if the value of SYSTEM_PRESSURE_TOO_HIGH is non-zero
AlarmMask.is_system_pressure_too_high_set = function(self)
  return (self.value & self.SYSTEM_PRESSURE_TOO_HIGH) ~= 0
end
 
--- @function AlarmMask:set_system_pressure_too_high
--- Set the value of the bit in the SYSTEM_PRESSURE_TOO_HIGH field to 1
AlarmMask.set_system_pressure_too_high = function(self)
  self.value = self.value | self.SYSTEM_PRESSURE_TOO_HIGH
end

--- @function AlarmMask:unset_system_pressure_too_high
--- Set the value of the bits in the SYSTEM_PRESSURE_TOO_HIGH field to 0
AlarmMask.unset_system_pressure_too_high = function(self)
  self.value = self.value & (~self.SYSTEM_PRESSURE_TOO_HIGH & self.BASE_MASK)
end

--- @function AlarmMask:is_dry_running_set
--- @return boolean True if the value of DRY_RUNNING is non-zero
AlarmMask.is_dry_running_set = function(self)
  return (self.value & self.DRY_RUNNING) ~= 0
end
 
--- @function AlarmMask:set_dry_running
--- Set the value of the bit in the DRY_RUNNING field to 1
AlarmMask.set_dry_running = function(self)
  self.value = self.value | self.DRY_RUNNING
end

--- @function AlarmMask:unset_dry_running
--- Set the value of the bits in the DRY_RUNNING field to 0
AlarmMask.unset_dry_running = function(self)
  self.value = self.value & (~self.DRY_RUNNING & self.BASE_MASK)
end

--- @function AlarmMask:is_motor_temperature_too_high_set
--- @return boolean True if the value of MOTOR_TEMPERATURE_TOO_HIGH is non-zero
AlarmMask.is_motor_temperature_too_high_set = function(self)
  return (self.value & self.MOTOR_TEMPERATURE_TOO_HIGH) ~= 0
end
 
--- @function AlarmMask:set_motor_temperature_too_high
--- Set the value of the bit in the MOTOR_TEMPERATURE_TOO_HIGH field to 1
AlarmMask.set_motor_temperature_too_high = function(self)
  self.value = self.value | self.MOTOR_TEMPERATURE_TOO_HIGH
end

--- @function AlarmMask:unset_motor_temperature_too_high
--- Set the value of the bits in the MOTOR_TEMPERATURE_TOO_HIGH field to 0
AlarmMask.unset_motor_temperature_too_high = function(self)
  self.value = self.value & (~self.MOTOR_TEMPERATURE_TOO_HIGH & self.BASE_MASK)
end

--- @function AlarmMask:is_pump_motor_has_fatal_failure_set
--- @return boolean True if the value of PUMP_MOTOR_HAS_FATAL_FAILURE is non-zero
AlarmMask.is_pump_motor_has_fatal_failure_set = function(self)
  return (self.value & self.PUMP_MOTOR_HAS_FATAL_FAILURE) ~= 0
end
 
--- @function AlarmMask:set_pump_motor_has_fatal_failure
--- Set the value of the bit in the PUMP_MOTOR_HAS_FATAL_FAILURE field to 1
AlarmMask.set_pump_motor_has_fatal_failure = function(self)
  self.value = self.value | self.PUMP_MOTOR_HAS_FATAL_FAILURE
end

--- @function AlarmMask:unset_pump_motor_has_fatal_failure
--- Set the value of the bits in the PUMP_MOTOR_HAS_FATAL_FAILURE field to 0
AlarmMask.unset_pump_motor_has_fatal_failure = function(self)
  self.value = self.value & (~self.PUMP_MOTOR_HAS_FATAL_FAILURE & self.BASE_MASK)
end

--- @function AlarmMask:is_electronic_temperature_too_high_set
--- @return boolean True if the value of ELECTRONIC_TEMPERATURE_TOO_HIGH is non-zero
AlarmMask.is_electronic_temperature_too_high_set = function(self)
  return (self.value & self.ELECTRONIC_TEMPERATURE_TOO_HIGH) ~= 0
end
 
--- @function AlarmMask:set_electronic_temperature_too_high
--- Set the value of the bit in the ELECTRONIC_TEMPERATURE_TOO_HIGH field to 1
AlarmMask.set_electronic_temperature_too_high = function(self)
  self.value = self.value | self.ELECTRONIC_TEMPERATURE_TOO_HIGH
end

--- @function AlarmMask:unset_electronic_temperature_too_high
--- Set the value of the bits in the ELECTRONIC_TEMPERATURE_TOO_HIGH field to 0
AlarmMask.unset_electronic_temperature_too_high = function(self)
  self.value = self.value & (~self.ELECTRONIC_TEMPERATURE_TOO_HIGH & self.BASE_MASK)
end

--- @function AlarmMask:is_pump_blocked_set
--- @return boolean True if the value of PUMP_BLOCKED is non-zero
AlarmMask.is_pump_blocked_set = function(self)
  return (self.value & self.PUMP_BLOCKED) ~= 0
end
 
--- @function AlarmMask:set_pump_blocked
--- Set the value of the bit in the PUMP_BLOCKED field to 1
AlarmMask.set_pump_blocked = function(self)
  self.value = self.value | self.PUMP_BLOCKED
end

--- @function AlarmMask:unset_pump_blocked
--- Set the value of the bits in the PUMP_BLOCKED field to 0
AlarmMask.unset_pump_blocked = function(self)
  self.value = self.value & (~self.PUMP_BLOCKED & self.BASE_MASK)
end

--- @function AlarmMask:is_sensor_failure_set
--- @return boolean True if the value of SENSOR_FAILURE is non-zero
AlarmMask.is_sensor_failure_set = function(self)
  return (self.value & self.SENSOR_FAILURE) ~= 0
end
 
--- @function AlarmMask:set_sensor_failure
--- Set the value of the bit in the SENSOR_FAILURE field to 1
AlarmMask.set_sensor_failure = function(self)
  self.value = self.value | self.SENSOR_FAILURE
end

--- @function AlarmMask:unset_sensor_failure
--- Set the value of the bits in the SENSOR_FAILURE field to 0
AlarmMask.unset_sensor_failure = function(self)
  self.value = self.value & (~self.SENSOR_FAILURE & self.BASE_MASK)
end

--- @function AlarmMask:is_electronic_non_fatal_failure_set
--- @return boolean True if the value of ELECTRONIC_NON_FATAL_FAILURE is non-zero
AlarmMask.is_electronic_non_fatal_failure_set = function(self)
  return (self.value & self.ELECTRONIC_NON_FATAL_FAILURE) ~= 0
end
 
--- @function AlarmMask:set_electronic_non_fatal_failure
--- Set the value of the bit in the ELECTRONIC_NON_FATAL_FAILURE field to 1
AlarmMask.set_electronic_non_fatal_failure = function(self)
  self.value = self.value | self.ELECTRONIC_NON_FATAL_FAILURE
end

--- @function AlarmMask:unset_electronic_non_fatal_failure
--- Set the value of the bits in the ELECTRONIC_NON_FATAL_FAILURE field to 0
AlarmMask.unset_electronic_non_fatal_failure = function(self)
  self.value = self.value & (~self.ELECTRONIC_NON_FATAL_FAILURE & self.BASE_MASK)
end

--- @function AlarmMask:is_electronic_fatal_failure_set
--- @return boolean True if the value of ELECTRONIC_FATAL_FAILURE is non-zero
AlarmMask.is_electronic_fatal_failure_set = function(self)
  return (self.value & self.ELECTRONIC_FATAL_FAILURE) ~= 0
end
 
--- @function AlarmMask:set_electronic_fatal_failure
--- Set the value of the bit in the ELECTRONIC_FATAL_FAILURE field to 1
AlarmMask.set_electronic_fatal_failure = function(self)
  self.value = self.value | self.ELECTRONIC_FATAL_FAILURE
end

--- @function AlarmMask:unset_electronic_fatal_failure
--- Set the value of the bits in the ELECTRONIC_FATAL_FAILURE field to 0
AlarmMask.unset_electronic_fatal_failure = function(self)
  self.value = self.value & (~self.ELECTRONIC_FATAL_FAILURE & self.BASE_MASK)
end

--- @function AlarmMask:is_general_fault_set
--- @return boolean True if the value of GENERAL_FAULT is non-zero
AlarmMask.is_general_fault_set = function(self)
  return (self.value & self.GENERAL_FAULT) ~= 0
end
 
--- @function AlarmMask:set_general_fault
--- Set the value of the bit in the GENERAL_FAULT field to 1
AlarmMask.set_general_fault = function(self)
  self.value = self.value | self.GENERAL_FAULT
end

--- @function AlarmMask:unset_general_fault
--- Set the value of the bits in the GENERAL_FAULT field to 0
AlarmMask.unset_general_fault = function(self)
  self.value = self.value & (~self.GENERAL_FAULT & self.BASE_MASK)
end


AlarmMask.mask_methods = {
  is_supply_voltage_too_low_set = AlarmMask.is_supply_voltage_too_low_set,
  set_supply_voltage_too_low = AlarmMask.set_supply_voltage_too_low,
  unset_supply_voltage_too_low = AlarmMask.unset_supply_voltage_too_low,
  is_supply_voltage_too_high_set = AlarmMask.is_supply_voltage_too_high_set,
  set_supply_voltage_too_high = AlarmMask.set_supply_voltage_too_high,
  unset_supply_voltage_too_high = AlarmMask.unset_supply_voltage_too_high,
  is_power_missing_phase_set = AlarmMask.is_power_missing_phase_set,
  set_power_missing_phase = AlarmMask.set_power_missing_phase,
  unset_power_missing_phase = AlarmMask.unset_power_missing_phase,
  is_system_pressure_too_low_set = AlarmMask.is_system_pressure_too_low_set,
  set_system_pressure_too_low = AlarmMask.set_system_pressure_too_low,
  unset_system_pressure_too_low = AlarmMask.unset_system_pressure_too_low,
  is_system_pressure_too_high_set = AlarmMask.is_system_pressure_too_high_set,
  set_system_pressure_too_high = AlarmMask.set_system_pressure_too_high,
  unset_system_pressure_too_high = AlarmMask.unset_system_pressure_too_high,
  is_dry_running_set = AlarmMask.is_dry_running_set,
  set_dry_running = AlarmMask.set_dry_running,
  unset_dry_running = AlarmMask.unset_dry_running,
  is_motor_temperature_too_high_set = AlarmMask.is_motor_temperature_too_high_set,
  set_motor_temperature_too_high = AlarmMask.set_motor_temperature_too_high,
  unset_motor_temperature_too_high = AlarmMask.unset_motor_temperature_too_high,
  is_pump_motor_has_fatal_failure_set = AlarmMask.is_pump_motor_has_fatal_failure_set,
  set_pump_motor_has_fatal_failure = AlarmMask.set_pump_motor_has_fatal_failure,
  unset_pump_motor_has_fatal_failure = AlarmMask.unset_pump_motor_has_fatal_failure,
  is_electronic_temperature_too_high_set = AlarmMask.is_electronic_temperature_too_high_set,
  set_electronic_temperature_too_high = AlarmMask.set_electronic_temperature_too_high,
  unset_electronic_temperature_too_high = AlarmMask.unset_electronic_temperature_too_high,
  is_pump_blocked_set = AlarmMask.is_pump_blocked_set,
  set_pump_blocked = AlarmMask.set_pump_blocked,
  unset_pump_blocked = AlarmMask.unset_pump_blocked,
  is_sensor_failure_set = AlarmMask.is_sensor_failure_set,
  set_sensor_failure = AlarmMask.set_sensor_failure,
  unset_sensor_failure = AlarmMask.unset_sensor_failure,
  is_electronic_non_fatal_failure_set = AlarmMask.is_electronic_non_fatal_failure_set,
  set_electronic_non_fatal_failure = AlarmMask.set_electronic_non_fatal_failure,
  unset_electronic_non_fatal_failure = AlarmMask.unset_electronic_non_fatal_failure,
  is_electronic_fatal_failure_set = AlarmMask.is_electronic_fatal_failure_set,
  set_electronic_fatal_failure = AlarmMask.set_electronic_fatal_failure,
  unset_electronic_fatal_failure = AlarmMask.unset_electronic_fatal_failure,
  is_general_fault_set = AlarmMask.is_general_fault_set,
  set_general_fault = AlarmMask.set_general_fault,
  unset_general_fault = AlarmMask.unset_general_fault,
}

--- Add additional functionality to the base type object
---
--- @param base_type_obj st.zigbee.data_types.Bitmap16 the base data type object to add functionality to
function AlarmMask:augment_type(base_type_obj)
  for k, v in pairs(self.mask_fields) do
    base_type_obj[k] = v
  end
  for k, v in pairs(self.mask_methods) do
    base_type_obj[k] = v
  end
  
  base_type_obj.field_name = self.NAME
  base_type_obj.pretty_print = self.pretty_print
end

function AlarmMask.pretty_print(value_obj)
  local zb_utils = require "st.zigbee.utils" 
  local pattern = ">I" .. value_obj.byte_length
  return string.format("%s: %s[0x]", value_obj.field_name or value_obj.NAME, AlarmMask.NAME, zb_utils.pretty_print_hex_str(string.pack(pattern, value_obj.value)))
end

--- @function AlarmMask:build_test_attr_report
---
--- Build a Rx Zigbee message as if a device reported this attribute
--- @param device st.zigbee.Device
--- @param data st.zigbee.data_types.Bitmap16 the attribute value
--- @return st.zigbee.ZigbeeMessageRx containing an AttributeReport body
AlarmMask.build_test_attr_report = cluster_base.build_test_attr_report

--- @function AlarmMask:build_test_read_attr_response
---
--- Build a Rx Zigbee message as if a device sent a read response for this attribute
--- @param device st.zigbee.Device
--- @param data st.zigbee.data_types.Bitmap16 the attribute value
--- @return st.zigbee.ZigbeeMessageRx containing an ReadAttributeResponse body
AlarmMask.build_test_read_attr_response = cluster_base.build_test_read_attr_response

--- Create a Bitmap16 object of this attribute with any additional features provided for the attribute
---
--- This is also usable with the AlarmMask(...) syntax
---
--- @vararg vararg the values needed to construct a Bitmap16
--- @return st.zigbee.data_types.Bitmap16
function AlarmMask:new_value(...)
    local o = self.base_type(table.unpack({...}))
    self:augment_type(o)
    return o
end

--- Construct a st.zigbee.ZigbeeMessageTx to read this attribute from a device
---
--- @param device st.zigbee.Device
--- @return st.zigbee.ZigbeeMessageTx containing a ReadAttribute body
function AlarmMask:read(device)
    return cluster_base.read_attribute(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID))
end

--- Construct a st.zigbee.ZigbeeMessageTx to configure this attribute for reporting on a device
---
--- @param device st.zigbee.Device
--- @param min_rep_int number|st.zigbee.data_types.Uint16 the minimum interval allowed between reports of this attribute
--- @param max_rep_int number|st.zigbee.data_types.Uint16 the maximum interval allowed between reports of this attribute
--- @return st.zigbee.ZigbeeMessageTx containing a ConfigureReporting body
function AlarmMask:configure_reporting(device, min_rep_int, max_rep_int)
  local min = data_types.validate_or_build_type(min_rep_int, data_types.Uint16, "minimum_reporting_interval")
  local max = data_types.validate_or_build_type(max_rep_int, data_types.Uint16, "maximum_reporting_interval")
  local rep_change = nil
  return cluster_base.configure_reporting(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID), data_types.ZigbeeDataType(self.base_type.ID), min, max, rep_change)
end

function AlarmMask:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(AlarmMask, {__call = AlarmMask.new_value})
return AlarmMask
