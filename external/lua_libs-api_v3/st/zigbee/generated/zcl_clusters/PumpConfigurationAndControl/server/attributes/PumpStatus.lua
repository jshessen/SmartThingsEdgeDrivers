local cluster_base = require "st.zigbee.cluster_base"
local data_types = require "st.zigbee.data_types"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.PumpConfigurationAndControl.PumpStatus
--- @alias PumpStatus
---
--- @field public ID number 0x0010 the ID of this attribute
--- @field public NAME string "PumpStatus" the name of this attribute
--- @field public data_type st.zigbee.data_types.Bitmap16 the data type of this attribute
--- @field public DEVICE_FAULT number 1
--- @field public SUPPLY_FAULT number 2
--- @field public SPEED_LOW number 4
--- @field public SPEED_HIGH number 8
--- @field public LOCAL_OVERRIDE number 16
--- @field public RUNNING number 32
--- @field public REMOTE_PRESSURE number 64
--- @field public REMOTE_FLOW number 128
--- @field public REMOTE_TEMPERATURE number 256
local PumpStatus = {
  ID = 0x0010,
  NAME = "PumpStatus",
  base_type = data_types.Bitmap16,
}

PumpStatus.BASE_MASK          = 0xFFFF
PumpStatus.DEVICE_FAULT       = 0x0001
PumpStatus.SUPPLY_FAULT       = 0x0002
PumpStatus.SPEED_LOW          = 0x0004
PumpStatus.SPEED_HIGH         = 0x0008
PumpStatus.LOCAL_OVERRIDE     = 0x0010
PumpStatus.RUNNING            = 0x0020
PumpStatus.REMOTE_PRESSURE    = 0x0040
PumpStatus.REMOTE_FLOW        = 0x0080
PumpStatus.REMOTE_TEMPERATURE = 0x0100


PumpStatus.mask_fields = {
  BASE_MASK = 0xFFFF,
  DEVICE_FAULT = 0x0001,
  SUPPLY_FAULT = 0x0002,
  SPEED_LOW = 0x0004,
  SPEED_HIGH = 0x0008,
  LOCAL_OVERRIDE = 0x0010,
  RUNNING = 0x0020,
  REMOTE_PRESSURE = 0x0040,
  REMOTE_FLOW = 0x0080,
  REMOTE_TEMPERATURE = 0x0100,
}


--- @function PumpStatus:is_device_fault_set
--- @return boolean True if the value of DEVICE_FAULT is non-zero
PumpStatus.is_device_fault_set = function(self)
  return (self.value & self.DEVICE_FAULT) ~= 0
end
 
--- @function PumpStatus:set_device_fault
--- Set the value of the bit in the DEVICE_FAULT field to 1
PumpStatus.set_device_fault = function(self)
  self.value = self.value | self.DEVICE_FAULT
end

--- @function PumpStatus:unset_device_fault
--- Set the value of the bits in the DEVICE_FAULT field to 0
PumpStatus.unset_device_fault = function(self)
  self.value = self.value & (~self.DEVICE_FAULT & self.BASE_MASK)
end

--- @function PumpStatus:is_supply_fault_set
--- @return boolean True if the value of SUPPLY_FAULT is non-zero
PumpStatus.is_supply_fault_set = function(self)
  return (self.value & self.SUPPLY_FAULT) ~= 0
end
 
--- @function PumpStatus:set_supply_fault
--- Set the value of the bit in the SUPPLY_FAULT field to 1
PumpStatus.set_supply_fault = function(self)
  self.value = self.value | self.SUPPLY_FAULT
end

--- @function PumpStatus:unset_supply_fault
--- Set the value of the bits in the SUPPLY_FAULT field to 0
PumpStatus.unset_supply_fault = function(self)
  self.value = self.value & (~self.SUPPLY_FAULT & self.BASE_MASK)
end

--- @function PumpStatus:is_speed_low_set
--- @return boolean True if the value of SPEED_LOW is non-zero
PumpStatus.is_speed_low_set = function(self)
  return (self.value & self.SPEED_LOW) ~= 0
end
 
--- @function PumpStatus:set_speed_low
--- Set the value of the bit in the SPEED_LOW field to 1
PumpStatus.set_speed_low = function(self)
  self.value = self.value | self.SPEED_LOW
end

--- @function PumpStatus:unset_speed_low
--- Set the value of the bits in the SPEED_LOW field to 0
PumpStatus.unset_speed_low = function(self)
  self.value = self.value & (~self.SPEED_LOW & self.BASE_MASK)
end

--- @function PumpStatus:is_speed_high_set
--- @return boolean True if the value of SPEED_HIGH is non-zero
PumpStatus.is_speed_high_set = function(self)
  return (self.value & self.SPEED_HIGH) ~= 0
end
 
--- @function PumpStatus:set_speed_high
--- Set the value of the bit in the SPEED_HIGH field to 1
PumpStatus.set_speed_high = function(self)
  self.value = self.value | self.SPEED_HIGH
end

--- @function PumpStatus:unset_speed_high
--- Set the value of the bits in the SPEED_HIGH field to 0
PumpStatus.unset_speed_high = function(self)
  self.value = self.value & (~self.SPEED_HIGH & self.BASE_MASK)
end

--- @function PumpStatus:is_local_override_set
--- @return boolean True if the value of LOCAL_OVERRIDE is non-zero
PumpStatus.is_local_override_set = function(self)
  return (self.value & self.LOCAL_OVERRIDE) ~= 0
end
 
--- @function PumpStatus:set_local_override
--- Set the value of the bit in the LOCAL_OVERRIDE field to 1
PumpStatus.set_local_override = function(self)
  self.value = self.value | self.LOCAL_OVERRIDE
end

--- @function PumpStatus:unset_local_override
--- Set the value of the bits in the LOCAL_OVERRIDE field to 0
PumpStatus.unset_local_override = function(self)
  self.value = self.value & (~self.LOCAL_OVERRIDE & self.BASE_MASK)
end

--- @function PumpStatus:is_running_set
--- @return boolean True if the value of RUNNING is non-zero
PumpStatus.is_running_set = function(self)
  return (self.value & self.RUNNING) ~= 0
end
 
--- @function PumpStatus:set_running
--- Set the value of the bit in the RUNNING field to 1
PumpStatus.set_running = function(self)
  self.value = self.value | self.RUNNING
end

--- @function PumpStatus:unset_running
--- Set the value of the bits in the RUNNING field to 0
PumpStatus.unset_running = function(self)
  self.value = self.value & (~self.RUNNING & self.BASE_MASK)
end

--- @function PumpStatus:is_remote_pressure_set
--- @return boolean True if the value of REMOTE_PRESSURE is non-zero
PumpStatus.is_remote_pressure_set = function(self)
  return (self.value & self.REMOTE_PRESSURE) ~= 0
end
 
--- @function PumpStatus:set_remote_pressure
--- Set the value of the bit in the REMOTE_PRESSURE field to 1
PumpStatus.set_remote_pressure = function(self)
  self.value = self.value | self.REMOTE_PRESSURE
end

--- @function PumpStatus:unset_remote_pressure
--- Set the value of the bits in the REMOTE_PRESSURE field to 0
PumpStatus.unset_remote_pressure = function(self)
  self.value = self.value & (~self.REMOTE_PRESSURE & self.BASE_MASK)
end

--- @function PumpStatus:is_remote_flow_set
--- @return boolean True if the value of REMOTE_FLOW is non-zero
PumpStatus.is_remote_flow_set = function(self)
  return (self.value & self.REMOTE_FLOW) ~= 0
end
 
--- @function PumpStatus:set_remote_flow
--- Set the value of the bit in the REMOTE_FLOW field to 1
PumpStatus.set_remote_flow = function(self)
  self.value = self.value | self.REMOTE_FLOW
end

--- @function PumpStatus:unset_remote_flow
--- Set the value of the bits in the REMOTE_FLOW field to 0
PumpStatus.unset_remote_flow = function(self)
  self.value = self.value & (~self.REMOTE_FLOW & self.BASE_MASK)
end

--- @function PumpStatus:is_remote_temperature_set
--- @return boolean True if the value of REMOTE_TEMPERATURE is non-zero
PumpStatus.is_remote_temperature_set = function(self)
  return (self.value & self.REMOTE_TEMPERATURE) ~= 0
end
 
--- @function PumpStatus:set_remote_temperature
--- Set the value of the bit in the REMOTE_TEMPERATURE field to 1
PumpStatus.set_remote_temperature = function(self)
  self.value = self.value | self.REMOTE_TEMPERATURE
end

--- @function PumpStatus:unset_remote_temperature
--- Set the value of the bits in the REMOTE_TEMPERATURE field to 0
PumpStatus.unset_remote_temperature = function(self)
  self.value = self.value & (~self.REMOTE_TEMPERATURE & self.BASE_MASK)
end


PumpStatus.mask_methods = {
  is_device_fault_set = PumpStatus.is_device_fault_set,
  set_device_fault = PumpStatus.set_device_fault,
  unset_device_fault = PumpStatus.unset_device_fault,
  is_supply_fault_set = PumpStatus.is_supply_fault_set,
  set_supply_fault = PumpStatus.set_supply_fault,
  unset_supply_fault = PumpStatus.unset_supply_fault,
  is_speed_low_set = PumpStatus.is_speed_low_set,
  set_speed_low = PumpStatus.set_speed_low,
  unset_speed_low = PumpStatus.unset_speed_low,
  is_speed_high_set = PumpStatus.is_speed_high_set,
  set_speed_high = PumpStatus.set_speed_high,
  unset_speed_high = PumpStatus.unset_speed_high,
  is_local_override_set = PumpStatus.is_local_override_set,
  set_local_override = PumpStatus.set_local_override,
  unset_local_override = PumpStatus.unset_local_override,
  is_running_set = PumpStatus.is_running_set,
  set_running = PumpStatus.set_running,
  unset_running = PumpStatus.unset_running,
  is_remote_pressure_set = PumpStatus.is_remote_pressure_set,
  set_remote_pressure = PumpStatus.set_remote_pressure,
  unset_remote_pressure = PumpStatus.unset_remote_pressure,
  is_remote_flow_set = PumpStatus.is_remote_flow_set,
  set_remote_flow = PumpStatus.set_remote_flow,
  unset_remote_flow = PumpStatus.unset_remote_flow,
  is_remote_temperature_set = PumpStatus.is_remote_temperature_set,
  set_remote_temperature = PumpStatus.set_remote_temperature,
  unset_remote_temperature = PumpStatus.unset_remote_temperature,
}

--- Add additional functionality to the base type object
---
--- @param base_type_obj st.zigbee.data_types.Bitmap16 the base data type object to add functionality to
function PumpStatus:augment_type(base_type_obj)
  for k, v in pairs(self.mask_fields) do
    base_type_obj[k] = v
  end
  for k, v in pairs(self.mask_methods) do
    base_type_obj[k] = v
  end
  
  base_type_obj.field_name = self.NAME
  base_type_obj.pretty_print = self.pretty_print
end

function PumpStatus.pretty_print(value_obj)
  local zb_utils = require "st.zigbee.utils" 
  local pattern = ">I" .. value_obj.byte_length
  return string.format("%s: %s[0x]", value_obj.field_name or value_obj.NAME, PumpStatus.NAME, zb_utils.pretty_print_hex_str(string.pack(pattern, value_obj.value)))
end

--- @function PumpStatus:build_test_attr_report
---
--- Build a Rx Zigbee message as if a device reported this attribute
--- @param device st.zigbee.Device
--- @param data st.zigbee.data_types.Bitmap16 the attribute value
--- @return st.zigbee.ZigbeeMessageRx containing an AttributeReport body
PumpStatus.build_test_attr_report = cluster_base.build_test_attr_report

--- @function PumpStatus:build_test_read_attr_response
---
--- Build a Rx Zigbee message as if a device sent a read response for this attribute
--- @param device st.zigbee.Device
--- @param data st.zigbee.data_types.Bitmap16 the attribute value
--- @return st.zigbee.ZigbeeMessageRx containing an ReadAttributeResponse body
PumpStatus.build_test_read_attr_response = cluster_base.build_test_read_attr_response

--- Create a Bitmap16 object of this attribute with any additional features provided for the attribute
---
--- This is also usable with the PumpStatus(...) syntax
---
--- @vararg vararg the values needed to construct a Bitmap16
--- @return st.zigbee.data_types.Bitmap16
function PumpStatus:new_value(...)
    local o = self.base_type(table.unpack({...}))
    self:augment_type(o)
    return o
end

--- Construct a st.zigbee.ZigbeeMessageTx to read this attribute from a device
---
--- @param device st.zigbee.Device
--- @return st.zigbee.ZigbeeMessageTx containing a ReadAttribute body
function PumpStatus:read(device)
    return cluster_base.read_attribute(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID))
end

--- Construct a st.zigbee.ZigbeeMessageTx to configure this attribute for reporting on a device
---
--- @param device st.zigbee.Device
--- @param min_rep_int number|st.zigbee.data_types.Uint16 the minimum interval allowed between reports of this attribute
--- @param max_rep_int number|st.zigbee.data_types.Uint16 the maximum interval allowed between reports of this attribute
--- @return st.zigbee.ZigbeeMessageTx containing a ConfigureReporting body
function PumpStatus:configure_reporting(device, min_rep_int, max_rep_int)
  local min = data_types.validate_or_build_type(min_rep_int, data_types.Uint16, "minimum_reporting_interval")
  local max = data_types.validate_or_build_type(max_rep_int, data_types.Uint16, "maximum_reporting_interval")
  local rep_change = nil
  return cluster_base.configure_reporting(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID), data_types.ZigbeeDataType(self.base_type.ID), min, max, rep_change)
end

function PumpStatus:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(PumpStatus, {__call = PumpStatus.new_value})
return PumpStatus
