local cluster_base = require "st.zigbee.cluster_base"
local TemperatureMeasurementClientAttributes = require "st.zigbee.generated.zcl_clusters.TemperatureMeasurement.client.attributes" 
local TemperatureMeasurementServerAttributes = require "st.zigbee.generated.zcl_clusters.TemperatureMeasurement.server.attributes" 
local TemperatureMeasurementClientCommands = require "st.zigbee.generated.zcl_clusters.TemperatureMeasurement.client.commands"
local TemperatureMeasurementServerCommands = require "st.zigbee.generated.zcl_clusters.TemperatureMeasurement.server.commands"
local TemperatureMeasurementTypes = require "st.zigbee.generated.zcl_clusters.TemperatureMeasurement.types"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.TemperatureMeasurement
--- @alias TemperatureMeasurement
---
--- @field public ID number 0x0402 the ID of this cluster
--- @field public NAME string "TemperatureMeasurement" the name of this cluster
--- @field public attributes st.zigbee.zcl.clusters.TemperatureMeasurementServerAttributes | st.zigbee.zcl.clusters.TemperatureMeasurementClientAttributes
--- @field public commands st.zigbee.zcl.clusters.TemperatureMeasurementServerCommands | st.zigbee.zcl.clusters.TemperatureMeasurementClientCommands
--- @field public types st.zigbee.zcl.clusters.TemperatureMeasurementTypes
local TemperatureMeasurement = {}

TemperatureMeasurement.ID = 0x0402
TemperatureMeasurement.NAME = "TemperatureMeasurement"
TemperatureMeasurement.server = {}
TemperatureMeasurement.client = {}
TemperatureMeasurement.server.attributes = TemperatureMeasurementServerAttributes:set_parent_cluster(TemperatureMeasurement) 
TemperatureMeasurement.client.attributes = TemperatureMeasurementClientAttributes:set_parent_cluster(TemperatureMeasurement) 
TemperatureMeasurement.server.commands = TemperatureMeasurementServerCommands:set_parent_cluster(TemperatureMeasurement)
TemperatureMeasurement.client.commands = TemperatureMeasurementClientCommands:set_parent_cluster(TemperatureMeasurement)
TemperatureMeasurement.types = TemperatureMeasurementTypes

--- Find an attribute by id
---
--- @param attr_id number
function TemperatureMeasurement:get_attribute_by_id(attr_id)
  local attr_id_map = {
    [0x0000] = "MeasuredValue",
    [0x0001] = "MinMeasuredValue",
    [0x0002] = "MaxMeasuredValue",
    [0x0003] = "Tolerance",
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end
  
--- Find a server command by id
---
--- @param command_id number
function TemperatureMeasurement:get_server_command_by_id(command_id)
  local server_id_map = {
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end

--- Find a client command by id
---
--- @param command_id number
function TemperatureMeasurement:get_client_command_by_id(command_id)
  local client_id_map = {
  }
  if client_id_map[command_id] ~= nil then
    return self.client.commands[client_id_map[command_id]]
  end
  return nil
end

TemperatureMeasurement.attribute_direction_map = {
  ["MeasuredValue"] = "server",
  ["MinMeasuredValue"] = "server",
  ["MaxMeasuredValue"] = "server",
  ["Tolerance"] = "server",
}
TemperatureMeasurement.command_direction_map = {}

local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = TemperatureMeasurement.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, TemperatureMeasurement.NAME))
  end
  return TemperatureMeasurement[direction].attributes[key] 
end
TemperatureMeasurement.attributes = {}
setmetatable(TemperatureMeasurement.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = TemperatureMeasurement.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, TemperatureMeasurement.NAME))
  end
  return TemperatureMeasurement[direction].commands[key] 
end
TemperatureMeasurement.commands = {}
setmetatable(TemperatureMeasurement.commands, command_helper_mt)

setmetatable(TemperatureMeasurement, {__index = cluster_base})

return TemperatureMeasurement
