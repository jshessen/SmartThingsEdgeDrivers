local cluster_base = require "st.zigbee.cluster_base"
local data_types = require "st.zigbee.data_types"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.Thermostat.ACErrorCode
--- @alias ACErrorCode
---
--- @field public ID number 0x0044 the ID of this attribute
--- @field public NAME string "ACErrorCode" the name of this attribute
--- @field public data_type st.zigbee.data_types.Bitmap32 the data type of this attribute
--- @field public COMPRESSOR_FAILURE_OR_REFRIGERANT_LEAKAGE number 1
--- @field public ROOM_TEMPERATURE_SENSOR_FAILURE number 2
--- @field public OUTDOOR_TEMPERATURE_SENSOR_FAILURE number 4
--- @field public INDOOR_COIL_TEMPERATURE_SENSOR_FAILURE number 8
--- @field public FAN_FAILURE number 16
local ACErrorCode = {
  ID = 0x0044,
  NAME = "ACErrorCode",
  base_type = data_types.Bitmap32,
}

ACErrorCode.BASE_MASK                                 = 0xFFFFFFFF
ACErrorCode.COMPRESSOR_FAILURE_OR_REFRIGERANT_LEAKAGE = 0x00000001
ACErrorCode.ROOM_TEMPERATURE_SENSOR_FAILURE           = 0x00000002
ACErrorCode.OUTDOOR_TEMPERATURE_SENSOR_FAILURE        = 0x00000004
ACErrorCode.INDOOR_COIL_TEMPERATURE_SENSOR_FAILURE    = 0x00000008
ACErrorCode.FAN_FAILURE                               = 0x00000010


ACErrorCode.mask_fields = {
  BASE_MASK = 0xFFFFFFFF,
  COMPRESSOR_FAILURE_OR_REFRIGERANT_LEAKAGE = 0x00000001,
  ROOM_TEMPERATURE_SENSOR_FAILURE = 0x00000002,
  OUTDOOR_TEMPERATURE_SENSOR_FAILURE = 0x00000004,
  INDOOR_COIL_TEMPERATURE_SENSOR_FAILURE = 0x00000008,
  FAN_FAILURE = 0x00000010,
}


--- @function ACErrorCode:is_compressor_failure_or_refrigerant_leakage_set
--- @return boolean True if the value of COMPRESSOR_FAILURE_OR_REFRIGERANT_LEAKAGE is non-zero
ACErrorCode.is_compressor_failure_or_refrigerant_leakage_set = function(self)
  return (self.value & self.COMPRESSOR_FAILURE_OR_REFRIGERANT_LEAKAGE) ~= 0
end
 
--- @function ACErrorCode:set_compressor_failure_or_refrigerant_leakage
--- Set the value of the bit in the COMPRESSOR_FAILURE_OR_REFRIGERANT_LEAKAGE field to 1
ACErrorCode.set_compressor_failure_or_refrigerant_leakage = function(self)
  self.value = self.value | self.COMPRESSOR_FAILURE_OR_REFRIGERANT_LEAKAGE
end

--- @function ACErrorCode:unset_compressor_failure_or_refrigerant_leakage
--- Set the value of the bits in the COMPRESSOR_FAILURE_OR_REFRIGERANT_LEAKAGE field to 0
ACErrorCode.unset_compressor_failure_or_refrigerant_leakage = function(self)
  self.value = self.value & (~self.COMPRESSOR_FAILURE_OR_REFRIGERANT_LEAKAGE & self.BASE_MASK)
end

--- @function ACErrorCode:is_room_temperature_sensor_failure_set
--- @return boolean True if the value of ROOM_TEMPERATURE_SENSOR_FAILURE is non-zero
ACErrorCode.is_room_temperature_sensor_failure_set = function(self)
  return (self.value & self.ROOM_TEMPERATURE_SENSOR_FAILURE) ~= 0
end
 
--- @function ACErrorCode:set_room_temperature_sensor_failure
--- Set the value of the bit in the ROOM_TEMPERATURE_SENSOR_FAILURE field to 1
ACErrorCode.set_room_temperature_sensor_failure = function(self)
  self.value = self.value | self.ROOM_TEMPERATURE_SENSOR_FAILURE
end

--- @function ACErrorCode:unset_room_temperature_sensor_failure
--- Set the value of the bits in the ROOM_TEMPERATURE_SENSOR_FAILURE field to 0
ACErrorCode.unset_room_temperature_sensor_failure = function(self)
  self.value = self.value & (~self.ROOM_TEMPERATURE_SENSOR_FAILURE & self.BASE_MASK)
end

--- @function ACErrorCode:is_outdoor_temperature_sensor_failure_set
--- @return boolean True if the value of OUTDOOR_TEMPERATURE_SENSOR_FAILURE is non-zero
ACErrorCode.is_outdoor_temperature_sensor_failure_set = function(self)
  return (self.value & self.OUTDOOR_TEMPERATURE_SENSOR_FAILURE) ~= 0
end
 
--- @function ACErrorCode:set_outdoor_temperature_sensor_failure
--- Set the value of the bit in the OUTDOOR_TEMPERATURE_SENSOR_FAILURE field to 1
ACErrorCode.set_outdoor_temperature_sensor_failure = function(self)
  self.value = self.value | self.OUTDOOR_TEMPERATURE_SENSOR_FAILURE
end

--- @function ACErrorCode:unset_outdoor_temperature_sensor_failure
--- Set the value of the bits in the OUTDOOR_TEMPERATURE_SENSOR_FAILURE field to 0
ACErrorCode.unset_outdoor_temperature_sensor_failure = function(self)
  self.value = self.value & (~self.OUTDOOR_TEMPERATURE_SENSOR_FAILURE & self.BASE_MASK)
end

--- @function ACErrorCode:is_indoor_coil_temperature_sensor_failure_set
--- @return boolean True if the value of INDOOR_COIL_TEMPERATURE_SENSOR_FAILURE is non-zero
ACErrorCode.is_indoor_coil_temperature_sensor_failure_set = function(self)
  return (self.value & self.INDOOR_COIL_TEMPERATURE_SENSOR_FAILURE) ~= 0
end
 
--- @function ACErrorCode:set_indoor_coil_temperature_sensor_failure
--- Set the value of the bit in the INDOOR_COIL_TEMPERATURE_SENSOR_FAILURE field to 1
ACErrorCode.set_indoor_coil_temperature_sensor_failure = function(self)
  self.value = self.value | self.INDOOR_COIL_TEMPERATURE_SENSOR_FAILURE
end

--- @function ACErrorCode:unset_indoor_coil_temperature_sensor_failure
--- Set the value of the bits in the INDOOR_COIL_TEMPERATURE_SENSOR_FAILURE field to 0
ACErrorCode.unset_indoor_coil_temperature_sensor_failure = function(self)
  self.value = self.value & (~self.INDOOR_COIL_TEMPERATURE_SENSOR_FAILURE & self.BASE_MASK)
end

--- @function ACErrorCode:is_fan_failure_set
--- @return boolean True if the value of FAN_FAILURE is non-zero
ACErrorCode.is_fan_failure_set = function(self)
  return (self.value & self.FAN_FAILURE) ~= 0
end
 
--- @function ACErrorCode:set_fan_failure
--- Set the value of the bit in the FAN_FAILURE field to 1
ACErrorCode.set_fan_failure = function(self)
  self.value = self.value | self.FAN_FAILURE
end

--- @function ACErrorCode:unset_fan_failure
--- Set the value of the bits in the FAN_FAILURE field to 0
ACErrorCode.unset_fan_failure = function(self)
  self.value = self.value & (~self.FAN_FAILURE & self.BASE_MASK)
end


ACErrorCode.mask_methods = {
  is_compressor_failure_or_refrigerant_leakage_set = ACErrorCode.is_compressor_failure_or_refrigerant_leakage_set,
  set_compressor_failure_or_refrigerant_leakage = ACErrorCode.set_compressor_failure_or_refrigerant_leakage,
  unset_compressor_failure_or_refrigerant_leakage = ACErrorCode.unset_compressor_failure_or_refrigerant_leakage,
  is_room_temperature_sensor_failure_set = ACErrorCode.is_room_temperature_sensor_failure_set,
  set_room_temperature_sensor_failure = ACErrorCode.set_room_temperature_sensor_failure,
  unset_room_temperature_sensor_failure = ACErrorCode.unset_room_temperature_sensor_failure,
  is_outdoor_temperature_sensor_failure_set = ACErrorCode.is_outdoor_temperature_sensor_failure_set,
  set_outdoor_temperature_sensor_failure = ACErrorCode.set_outdoor_temperature_sensor_failure,
  unset_outdoor_temperature_sensor_failure = ACErrorCode.unset_outdoor_temperature_sensor_failure,
  is_indoor_coil_temperature_sensor_failure_set = ACErrorCode.is_indoor_coil_temperature_sensor_failure_set,
  set_indoor_coil_temperature_sensor_failure = ACErrorCode.set_indoor_coil_temperature_sensor_failure,
  unset_indoor_coil_temperature_sensor_failure = ACErrorCode.unset_indoor_coil_temperature_sensor_failure,
  is_fan_failure_set = ACErrorCode.is_fan_failure_set,
  set_fan_failure = ACErrorCode.set_fan_failure,
  unset_fan_failure = ACErrorCode.unset_fan_failure,
}

--- Add additional functionality to the base type object
---
--- @param base_type_obj st.zigbee.data_types.Bitmap32 the base data type object to add functionality to
function ACErrorCode:augment_type(base_type_obj)
  for k, v in pairs(self.mask_fields) do
    base_type_obj[k] = v
  end
  for k, v in pairs(self.mask_methods) do
    base_type_obj[k] = v
  end
  
  base_type_obj.field_name = self.NAME
  base_type_obj.pretty_print = self.pretty_print
end

function ACErrorCode.pretty_print(value_obj)
  local zb_utils = require "st.zigbee.utils" 
  local pattern = ">I" .. value_obj.byte_length
  return string.format("%s: %s[0x]", value_obj.field_name or value_obj.NAME, ACErrorCode.NAME, zb_utils.pretty_print_hex_str(string.pack(pattern, value_obj.value)))
end

--- @function ACErrorCode:build_test_attr_report
---
--- Build a Rx Zigbee message as if a device reported this attribute
--- @param device st.zigbee.Device
--- @param data st.zigbee.data_types.Bitmap32 the attribute value
--- @return st.zigbee.ZigbeeMessageRx containing an AttributeReport body
ACErrorCode.build_test_attr_report = cluster_base.build_test_attr_report

--- @function ACErrorCode:build_test_read_attr_response
---
--- Build a Rx Zigbee message as if a device sent a read response for this attribute
--- @param device st.zigbee.Device
--- @param data st.zigbee.data_types.Bitmap32 the attribute value
--- @return st.zigbee.ZigbeeMessageRx containing an ReadAttributeResponse body
ACErrorCode.build_test_read_attr_response = cluster_base.build_test_read_attr_response

--- Create a Bitmap32 object of this attribute with any additional features provided for the attribute
---
--- This is also usable with the ACErrorCode(...) syntax
---
--- @vararg vararg the values needed to construct a Bitmap32
--- @return st.zigbee.data_types.Bitmap32
function ACErrorCode:new_value(...)
    local o = self.base_type(table.unpack({...}))
    self:augment_type(o)
    return o
end

--- Construct a st.zigbee.ZigbeeMessageTx to read this attribute from a device
---
--- @param device st.zigbee.Device
--- @return st.zigbee.ZigbeeMessageTx containing a ReadAttribute body
function ACErrorCode:read(device)
    return cluster_base.read_attribute(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID))
end

--- Construct a st.zigbee.ZigbeeMessageTx to configure this attribute for reporting on a device
---
--- @param device st.zigbee.Device
--- @param min_rep_int number|st.zigbee.data_types.Uint16 the minimum interval allowed between reports of this attribute
--- @param max_rep_int number|st.zigbee.data_types.Uint16 the maximum interval allowed between reports of this attribute
--- @return st.zigbee.ZigbeeMessageTx containing a ConfigureReporting body
function ACErrorCode:configure_reporting(device, min_rep_int, max_rep_int)
  local min = data_types.validate_or_build_type(min_rep_int, data_types.Uint16, "minimum_reporting_interval")
  local max = data_types.validate_or_build_type(max_rep_int, data_types.Uint16, "maximum_reporting_interval")
  local rep_change = nil
  return cluster_base.configure_reporting(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID), data_types.ZigbeeDataType(self.base_type.ID), min, max, rep_change)
end

--- Write a value to this attribute on a device
---
--- @param device st.zigbee.Device
--- @param value st.zigbee.data_types.Bitmap32 the value to write
function ACErrorCode:write(device, value)
  local data = data_types.validate_or_build_type(value, self.base_type)
  self:augment_type(data)
  return cluster_base.write_attribute(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID), data)
end

function ACErrorCode:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(ACErrorCode, {__call = ACErrorCode.new_value})
return ACErrorCode
