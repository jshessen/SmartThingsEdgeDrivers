local cluster_base = require "st.zigbee.cluster_base"
local data_types = require "st.zigbee.data_types"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.Thermostat.AlarmMask
--- @alias AlarmMask
---
--- @field public ID number 0x001D the ID of this attribute
--- @field public NAME string "AlarmMask" the name of this attribute
--- @field public data_type st.zigbee.data_types.Bitmap8 the data type of this attribute
--- @field public INITIALIZATION_FAILURE number 1
--- @field public HARDWARE_FAILURE number 2
--- @field public SELF_CALIBRATION_FAILURE number 4
local AlarmMask = {
  ID = 0x001D,
  NAME = "AlarmMask",
  base_type = data_types.Bitmap8,
}

AlarmMask.BASE_MASK                = 0xFF
AlarmMask.INITIALIZATION_FAILURE   = 0x01
AlarmMask.HARDWARE_FAILURE         = 0x02
AlarmMask.SELF_CALIBRATION_FAILURE = 0x04


AlarmMask.mask_fields = {
  BASE_MASK = 0xFF,
  INITIALIZATION_FAILURE = 0x01,
  HARDWARE_FAILURE = 0x02,
  SELF_CALIBRATION_FAILURE = 0x04,
}


--- @function AlarmMask:is_initialization_failure_set
--- @return boolean True if the value of INITIALIZATION_FAILURE is non-zero
AlarmMask.is_initialization_failure_set = function(self)
  return (self.value & self.INITIALIZATION_FAILURE) ~= 0
end
 
--- @function AlarmMask:set_initialization_failure
--- Set the value of the bit in the INITIALIZATION_FAILURE field to 1
AlarmMask.set_initialization_failure = function(self)
  self.value = self.value | self.INITIALIZATION_FAILURE
end

--- @function AlarmMask:unset_initialization_failure
--- Set the value of the bits in the INITIALIZATION_FAILURE field to 0
AlarmMask.unset_initialization_failure = function(self)
  self.value = self.value & (~self.INITIALIZATION_FAILURE & self.BASE_MASK)
end

--- @function AlarmMask:is_hardware_failure_set
--- @return boolean True if the value of HARDWARE_FAILURE is non-zero
AlarmMask.is_hardware_failure_set = function(self)
  return (self.value & self.HARDWARE_FAILURE) ~= 0
end
 
--- @function AlarmMask:set_hardware_failure
--- Set the value of the bit in the HARDWARE_FAILURE field to 1
AlarmMask.set_hardware_failure = function(self)
  self.value = self.value | self.HARDWARE_FAILURE
end

--- @function AlarmMask:unset_hardware_failure
--- Set the value of the bits in the HARDWARE_FAILURE field to 0
AlarmMask.unset_hardware_failure = function(self)
  self.value = self.value & (~self.HARDWARE_FAILURE & self.BASE_MASK)
end

--- @function AlarmMask:is_self_calibration_failure_set
--- @return boolean True if the value of SELF_CALIBRATION_FAILURE is non-zero
AlarmMask.is_self_calibration_failure_set = function(self)
  return (self.value & self.SELF_CALIBRATION_FAILURE) ~= 0
end
 
--- @function AlarmMask:set_self_calibration_failure
--- Set the value of the bit in the SELF_CALIBRATION_FAILURE field to 1
AlarmMask.set_self_calibration_failure = function(self)
  self.value = self.value | self.SELF_CALIBRATION_FAILURE
end

--- @function AlarmMask:unset_self_calibration_failure
--- Set the value of the bits in the SELF_CALIBRATION_FAILURE field to 0
AlarmMask.unset_self_calibration_failure = function(self)
  self.value = self.value & (~self.SELF_CALIBRATION_FAILURE & self.BASE_MASK)
end


AlarmMask.mask_methods = {
  is_initialization_failure_set = AlarmMask.is_initialization_failure_set,
  set_initialization_failure = AlarmMask.set_initialization_failure,
  unset_initialization_failure = AlarmMask.unset_initialization_failure,
  is_hardware_failure_set = AlarmMask.is_hardware_failure_set,
  set_hardware_failure = AlarmMask.set_hardware_failure,
  unset_hardware_failure = AlarmMask.unset_hardware_failure,
  is_self_calibration_failure_set = AlarmMask.is_self_calibration_failure_set,
  set_self_calibration_failure = AlarmMask.set_self_calibration_failure,
  unset_self_calibration_failure = AlarmMask.unset_self_calibration_failure,
}

--- Add additional functionality to the base type object
---
--- @param base_type_obj st.zigbee.data_types.Bitmap8 the base data type object to add functionality to
function AlarmMask:augment_type(base_type_obj)
  for k, v in pairs(self.mask_fields) do
    base_type_obj[k] = v
  end
  for k, v in pairs(self.mask_methods) do
    base_type_obj[k] = v
  end
  
  base_type_obj.field_name = self.NAME
  base_type_obj.pretty_print = self.pretty_print
end

function AlarmMask.pretty_print(value_obj)
  local zb_utils = require "st.zigbee.utils" 
  local pattern = ">I" .. value_obj.byte_length
  return string.format("%s: %s[0x]", value_obj.field_name or value_obj.NAME, AlarmMask.NAME, zb_utils.pretty_print_hex_str(string.pack(pattern, value_obj.value)))
end

--- @function AlarmMask:build_test_attr_report
---
--- Build a Rx Zigbee message as if a device reported this attribute
--- @param device st.zigbee.Device
--- @param data st.zigbee.data_types.Bitmap8 the attribute value
--- @return st.zigbee.ZigbeeMessageRx containing an AttributeReport body
AlarmMask.build_test_attr_report = cluster_base.build_test_attr_report

--- @function AlarmMask:build_test_read_attr_response
---
--- Build a Rx Zigbee message as if a device sent a read response for this attribute
--- @param device st.zigbee.Device
--- @param data st.zigbee.data_types.Bitmap8 the attribute value
--- @return st.zigbee.ZigbeeMessageRx containing an ReadAttributeResponse body
AlarmMask.build_test_read_attr_response = cluster_base.build_test_read_attr_response

--- Create a Bitmap8 object of this attribute with any additional features provided for the attribute
---
--- This is also usable with the AlarmMask(...) syntax
---
--- @vararg vararg the values needed to construct a Bitmap8
--- @return st.zigbee.data_types.Bitmap8
function AlarmMask:new_value(...)
    local o = self.base_type(table.unpack({...}))
    self:augment_type(o)
    return o
end

--- Construct a st.zigbee.ZigbeeMessageTx to read this attribute from a device
---
--- @param device st.zigbee.Device
--- @return st.zigbee.ZigbeeMessageTx containing a ReadAttribute body
function AlarmMask:read(device)
    return cluster_base.read_attribute(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID))
end

--- Construct a st.zigbee.ZigbeeMessageTx to configure this attribute for reporting on a device
---
--- @param device st.zigbee.Device
--- @param min_rep_int number|st.zigbee.data_types.Uint16 the minimum interval allowed between reports of this attribute
--- @param max_rep_int number|st.zigbee.data_types.Uint16 the maximum interval allowed between reports of this attribute
--- @return st.zigbee.ZigbeeMessageTx containing a ConfigureReporting body
function AlarmMask:configure_reporting(device, min_rep_int, max_rep_int)
  local min = data_types.validate_or_build_type(min_rep_int, data_types.Uint16, "minimum_reporting_interval")
  local max = data_types.validate_or_build_type(max_rep_int, data_types.Uint16, "maximum_reporting_interval")
  local rep_change = nil
  return cluster_base.configure_reporting(device, data_types.ClusterId(self._cluster.ID), data_types.AttributeId(self.ID), data_types.ZigbeeDataType(self.base_type.ID), min, max, rep_change)
end

function AlarmMask:set_parent_cluster(cluster)
  self._cluster = cluster
  return self
end

setmetatable(AlarmMask, {__call = AlarmMask.new_value})
return AlarmMask
