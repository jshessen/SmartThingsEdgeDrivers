local cluster_base = require "st.zigbee.cluster_base"
local TouchlinkCommissioningClientAttributes = require "st.zigbee.generated.zcl_clusters.TouchlinkCommissioning.client.attributes" 
local TouchlinkCommissioningServerAttributes = require "st.zigbee.generated.zcl_clusters.TouchlinkCommissioning.server.attributes" 
local TouchlinkCommissioningClientCommands = require "st.zigbee.generated.zcl_clusters.TouchlinkCommissioning.client.commands"
local TouchlinkCommissioningServerCommands = require "st.zigbee.generated.zcl_clusters.TouchlinkCommissioning.server.commands"
local TouchlinkCommissioningTypes = require "st.zigbee.generated.zcl_clusters.TouchlinkCommissioning.types"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.TouchlinkCommissioning
--- @alias TouchlinkCommissioning
---
--- @field public ID number 0x1000 the ID of this cluster
--- @field public NAME string "TouchlinkCommissioning" the name of this cluster
--- @field public attributes st.zigbee.zcl.clusters.TouchlinkCommissioningServerAttributes | st.zigbee.zcl.clusters.TouchlinkCommissioningClientAttributes
--- @field public commands st.zigbee.zcl.clusters.TouchlinkCommissioningServerCommands | st.zigbee.zcl.clusters.TouchlinkCommissioningClientCommands
--- @field public types st.zigbee.zcl.clusters.TouchlinkCommissioningTypes
local TouchlinkCommissioning = {}

TouchlinkCommissioning.ID = 0x1000
TouchlinkCommissioning.NAME = "TouchlinkCommissioning"
TouchlinkCommissioning.server = {}
TouchlinkCommissioning.client = {}
TouchlinkCommissioning.server.attributes = TouchlinkCommissioningServerAttributes:set_parent_cluster(TouchlinkCommissioning) 
TouchlinkCommissioning.client.attributes = TouchlinkCommissioningClientAttributes:set_parent_cluster(TouchlinkCommissioning) 
TouchlinkCommissioning.server.commands = TouchlinkCommissioningServerCommands:set_parent_cluster(TouchlinkCommissioning)
TouchlinkCommissioning.client.commands = TouchlinkCommissioningClientCommands:set_parent_cluster(TouchlinkCommissioning)
TouchlinkCommissioning.types = TouchlinkCommissioningTypes

--- Find an attribute by id
---
--- @param attr_id number
function TouchlinkCommissioning:get_attribute_by_id(attr_id)
  local attr_id_map = {
  }
  local attr_name = attr_id_map[attr_id]
  if attr_name ~= nil then
    return self.attributes[attr_name]
  end
  return nil
end
  
--- Find a server command by id
---
--- @param command_id number
function TouchlinkCommissioning:get_server_command_by_id(command_id)
  local server_id_map = {
    [0x00] = "ScanRequest",
    [0x02] = "DeviceInformationRequest",
    [0x06] = "IdentifyRequest",
    [0x07] = "ResetToFactoryNewRequest",
    [0x10] = "NetworkStartRequest",
    [0x12] = "NetworkJoinRouterRequest",
    [0x14] = "NetworkJoinEndDeviceRequest",
    [0x16] = "NetworkUpdateRequest",
    [0x41] = "GetGroupIdentifiersRequest",
    [0x42] = "GetEndpointListRequest",
  }
  if server_id_map[command_id] ~= nil then
    return self.server.commands[server_id_map[command_id]]
  end
  return nil
end

--- Find a client command by id
---
--- @param command_id number
function TouchlinkCommissioning:get_client_command_by_id(command_id)
  local client_id_map = {
    [0x01] = "ScanResponse",
    [0x03] = "DeviceInformationResponse",
    [0x11] = "NetworkStartResponse",
    [0x13] = "NetworkJoinRouterResponse",
    [0x15] = "NetworkJoinEndDeviceResponse",
    [0x40] = "EndpointInformation",
    [0x41] = "GetGroupIdentifiersResponse",
    [0x42] = "GetEndpointListResponse",
  }
  if client_id_map[command_id] ~= nil then
    return self.client.commands[client_id_map[command_id]]
  end
  return nil
end

TouchlinkCommissioning.attribute_direction_map = {}
TouchlinkCommissioning.command_direction_map = {
  ["ScanResponse"] = "client",
  ["DeviceInformationResponse"] = "client",
  ["NetworkStartResponse"] = "client",
  ["NetworkJoinRouterResponse"] = "client",
  ["NetworkJoinEndDeviceResponse"] = "client",
  ["EndpointInformation"] = "client",
  ["GetGroupIdentifiersResponse"] = "client",
  ["GetEndpointListResponse"] = "client",
  ["ScanRequest"] = "server",
  ["DeviceInformationRequest"] = "server",
  ["IdentifyRequest"] = "server",
  ["ResetToFactoryNewRequest"] = "server",
  ["NetworkStartRequest"] = "server",
  ["NetworkJoinRouterRequest"] = "server",
  ["NetworkJoinEndDeviceRequest"] = "server",
  ["NetworkUpdateRequest"] = "server",
  ["GetGroupIdentifiersRequest"] = "server",
  ["GetEndpointListRequest"] = "server",
}

local attribute_helper_mt = {}
attribute_helper_mt.__index = function(self, key)
  local direction = TouchlinkCommissioning.attribute_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown attribute %s on cluster %s", key, TouchlinkCommissioning.NAME))
  end
  return TouchlinkCommissioning[direction].attributes[key] 
end
TouchlinkCommissioning.attributes = {}
setmetatable(TouchlinkCommissioning.attributes, attribute_helper_mt)

local command_helper_mt = {}
command_helper_mt.__index = function(self, key)
  local direction = TouchlinkCommissioning.command_direction_map[key]
  if direction == nil then
    error(string.format("Referenced unknown command %s on cluster %s", key, TouchlinkCommissioning.NAME))
  end
  return TouchlinkCommissioning[direction].commands[key] 
end
TouchlinkCommissioning.commands = {}
setmetatable(TouchlinkCommissioning.commands, command_helper_mt)

setmetatable(TouchlinkCommissioning, {__index = cluster_base})

return TouchlinkCommissioning
