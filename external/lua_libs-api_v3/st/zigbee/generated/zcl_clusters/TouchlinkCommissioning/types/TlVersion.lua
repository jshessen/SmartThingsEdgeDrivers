local data_types = require "st.zigbee.data_types"
local UintABC = require "st.zigbee.data_types.base_defs.UintABC"

-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- DO NOT EDIT: this code is automatically generated by tools/zigbee-lib_generator/generate_clusters_from_xml.py
-- Script version: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- ZCL XML version: 7.2

--- @class st.zigbee.zcl.clusters.TouchlinkCommissioning.types.TlVersion: st.zigbee.data_types.Uint8
--- @alias TlVersion
---
--- @field public byte_length number 1
--- @field public APPLICATION_DEVICE_VERSION number 15
local TlVersion = {}
local new_mt = UintABC.new_mt({NAME = "TlVersion", ID = data_types.name_to_id_map["Uint8"]}, 1)
new_mt.__index.BASE_MASK                  = 0xFF
new_mt.__index.APPLICATION_DEVICE_VERSION = 0x0F

--- @function TlVersion:is_application_device_version_set
--- @return boolean True if the value of APPLICATION_DEVICE_VERSION is non-zero
new_mt.__index.is_application_device_version_set = function(self)
  return (self.value & self.APPLICATION_DEVICE_VERSION) ~= 0
end
 
--- @function TlVersion:set_application_device_version
--- Set the value of the bits in the APPLICATION_DEVICE_VERSION field
--- @param fieldVal number the value to set the bitfield to
new_mt.__index.set_application_device_version = function(self, fieldVal)
  if ((fieldVal & ~(self.APPLICATION_DEVICE_VERSION >> 0)) ~= 0) then
    error("value too large for APPLICATION_DEVICE_VERSION")
  end
  self.value = self.value | (fieldVal << 0)
end

--- @function TlVersion:get_application_device_version
--- Get the value of the bits in the APPLICATION_DEVICE_VERSION field
new_mt.__index.get_application_device_version = function(self)
  return ((self.value & self.APPLICATION_DEVICE_VERSION)) >> 0
end

--- @function TlVersion:unset_application_device_version
--- Set the value of the bits in the APPLICATION_DEVICE_VERSION field to 0
new_mt.__index.unset_application_device_version = function(self)
  self.value = self.value & (~self.APPLICATION_DEVICE_VERSION & self.BASE_MASK)
end

setmetatable(TlVersion, new_mt)
return TlVersion
