-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.Alarm
--- @alias Alarm st.zwave.CommandClass.Alarm
---
--- Supported versions: 1,2
---
--- @field public GET number 0x04 - ALARM_GET command id
--- @field public REPORT number 0x05 - ALARM_REPORT command id
--- @field public SET number 0x06 - ALARM_SET command id
--- @field public TYPE_SUPPORTED_GET number 0x07 - ALARM_TYPE_SUPPORTED_GET command id
--- @field public TYPE_SUPPORTED_REPORT number 0x08 - ALARM_TYPE_SUPPORTED_REPORT command id
local Alarm = {}
Alarm.GET = 0x04
Alarm.REPORT = 0x05
Alarm.SET = 0x06
Alarm.TYPE_SUPPORTED_GET = 0x07
Alarm.TYPE_SUPPORTED_REPORT = 0x08

Alarm._commands = {
  [Alarm.GET] = "GET",
  [Alarm.REPORT] = "REPORT",
  [Alarm.SET] = "SET",
  [Alarm.TYPE_SUPPORTED_GET] = "TYPE_SUPPORTED_GET",
  [Alarm.TYPE_SUPPORTED_REPORT] = "TYPE_SUPPORTED_REPORT"
}

--- Instantiate a versioned instance of the Alarm Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.Alarm versioned command class instance
function Alarm:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.ALARM][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(Alarm, {
  __call = Alarm.init
})

Alarm._serialization_version = nil
Alarm._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.ALARM] = {
  [1] = true,
  [2] = true
}

--- @class st.zwave.CommandClass.Alarm.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.Alarm.GetV1Args
--- @field public alarm_type integer [0,255]
local GetV1Args = {}

--- @class st.zwave.CommandClass.Alarm.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.Alarm.GetV1
---
--- v1 ALARM_GET
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Alarm.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 ALARM_GET object.
---
--- @param module st.zwave.CommandClass.Alarm command class module instance
--- @param args st.zwave.CommandClass.Alarm.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ALARM, Alarm.GET, 1, args, ...)
end

--- Serialize v1 ALARM_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.alarm_type)
  return writer.buf
end

--- Deserialize a v1 ALARM_GET payload.
---
--- @return st.zwave.CommandClass.Alarm.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("alarm_type")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Alarm.GetV1
--- @return st.zwave.CommandClass.Alarm.GetV1Args
function GetV1._defaults(self)
  local args = {}
  args.alarm_type = self.args.alarm_type or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Alarm.GetV1
--- @return st.zwave.CommandClass.Alarm.GetV1Args
function GetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Alarm.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Alarm.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Alarm.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.Alarm.ReportV1Args
--- @field public alarm_type integer [0,255]
--- @field public alarm_level integer [0,255]
local ReportV1Args = {}

--- @class st.zwave.CommandClass.Alarm.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.Alarm.ReportV1
---
--- v1 ALARM_REPORT
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Alarm.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 ALARM_REPORT object.
---
--- @param module st.zwave.CommandClass.Alarm command class module instance
--- @param args st.zwave.CommandClass.Alarm.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ALARM, Alarm.REPORT, 1, args, ...)
end

--- Serialize v1 ALARM_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.alarm_type)
  writer:write_u8(args.alarm_level)
  return writer.buf
end

--- Deserialize a v1 ALARM_REPORT payload.
---
--- @return st.zwave.CommandClass.Alarm.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("alarm_type")
  reader:read_u8("alarm_level")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Alarm.ReportV1
--- @return st.zwave.CommandClass.Alarm.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.alarm_type = self.args.alarm_type or 0
  args.alarm_level = self.args.alarm_level or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Alarm.ReportV1
--- @return st.zwave.CommandClass.Alarm.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Alarm.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Alarm.ReportV1
function ReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Alarm.GetV2Args
--- @alias GetV2Args st.zwave.CommandClass.Alarm.GetV2Args
--- @field public alarm_type integer [0,255]
--- @field public z_wave_alarm_type integer see :lua:class:`Alarm.z_wave_alarm_type <st.zwave.CommandClass.Alarm.z_wave_alarm_type>`
local GetV2Args = {}

--- @class st.zwave.CommandClass.Alarm.GetV2:st.zwave.Command
--- @alias GetV2 st.zwave.CommandClass.Alarm.GetV2
---
--- v2 ALARM_GET
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x04
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Alarm.GetV2Args command-specific arguments
local GetV2 = {}
setmetatable(GetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 ALARM_GET object.
---
--- @param module st.zwave.CommandClass.Alarm command class module instance
--- @param args st.zwave.CommandClass.Alarm.GetV2Args command-specific arguments
function GetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.ALARM, Alarm.GET, 2, args, ...)
end

--- Serialize v2 ALARM_GET arguments.
---
--- @return string serialized payload
function GetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.alarm_type)
  writer:write_u8(args.z_wave_alarm_type)
  return writer.buf
end

--- Deserialize a v2 ALARM_GET payload.
---
--- @return st.zwave.CommandClass.Alarm.GetV2Args deserialized arguments
function GetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("alarm_type")
  reader:read_u8("z_wave_alarm_type")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Alarm.GetV2
--- @return st.zwave.CommandClass.Alarm.GetV2Args
function GetV2._defaults(self)
  local args = {}
  args.alarm_type = self.args.alarm_type or 0
  args.z_wave_alarm_type = self.args.z_wave_alarm_type or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Alarm.GetV2
--- @return st.zwave.CommandClass.Alarm.GetV2Args
function GetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Alarm.GetV2
function GetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Alarm.GetV2
function GetV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.z_wave_alarm_type = function()
    return zw._reflect(
      Alarm._reflect_z_wave_alarm_type,
      args.z_wave_alarm_type
    )
  end
end

--- @class st.zwave.CommandClass.Alarm.ReportV2Args
--- @alias ReportV2Args st.zwave.CommandClass.Alarm.ReportV2Args
--- @field public alarm_type integer [0,255]
--- @field public alarm_level integer [0,255]
--- @field public zensor_net_source_node_id integer [0,255]
--- @field public z_wave_alarm_status integer see :lua:class:`Alarm.z_wave_alarm_status <st.zwave.CommandClass.Alarm.z_wave_alarm_status>`
--- @field public z_wave_alarm_type integer see :lua:class:`Alarm.z_wave_alarm_type <st.zwave.CommandClass.Alarm.z_wave_alarm_type>`
--- @field public z_wave_alarm_event integer see :lua:class:`Alarm.z_wave_alarm_event <st.zwave.CommandClass.Alarm.z_wave_alarm_event>`
--- @field public event_parameter string
local ReportV2Args = {}

--- @class st.zwave.CommandClass.Alarm.ReportV2:st.zwave.Command
--- @alias ReportV2 st.zwave.CommandClass.Alarm.ReportV2
---
--- v2 ALARM_REPORT
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x05
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Alarm.ReportV2Args command-specific arguments
local ReportV2 = {}
setmetatable(ReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 ALARM_REPORT object.
---
--- @param module st.zwave.CommandClass.Alarm command class module instance
--- @param args st.zwave.CommandClass.Alarm.ReportV2Args command-specific arguments
function ReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.ALARM, Alarm.REPORT, 2, args, ...)
end

--- Serialize v2 ALARM_REPORT arguments.
---
--- @return string serialized payload
function ReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.alarm_type)
  writer:write_u8(args.alarm_level)
  writer:write_u8(args.zensor_net_source_node_id)
  writer:write_u8(args.z_wave_alarm_status)
  writer:write_u8(args.z_wave_alarm_type)
  writer:write_u8(args.z_wave_alarm_event)
  writer:write_u8(writer.length(args.event_parameter))
  writer:write_bytes(args.event_parameter)
  return writer.buf
end

--- Deserialize a v2 ALARM_REPORT payload.
---
--- @return st.zwave.CommandClass.Alarm.ReportV2Args deserialized arguments
function ReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("alarm_type")
  reader:read_u8("alarm_level")
  reader:read_u8("zensor_net_source_node_id")
  reader:read_u8("z_wave_alarm_status")
  reader:read_u8("z_wave_alarm_type")
  reader:read_u8("z_wave_alarm_event")
  reader:read_u8("number_of_event_parameters")
  reader:read_bytes(reader.parsed.number_of_event_parameters, "event_parameter")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Alarm.ReportV2
--- @return st.zwave.CommandClass.Alarm.ReportV2Args
function ReportV2._defaults(self)
  local args = {}
  args.alarm_type = self.args.alarm_type or 0
  args.alarm_level = self.args.alarm_level or 0
  args.zensor_net_source_node_id = self.args.zensor_net_source_node_id or 0
  args.z_wave_alarm_status = self.args.z_wave_alarm_status or 0
  args.z_wave_alarm_type = self.args.z_wave_alarm_type or 0
  args.z_wave_alarm_event = self.args.z_wave_alarm_event or 0
  args.event_parameter = self.args.event_parameter or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Alarm.ReportV2
--- @return st.zwave.CommandClass.Alarm.ReportV2Args
function ReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Alarm.ReportV2
function ReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Alarm.ReportV2
function ReportV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.z_wave_alarm_status = function()
    return zw._reflect(
      Alarm._reflect_z_wave_alarm_status,
      args.z_wave_alarm_status
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.z_wave_alarm_type = function()
    return zw._reflect(
      Alarm._reflect_z_wave_alarm_type,
      args.z_wave_alarm_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.z_wave_alarm_event = function()
    return zw._reflect(
      Alarm._reflect_z_wave_alarm_event,
      args.z_wave_alarm_type,
      args.z_wave_alarm_event
    )
  end
end

--- @class st.zwave.CommandClass.Alarm.SetV2Args
--- @alias SetV2Args st.zwave.CommandClass.Alarm.SetV2Args
--- @field public z_wave_alarm_type integer see :lua:class:`Alarm.z_wave_alarm_type <st.zwave.CommandClass.Alarm.z_wave_alarm_type>`
--- @field public z_wave_alarm_status integer see :lua:class:`Alarm.z_wave_alarm_status <st.zwave.CommandClass.Alarm.z_wave_alarm_status>`
local SetV2Args = {}

--- @class st.zwave.CommandClass.Alarm.SetV2:st.zwave.Command
--- @alias SetV2 st.zwave.CommandClass.Alarm.SetV2
---
--- v2 ALARM_SET
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x06
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Alarm.SetV2Args command-specific arguments
local SetV2 = {}
setmetatable(SetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 ALARM_SET object.
---
--- @param module st.zwave.CommandClass.Alarm command class module instance
--- @param args st.zwave.CommandClass.Alarm.SetV2Args command-specific arguments
function SetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.ALARM, Alarm.SET, 2, args, ...)
end

--- Serialize v2 ALARM_SET arguments.
---
--- @return string serialized payload
function SetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.z_wave_alarm_type)
  writer:write_u8(args.z_wave_alarm_status)
  return writer.buf
end

--- Deserialize a v2 ALARM_SET payload.
---
--- @return st.zwave.CommandClass.Alarm.SetV2Args deserialized arguments
function SetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("z_wave_alarm_type")
  reader:read_u8("z_wave_alarm_status")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Alarm.SetV2
--- @return st.zwave.CommandClass.Alarm.SetV2Args
function SetV2._defaults(self)
  local args = {}
  args.z_wave_alarm_type = self.args.z_wave_alarm_type or 0
  args.z_wave_alarm_status = self.args.z_wave_alarm_status or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Alarm.SetV2
--- @return st.zwave.CommandClass.Alarm.SetV2Args
function SetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Alarm.SetV2
function SetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Alarm.SetV2
function SetV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.z_wave_alarm_type = function()
    return zw._reflect(
      Alarm._reflect_z_wave_alarm_type,
      args.z_wave_alarm_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.z_wave_alarm_status = function()
    return zw._reflect(
      Alarm._reflect_z_wave_alarm_status,
      args.z_wave_alarm_status
    )
  end
end

--- @class st.zwave.CommandClass.Alarm.TypeSupportedGetV2Args
--- @alias TypeSupportedGetV2Args st.zwave.CommandClass.Alarm.TypeSupportedGetV2Args
local TypeSupportedGetV2Args = {}

--- @class st.zwave.CommandClass.Alarm.TypeSupportedGetV2:st.zwave.Command
--- @alias TypeSupportedGetV2 st.zwave.CommandClass.Alarm.TypeSupportedGetV2
---
--- v2 and forward-compatible v3,v4,v5,v6,v7,v8,v9 ALARM_TYPE_SUPPORTED_GET
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x07
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Alarm.TypeSupportedGetV2Args command-specific arguments
local TypeSupportedGetV2 = {}
setmetatable(TypeSupportedGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4,v5,v6,v7,v8,v9 ALARM_TYPE_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.Alarm command class module instance
--- @param args st.zwave.CommandClass.Alarm.TypeSupportedGetV2Args command-specific arguments
function TypeSupportedGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.ALARM, Alarm.TYPE_SUPPORTED_GET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4,v5,v6,v7,v8,v9 ALARM_TYPE_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function TypeSupportedGetV2:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4,v5,v6,v7,v8,v9 ALARM_TYPE_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.Alarm.TypeSupportedGetV2Args deserialized arguments
function TypeSupportedGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Alarm.TypeSupportedGetV2
--- @return st.zwave.CommandClass.Alarm.TypeSupportedGetV2Args
function TypeSupportedGetV2._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Alarm.TypeSupportedGetV2
--- @return st.zwave.CommandClass.Alarm.TypeSupportedGetV2Args
function TypeSupportedGetV2._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Alarm.TypeSupportedGetV2
function TypeSupportedGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Alarm.TypeSupportedGetV2
function TypeSupportedGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Alarm.TypeSupportedReportV2Args
--- @alias TypeSupportedReportV2Args st.zwave.CommandClass.Alarm.TypeSupportedReportV2Args
--- @field public v1_alarm boolean
--- @field public smoke boolean
--- @field public co boolean
--- @field public co2 boolean
--- @field public heat boolean
--- @field public water boolean
--- @field public access_control boolean
--- @field public burglar boolean
--- @field public power_management boolean
--- @field public system boolean
--- @field public emergency boolean
--- @field public clock boolean
local TypeSupportedReportV2Args = {}

--- @class st.zwave.CommandClass.Alarm.TypeSupportedReportV2:st.zwave.Command
--- @alias TypeSupportedReportV2 st.zwave.CommandClass.Alarm.TypeSupportedReportV2
---
--- v2 and forward-compatible v3 ALARM_TYPE_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x08
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Alarm.TypeSupportedReportV2Args command-specific arguments
local TypeSupportedReportV2 = {}
setmetatable(TypeSupportedReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3 ALARM_TYPE_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.Alarm command class module instance
--- @param args st.zwave.CommandClass.Alarm.TypeSupportedReportV2Args command-specific arguments
function TypeSupportedReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.ALARM, Alarm.TYPE_SUPPORTED_REPORT, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3 ALARM_TYPE_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function TypeSupportedReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, 2)
  writer:write_bits(2, 0) -- reserved
  writer:write_bool(args.v1_alarm)
  writer:write_bool(false) -- reserved
  writer:write_bool(args.smoke)
  writer:write_bool(args.co)
  writer:write_bool(args.co2)
  writer:write_bool(args.heat)
  writer:write_bool(args.water)
  writer:write_bool(args.access_control)
  writer:write_bool(args.burglar)
  writer:write_bool(args.power_management)
  writer:write_bool(args.system)
  writer:write_bool(args.emergency)
  writer:write_bool(args.clock)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3 ALARM_TYPE_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.Alarm.TypeSupportedReportV2Args deserialized arguments
function TypeSupportedReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "number_of_bit_masks")
  reader:read_bits(2) -- reserved
  reader:read_bool("v1_alarm")
  if reader.parsed.number_of_bit_masks > 0 then
    reader:read_bool() -- reserved
    reader:read_bool("smoke")
    reader:read_bool("co")
    reader:read_bool("co2")
    reader:read_bool("heat")
    reader:read_bool("water")
    reader:read_bool("access_control")
    reader:read_bool("burglar")
  end
  if reader.parsed.number_of_bit_masks > 1 then
    reader:read_bool("power_management")
    reader:read_bool("system")
    reader:read_bool("emergency")
    reader:read_bool("clock")
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Alarm.TypeSupportedReportV2
--- @return st.zwave.CommandClass.Alarm.TypeSupportedReportV2Args
function TypeSupportedReportV2._defaults(self)
  local args = {}
  args.v1_alarm = self.args.v1_alarm or false
  args.smoke = self.args.smoke or false
  args.co = self.args.co or false
  args.co2 = self.args.co2 or false
  args.heat = self.args.heat or false
  args.water = self.args.water or false
  args.access_control = self.args.access_control or false
  args.burglar = self.args.burglar or false
  args.power_management = self.args.power_management or false
  args.system = self.args.system or false
  args.emergency = self.args.emergency or false
  args.clock = self.args.clock or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Alarm.TypeSupportedReportV2
--- @return st.zwave.CommandClass.Alarm.TypeSupportedReportV2Args
function TypeSupportedReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Alarm.TypeSupportedReportV2
function TypeSupportedReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Alarm.TypeSupportedReportV2
function TypeSupportedReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Alarm.Get
--- @alias _Get st.zwave.CommandClass.Alarm.Get
---
--- Dynamically versioned ALARM_GET
---
--- Supported versions: 1,2; unique base versions: 1,2
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x04
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.Alarm.GetV1Args|st.zwave.CommandClass.Alarm.GetV2Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ALARM_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Alarm command class module instance
--- @param args st.zwave.CommandClass.Alarm.GetV1Args|st.zwave.CommandClass.Alarm.GetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Alarm.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, Alarm.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Alarm.Report
--- @alias _Report st.zwave.CommandClass.Alarm.Report
---
--- Dynamically versioned ALARM_REPORT
---
--- Supported versions: 1,2; unique base versions: 1,2
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x05
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.Alarm.ReportV1Args|st.zwave.CommandClass.Alarm.ReportV2Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ALARM_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Alarm command class module instance
--- @param args st.zwave.CommandClass.Alarm.ReportV1Args|st.zwave.CommandClass.Alarm.ReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.Alarm.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, Alarm.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Alarm.Set
--- @alias _Set st.zwave.CommandClass.Alarm.Set
---
--- Dynamically versioned ALARM_SET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x06
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Alarm.SetV2Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ALARM_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Alarm command class module instance
--- @param args st.zwave.CommandClass.Alarm.SetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Alarm.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, Alarm.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Alarm.TypeSupportedGet
--- @alias _TypeSupportedGet st.zwave.CommandClass.Alarm.TypeSupportedGet
---
--- Dynamically versioned ALARM_TYPE_SUPPORTED_GET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x07
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Alarm.TypeSupportedGetV2Args
local _TypeSupportedGet = {}
setmetatable(_TypeSupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ALARM_TYPE_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Alarm command class module instance
--- @param args st.zwave.CommandClass.Alarm.TypeSupportedGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Alarm.TypeSupportedGet
function _TypeSupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, Alarm.TYPE_SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Alarm.TypeSupportedReport
--- @alias _TypeSupportedReport st.zwave.CommandClass.Alarm.TypeSupportedReport
---
--- Dynamically versioned ALARM_TYPE_SUPPORTED_REPORT
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x08
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Alarm.TypeSupportedReportV2Args
local _TypeSupportedReport = {}
setmetatable(_TypeSupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ALARM_TYPE_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Alarm command class module instance
--- @param args st.zwave.CommandClass.Alarm.TypeSupportedReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.Alarm.TypeSupportedReport
function _TypeSupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, Alarm.TYPE_SUPPORTED_REPORT, module._serialization_version, args, ...)
end

Alarm.GetV1 = GetV1
Alarm.ReportV1 = ReportV1
Alarm.GetV2 = GetV2
Alarm.ReportV2 = ReportV2
Alarm.SetV2 = SetV2
Alarm.TypeSupportedGetV2 = TypeSupportedGetV2
Alarm.TypeSupportedReportV2 = TypeSupportedReportV2
Alarm.Get = _Get
Alarm.Report = _Report
Alarm.Set = _Set
Alarm.TypeSupportedGet = _TypeSupportedGet
Alarm.TypeSupportedReport = _TypeSupportedReport

Alarm._lut = {
  [0] = { -- dynamically versioned constructors
    [Alarm.GET] = Alarm.Get,
    [Alarm.REPORT] = Alarm.Report,
    [Alarm.SET] = Alarm.Set,
    [Alarm.TYPE_SUPPORTED_GET] = Alarm.TypeSupportedGet,
    [Alarm.TYPE_SUPPORTED_REPORT] = Alarm.TypeSupportedReport
  },
  [1] = { -- version 1
    [Alarm.GET] = Alarm.GetV1,
    [Alarm.REPORT] = Alarm.ReportV1
  },
  [2] = { -- version 2
    [Alarm.GET] = Alarm.GetV2,
    [Alarm.REPORT] = Alarm.ReportV2,
    [Alarm.SET] = Alarm.SetV2,
    [Alarm.TYPE_SUPPORTED_GET] = Alarm.TypeSupportedGetV2,
    [Alarm.TYPE_SUPPORTED_REPORT] = Alarm.TypeSupportedReportV2
  }
}
--- @class st.zwave.CommandClass.Alarm.z_wave_alarm_status
--- @alias z_wave_alarm_status st.zwave.CommandClass.Alarm.z_wave_alarm_status
--- @field public OFF number 0x00
--- @field public ON number 0xFF
local z_wave_alarm_status = {
  OFF = 0x00,
  ON = 0xFF
}
Alarm.z_wave_alarm_status = z_wave_alarm_status
Alarm._reflect_z_wave_alarm_status = zw._reflection_builder(Alarm.z_wave_alarm_status)

--- @class st.zwave.CommandClass.Alarm.z_wave_alarm_type
--- @alias z_wave_alarm_type st.zwave.CommandClass.Alarm.z_wave_alarm_type
--- @field public SMOKE number 0x01
--- @field public CO number 0x02
--- @field public CO2 number 0x03
--- @field public HEAT number 0x04
--- @field public WATER number 0x05
--- @field public ACCESS_CONTROL number 0x06
--- @field public BURGLAR number 0x07
--- @field public POWER_MANAGEMENT number 0x08
--- @field public SYSTEM number 0x09
--- @field public EMERGENCY number 0x0A
--- @field public CLOCK number 0x0B
--- @field public FIRST number 0xFF
local z_wave_alarm_type = {
  SMOKE = 0x01,
  CO = 0x02,
  CO2 = 0x03,
  HEAT = 0x04,
  WATER = 0x05,
  ACCESS_CONTROL = 0x06,
  BURGLAR = 0x07,
  POWER_MANAGEMENT = 0x08,
  SYSTEM = 0x09,
  EMERGENCY = 0x0A,
  CLOCK = 0x0B,
  FIRST = 0xFF
}
Alarm.z_wave_alarm_type = z_wave_alarm_type
Alarm._reflect_z_wave_alarm_type = zw._reflection_builder(Alarm.z_wave_alarm_type)

--- @class st.zwave.CommandClass.Alarm.z_wave_alarm_event_access_control
--- @alias z_wave_alarm_event_access_control st.zwave.CommandClass.Alarm.z_wave_alarm_event_access_control
--- @field public MANUAL_LOCK_OPERATION number 0x01
--- @field public MANUAL_UNLOCK_OPERATION number 0x02
--- @field public RF_LOCK_OPERATION number 0x03
--- @field public RF_UNLOCK_OPERATION number 0x04
--- @field public KEYPAD_LOCK_OPERATION number 0x05
--- @field public KEYPAD_UNLOCK_OPERATION number 0x06
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local z_wave_alarm_event_access_control = {}

--- @class st.zwave.CommandClass.Alarm.z_wave_alarm_event_burglar
--- @alias z_wave_alarm_event_burglar st.zwave.CommandClass.Alarm.z_wave_alarm_event_burglar
--- @field public INTRUSION_LOCATION_PROVIDED number 0x01
--- @field public INTRUSION number 0x02
--- @field public TAMPERING_PRODUCT_COVER_REMOVED number 0x03
--- @field public TAMPERING_INVALID_CODE number 0x04
--- @field public GLASS_BREAKAGE_LOCATION_PROVIDED number 0x05
--- @field public GLASS_BREAKAGE number 0x06
--- @field public MOTION_DETECTION_LOCATION_PROVIDED number 0x07
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local z_wave_alarm_event_burglar = {}

--- @class st.zwave.CommandClass.Alarm.z_wave_alarm_event_clock
--- @alias z_wave_alarm_event_clock st.zwave.CommandClass.Alarm.z_wave_alarm_event_clock
--- @field public WAKE_UP_ALERT number 0x01
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local z_wave_alarm_event_clock = {}

--- @class st.zwave.CommandClass.Alarm.z_wave_alarm_event_co
--- @alias z_wave_alarm_event_co st.zwave.CommandClass.Alarm.z_wave_alarm_event_co
--- @field public CARBON_MONOXIDE_DETECTED_LOCATION_PROVIDED number 0x01
--- @field public CARBON_MONOXIDE_DETECTED number 0x02
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local z_wave_alarm_event_co = {}

--- @class st.zwave.CommandClass.Alarm.z_wave_alarm_event_co2
--- @alias z_wave_alarm_event_co2 st.zwave.CommandClass.Alarm.z_wave_alarm_event_co2
--- @field public CARBON_DIOXIDE_DETECTED_LOCATION_PROVIDED number 0x01
--- @field public CARBON_DIOXIDE_DETECTED number 0x02
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local z_wave_alarm_event_co2 = {}

--- @class st.zwave.CommandClass.Alarm.z_wave_alarm_event_emergency
--- @alias z_wave_alarm_event_emergency st.zwave.CommandClass.Alarm.z_wave_alarm_event_emergency
--- @field public CONTACT_POLICE number 0x01
--- @field public CONTACT_FIRE_SERVICE number 0x02
--- @field public CONTACT_MEDICAL_SERVICE number 0x03
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local z_wave_alarm_event_emergency = {}

--- @class st.zwave.CommandClass.Alarm.z_wave_alarm_event_heat
--- @alias z_wave_alarm_event_heat st.zwave.CommandClass.Alarm.z_wave_alarm_event_heat
--- @field public OVERDETECTED_LOCATION_PROVIDED number 0x01
--- @field public OVERDETECTED number 0x02
--- @field public RAPID_TEMPERATURE_RISE_LOCATION_PROVIDED number 0x03
--- @field public RAPID_TEMPERATURE_RISE number 0x04
--- @field public UNDER_DETECTED_LOCATION_PROVIDED number 0x05
--- @field public UNDER_DETECTED number 0x06
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local z_wave_alarm_event_heat = {}

--- @class st.zwave.CommandClass.Alarm.z_wave_alarm_event_power_management
--- @alias z_wave_alarm_event_power_management st.zwave.CommandClass.Alarm.z_wave_alarm_event_power_management
--- @field public POWER_HAS_BEEN_APPLIED number 0x01
--- @field public AC_MAINS_DISCONNECTED number 0x02
--- @field public AC_MAINS_RE_CONNECTED number 0x03
--- @field public SURGE_DETECTED number 0x04
--- @field public VOLTAGE_DROP_DRIFT number 0x05
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local z_wave_alarm_event_power_management = {}

--- @class st.zwave.CommandClass.Alarm.z_wave_alarm_event_smoke
--- @alias z_wave_alarm_event_smoke st.zwave.CommandClass.Alarm.z_wave_alarm_event_smoke
--- @field public DETECTED_LOCATION_PROVIDED number 0x01
--- @field public DETECTED number 0x02
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local z_wave_alarm_event_smoke = {}

--- @class st.zwave.CommandClass.Alarm.z_wave_alarm_event_system
--- @alias z_wave_alarm_event_system st.zwave.CommandClass.Alarm.z_wave_alarm_event_system
--- @field public HARDWARE_FAILURE number 0x01
--- @field public SOFTWARE_FAILURE number 0x02
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local z_wave_alarm_event_system = {}

--- @class st.zwave.CommandClass.Alarm.z_wave_alarm_event_water
--- @alias z_wave_alarm_event_water st.zwave.CommandClass.Alarm.z_wave_alarm_event_water
--- @field public LEAK_DETECTED_LOCATION_PROVIDED number 0x01
--- @field public LEAK_DETECTED number 0x02
--- @field public LEVEL_DROPPED_LOCATION_PROVIDED number 0x03
--- @field public LEVEL_DROPPED number 0x04
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local z_wave_alarm_event_water = {}

--- @class st.zwave.CommandClass.Alarm.z_wave_alarm_event
--- @alias z_wave_alarm_event st.zwave.CommandClass.Alarm.z_wave_alarm_event
--- @field public access_control st.zwave.CommandClass.z_wave_alarm_event_access_control
--- @field public burglar st.zwave.CommandClass.z_wave_alarm_event_burglar
--- @field public clock st.zwave.CommandClass.z_wave_alarm_event_clock
--- @field public co st.zwave.CommandClass.z_wave_alarm_event_co
--- @field public co2 st.zwave.CommandClass.z_wave_alarm_event_co2
--- @field public emergency st.zwave.CommandClass.z_wave_alarm_event_emergency
--- @field public heat st.zwave.CommandClass.z_wave_alarm_event_heat
--- @field public power_management st.zwave.CommandClass.z_wave_alarm_event_power_management
--- @field public smoke st.zwave.CommandClass.z_wave_alarm_event_smoke
--- @field public system st.zwave.CommandClass.z_wave_alarm_event_system
--- @field public water st.zwave.CommandClass.z_wave_alarm_event_water
local z_wave_alarm_event = {
  access_control = {
    MANUAL_LOCK_OPERATION = 0x01,
    MANUAL_UNLOCK_OPERATION = 0x02,
    RF_LOCK_OPERATION = 0x03,
    RF_UNLOCK_OPERATION = 0x04,
    KEYPAD_LOCK_OPERATION = 0x05,
    KEYPAD_UNLOCK_OPERATION = 0x06,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  burglar = {
    INTRUSION_LOCATION_PROVIDED = 0x01,
    INTRUSION = 0x02,
    TAMPERING_PRODUCT_COVER_REMOVED = 0x03,
    TAMPERING_INVALID_CODE = 0x04,
    GLASS_BREAKAGE_LOCATION_PROVIDED = 0x05,
    GLASS_BREAKAGE = 0x06,
    MOTION_DETECTION_LOCATION_PROVIDED = 0x07,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  clock = {
    WAKE_UP_ALERT = 0x01,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  co = {
    CARBON_MONOXIDE_DETECTED_LOCATION_PROVIDED = 0x01,
    CARBON_MONOXIDE_DETECTED = 0x02,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  co2 = {
    CARBON_DIOXIDE_DETECTED_LOCATION_PROVIDED = 0x01,
    CARBON_DIOXIDE_DETECTED = 0x02,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  emergency = {
    CONTACT_POLICE = 0x01,
    CONTACT_FIRE_SERVICE = 0x02,
    CONTACT_MEDICAL_SERVICE = 0x03,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  heat = {
    OVERDETECTED_LOCATION_PROVIDED = 0x01,
    OVERDETECTED = 0x02,
    RAPID_TEMPERATURE_RISE_LOCATION_PROVIDED = 0x03,
    RAPID_TEMPERATURE_RISE = 0x04,
    UNDER_DETECTED_LOCATION_PROVIDED = 0x05,
    UNDER_DETECTED = 0x06,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  power_management = {
    POWER_HAS_BEEN_APPLIED = 0x01,
    AC_MAINS_DISCONNECTED = 0x02,
    AC_MAINS_RE_CONNECTED = 0x03,
    SURGE_DETECTED = 0x04,
    VOLTAGE_DROP_DRIFT = 0x05,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  smoke = {
    DETECTED_LOCATION_PROVIDED = 0x01,
    DETECTED = 0x02,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  system = {
    HARDWARE_FAILURE = 0x01,
    SOFTWARE_FAILURE = 0x02,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  water = {
    LEAK_DETECTED_LOCATION_PROVIDED = 0x01,
    LEAK_DETECTED = 0x02,
    LEVEL_DROPPED_LOCATION_PROVIDED = 0x03,
    LEVEL_DROPPED = 0x04,
    UNKNOWN_EVENT_STATE = 0xFE
  }
}
Alarm.z_wave_alarm_event = z_wave_alarm_event
Alarm._reflect_z_wave_alarm_event = zw._reflection_builder(Alarm.z_wave_alarm_event, Alarm.z_wave_alarm_type)


return Alarm
