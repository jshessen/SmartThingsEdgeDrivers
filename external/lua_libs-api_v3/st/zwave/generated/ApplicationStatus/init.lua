-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.ApplicationStatus
--- @alias ApplicationStatus st.zwave.CommandClass.ApplicationStatus
---
--- Supported versions: 1
---
--- @field public APPLICATION_BUSY number 0x01 - APPLICATION_BUSY command id
--- @field public APPLICATION_REJECTED_REQUEST number 0x02 - APPLICATION_REJECTED_REQUEST command id
local ApplicationStatus = {}
ApplicationStatus.APPLICATION_BUSY = 0x01
ApplicationStatus.APPLICATION_REJECTED_REQUEST = 0x02

ApplicationStatus._commands = {
  [ApplicationStatus.APPLICATION_BUSY] = "APPLICATION_BUSY",
  [ApplicationStatus.APPLICATION_REJECTED_REQUEST] = "APPLICATION_REJECTED_REQUEST"
}

--- Instantiate a versioned instance of the ApplicationStatus Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.ApplicationStatus versioned command class instance
function ApplicationStatus:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.APPLICATION_STATUS][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(ApplicationStatus, {
  __call = ApplicationStatus.init
})

ApplicationStatus._serialization_version = nil
ApplicationStatus._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.APPLICATION_STATUS] = {
  [1] = true
}

--- @class st.zwave.CommandClass.ApplicationStatus.ApplicationBusyV1Args
--- @alias ApplicationBusyV1Args st.zwave.CommandClass.ApplicationStatus.ApplicationBusyV1Args
--- @field public status integer see :lua:class:`ApplicationStatus.status <st.zwave.CommandClass.ApplicationStatus.status>`
--- @field public wait_time integer [0,255]
local ApplicationBusyV1Args = {}

--- @class st.zwave.CommandClass.ApplicationStatus.ApplicationBusyV1:st.zwave.Command
--- @alias ApplicationBusyV1 st.zwave.CommandClass.ApplicationStatus.ApplicationBusyV1
---
--- v1 APPLICATION_BUSY
---
--- @field public cmd_class number 0x22
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ApplicationStatus.ApplicationBusyV1Args command-specific arguments
local ApplicationBusyV1 = {}
setmetatable(ApplicationBusyV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 APPLICATION_BUSY object.
---
--- @param module st.zwave.CommandClass.ApplicationStatus command class module instance
--- @param args st.zwave.CommandClass.ApplicationStatus.ApplicationBusyV1Args command-specific arguments
function ApplicationBusyV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.APPLICATION_STATUS, ApplicationStatus.APPLICATION_BUSY, 1, args, ...)
end

--- Serialize v1 APPLICATION_BUSY arguments.
---
--- @return string serialized payload
function ApplicationBusyV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.status)
  writer:write_u8(args.wait_time)
  return writer.buf
end

--- Deserialize a v1 APPLICATION_BUSY payload.
---
--- @return st.zwave.CommandClass.ApplicationStatus.ApplicationBusyV1Args deserialized arguments
function ApplicationBusyV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("status")
  reader:read_u8("wait_time")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ApplicationStatus.ApplicationBusyV1
--- @return st.zwave.CommandClass.ApplicationStatus.ApplicationBusyV1Args
function ApplicationBusyV1._defaults(self)
  local args = {}
  args.status = self.args.status or 0
  args.wait_time = self.args.wait_time or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ApplicationStatus.ApplicationBusyV1
--- @return st.zwave.CommandClass.ApplicationStatus.ApplicationBusyV1Args
function ApplicationBusyV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ApplicationStatus.ApplicationBusyV1
function ApplicationBusyV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ApplicationStatus.ApplicationBusyV1
function ApplicationBusyV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.status = function()
    return zw._reflect(
      ApplicationStatus._reflect_status,
      args.status
    )
  end
end

--- @class st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequestV1Args
--- @alias ApplicationRejectedRequestV1Args st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequestV1Args
--- @field public status integer see :lua:class:`ApplicationStatus.status <st.zwave.CommandClass.ApplicationStatus.status>`
local ApplicationRejectedRequestV1Args = {}

--- @class st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequestV1:st.zwave.Command
--- @alias ApplicationRejectedRequestV1 st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequestV1
---
--- v1 APPLICATION_REJECTED_REQUEST
---
--- @field public cmd_class number 0x22
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequestV1Args command-specific arguments
local ApplicationRejectedRequestV1 = {}
setmetatable(ApplicationRejectedRequestV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 APPLICATION_REJECTED_REQUEST object.
---
--- @param module st.zwave.CommandClass.ApplicationStatus command class module instance
--- @param args st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequestV1Args command-specific arguments
function ApplicationRejectedRequestV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.APPLICATION_STATUS, ApplicationStatus.APPLICATION_REJECTED_REQUEST, 1, args, ...)
end

--- Serialize v1 APPLICATION_REJECTED_REQUEST arguments.
---
--- @return string serialized payload
function ApplicationRejectedRequestV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.status)
  return writer.buf
end

--- Deserialize a v1 APPLICATION_REJECTED_REQUEST payload.
---
--- @return st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequestV1Args deserialized arguments
function ApplicationRejectedRequestV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("status")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequestV1
--- @return st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequestV1Args
function ApplicationRejectedRequestV1._defaults(self)
  local args = {}
  args.status = self.args.status or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequestV1
--- @return st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequestV1Args
function ApplicationRejectedRequestV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequestV1
function ApplicationRejectedRequestV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequestV1
function ApplicationRejectedRequestV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ApplicationStatus.ApplicationBusy
--- @alias _ApplicationBusy st.zwave.CommandClass.ApplicationStatus.ApplicationBusy
---
--- Dynamically versioned APPLICATION_BUSY
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x22
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ApplicationStatus.ApplicationBusyV1Args
local _ApplicationBusy = {}
setmetatable(_ApplicationBusy, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an APPLICATION_BUSY object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ApplicationStatus command class module instance
--- @param args st.zwave.CommandClass.ApplicationStatus.ApplicationBusyV1Args command-specific arguments
--- @return st.zwave.CommandClass.ApplicationStatus.ApplicationBusy
function _ApplicationBusy:construct(module, args, ...)
  return zw.Command._construct(module, ApplicationStatus.APPLICATION_BUSY, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequest
--- @alias _ApplicationRejectedRequest st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequest
---
--- Dynamically versioned APPLICATION_REJECTED_REQUEST
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x22
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequestV1Args
local _ApplicationRejectedRequest = {}
setmetatable(_ApplicationRejectedRequest, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an APPLICATION_REJECTED_REQUEST object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ApplicationStatus command class module instance
--- @param args st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequestV1Args command-specific arguments
--- @return st.zwave.CommandClass.ApplicationStatus.ApplicationRejectedRequest
function _ApplicationRejectedRequest:construct(module, args, ...)
  return zw.Command._construct(module, ApplicationStatus.APPLICATION_REJECTED_REQUEST, module._serialization_version, args, ...)
end

ApplicationStatus.ApplicationBusyV1 = ApplicationBusyV1
ApplicationStatus.ApplicationRejectedRequestV1 = ApplicationRejectedRequestV1
ApplicationStatus.ApplicationBusy = _ApplicationBusy
ApplicationStatus.ApplicationRejectedRequest = _ApplicationRejectedRequest

ApplicationStatus._lut = {
  [0] = { -- dynamically versioned constructors
    [ApplicationStatus.APPLICATION_BUSY] = ApplicationStatus.ApplicationBusy,
    [ApplicationStatus.APPLICATION_REJECTED_REQUEST] = ApplicationStatus.ApplicationRejectedRequest
  },
  [1] = { -- version 1
    [ApplicationStatus.APPLICATION_BUSY] = ApplicationStatus.ApplicationBusyV1,
    [ApplicationStatus.APPLICATION_REJECTED_REQUEST] = ApplicationStatus.ApplicationRejectedRequestV1
  }
}
--- @class st.zwave.CommandClass.ApplicationStatus.status
--- @alias status st.zwave.CommandClass.ApplicationStatus.status
--- @field public TRY_AGAIN_LATER number 0x00
--- @field public TRY_AGAIN_IN_WAIT_TIME_SECONDS number 0x01
--- @field public REQUEST_QUEUED_EXECUTED_LATER number 0x02
local status = {
  TRY_AGAIN_LATER = 0x00,
  TRY_AGAIN_IN_WAIT_TIME_SECONDS = 0x01,
  REQUEST_QUEUED_EXECUTED_LATER = 0x02
}
ApplicationStatus.status = status
ApplicationStatus._reflect_status = zw._reflection_builder(ApplicationStatus.status)


return ApplicationStatus
