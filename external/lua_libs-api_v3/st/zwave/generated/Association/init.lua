-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.Association
--- @alias Association st.zwave.CommandClass.Association
---
--- Supported versions: 1,2,3
---
--- @field public SET number 0x01 - ASSOCIATION_SET command id
--- @field public GET number 0x02 - ASSOCIATION_GET command id
--- @field public REPORT number 0x03 - ASSOCIATION_REPORT command id
--- @field public REMOVE number 0x04 - ASSOCIATION_REMOVE command id
--- @field public GROUPINGS_GET number 0x05 - ASSOCIATION_GROUPINGS_GET command id
--- @field public GROUPINGS_REPORT number 0x06 - ASSOCIATION_GROUPINGS_REPORT command id
--- @field public SPECIFIC_GROUP_GET number 0x0B - ASSOCIATION_SPECIFIC_GROUP_GET command id
--- @field public SPECIFIC_GROUP_REPORT number 0x0C - ASSOCIATION_SPECIFIC_GROUP_REPORT command id
local Association = {}
Association.SET = 0x01
Association.GET = 0x02
Association.REPORT = 0x03
Association.REMOVE = 0x04
Association.GROUPINGS_GET = 0x05
Association.GROUPINGS_REPORT = 0x06
Association.SPECIFIC_GROUP_GET = 0x0B
Association.SPECIFIC_GROUP_REPORT = 0x0C

Association._commands = {
  [Association.SET] = "SET",
  [Association.GET] = "GET",
  [Association.REPORT] = "REPORT",
  [Association.REMOVE] = "REMOVE",
  [Association.GROUPINGS_GET] = "GROUPINGS_GET",
  [Association.GROUPINGS_REPORT] = "GROUPINGS_REPORT",
  [Association.SPECIFIC_GROUP_GET] = "SPECIFIC_GROUP_GET",
  [Association.SPECIFIC_GROUP_REPORT] = "SPECIFIC_GROUP_REPORT"
}

--- Instantiate a versioned instance of the Association Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.Association versioned command class instance
function Association:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.ASSOCIATION][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(Association, {
  __call = Association.init
})

Association._serialization_version = nil
Association._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.ASSOCIATION] = {
  [1] = true,
  [2] = true,
  [3] = true
}

--- @class st.zwave.CommandClass.Association.SetV1Args
--- @alias SetV1Args st.zwave.CommandClass.Association.SetV1Args
--- @field public grouping_identifier integer [0,255]
--- @field public node_ids integer[] [0,255]
local SetV1Args = {}

--- @class st.zwave.CommandClass.Association.SetV1:st.zwave.Command
--- @alias SetV1 st.zwave.CommandClass.Association.SetV1
---
--- v1 and forward-compatible v2,v3 ASSOCIATION_SET
---
--- @field public cmd_class number 0x85
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Association.SetV1Args command-specific arguments
local SetV1 = {}
setmetatable(SetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 ASSOCIATION_SET object.
---
--- @param module st.zwave.CommandClass.Association command class module instance
--- @param args st.zwave.CommandClass.Association.SetV1Args command-specific arguments
function SetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ASSOCIATION, Association.SET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 ASSOCIATION_SET arguments.
---
--- @return string serialized payload
function SetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.grouping_identifier)
  for i=1,writer.length(args.node_ids) do
    writer:write_u8(args.node_ids[i])
  end
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 ASSOCIATION_SET payload.
---
--- @return st.zwave.CommandClass.Association.SetV1Args deserialized arguments
function SetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("grouping_identifier")
  reader.parsed.node_ids = {}
  while reader:remain() > 0 do
    reader.parsed.node_ids[#reader.parsed.node_ids + 1] = reader:read_u8()
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Association.SetV1
--- @return st.zwave.CommandClass.Association.SetV1Args
function SetV1._defaults(self)
  local args = {}
  args.grouping_identifier = self.args.grouping_identifier or 0
  args.node_ids = self.args.node_ids or {}
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Association.SetV1
--- @return st.zwave.CommandClass.Association.SetV1Args
function SetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Association.SetV1
function SetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Association.SetV1
function SetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Association.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.Association.GetV1Args
--- @field public grouping_identifier integer [0,255]
local GetV1Args = {}

--- @class st.zwave.CommandClass.Association.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.Association.GetV1
---
--- v1 and forward-compatible v2,v3 ASSOCIATION_GET
---
--- @field public cmd_class number 0x85
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Association.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 ASSOCIATION_GET object.
---
--- @param module st.zwave.CommandClass.Association command class module instance
--- @param args st.zwave.CommandClass.Association.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ASSOCIATION, Association.GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 ASSOCIATION_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.grouping_identifier)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 ASSOCIATION_GET payload.
---
--- @return st.zwave.CommandClass.Association.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("grouping_identifier")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Association.GetV1
--- @return st.zwave.CommandClass.Association.GetV1Args
function GetV1._defaults(self)
  local args = {}
  args.grouping_identifier = self.args.grouping_identifier or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Association.GetV1
--- @return st.zwave.CommandClass.Association.GetV1Args
function GetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Association.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Association.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Association.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.Association.ReportV1Args
--- @field public grouping_identifier integer [0,255]
--- @field public max_nodes_supported integer [0,255]
--- @field public reports_to_follow integer [0,255]
--- @field public node_ids integer[] [0,255]
local ReportV1Args = {}

--- @class st.zwave.CommandClass.Association.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.Association.ReportV1
---
--- v1 and forward-compatible v2,v3 ASSOCIATION_REPORT
---
--- @field public cmd_class number 0x85
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Association.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 ASSOCIATION_REPORT object.
---
--- @param module st.zwave.CommandClass.Association command class module instance
--- @param args st.zwave.CommandClass.Association.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ASSOCIATION, Association.REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 ASSOCIATION_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.grouping_identifier)
  writer:write_u8(args.max_nodes_supported)
  writer:write_u8(args.reports_to_follow)
  for i=1,writer.length(args.node_ids) do
    writer:write_u8(args.node_ids[i])
  end
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 ASSOCIATION_REPORT payload.
---
--- @return st.zwave.CommandClass.Association.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("grouping_identifier")
  reader:read_u8("max_nodes_supported")
  reader:read_u8("reports_to_follow")
  reader.parsed.node_ids = {}
  while reader:remain() > 0 do
    reader.parsed.node_ids[#reader.parsed.node_ids + 1] = reader:read_u8()
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Association.ReportV1
--- @return st.zwave.CommandClass.Association.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.grouping_identifier = self.args.grouping_identifier or 0
  args.max_nodes_supported = self.args.max_nodes_supported or 0
  args.reports_to_follow = self.args.reports_to_follow or 0
  args.node_ids = self.args.node_ids or {}
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Association.ReportV1
--- @return st.zwave.CommandClass.Association.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Association.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Association.ReportV1
function ReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Association.RemoveV1Args
--- @alias RemoveV1Args st.zwave.CommandClass.Association.RemoveV1Args
--- @field public grouping_identifier integer [0,255]
--- @field public node_ids integer[] [0,255]
local RemoveV1Args = {}

--- @class st.zwave.CommandClass.Association.RemoveV1:st.zwave.Command
--- @alias RemoveV1 st.zwave.CommandClass.Association.RemoveV1
---
--- v1 and forward-compatible v2,v3 ASSOCIATION_REMOVE
---
--- @field public cmd_class number 0x85
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Association.RemoveV1Args command-specific arguments
local RemoveV1 = {}
setmetatable(RemoveV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 ASSOCIATION_REMOVE object.
---
--- @param module st.zwave.CommandClass.Association command class module instance
--- @param args st.zwave.CommandClass.Association.RemoveV1Args command-specific arguments
function RemoveV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ASSOCIATION, Association.REMOVE, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 ASSOCIATION_REMOVE arguments.
---
--- @return string serialized payload
function RemoveV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.grouping_identifier)
  for i=1,writer.length(args.node_ids) do
    writer:write_u8(args.node_ids[i])
  end
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 ASSOCIATION_REMOVE payload.
---
--- @return st.zwave.CommandClass.Association.RemoveV1Args deserialized arguments
function RemoveV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("grouping_identifier")
  reader.parsed.node_ids = {}
  while reader:remain() > 0 do
    reader.parsed.node_ids[#reader.parsed.node_ids + 1] = reader:read_u8()
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Association.RemoveV1
--- @return st.zwave.CommandClass.Association.RemoveV1Args
function RemoveV1._defaults(self)
  local args = {}
  args.grouping_identifier = self.args.grouping_identifier or 0
  args.node_ids = self.args.node_ids or {}
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Association.RemoveV1
--- @return st.zwave.CommandClass.Association.RemoveV1Args
function RemoveV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Association.RemoveV1
function RemoveV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Association.RemoveV1
function RemoveV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Association.GroupingsGetV1Args
--- @alias GroupingsGetV1Args st.zwave.CommandClass.Association.GroupingsGetV1Args
local GroupingsGetV1Args = {}

--- @class st.zwave.CommandClass.Association.GroupingsGetV1:st.zwave.Command
--- @alias GroupingsGetV1 st.zwave.CommandClass.Association.GroupingsGetV1
---
--- v1 and forward-compatible v2,v3 ASSOCIATION_GROUPINGS_GET
---
--- @field public cmd_class number 0x85
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Association.GroupingsGetV1Args command-specific arguments
local GroupingsGetV1 = {}
setmetatable(GroupingsGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 ASSOCIATION_GROUPINGS_GET object.
---
--- @param module st.zwave.CommandClass.Association command class module instance
--- @param args st.zwave.CommandClass.Association.GroupingsGetV1Args command-specific arguments
function GroupingsGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ASSOCIATION, Association.GROUPINGS_GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 ASSOCIATION_GROUPINGS_GET arguments.
---
--- @return string serialized payload
function GroupingsGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 ASSOCIATION_GROUPINGS_GET payload.
---
--- @return st.zwave.CommandClass.Association.GroupingsGetV1Args deserialized arguments
function GroupingsGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Association.GroupingsGetV1
--- @return st.zwave.CommandClass.Association.GroupingsGetV1Args
function GroupingsGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Association.GroupingsGetV1
--- @return st.zwave.CommandClass.Association.GroupingsGetV1Args
function GroupingsGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Association.GroupingsGetV1
function GroupingsGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Association.GroupingsGetV1
function GroupingsGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Association.GroupingsReportV1Args
--- @alias GroupingsReportV1Args st.zwave.CommandClass.Association.GroupingsReportV1Args
--- @field public supported_groupings integer [0,255]
local GroupingsReportV1Args = {}

--- @class st.zwave.CommandClass.Association.GroupingsReportV1:st.zwave.Command
--- @alias GroupingsReportV1 st.zwave.CommandClass.Association.GroupingsReportV1
---
--- v1 and forward-compatible v2,v3 ASSOCIATION_GROUPINGS_REPORT
---
--- @field public cmd_class number 0x85
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Association.GroupingsReportV1Args command-specific arguments
local GroupingsReportV1 = {}
setmetatable(GroupingsReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 ASSOCIATION_GROUPINGS_REPORT object.
---
--- @param module st.zwave.CommandClass.Association command class module instance
--- @param args st.zwave.CommandClass.Association.GroupingsReportV1Args command-specific arguments
function GroupingsReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ASSOCIATION, Association.GROUPINGS_REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 ASSOCIATION_GROUPINGS_REPORT arguments.
---
--- @return string serialized payload
function GroupingsReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.supported_groupings)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 ASSOCIATION_GROUPINGS_REPORT payload.
---
--- @return st.zwave.CommandClass.Association.GroupingsReportV1Args deserialized arguments
function GroupingsReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("supported_groupings")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Association.GroupingsReportV1
--- @return st.zwave.CommandClass.Association.GroupingsReportV1Args
function GroupingsReportV1._defaults(self)
  local args = {}
  args.supported_groupings = self.args.supported_groupings or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Association.GroupingsReportV1
--- @return st.zwave.CommandClass.Association.GroupingsReportV1Args
function GroupingsReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Association.GroupingsReportV1
function GroupingsReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Association.GroupingsReportV1
function GroupingsReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Association.SpecificGroupGetV2Args
--- @alias SpecificGroupGetV2Args st.zwave.CommandClass.Association.SpecificGroupGetV2Args
local SpecificGroupGetV2Args = {}

--- @class st.zwave.CommandClass.Association.SpecificGroupGetV2:st.zwave.Command
--- @alias SpecificGroupGetV2 st.zwave.CommandClass.Association.SpecificGroupGetV2
---
--- v2 and forward-compatible v3 ASSOCIATION_SPECIFIC_GROUP_GET
---
--- @field public cmd_class number 0x85
--- @field public cmd_id number 0x0B
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Association.SpecificGroupGetV2Args command-specific arguments
local SpecificGroupGetV2 = {}
setmetatable(SpecificGroupGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3 ASSOCIATION_SPECIFIC_GROUP_GET object.
---
--- @param module st.zwave.CommandClass.Association command class module instance
--- @param args st.zwave.CommandClass.Association.SpecificGroupGetV2Args command-specific arguments
function SpecificGroupGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.ASSOCIATION, Association.SPECIFIC_GROUP_GET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3 ASSOCIATION_SPECIFIC_GROUP_GET arguments.
---
--- @return string serialized payload
function SpecificGroupGetV2:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3 ASSOCIATION_SPECIFIC_GROUP_GET payload.
---
--- @return st.zwave.CommandClass.Association.SpecificGroupGetV2Args deserialized arguments
function SpecificGroupGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Association.SpecificGroupGetV2
--- @return st.zwave.CommandClass.Association.SpecificGroupGetV2Args
function SpecificGroupGetV2._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Association.SpecificGroupGetV2
--- @return st.zwave.CommandClass.Association.SpecificGroupGetV2Args
function SpecificGroupGetV2._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Association.SpecificGroupGetV2
function SpecificGroupGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Association.SpecificGroupGetV2
function SpecificGroupGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Association.SpecificGroupReportV2Args
--- @alias SpecificGroupReportV2Args st.zwave.CommandClass.Association.SpecificGroupReportV2Args
--- @field public group integer [0,255]
local SpecificGroupReportV2Args = {}

--- @class st.zwave.CommandClass.Association.SpecificGroupReportV2:st.zwave.Command
--- @alias SpecificGroupReportV2 st.zwave.CommandClass.Association.SpecificGroupReportV2
---
--- v2 and forward-compatible v3 ASSOCIATION_SPECIFIC_GROUP_REPORT
---
--- @field public cmd_class number 0x85
--- @field public cmd_id number 0x0C
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Association.SpecificGroupReportV2Args command-specific arguments
local SpecificGroupReportV2 = {}
setmetatable(SpecificGroupReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3 ASSOCIATION_SPECIFIC_GROUP_REPORT object.
---
--- @param module st.zwave.CommandClass.Association command class module instance
--- @param args st.zwave.CommandClass.Association.SpecificGroupReportV2Args command-specific arguments
function SpecificGroupReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.ASSOCIATION, Association.SPECIFIC_GROUP_REPORT, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3 ASSOCIATION_SPECIFIC_GROUP_REPORT arguments.
---
--- @return string serialized payload
function SpecificGroupReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.group)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3 ASSOCIATION_SPECIFIC_GROUP_REPORT payload.
---
--- @return st.zwave.CommandClass.Association.SpecificGroupReportV2Args deserialized arguments
function SpecificGroupReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("group")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Association.SpecificGroupReportV2
--- @return st.zwave.CommandClass.Association.SpecificGroupReportV2Args
function SpecificGroupReportV2._defaults(self)
  local args = {}
  args.group = self.args.group or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Association.SpecificGroupReportV2
--- @return st.zwave.CommandClass.Association.SpecificGroupReportV2Args
function SpecificGroupReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Association.SpecificGroupReportV2
function SpecificGroupReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Association.SpecificGroupReportV2
function SpecificGroupReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Association.Set
--- @alias _Set st.zwave.CommandClass.Association.Set
---
--- Dynamically versioned ASSOCIATION_SET
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x85
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Association.SetV1Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ASSOCIATION_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Association command class module instance
--- @param args st.zwave.CommandClass.Association.SetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Association.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, Association.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Association.Get
--- @alias _Get st.zwave.CommandClass.Association.Get
---
--- Dynamically versioned ASSOCIATION_GET
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x85
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Association.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ASSOCIATION_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Association command class module instance
--- @param args st.zwave.CommandClass.Association.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Association.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, Association.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Association.Report
--- @alias _Report st.zwave.CommandClass.Association.Report
---
--- Dynamically versioned ASSOCIATION_REPORT
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x85
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Association.ReportV1Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ASSOCIATION_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Association command class module instance
--- @param args st.zwave.CommandClass.Association.ReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.Association.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, Association.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Association.Remove
--- @alias _Remove st.zwave.CommandClass.Association.Remove
---
--- Dynamically versioned ASSOCIATION_REMOVE
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x85
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Association.RemoveV1Args
local _Remove = {}
setmetatable(_Remove, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ASSOCIATION_REMOVE object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Association command class module instance
--- @param args st.zwave.CommandClass.Association.RemoveV1Args command-specific arguments
--- @return st.zwave.CommandClass.Association.Remove
function _Remove:construct(module, args, ...)
  return zw.Command._construct(module, Association.REMOVE, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Association.GroupingsGet
--- @alias _GroupingsGet st.zwave.CommandClass.Association.GroupingsGet
---
--- Dynamically versioned ASSOCIATION_GROUPINGS_GET
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x85
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Association.GroupingsGetV1Args
local _GroupingsGet = {}
setmetatable(_GroupingsGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ASSOCIATION_GROUPINGS_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Association command class module instance
--- @param args st.zwave.CommandClass.Association.GroupingsGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Association.GroupingsGet
function _GroupingsGet:construct(module, args, ...)
  return zw.Command._construct(module, Association.GROUPINGS_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Association.GroupingsReport
--- @alias _GroupingsReport st.zwave.CommandClass.Association.GroupingsReport
---
--- Dynamically versioned ASSOCIATION_GROUPINGS_REPORT
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x85
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Association.GroupingsReportV1Args
local _GroupingsReport = {}
setmetatable(_GroupingsReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ASSOCIATION_GROUPINGS_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Association command class module instance
--- @param args st.zwave.CommandClass.Association.GroupingsReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.Association.GroupingsReport
function _GroupingsReport:construct(module, args, ...)
  return zw.Command._construct(module, Association.GROUPINGS_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Association.SpecificGroupGet
--- @alias _SpecificGroupGet st.zwave.CommandClass.Association.SpecificGroupGet
---
--- Dynamically versioned ASSOCIATION_SPECIFIC_GROUP_GET
---
--- Supported versions: 2,3; unique base versions: 2
---
--- @field public cmd_class number 0x85
--- @field public cmd_id number 0x0B
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Association.SpecificGroupGetV2Args
local _SpecificGroupGet = {}
setmetatable(_SpecificGroupGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ASSOCIATION_SPECIFIC_GROUP_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Association command class module instance
--- @param args st.zwave.CommandClass.Association.SpecificGroupGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Association.SpecificGroupGet
function _SpecificGroupGet:construct(module, args, ...)
  return zw.Command._construct(module, Association.SPECIFIC_GROUP_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Association.SpecificGroupReport
--- @alias _SpecificGroupReport st.zwave.CommandClass.Association.SpecificGroupReport
---
--- Dynamically versioned ASSOCIATION_SPECIFIC_GROUP_REPORT
---
--- Supported versions: 2,3; unique base versions: 2
---
--- @field public cmd_class number 0x85
--- @field public cmd_id number 0x0C
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Association.SpecificGroupReportV2Args
local _SpecificGroupReport = {}
setmetatable(_SpecificGroupReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ASSOCIATION_SPECIFIC_GROUP_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Association command class module instance
--- @param args st.zwave.CommandClass.Association.SpecificGroupReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.Association.SpecificGroupReport
function _SpecificGroupReport:construct(module, args, ...)
  return zw.Command._construct(module, Association.SPECIFIC_GROUP_REPORT, module._serialization_version, args, ...)
end

Association.SetV1 = SetV1
Association.GetV1 = GetV1
Association.ReportV1 = ReportV1
Association.RemoveV1 = RemoveV1
Association.GroupingsGetV1 = GroupingsGetV1
Association.GroupingsReportV1 = GroupingsReportV1
Association.SpecificGroupGetV2 = SpecificGroupGetV2
Association.SpecificGroupReportV2 = SpecificGroupReportV2
Association.Set = _Set
Association.Get = _Get
Association.Report = _Report
Association.Remove = _Remove
Association.GroupingsGet = _GroupingsGet
Association.GroupingsReport = _GroupingsReport
Association.SpecificGroupGet = _SpecificGroupGet
Association.SpecificGroupReport = _SpecificGroupReport

Association._lut = {
  [0] = { -- dynamically versioned constructors
    [Association.SET] = Association.Set,
    [Association.GET] = Association.Get,
    [Association.REPORT] = Association.Report,
    [Association.REMOVE] = Association.Remove,
    [Association.GROUPINGS_GET] = Association.GroupingsGet,
    [Association.GROUPINGS_REPORT] = Association.GroupingsReport,
    [Association.SPECIFIC_GROUP_GET] = Association.SpecificGroupGet,
    [Association.SPECIFIC_GROUP_REPORT] = Association.SpecificGroupReport
  },
  [1] = { -- version 1
    [Association.SET] = Association.SetV1,
    [Association.GET] = Association.GetV1,
    [Association.REPORT] = Association.ReportV1,
    [Association.REMOVE] = Association.RemoveV1,
    [Association.GROUPINGS_GET] = Association.GroupingsGetV1,
    [Association.GROUPINGS_REPORT] = Association.GroupingsReportV1
  },
  [2] = { -- version 2
    [Association.SET] = Association.SetV1,
    [Association.GET] = Association.GetV1,
    [Association.REPORT] = Association.ReportV1,
    [Association.REMOVE] = Association.RemoveV1,
    [Association.GROUPINGS_GET] = Association.GroupingsGetV1,
    [Association.GROUPINGS_REPORT] = Association.GroupingsReportV1,
    [Association.SPECIFIC_GROUP_GET] = Association.SpecificGroupGetV2,
    [Association.SPECIFIC_GROUP_REPORT] = Association.SpecificGroupReportV2
  },
  [3] = { -- version 3
    [Association.SET] = Association.SetV1,
    [Association.GET] = Association.GetV1,
    [Association.REPORT] = Association.ReportV1,
    [Association.REMOVE] = Association.RemoveV1,
    [Association.GROUPINGS_GET] = Association.GroupingsGetV1,
    [Association.GROUPINGS_REPORT] = Association.GroupingsReportV1,
    [Association.SPECIFIC_GROUP_GET] = Association.SpecificGroupGetV2,
    [Association.SPECIFIC_GROUP_REPORT] = Association.SpecificGroupReportV2
  }
}

return Association
