-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.BarrierOperator
--- @alias BarrierOperator st.zwave.CommandClass.BarrierOperator
---
--- Supported versions: 1
---
--- @field public SET number 0x01 - BARRIER_OPERATOR_SET command id
--- @field public GET number 0x02 - BARRIER_OPERATOR_GET command id
--- @field public REPORT number 0x03 - BARRIER_OPERATOR_REPORT command id
--- @field public SIGNAL_SUPPORTED_GET number 0x04 - BARRIER_OPERATOR_SIGNAL_SUPPORTED_GET command id
--- @field public SIGNAL_SUPPORTED_REPORT number 0x05 - BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT command id
--- @field public SIGNAL_SET number 0x06 - BARRIER_OPERATOR_SIGNAL_SET command id
--- @field public SIGNAL_GET number 0x07 - BARRIER_OPERATOR_SIGNAL_GET command id
--- @field public SIGNAL_REPORT number 0x08 - BARRIER_OPERATOR_SIGNAL_REPORT command id
local BarrierOperator = {}
BarrierOperator.SET = 0x01
BarrierOperator.GET = 0x02
BarrierOperator.REPORT = 0x03
BarrierOperator.SIGNAL_SUPPORTED_GET = 0x04
BarrierOperator.SIGNAL_SUPPORTED_REPORT = 0x05
BarrierOperator.SIGNAL_SET = 0x06
BarrierOperator.SIGNAL_GET = 0x07
BarrierOperator.SIGNAL_REPORT = 0x08

BarrierOperator._commands = {
  [BarrierOperator.SET] = "SET",
  [BarrierOperator.GET] = "GET",
  [BarrierOperator.REPORT] = "REPORT",
  [BarrierOperator.SIGNAL_SUPPORTED_GET] = "SIGNAL_SUPPORTED_GET",
  [BarrierOperator.SIGNAL_SUPPORTED_REPORT] = "SIGNAL_SUPPORTED_REPORT",
  [BarrierOperator.SIGNAL_SET] = "SIGNAL_SET",
  [BarrierOperator.SIGNAL_GET] = "SIGNAL_GET",
  [BarrierOperator.SIGNAL_REPORT] = "SIGNAL_REPORT"
}

--- Instantiate a versioned instance of the BarrierOperator Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.BarrierOperator versioned command class instance
function BarrierOperator:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.BARRIER_OPERATOR][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(BarrierOperator, {
  __call = BarrierOperator.init
})

BarrierOperator._serialization_version = nil
BarrierOperator._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.BARRIER_OPERATOR] = {
  [1] = true
}

--- @class st.zwave.CommandClass.BarrierOperator.SetV1Args
--- @alias SetV1Args st.zwave.CommandClass.BarrierOperator.SetV1Args
--- @field public target_value integer see :lua:class:`BarrierOperator.target_value <st.zwave.CommandClass.BarrierOperator.target_value>`
local SetV1Args = {}

--- @class st.zwave.CommandClass.BarrierOperator.SetV1:st.zwave.Command
--- @alias SetV1 st.zwave.CommandClass.BarrierOperator.SetV1
---
--- v1 BARRIER_OPERATOR_SET
---
--- @field public cmd_class number 0x66
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BarrierOperator.SetV1Args command-specific arguments
local SetV1 = {}
setmetatable(SetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 BARRIER_OPERATOR_SET object.
---
--- @param module st.zwave.CommandClass.BarrierOperator command class module instance
--- @param args st.zwave.CommandClass.BarrierOperator.SetV1Args command-specific arguments
function SetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.BARRIER_OPERATOR, BarrierOperator.SET, 1, args, ...)
end

--- Serialize v1 BARRIER_OPERATOR_SET arguments.
---
--- @return string serialized payload
function SetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.target_value)
  return writer.buf
end

--- Deserialize a v1 BARRIER_OPERATOR_SET payload.
---
--- @return st.zwave.CommandClass.BarrierOperator.SetV1Args deserialized arguments
function SetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("target_value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SetV1
--- @return st.zwave.CommandClass.BarrierOperator.SetV1Args
function SetV1._defaults(self)
  local args = {}
  args.target_value = self.args.target_value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SetV1
--- @return st.zwave.CommandClass.BarrierOperator.SetV1Args
function SetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SetV1
function SetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SetV1
function SetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.target_value = function()
    return zw._reflect(
      BarrierOperator._reflect_target_value,
      args.target_value
    )
  end
end

--- @class st.zwave.CommandClass.BarrierOperator.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.BarrierOperator.GetV1Args
local GetV1Args = {}

--- @class st.zwave.CommandClass.BarrierOperator.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.BarrierOperator.GetV1
---
--- v1 BARRIER_OPERATOR_GET
---
--- @field public cmd_class number 0x66
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BarrierOperator.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 BARRIER_OPERATOR_GET object.
---
--- @param module st.zwave.CommandClass.BarrierOperator command class module instance
--- @param args st.zwave.CommandClass.BarrierOperator.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.BARRIER_OPERATOR, BarrierOperator.GET, 1, args, ...)
end

--- Serialize v1 BARRIER_OPERATOR_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 BARRIER_OPERATOR_GET payload.
---
--- @return st.zwave.CommandClass.BarrierOperator.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.BarrierOperator.GetV1
--- @return st.zwave.CommandClass.BarrierOperator.GetV1Args
function GetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.BarrierOperator.GetV1
--- @return st.zwave.CommandClass.BarrierOperator.GetV1Args
function GetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.BarrierOperator.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.BarrierOperator.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.BarrierOperator.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.BarrierOperator.ReportV1Args
--- @field public state integer see :lua:class:`BarrierOperator.state <st.zwave.CommandClass.BarrierOperator.state>`
local ReportV1Args = {}

--- @class st.zwave.CommandClass.BarrierOperator.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.BarrierOperator.ReportV1
---
--- v1 BARRIER_OPERATOR_REPORT
---
--- @field public cmd_class number 0x66
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BarrierOperator.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 BARRIER_OPERATOR_REPORT object.
---
--- @param module st.zwave.CommandClass.BarrierOperator command class module instance
--- @param args st.zwave.CommandClass.BarrierOperator.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.BARRIER_OPERATOR, BarrierOperator.REPORT, 1, args, ...)
end

--- Serialize v1 BARRIER_OPERATOR_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.state)
  return writer.buf
end

--- Deserialize a v1 BARRIER_OPERATOR_REPORT payload.
---
--- @return st.zwave.CommandClass.BarrierOperator.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("state")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.BarrierOperator.ReportV1
--- @return st.zwave.CommandClass.BarrierOperator.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.state = self.args.state or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.BarrierOperator.ReportV1
--- @return st.zwave.CommandClass.BarrierOperator.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.BarrierOperator.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.BarrierOperator.ReportV1
function ReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.state = function()
    return zw._reflect(
      BarrierOperator._reflect_state,
      args.state
    )
  end
end

--- @class st.zwave.CommandClass.BarrierOperator.SignalSupportedGetV1Args
--- @alias SignalSupportedGetV1Args st.zwave.CommandClass.BarrierOperator.SignalSupportedGetV1Args
local SignalSupportedGetV1Args = {}

--- @class st.zwave.CommandClass.BarrierOperator.SignalSupportedGetV1:st.zwave.Command
--- @alias SignalSupportedGetV1 st.zwave.CommandClass.BarrierOperator.SignalSupportedGetV1
---
--- v1 BARRIER_OPERATOR_SIGNAL_SUPPORTED_GET
---
--- @field public cmd_class number 0x66
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BarrierOperator.SignalSupportedGetV1Args command-specific arguments
local SignalSupportedGetV1 = {}
setmetatable(SignalSupportedGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 BARRIER_OPERATOR_SIGNAL_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.BarrierOperator command class module instance
--- @param args st.zwave.CommandClass.BarrierOperator.SignalSupportedGetV1Args command-specific arguments
function SignalSupportedGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.BARRIER_OPERATOR, BarrierOperator.SIGNAL_SUPPORTED_GET, 1, args, ...)
end

--- Serialize v1 BARRIER_OPERATOR_SIGNAL_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function SignalSupportedGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 BARRIER_OPERATOR_SIGNAL_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.BarrierOperator.SignalSupportedGetV1Args deserialized arguments
function SignalSupportedGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalSupportedGetV1
--- @return st.zwave.CommandClass.BarrierOperator.SignalSupportedGetV1Args
function SignalSupportedGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalSupportedGetV1
--- @return st.zwave.CommandClass.BarrierOperator.SignalSupportedGetV1Args
function SignalSupportedGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalSupportedGetV1
function SignalSupportedGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalSupportedGetV1
function SignalSupportedGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.BarrierOperator.SignalSupportedReportV1Args
--- @alias SignalSupportedReportV1Args st.zwave.CommandClass.BarrierOperator.SignalSupportedReportV1Args
--- @field public audible_notification boolean
--- @field public visual_notification boolean
local SignalSupportedReportV1Args = {}

--- @class st.zwave.CommandClass.BarrierOperator.SignalSupportedReportV1:st.zwave.Command
--- @alias SignalSupportedReportV1 st.zwave.CommandClass.BarrierOperator.SignalSupportedReportV1
---
--- v1 BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x66
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BarrierOperator.SignalSupportedReportV1Args command-specific arguments
local SignalSupportedReportV1 = {}
setmetatable(SignalSupportedReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.BarrierOperator command class module instance
--- @param args st.zwave.CommandClass.BarrierOperator.SignalSupportedReportV1Args command-specific arguments
function SignalSupportedReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.BARRIER_OPERATOR, BarrierOperator.SIGNAL_SUPPORTED_REPORT, 1, args, ...)
end

--- Serialize v1 BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SignalSupportedReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(1, 0) -- reserved
  writer:write_bool(args.audible_notification)
  writer:write_bool(args.visual_notification)
  return writer.buf
end

--- Deserialize a v1 BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.BarrierOperator.SignalSupportedReportV1Args deserialized arguments
function SignalSupportedReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:bit_seek(1) -- reserved
  reader:read_bool("audible_notification")
  reader:read_bool("visual_notification")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalSupportedReportV1
--- @return st.zwave.CommandClass.BarrierOperator.SignalSupportedReportV1Args
function SignalSupportedReportV1._defaults(self)
  local args = {}
  args.audible_notification = self.args.audible_notification or false
  args.visual_notification = self.args.visual_notification or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalSupportedReportV1
--- @return st.zwave.CommandClass.BarrierOperator.SignalSupportedReportV1Args
function SignalSupportedReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalSupportedReportV1
function SignalSupportedReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalSupportedReportV1
function SignalSupportedReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.BarrierOperator.SignalSetV1Args
--- @alias SignalSetV1Args st.zwave.CommandClass.BarrierOperator.SignalSetV1Args
--- @field public subsystem_type integer see :lua:class:`BarrierOperator.subsystem_type <st.zwave.CommandClass.BarrierOperator.subsystem_type>`
--- @field public subsystem_state integer see :lua:class:`BarrierOperator.subsystem_state <st.zwave.CommandClass.BarrierOperator.subsystem_state>`
local SignalSetV1Args = {}

--- @class st.zwave.CommandClass.BarrierOperator.SignalSetV1:st.zwave.Command
--- @alias SignalSetV1 st.zwave.CommandClass.BarrierOperator.SignalSetV1
---
--- v1 BARRIER_OPERATOR_SIGNAL_SET
---
--- @field public cmd_class number 0x66
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BarrierOperator.SignalSetV1Args command-specific arguments
local SignalSetV1 = {}
setmetatable(SignalSetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 BARRIER_OPERATOR_SIGNAL_SET object.
---
--- @param module st.zwave.CommandClass.BarrierOperator command class module instance
--- @param args st.zwave.CommandClass.BarrierOperator.SignalSetV1Args command-specific arguments
function SignalSetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.BARRIER_OPERATOR, BarrierOperator.SIGNAL_SET, 1, args, ...)
end

--- Serialize v1 BARRIER_OPERATOR_SIGNAL_SET arguments.
---
--- @return string serialized payload
function SignalSetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.subsystem_type)
  writer:write_u8(args.subsystem_state)
  return writer.buf
end

--- Deserialize a v1 BARRIER_OPERATOR_SIGNAL_SET payload.
---
--- @return st.zwave.CommandClass.BarrierOperator.SignalSetV1Args deserialized arguments
function SignalSetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("subsystem_type")
  reader:read_u8("subsystem_state")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalSetV1
--- @return st.zwave.CommandClass.BarrierOperator.SignalSetV1Args
function SignalSetV1._defaults(self)
  local args = {}
  args.subsystem_type = self.args.subsystem_type or 0
  args.subsystem_state = self.args.subsystem_state or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalSetV1
--- @return st.zwave.CommandClass.BarrierOperator.SignalSetV1Args
function SignalSetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalSetV1
function SignalSetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalSetV1
function SignalSetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.subsystem_type = function()
    return zw._reflect(
      BarrierOperator._reflect_subsystem_type,
      args.subsystem_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.subsystem_state = function()
    return zw._reflect(
      BarrierOperator._reflect_subsystem_state,
      args.subsystem_state
    )
  end
end

--- @class st.zwave.CommandClass.BarrierOperator.SignalGetV1Args
--- @alias SignalGetV1Args st.zwave.CommandClass.BarrierOperator.SignalGetV1Args
--- @field public subsystem_type integer see :lua:class:`BarrierOperator.subsystem_type <st.zwave.CommandClass.BarrierOperator.subsystem_type>`
local SignalGetV1Args = {}

--- @class st.zwave.CommandClass.BarrierOperator.SignalGetV1:st.zwave.Command
--- @alias SignalGetV1 st.zwave.CommandClass.BarrierOperator.SignalGetV1
---
--- v1 BARRIER_OPERATOR_SIGNAL_GET
---
--- @field public cmd_class number 0x66
--- @field public cmd_id number 0x07
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BarrierOperator.SignalGetV1Args command-specific arguments
local SignalGetV1 = {}
setmetatable(SignalGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 BARRIER_OPERATOR_SIGNAL_GET object.
---
--- @param module st.zwave.CommandClass.BarrierOperator command class module instance
--- @param args st.zwave.CommandClass.BarrierOperator.SignalGetV1Args command-specific arguments
function SignalGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.BARRIER_OPERATOR, BarrierOperator.SIGNAL_GET, 1, args, ...)
end

--- Serialize v1 BARRIER_OPERATOR_SIGNAL_GET arguments.
---
--- @return string serialized payload
function SignalGetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.subsystem_type)
  return writer.buf
end

--- Deserialize a v1 BARRIER_OPERATOR_SIGNAL_GET payload.
---
--- @return st.zwave.CommandClass.BarrierOperator.SignalGetV1Args deserialized arguments
function SignalGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("subsystem_type")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalGetV1
--- @return st.zwave.CommandClass.BarrierOperator.SignalGetV1Args
function SignalGetV1._defaults(self)
  local args = {}
  args.subsystem_type = self.args.subsystem_type or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalGetV1
--- @return st.zwave.CommandClass.BarrierOperator.SignalGetV1Args
function SignalGetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalGetV1
function SignalGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalGetV1
function SignalGetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.subsystem_type = function()
    return zw._reflect(
      BarrierOperator._reflect_subsystem_type,
      args.subsystem_type
    )
  end
end

--- @class st.zwave.CommandClass.BarrierOperator.SignalReportV1Args
--- @alias SignalReportV1Args st.zwave.CommandClass.BarrierOperator.SignalReportV1Args
--- @field public subsystem_type integer see :lua:class:`BarrierOperator.subsystem_type <st.zwave.CommandClass.BarrierOperator.subsystem_type>`
--- @field public subsystem_state integer see :lua:class:`BarrierOperator.subsystem_state <st.zwave.CommandClass.BarrierOperator.subsystem_state>`
local SignalReportV1Args = {}

--- @class st.zwave.CommandClass.BarrierOperator.SignalReportV1:st.zwave.Command
--- @alias SignalReportV1 st.zwave.CommandClass.BarrierOperator.SignalReportV1
---
--- v1 BARRIER_OPERATOR_SIGNAL_REPORT
---
--- @field public cmd_class number 0x66
--- @field public cmd_id number 0x08
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BarrierOperator.SignalReportV1Args command-specific arguments
local SignalReportV1 = {}
setmetatable(SignalReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 BARRIER_OPERATOR_SIGNAL_REPORT object.
---
--- @param module st.zwave.CommandClass.BarrierOperator command class module instance
--- @param args st.zwave.CommandClass.BarrierOperator.SignalReportV1Args command-specific arguments
function SignalReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.BARRIER_OPERATOR, BarrierOperator.SIGNAL_REPORT, 1, args, ...)
end

--- Serialize v1 BARRIER_OPERATOR_SIGNAL_REPORT arguments.
---
--- @return string serialized payload
function SignalReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.subsystem_type)
  writer:write_u8(args.subsystem_state)
  return writer.buf
end

--- Deserialize a v1 BARRIER_OPERATOR_SIGNAL_REPORT payload.
---
--- @return st.zwave.CommandClass.BarrierOperator.SignalReportV1Args deserialized arguments
function SignalReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("subsystem_type")
  reader:read_u8("subsystem_state")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalReportV1
--- @return st.zwave.CommandClass.BarrierOperator.SignalReportV1Args
function SignalReportV1._defaults(self)
  local args = {}
  args.subsystem_type = self.args.subsystem_type or 0
  args.subsystem_state = self.args.subsystem_state or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalReportV1
--- @return st.zwave.CommandClass.BarrierOperator.SignalReportV1Args
function SignalReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalReportV1
function SignalReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.BarrierOperator.SignalReportV1
function SignalReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.subsystem_type = function()
    return zw._reflect(
      BarrierOperator._reflect_subsystem_type,
      args.subsystem_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.subsystem_state = function()
    return zw._reflect(
      BarrierOperator._reflect_subsystem_state,
      args.subsystem_state
    )
  end
end

--- @class st.zwave.CommandClass.BarrierOperator.Set
--- @alias _Set st.zwave.CommandClass.BarrierOperator.Set
---
--- Dynamically versioned BARRIER_OPERATOR_SET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x66
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BarrierOperator.SetV1Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a BARRIER_OPERATOR_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.BarrierOperator command class module instance
--- @param args st.zwave.CommandClass.BarrierOperator.SetV1Args command-specific arguments
--- @return st.zwave.CommandClass.BarrierOperator.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, BarrierOperator.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.BarrierOperator.Get
--- @alias _Get st.zwave.CommandClass.BarrierOperator.Get
---
--- Dynamically versioned BARRIER_OPERATOR_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x66
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BarrierOperator.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a BARRIER_OPERATOR_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.BarrierOperator command class module instance
--- @param args st.zwave.CommandClass.BarrierOperator.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.BarrierOperator.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, BarrierOperator.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.BarrierOperator.Report
--- @alias _Report st.zwave.CommandClass.BarrierOperator.Report
---
--- Dynamically versioned BARRIER_OPERATOR_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x66
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BarrierOperator.ReportV1Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a BARRIER_OPERATOR_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.BarrierOperator command class module instance
--- @param args st.zwave.CommandClass.BarrierOperator.ReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.BarrierOperator.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, BarrierOperator.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.BarrierOperator.SignalSupportedGet
--- @alias _SignalSupportedGet st.zwave.CommandClass.BarrierOperator.SignalSupportedGet
---
--- Dynamically versioned BARRIER_OPERATOR_SIGNAL_SUPPORTED_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x66
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BarrierOperator.SignalSupportedGetV1Args
local _SignalSupportedGet = {}
setmetatable(_SignalSupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a BARRIER_OPERATOR_SIGNAL_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.BarrierOperator command class module instance
--- @param args st.zwave.CommandClass.BarrierOperator.SignalSupportedGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.BarrierOperator.SignalSupportedGet
function _SignalSupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, BarrierOperator.SIGNAL_SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.BarrierOperator.SignalSupportedReport
--- @alias _SignalSupportedReport st.zwave.CommandClass.BarrierOperator.SignalSupportedReport
---
--- Dynamically versioned BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x66
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BarrierOperator.SignalSupportedReportV1Args
local _SignalSupportedReport = {}
setmetatable(_SignalSupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a BARRIER_OPERATOR_SIGNAL_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.BarrierOperator command class module instance
--- @param args st.zwave.CommandClass.BarrierOperator.SignalSupportedReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.BarrierOperator.SignalSupportedReport
function _SignalSupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, BarrierOperator.SIGNAL_SUPPORTED_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.BarrierOperator.SignalSet
--- @alias _SignalSet st.zwave.CommandClass.BarrierOperator.SignalSet
---
--- Dynamically versioned BARRIER_OPERATOR_SIGNAL_SET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x66
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BarrierOperator.SignalSetV1Args
local _SignalSet = {}
setmetatable(_SignalSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a BARRIER_OPERATOR_SIGNAL_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.BarrierOperator command class module instance
--- @param args st.zwave.CommandClass.BarrierOperator.SignalSetV1Args command-specific arguments
--- @return st.zwave.CommandClass.BarrierOperator.SignalSet
function _SignalSet:construct(module, args, ...)
  return zw.Command._construct(module, BarrierOperator.SIGNAL_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.BarrierOperator.SignalGet
--- @alias _SignalGet st.zwave.CommandClass.BarrierOperator.SignalGet
---
--- Dynamically versioned BARRIER_OPERATOR_SIGNAL_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x66
--- @field public cmd_id number 0x07
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BarrierOperator.SignalGetV1Args
local _SignalGet = {}
setmetatable(_SignalGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a BARRIER_OPERATOR_SIGNAL_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.BarrierOperator command class module instance
--- @param args st.zwave.CommandClass.BarrierOperator.SignalGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.BarrierOperator.SignalGet
function _SignalGet:construct(module, args, ...)
  return zw.Command._construct(module, BarrierOperator.SIGNAL_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.BarrierOperator.SignalReport
--- @alias _SignalReport st.zwave.CommandClass.BarrierOperator.SignalReport
---
--- Dynamically versioned BARRIER_OPERATOR_SIGNAL_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x66
--- @field public cmd_id number 0x08
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BarrierOperator.SignalReportV1Args
local _SignalReport = {}
setmetatable(_SignalReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a BARRIER_OPERATOR_SIGNAL_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.BarrierOperator command class module instance
--- @param args st.zwave.CommandClass.BarrierOperator.SignalReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.BarrierOperator.SignalReport
function _SignalReport:construct(module, args, ...)
  return zw.Command._construct(module, BarrierOperator.SIGNAL_REPORT, module._serialization_version, args, ...)
end

BarrierOperator.SetV1 = SetV1
BarrierOperator.GetV1 = GetV1
BarrierOperator.ReportV1 = ReportV1
BarrierOperator.SignalSupportedGetV1 = SignalSupportedGetV1
BarrierOperator.SignalSupportedReportV1 = SignalSupportedReportV1
BarrierOperator.SignalSetV1 = SignalSetV1
BarrierOperator.SignalGetV1 = SignalGetV1
BarrierOperator.SignalReportV1 = SignalReportV1
BarrierOperator.Set = _Set
BarrierOperator.Get = _Get
BarrierOperator.Report = _Report
BarrierOperator.SignalSupportedGet = _SignalSupportedGet
BarrierOperator.SignalSupportedReport = _SignalSupportedReport
BarrierOperator.SignalSet = _SignalSet
BarrierOperator.SignalGet = _SignalGet
BarrierOperator.SignalReport = _SignalReport

BarrierOperator._lut = {
  [0] = { -- dynamically versioned constructors
    [BarrierOperator.SET] = BarrierOperator.Set,
    [BarrierOperator.GET] = BarrierOperator.Get,
    [BarrierOperator.REPORT] = BarrierOperator.Report,
    [BarrierOperator.SIGNAL_SUPPORTED_GET] = BarrierOperator.SignalSupportedGet,
    [BarrierOperator.SIGNAL_SUPPORTED_REPORT] = BarrierOperator.SignalSupportedReport,
    [BarrierOperator.SIGNAL_SET] = BarrierOperator.SignalSet,
    [BarrierOperator.SIGNAL_GET] = BarrierOperator.SignalGet,
    [BarrierOperator.SIGNAL_REPORT] = BarrierOperator.SignalReport
  },
  [1] = { -- version 1
    [BarrierOperator.SET] = BarrierOperator.SetV1,
    [BarrierOperator.GET] = BarrierOperator.GetV1,
    [BarrierOperator.REPORT] = BarrierOperator.ReportV1,
    [BarrierOperator.SIGNAL_SUPPORTED_GET] = BarrierOperator.SignalSupportedGetV1,
    [BarrierOperator.SIGNAL_SUPPORTED_REPORT] = BarrierOperator.SignalSupportedReportV1,
    [BarrierOperator.SIGNAL_SET] = BarrierOperator.SignalSetV1,
    [BarrierOperator.SIGNAL_GET] = BarrierOperator.SignalGetV1,
    [BarrierOperator.SIGNAL_REPORT] = BarrierOperator.SignalReportV1
  }
}
--- @class st.zwave.CommandClass.BarrierOperator.state
--- @alias state st.zwave.CommandClass.BarrierOperator.state
--- @field public CLOSED number 0x00
--- @field public CLOSING number 0xFC
--- @field public STOPPED number 0xFD
--- @field public OPENING number 0xFE
--- @field public OPEN number 0xFF
local state = {
  CLOSED = 0x00,
  CLOSING = 0xFC,
  STOPPED = 0xFD,
  OPENING = 0xFE,
  OPEN = 0xFF
}
BarrierOperator.state = state
BarrierOperator._reflect_state = zw._reflection_builder(BarrierOperator.state)

--- @class st.zwave.CommandClass.BarrierOperator.subsystem_state
--- @alias subsystem_state st.zwave.CommandClass.BarrierOperator.subsystem_state
--- @field public OFF number 0x00
--- @field public ON number 0xFF
local subsystem_state = {
  OFF = 0x00,
  ON = 0xFF
}
BarrierOperator.subsystem_state = subsystem_state
BarrierOperator._reflect_subsystem_state = zw._reflection_builder(BarrierOperator.subsystem_state)

--- @class st.zwave.CommandClass.BarrierOperator.subsystem_type
--- @alias subsystem_type st.zwave.CommandClass.BarrierOperator.subsystem_type
--- @field public AUDIBLE_NOTIFICATION number 0x01
--- @field public VISUAL_NOTIFICATION number 0x02
local subsystem_type = {
  AUDIBLE_NOTIFICATION = 0x01,
  VISUAL_NOTIFICATION = 0x02
}
BarrierOperator.subsystem_type = subsystem_type
BarrierOperator._reflect_subsystem_type = zw._reflection_builder(BarrierOperator.subsystem_type)

--- @class st.zwave.CommandClass.BarrierOperator.target_value
--- @alias target_value st.zwave.CommandClass.BarrierOperator.target_value
--- @field public CLOSE number 0x00
--- @field public OPEN number 0xFF
local target_value = {
  CLOSE = 0x00,
  OPEN = 0xFF
}
BarrierOperator.target_value = target_value
BarrierOperator._reflect_target_value = zw._reflection_builder(BarrierOperator.target_value)


return BarrierOperator
