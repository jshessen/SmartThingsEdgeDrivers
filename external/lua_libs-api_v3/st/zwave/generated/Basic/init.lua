-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.Basic
--- @alias Basic st.zwave.CommandClass.Basic
---
--- Supported versions: 1,2
---
--- @field public SET number 0x01 - BASIC_SET command id
--- @field public GET number 0x02 - BASIC_GET command id
--- @field public REPORT number 0x03 - BASIC_REPORT command id
local Basic = {}
Basic.SET = 0x01
Basic.GET = 0x02
Basic.REPORT = 0x03

Basic._commands = {
  [Basic.SET] = "SET",
  [Basic.GET] = "GET",
  [Basic.REPORT] = "REPORT"
}

--- Instantiate a versioned instance of the Basic Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.Basic versioned command class instance
function Basic:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.BASIC][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(Basic, {
  __call = Basic.init
})

Basic._serialization_version = nil
Basic._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.BASIC] = {
  [1] = true,
  [2] = true
}

--- @class st.zwave.CommandClass.Basic.SetV1Args
--- @alias SetV1Args st.zwave.CommandClass.Basic.SetV1Args
--- @field public value integer [0,255]
local SetV1Args = {}

--- @class st.zwave.CommandClass.Basic.SetV1:st.zwave.Command
--- @alias SetV1 st.zwave.CommandClass.Basic.SetV1
---
--- v1 and forward-compatible v2 BASIC_SET
---
--- @field public cmd_class number 0x20
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Basic.SetV1Args command-specific arguments
local SetV1 = {}
setmetatable(SetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 BASIC_SET object.
---
--- @param module st.zwave.CommandClass.Basic command class module instance
--- @param args st.zwave.CommandClass.Basic.SetV1Args command-specific arguments
function SetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.BASIC, Basic.SET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 BASIC_SET arguments.
---
--- @return string serialized payload
function SetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.value)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 BASIC_SET payload.
---
--- @return st.zwave.CommandClass.Basic.SetV1Args deserialized arguments
function SetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Basic.SetV1
--- @return st.zwave.CommandClass.Basic.SetV1Args
function SetV1._defaults(self)
  local args = {}
  args.value = self.args.value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Basic.SetV1
--- @return st.zwave.CommandClass.Basic.SetV1Args
function SetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Basic.SetV1
function SetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Basic.SetV1
function SetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Basic.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.Basic.GetV1Args
local GetV1Args = {}

--- @class st.zwave.CommandClass.Basic.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.Basic.GetV1
---
--- v1 and forward-compatible v2 BASIC_GET
---
--- @field public cmd_class number 0x20
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Basic.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 BASIC_GET object.
---
--- @param module st.zwave.CommandClass.Basic command class module instance
--- @param args st.zwave.CommandClass.Basic.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.BASIC, Basic.GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 BASIC_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 BASIC_GET payload.
---
--- @return st.zwave.CommandClass.Basic.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Basic.GetV1
--- @return st.zwave.CommandClass.Basic.GetV1Args
function GetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Basic.GetV1
--- @return st.zwave.CommandClass.Basic.GetV1Args
function GetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Basic.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Basic.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Basic.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.Basic.ReportV1Args
--- @field public value integer [0,255]
local ReportV1Args = {}

--- @class st.zwave.CommandClass.Basic.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.Basic.ReportV1
---
--- v1 BASIC_REPORT
---
--- @field public cmd_class number 0x20
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Basic.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 BASIC_REPORT object.
---
--- @param module st.zwave.CommandClass.Basic command class module instance
--- @param args st.zwave.CommandClass.Basic.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.BASIC, Basic.REPORT, 1, args, ...)
end

--- Serialize v1 BASIC_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.value)
  return writer.buf
end

--- Deserialize a v1 BASIC_REPORT payload.
---
--- @return st.zwave.CommandClass.Basic.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Basic.ReportV1
--- @return st.zwave.CommandClass.Basic.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.value = self.args.value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Basic.ReportV1
--- @return st.zwave.CommandClass.Basic.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Basic.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Basic.ReportV1
function ReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Basic.ReportV2Args
--- @alias ReportV2Args st.zwave.CommandClass.Basic.ReportV2Args
--- @field public current_value integer [0,255]
--- @field public target_value integer [0,255]
--- @field public duration number|string [0,7560] or "unknown" or "reserved"
local ReportV2Args = {}

--- @class st.zwave.CommandClass.Basic.ReportV2:st.zwave.Command
--- @alias ReportV2 st.zwave.CommandClass.Basic.ReportV2
---
--- v2 BASIC_REPORT
---
--- @field public cmd_class number 0x20
--- @field public cmd_id number 0x03
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Basic.ReportV2Args command-specific arguments
local ReportV2 = {}
setmetatable(ReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 BASIC_REPORT object.
---
--- @param module st.zwave.CommandClass.Basic command class module instance
--- @param args st.zwave.CommandClass.Basic.ReportV2Args command-specific arguments
function ReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.BASIC, Basic.REPORT, 2, args, ...)
end

--- Serialize v2 BASIC_REPORT arguments.
---
--- @return string serialized payload
function ReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.current_value)
  writer:write_u8(args.target_value)
  writer:write_actuator_duration_report(args.duration)
  return writer.buf
end

--- Deserialize a v2 BASIC_REPORT payload.
---
--- @return st.zwave.CommandClass.Basic.ReportV2Args deserialized arguments
function ReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("current_value")
  reader:read_u8("target_value")
  reader:read_actuator_duration_report("duration")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Basic.ReportV2
--- @return st.zwave.CommandClass.Basic.ReportV2Args
function ReportV2._defaults(self)
  local args = {}
  args.current_value = self.args.current_value or 0
  args.target_value = self.args.target_value or 0
  args.duration = self.args.duration or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Basic.ReportV2
--- @return st.zwave.CommandClass.Basic.ReportV2Args
function ReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Basic.ReportV2
function ReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Basic.ReportV2
function ReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Basic.Set
--- @alias _Set st.zwave.CommandClass.Basic.Set
---
--- Dynamically versioned BASIC_SET
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x20
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Basic.SetV1Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a BASIC_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Basic command class module instance
--- @param args st.zwave.CommandClass.Basic.SetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Basic.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, Basic.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Basic.Get
--- @alias _Get st.zwave.CommandClass.Basic.Get
---
--- Dynamically versioned BASIC_GET
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x20
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Basic.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a BASIC_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Basic command class module instance
--- @param args st.zwave.CommandClass.Basic.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Basic.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, Basic.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Basic.Report
--- @alias _Report st.zwave.CommandClass.Basic.Report
---
--- Dynamically versioned BASIC_REPORT
---
--- Supported versions: 1,2; unique base versions: 1,2
---
--- @field public cmd_class number 0x20
--- @field public cmd_id number 0x03
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.Basic.ReportV1Args|st.zwave.CommandClass.Basic.ReportV2Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a BASIC_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Basic command class module instance
--- @param args st.zwave.CommandClass.Basic.ReportV1Args|st.zwave.CommandClass.Basic.ReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.Basic.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, Basic.REPORT, module._serialization_version, args, ...)
end

Basic.SetV1 = SetV1
Basic.GetV1 = GetV1
Basic.ReportV1 = ReportV1
Basic.ReportV2 = ReportV2
Basic.Set = _Set
Basic.Get = _Get
Basic.Report = _Report

Basic._lut = {
  [0] = { -- dynamically versioned constructors
    [Basic.SET] = Basic.Set,
    [Basic.GET] = Basic.Get,
    [Basic.REPORT] = Basic.Report
  },
  [1] = { -- version 1
    [Basic.SET] = Basic.SetV1,
    [Basic.GET] = Basic.GetV1,
    [Basic.REPORT] = Basic.ReportV1
  },
  [2] = { -- version 2
    [Basic.SET] = Basic.SetV1,
    [Basic.GET] = Basic.GetV1,
    [Basic.REPORT] = Basic.ReportV2
  }
}

return Basic
