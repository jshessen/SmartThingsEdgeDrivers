-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.BasicWindowCovering
--- @alias BasicWindowCovering st.zwave.CommandClass.BasicWindowCovering
---
--- Supported versions: 1
---
--- @field public START_LEVEL_CHANGE number 0x01 - BASIC_WINDOW_COVERING_START_LEVEL_CHANGE command id
--- @field public STOP_LEVEL_CHANGE number 0x02 - BASIC_WINDOW_COVERING_STOP_LEVEL_CHANGE command id
local BasicWindowCovering = {}
BasicWindowCovering.START_LEVEL_CHANGE = 0x01
BasicWindowCovering.STOP_LEVEL_CHANGE = 0x02

BasicWindowCovering._commands = {
  [BasicWindowCovering.START_LEVEL_CHANGE] = "START_LEVEL_CHANGE",
  [BasicWindowCovering.STOP_LEVEL_CHANGE] = "STOP_LEVEL_CHANGE"
}

--- Instantiate a versioned instance of the BasicWindowCovering Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.BasicWindowCovering versioned command class instance
function BasicWindowCovering:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.BASIC_WINDOW_COVERING][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(BasicWindowCovering, {
  __call = BasicWindowCovering.init
})

BasicWindowCovering._serialization_version = nil
BasicWindowCovering._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.BASIC_WINDOW_COVERING] = {
  [1] = true
}

--- @class st.zwave.CommandClass.BasicWindowCovering.StartLevelChangeV1Args
--- @alias StartLevelChangeV1Args st.zwave.CommandClass.BasicWindowCovering.StartLevelChangeV1Args
--- @field public open_close boolean
local StartLevelChangeV1Args = {}

--- @class st.zwave.CommandClass.BasicWindowCovering.StartLevelChangeV1:st.zwave.Command
--- @alias StartLevelChangeV1 st.zwave.CommandClass.BasicWindowCovering.StartLevelChangeV1
---
--- v1 BASIC_WINDOW_COVERING_START_LEVEL_CHANGE
---
--- @field public cmd_class number 0x50
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BasicWindowCovering.StartLevelChangeV1Args command-specific arguments
local StartLevelChangeV1 = {}
setmetatable(StartLevelChangeV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 BASIC_WINDOW_COVERING_START_LEVEL_CHANGE object.
---
--- @param module st.zwave.CommandClass.BasicWindowCovering command class module instance
--- @param args st.zwave.CommandClass.BasicWindowCovering.StartLevelChangeV1Args command-specific arguments
function StartLevelChangeV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.BASIC_WINDOW_COVERING, BasicWindowCovering.START_LEVEL_CHANGE, 1, args, ...)
end

--- Serialize v1 BASIC_WINDOW_COVERING_START_LEVEL_CHANGE arguments.
---
--- @return string serialized payload
function StartLevelChangeV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(6, 0) -- reserved1
  writer:write_bool(args.open_close)
  writer:write_bool(false) -- reserved2
  return writer.buf
end

--- Deserialize a v1 BASIC_WINDOW_COVERING_START_LEVEL_CHANGE payload.
---
--- @return st.zwave.CommandClass.BasicWindowCovering.StartLevelChangeV1Args deserialized arguments
function StartLevelChangeV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(6) -- reserved1
  reader:read_bool("open_close")
  reader:read_bool() -- reserved2
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.BasicWindowCovering.StartLevelChangeV1
--- @return st.zwave.CommandClass.BasicWindowCovering.StartLevelChangeV1Args
function StartLevelChangeV1._defaults(self)
  local args = {}
  args.open_close = self.args.open_close or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.BasicWindowCovering.StartLevelChangeV1
--- @return st.zwave.CommandClass.BasicWindowCovering.StartLevelChangeV1Args
function StartLevelChangeV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.BasicWindowCovering.StartLevelChangeV1
function StartLevelChangeV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.BasicWindowCovering.StartLevelChangeV1
function StartLevelChangeV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.BasicWindowCovering.StopLevelChangeV1Args
--- @alias StopLevelChangeV1Args st.zwave.CommandClass.BasicWindowCovering.StopLevelChangeV1Args
local StopLevelChangeV1Args = {}

--- @class st.zwave.CommandClass.BasicWindowCovering.StopLevelChangeV1:st.zwave.Command
--- @alias StopLevelChangeV1 st.zwave.CommandClass.BasicWindowCovering.StopLevelChangeV1
---
--- v1 BASIC_WINDOW_COVERING_STOP_LEVEL_CHANGE
---
--- @field public cmd_class number 0x50
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BasicWindowCovering.StopLevelChangeV1Args command-specific arguments
local StopLevelChangeV1 = {}
setmetatable(StopLevelChangeV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 BASIC_WINDOW_COVERING_STOP_LEVEL_CHANGE object.
---
--- @param module st.zwave.CommandClass.BasicWindowCovering command class module instance
--- @param args st.zwave.CommandClass.BasicWindowCovering.StopLevelChangeV1Args command-specific arguments
function StopLevelChangeV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.BASIC_WINDOW_COVERING, BasicWindowCovering.STOP_LEVEL_CHANGE, 1, args, ...)
end

--- Serialize v1 BASIC_WINDOW_COVERING_STOP_LEVEL_CHANGE arguments.
---
--- @return string serialized payload
function StopLevelChangeV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 BASIC_WINDOW_COVERING_STOP_LEVEL_CHANGE payload.
---
--- @return st.zwave.CommandClass.BasicWindowCovering.StopLevelChangeV1Args deserialized arguments
function StopLevelChangeV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.BasicWindowCovering.StopLevelChangeV1
--- @return st.zwave.CommandClass.BasicWindowCovering.StopLevelChangeV1Args
function StopLevelChangeV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.BasicWindowCovering.StopLevelChangeV1
--- @return st.zwave.CommandClass.BasicWindowCovering.StopLevelChangeV1Args
function StopLevelChangeV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.BasicWindowCovering.StopLevelChangeV1
function StopLevelChangeV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.BasicWindowCovering.StopLevelChangeV1
function StopLevelChangeV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.BasicWindowCovering.StartLevelChange
--- @alias _StartLevelChange st.zwave.CommandClass.BasicWindowCovering.StartLevelChange
---
--- Dynamically versioned BASIC_WINDOW_COVERING_START_LEVEL_CHANGE
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x50
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BasicWindowCovering.StartLevelChangeV1Args
local _StartLevelChange = {}
setmetatable(_StartLevelChange, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a BASIC_WINDOW_COVERING_START_LEVEL_CHANGE object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.BasicWindowCovering command class module instance
--- @param args st.zwave.CommandClass.BasicWindowCovering.StartLevelChangeV1Args command-specific arguments
--- @return st.zwave.CommandClass.BasicWindowCovering.StartLevelChange
function _StartLevelChange:construct(module, args, ...)
  return zw.Command._construct(module, BasicWindowCovering.START_LEVEL_CHANGE, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.BasicWindowCovering.StopLevelChange
--- @alias _StopLevelChange st.zwave.CommandClass.BasicWindowCovering.StopLevelChange
---
--- Dynamically versioned BASIC_WINDOW_COVERING_STOP_LEVEL_CHANGE
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x50
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.BasicWindowCovering.StopLevelChangeV1Args
local _StopLevelChange = {}
setmetatable(_StopLevelChange, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a BASIC_WINDOW_COVERING_STOP_LEVEL_CHANGE object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.BasicWindowCovering command class module instance
--- @param args st.zwave.CommandClass.BasicWindowCovering.StopLevelChangeV1Args command-specific arguments
--- @return st.zwave.CommandClass.BasicWindowCovering.StopLevelChange
function _StopLevelChange:construct(module, args, ...)
  return zw.Command._construct(module, BasicWindowCovering.STOP_LEVEL_CHANGE, module._serialization_version, args, ...)
end

BasicWindowCovering.StartLevelChangeV1 = StartLevelChangeV1
BasicWindowCovering.StopLevelChangeV1 = StopLevelChangeV1
BasicWindowCovering.StartLevelChange = _StartLevelChange
BasicWindowCovering.StopLevelChange = _StopLevelChange

BasicWindowCovering._lut = {
  [0] = { -- dynamically versioned constructors
    [BasicWindowCovering.START_LEVEL_CHANGE] = BasicWindowCovering.StartLevelChange,
    [BasicWindowCovering.STOP_LEVEL_CHANGE] = BasicWindowCovering.StopLevelChange
  },
  [1] = { -- version 1
    [BasicWindowCovering.START_LEVEL_CHANGE] = BasicWindowCovering.StartLevelChangeV1,
    [BasicWindowCovering.STOP_LEVEL_CHANGE] = BasicWindowCovering.StopLevelChangeV1
  }
}

return BasicWindowCovering
