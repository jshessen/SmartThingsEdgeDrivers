-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.CentralScene
--- @alias CentralScene st.zwave.CommandClass.CentralScene
---
--- Supported versions: 1,2,3
---
--- @field public SUPPORTED_GET number 0x01 - CENTRAL_SCENE_SUPPORTED_GET command id
--- @field public SUPPORTED_REPORT number 0x02 - CENTRAL_SCENE_SUPPORTED_REPORT command id
--- @field public NOTIFICATION number 0x03 - CENTRAL_SCENE_NOTIFICATION command id
--- @field public CONFIGURATION_SET number 0x04 - CENTRAL_SCENE_CONFIGURATION_SET command id
--- @field public CONFIGURATION_GET number 0x05 - CENTRAL_SCENE_CONFIGURATION_GET command id
--- @field public CONFIGURATION_REPORT number 0x06 - CENTRAL_SCENE_CONFIGURATION_REPORT command id
local CentralScene = {}
CentralScene.SUPPORTED_GET = 0x01
CentralScene.SUPPORTED_REPORT = 0x02
CentralScene.NOTIFICATION = 0x03
CentralScene.CONFIGURATION_SET = 0x04
CentralScene.CONFIGURATION_GET = 0x05
CentralScene.CONFIGURATION_REPORT = 0x06

CentralScene._commands = {
  [CentralScene.SUPPORTED_GET] = "SUPPORTED_GET",
  [CentralScene.SUPPORTED_REPORT] = "SUPPORTED_REPORT",
  [CentralScene.NOTIFICATION] = "NOTIFICATION",
  [CentralScene.CONFIGURATION_SET] = "CONFIGURATION_SET",
  [CentralScene.CONFIGURATION_GET] = "CONFIGURATION_GET",
  [CentralScene.CONFIGURATION_REPORT] = "CONFIGURATION_REPORT"
}

--- Instantiate a versioned instance of the CentralScene Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.CentralScene versioned command class instance
function CentralScene:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.CENTRAL_SCENE][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(CentralScene, {
  __call = CentralScene.init
})

CentralScene._serialization_version = nil
CentralScene._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.CENTRAL_SCENE] = {
  [1] = true,
  [2] = true,
  [3] = true
}

--- @class st.zwave.CommandClass.CentralScene.SupportedGetV1Args
--- @alias SupportedGetV1Args st.zwave.CommandClass.CentralScene.SupportedGetV1Args
local SupportedGetV1Args = {}

--- @class st.zwave.CommandClass.CentralScene.SupportedGetV1:st.zwave.Command
--- @alias SupportedGetV1 st.zwave.CommandClass.CentralScene.SupportedGetV1
---
--- v1 and forward-compatible v2,v3 CENTRAL_SCENE_SUPPORTED_GET
---
--- @field public cmd_class number 0x5B
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.CentralScene.SupportedGetV1Args command-specific arguments
local SupportedGetV1 = {}
setmetatable(SupportedGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 CENTRAL_SCENE_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.CentralScene command class module instance
--- @param args st.zwave.CommandClass.CentralScene.SupportedGetV1Args command-specific arguments
function SupportedGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.CENTRAL_SCENE, CentralScene.SUPPORTED_GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 CENTRAL_SCENE_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function SupportedGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 CENTRAL_SCENE_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.CentralScene.SupportedGetV1Args deserialized arguments
function SupportedGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.SupportedGetV1
--- @return st.zwave.CommandClass.CentralScene.SupportedGetV1Args
function SupportedGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.SupportedGetV1
--- @return st.zwave.CommandClass.CentralScene.SupportedGetV1Args
function SupportedGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.CentralScene.SupportedGetV1
function SupportedGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.CentralScene.SupportedGetV1
function SupportedGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.CentralScene.SupportedReportV1Args
--- @alias SupportedReportV1Args st.zwave.CommandClass.CentralScene.SupportedReportV1Args
--- @field public supported_scenes integer [0,255]
local SupportedReportV1Args = {}

--- @class st.zwave.CommandClass.CentralScene.SupportedReportV1:st.zwave.Command
--- @alias SupportedReportV1 st.zwave.CommandClass.CentralScene.SupportedReportV1
---
--- v1 CENTRAL_SCENE_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x5B
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.CentralScene.SupportedReportV1Args command-specific arguments
local SupportedReportV1 = {}
setmetatable(SupportedReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 CENTRAL_SCENE_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.CentralScene command class module instance
--- @param args st.zwave.CommandClass.CentralScene.SupportedReportV1Args command-specific arguments
function SupportedReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.CENTRAL_SCENE, CentralScene.SUPPORTED_REPORT, 1, args, ...)
end

--- Serialize v1 CENTRAL_SCENE_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.supported_scenes)
  return writer.buf
end

--- Deserialize a v1 CENTRAL_SCENE_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.CentralScene.SupportedReportV1Args deserialized arguments
function SupportedReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("supported_scenes")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.SupportedReportV1
--- @return st.zwave.CommandClass.CentralScene.SupportedReportV1Args
function SupportedReportV1._defaults(self)
  local args = {}
  args.supported_scenes = self.args.supported_scenes or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.SupportedReportV1
--- @return st.zwave.CommandClass.CentralScene.SupportedReportV1Args
function SupportedReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.CentralScene.SupportedReportV1
function SupportedReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.CentralScene.SupportedReportV1
function SupportedReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.CentralScene.NotificationV1Args
--- @alias NotificationV1Args st.zwave.CommandClass.CentralScene.NotificationV1Args
--- @field public sequence_number integer [0,255]
--- @field public key_attributes integer see :lua:class:`CentralScene.key_attributes <st.zwave.CommandClass.CentralScene.key_attributes>`
--- @field public scene_number integer [0,255]
local NotificationV1Args = {}

--- @class st.zwave.CommandClass.CentralScene.NotificationV1:st.zwave.Command
--- @alias NotificationV1 st.zwave.CommandClass.CentralScene.NotificationV1
---
--- v1 CENTRAL_SCENE_NOTIFICATION
---
--- @field public cmd_class number 0x5B
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.CentralScene.NotificationV1Args command-specific arguments
local NotificationV1 = {}
setmetatable(NotificationV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 CENTRAL_SCENE_NOTIFICATION object.
---
--- @param module st.zwave.CommandClass.CentralScene command class module instance
--- @param args st.zwave.CommandClass.CentralScene.NotificationV1Args command-specific arguments
function NotificationV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.CENTRAL_SCENE, CentralScene.NOTIFICATION, 1, args, ...)
end

--- Serialize v1 CENTRAL_SCENE_NOTIFICATION arguments.
---
--- @return string serialized payload
function NotificationV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.sequence_number)
  writer:write_bits(3, args.key_attributes)
  writer:write_bits(5, 0) -- reserved
  writer:write_u8(args.scene_number)
  return writer.buf
end

--- Deserialize a v1 CENTRAL_SCENE_NOTIFICATION payload.
---
--- @return st.zwave.CommandClass.CentralScene.NotificationV1Args deserialized arguments
function NotificationV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("sequence_number")
  reader:read_bits(3, "key_attributes")
  reader:read_bits(5) -- reserved
  reader:read_u8("scene_number")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.NotificationV1
--- @return st.zwave.CommandClass.CentralScene.NotificationV1Args
function NotificationV1._defaults(self)
  local args = {}
  args.sequence_number = self.args.sequence_number or 0
  args.key_attributes = self.args.key_attributes or 0
  args.scene_number = self.args.scene_number or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.NotificationV1
--- @return st.zwave.CommandClass.CentralScene.NotificationV1Args
function NotificationV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.CentralScene.NotificationV1
function NotificationV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.CentralScene.NotificationV1
function NotificationV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.CentralScene.SupportedReportV2ArgsSupportedScenes
--- @alias SupportedReportV2ArgsSupportedScenes st.zwave.CommandClass.CentralScene.SupportedReportV2ArgsSupportedScenes
--- @field public key_pressed_1_time boolean
--- @field public key_released boolean
--- @field public key_held_down boolean
--- @field public key_pressed_2_times boolean
--- @field public key_pressed_3_times boolean
--- @field public key_pressed_4_times boolean
--- @field public key_pressed_5_times boolean
local SupportedReportV2ArgsSupportedScenes = {}

--- @class st.zwave.CommandClass.CentralScene.SupportedReportV2Args
--- @alias SupportedReportV2Args st.zwave.CommandClass.CentralScene.SupportedReportV2Args
--- @field public identical boolean
--- @field public supported_scenes st.zwave.CommandClass.CentralScene.SupportedReportV2ArgsSupportedScenes[]
local SupportedReportV2Args = {}

--- @class st.zwave.CommandClass.CentralScene.SupportedReportV2:st.zwave.Command
--- @alias SupportedReportV2 st.zwave.CommandClass.CentralScene.SupportedReportV2
---
--- v2 CENTRAL_SCENE_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x5B
--- @field public cmd_id number 0x02
--- @field public version number 2
--- @field public args st.zwave.CommandClass.CentralScene.SupportedReportV2Args command-specific arguments
local SupportedReportV2 = {}
setmetatable(SupportedReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 CENTRAL_SCENE_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.CentralScene command class module instance
--- @param args st.zwave.CommandClass.CentralScene.SupportedReportV2Args command-specific arguments
function SupportedReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.CENTRAL_SCENE, CentralScene.SUPPORTED_REPORT, 2, args, ...)
end

--- Serialize v2 CENTRAL_SCENE_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(writer.length(args.supported_scenes))
  writer:write_bool(args.identical)
  writer:write_bits(2, 1)
  writer:write_bits(5, 0) -- reserved
  for i=1,writer.length(args.supported_scenes) do
    writer:write_bool(args.supported_scenes[i].key_pressed_1_time)
    writer:write_bool(args.supported_scenes[i].key_released)
    writer:write_bool(args.supported_scenes[i].key_held_down)
    writer:write_bool(args.supported_scenes[i].key_pressed_2_times)
    writer:write_bool(args.supported_scenes[i].key_pressed_3_times)
    writer:write_bool(args.supported_scenes[i].key_pressed_4_times)
    writer:write_bool(args.supported_scenes[i].key_pressed_5_times)
  end
  return writer.buf
end

--- Deserialize a v2 CENTRAL_SCENE_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.CentralScene.SupportedReportV2Args deserialized arguments
function SupportedReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("number_of_supported_scenes")
  reader:read_bool("identical")
  reader:read_bits(2, "number_of_bit_mask_bytes")
  reader:read_bits(5) -- reserved
  reader.parsed.supported_scenes = {}
  for i=1,reader.parsed.number_of_supported_scenes do
    reader.parsed.supported_scenes[i] = {}
    if reader.parsed.number_of_bit_mask_bytes > 0 then
      reader:read_bool("key_pressed_1_time", reader.parsed.supported_scenes[i])
      reader:read_bool("key_released", reader.parsed.supported_scenes[i])
      reader:read_bool("key_held_down", reader.parsed.supported_scenes[i])
      reader:read_bool("key_pressed_2_times", reader.parsed.supported_scenes[i])
      reader:read_bool("key_pressed_3_times", reader.parsed.supported_scenes[i])
      reader:read_bool("key_pressed_4_times", reader.parsed.supported_scenes[i])
      reader:read_bool("key_pressed_5_times", reader.parsed.supported_scenes[i])
    end
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.SupportedReportV2
--- @return st.zwave.CommandClass.CentralScene.SupportedReportV2Args
function SupportedReportV2._defaults(self)
  local args = {}
  args.identical = self.args.identical or false
  args.supported_scenes = self.args.supported_scenes or {}
  for i=1,buf.Writer.length(args.supported_scenes) do
    args.supported_scenes[i] = args.supported_scenes[i] or {}
    args.supported_scenes[i].key_pressed_1_time = self.args.supported_scenes[i].key_pressed_1_time or false
    args.supported_scenes[i].key_released = self.args.supported_scenes[i].key_released or false
    args.supported_scenes[i].key_held_down = self.args.supported_scenes[i].key_held_down or false
    args.supported_scenes[i].key_pressed_2_times = self.args.supported_scenes[i].key_pressed_2_times or false
    args.supported_scenes[i].key_pressed_3_times = self.args.supported_scenes[i].key_pressed_3_times or false
    args.supported_scenes[i].key_pressed_4_times = self.args.supported_scenes[i].key_pressed_4_times or false
    args.supported_scenes[i].key_pressed_5_times = self.args.supported_scenes[i].key_pressed_5_times or false
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.SupportedReportV2
--- @return st.zwave.CommandClass.CentralScene.SupportedReportV2Args
function SupportedReportV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.supported_scenes) do
    args.supported_scenes[i] = args.supported_scenes[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.CentralScene.SupportedReportV2
function SupportedReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.CentralScene.SupportedReportV2
function SupportedReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.CentralScene.NotificationV2Args
--- @alias NotificationV2Args st.zwave.CommandClass.CentralScene.NotificationV2Args
--- @field public sequence_number integer [0,255]
--- @field public key_attributes integer see :lua:class:`CentralScene.key_attributes <st.zwave.CommandClass.CentralScene.key_attributes>`
--- @field public scene_number integer [0,255]
local NotificationV2Args = {}

--- @class st.zwave.CommandClass.CentralScene.NotificationV2:st.zwave.Command
--- @alias NotificationV2 st.zwave.CommandClass.CentralScene.NotificationV2
---
--- v2 CENTRAL_SCENE_NOTIFICATION
---
--- @field public cmd_class number 0x5B
--- @field public cmd_id number 0x03
--- @field public version number 2
--- @field public args st.zwave.CommandClass.CentralScene.NotificationV2Args command-specific arguments
local NotificationV2 = {}
setmetatable(NotificationV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 CENTRAL_SCENE_NOTIFICATION object.
---
--- @param module st.zwave.CommandClass.CentralScene command class module instance
--- @param args st.zwave.CommandClass.CentralScene.NotificationV2Args command-specific arguments
function NotificationV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.CENTRAL_SCENE, CentralScene.NOTIFICATION, 2, args, ...)
end

--- Serialize v2 CENTRAL_SCENE_NOTIFICATION arguments.
---
--- @return string serialized payload
function NotificationV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.sequence_number)
  writer:write_bits(3, args.key_attributes)
  writer:write_bits(5, 0) -- reserved
  writer:write_u8(args.scene_number)
  return writer.buf
end

--- Deserialize a v2 CENTRAL_SCENE_NOTIFICATION payload.
---
--- @return st.zwave.CommandClass.CentralScene.NotificationV2Args deserialized arguments
function NotificationV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("sequence_number")
  reader:read_bits(3, "key_attributes")
  reader:read_bits(5) -- reserved
  reader:read_u8("scene_number")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.NotificationV2
--- @return st.zwave.CommandClass.CentralScene.NotificationV2Args
function NotificationV2._defaults(self)
  local args = {}
  args.sequence_number = self.args.sequence_number or 0
  args.key_attributes = self.args.key_attributes or 0
  args.scene_number = self.args.scene_number or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.NotificationV2
--- @return st.zwave.CommandClass.CentralScene.NotificationV2Args
function NotificationV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.CentralScene.NotificationV2
function NotificationV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.CentralScene.NotificationV2
function NotificationV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.key_attributes = function()
    return zw._reflect(
      CentralScene._reflect_key_attributes,
      args.key_attributes
    )
  end
end

--- @class st.zwave.CommandClass.CentralScene.SupportedReportV3ArgsSupportedScenes
--- @alias SupportedReportV3ArgsSupportedScenes st.zwave.CommandClass.CentralScene.SupportedReportV3ArgsSupportedScenes
--- @field public key_pressed_1_time boolean
--- @field public key_released boolean
--- @field public key_held_down boolean
--- @field public key_pressed_2_times boolean
--- @field public key_pressed_3_times boolean
--- @field public key_pressed_4_times boolean
--- @field public key_pressed_5_times boolean
local SupportedReportV3ArgsSupportedScenes = {}

--- @class st.zwave.CommandClass.CentralScene.SupportedReportV3Args
--- @alias SupportedReportV3Args st.zwave.CommandClass.CentralScene.SupportedReportV3Args
--- @field public identical boolean
--- @field public slow_refresh_support boolean
--- @field public supported_scenes st.zwave.CommandClass.CentralScene.SupportedReportV3ArgsSupportedScenes[]
local SupportedReportV3Args = {}

--- @class st.zwave.CommandClass.CentralScene.SupportedReportV3:st.zwave.Command
--- @alias SupportedReportV3 st.zwave.CommandClass.CentralScene.SupportedReportV3
---
--- v3 CENTRAL_SCENE_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x5B
--- @field public cmd_id number 0x02
--- @field public version number 3
--- @field public args st.zwave.CommandClass.CentralScene.SupportedReportV3Args command-specific arguments
local SupportedReportV3 = {}
setmetatable(SupportedReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 CENTRAL_SCENE_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.CentralScene command class module instance
--- @param args st.zwave.CommandClass.CentralScene.SupportedReportV3Args command-specific arguments
function SupportedReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.CENTRAL_SCENE, CentralScene.SUPPORTED_REPORT, 3, args, ...)
end

--- Serialize v3 CENTRAL_SCENE_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(writer.length(args.supported_scenes))
  writer:write_bool(args.identical)
  writer:write_bits(2, 1)
  writer:write_bits(4, 0) -- reserved
  writer:write_bool(args.slow_refresh_support)
  for i=1,writer.length(args.supported_scenes) do
    writer:write_bool(args.supported_scenes[i].key_pressed_1_time)
    writer:write_bool(args.supported_scenes[i].key_released)
    writer:write_bool(args.supported_scenes[i].key_held_down)
    writer:write_bool(args.supported_scenes[i].key_pressed_2_times)
    writer:write_bool(args.supported_scenes[i].key_pressed_3_times)
    writer:write_bool(args.supported_scenes[i].key_pressed_4_times)
    writer:write_bool(args.supported_scenes[i].key_pressed_5_times)
  end
  return writer.buf
end

--- Deserialize a v3 CENTRAL_SCENE_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.CentralScene.SupportedReportV3Args deserialized arguments
function SupportedReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("number_of_supported_scenes")
  reader:read_bool("identical")
  reader:read_bits(2, "number_of_bit_mask_bytes")
  reader:read_bits(4) -- reserved
  reader:read_bool("slow_refresh_support")
  reader.parsed.supported_scenes = {}
  for i=1,reader.parsed.number_of_supported_scenes do
    reader.parsed.supported_scenes[i] = {}
    if reader.parsed.number_of_bit_mask_bytes > 0 then
      reader:read_bool("key_pressed_1_time", reader.parsed.supported_scenes[i])
      reader:read_bool("key_released", reader.parsed.supported_scenes[i])
      reader:read_bool("key_held_down", reader.parsed.supported_scenes[i])
      reader:read_bool("key_pressed_2_times", reader.parsed.supported_scenes[i])
      reader:read_bool("key_pressed_3_times", reader.parsed.supported_scenes[i])
      reader:read_bool("key_pressed_4_times", reader.parsed.supported_scenes[i])
      reader:read_bool("key_pressed_5_times", reader.parsed.supported_scenes[i])
    end
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.SupportedReportV3
--- @return st.zwave.CommandClass.CentralScene.SupportedReportV3Args
function SupportedReportV3._defaults(self)
  local args = {}
  args.identical = self.args.identical or false
  args.slow_refresh_support = self.args.slow_refresh_support or false
  args.supported_scenes = self.args.supported_scenes or {}
  for i=1,buf.Writer.length(args.supported_scenes) do
    args.supported_scenes[i] = args.supported_scenes[i] or {}
    args.supported_scenes[i].key_pressed_1_time = self.args.supported_scenes[i].key_pressed_1_time or false
    args.supported_scenes[i].key_released = self.args.supported_scenes[i].key_released or false
    args.supported_scenes[i].key_held_down = self.args.supported_scenes[i].key_held_down or false
    args.supported_scenes[i].key_pressed_2_times = self.args.supported_scenes[i].key_pressed_2_times or false
    args.supported_scenes[i].key_pressed_3_times = self.args.supported_scenes[i].key_pressed_3_times or false
    args.supported_scenes[i].key_pressed_4_times = self.args.supported_scenes[i].key_pressed_4_times or false
    args.supported_scenes[i].key_pressed_5_times = self.args.supported_scenes[i].key_pressed_5_times or false
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.SupportedReportV3
--- @return st.zwave.CommandClass.CentralScene.SupportedReportV3Args
function SupportedReportV3._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.supported_scenes) do
    args.supported_scenes[i] = args.supported_scenes[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.CentralScene.SupportedReportV3
function SupportedReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.CentralScene.SupportedReportV3
function SupportedReportV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.CentralScene.NotificationV3Args
--- @alias NotificationV3Args st.zwave.CommandClass.CentralScene.NotificationV3Args
--- @field public sequence_number integer [0,255]
--- @field public key_attributes integer see :lua:class:`CentralScene.key_attributes <st.zwave.CommandClass.CentralScene.key_attributes>`
--- @field public slow_refresh boolean
--- @field public scene_number integer [0,255]
local NotificationV3Args = {}

--- @class st.zwave.CommandClass.CentralScene.NotificationV3:st.zwave.Command
--- @alias NotificationV3 st.zwave.CommandClass.CentralScene.NotificationV3
---
--- v3 CENTRAL_SCENE_NOTIFICATION
---
--- @field public cmd_class number 0x5B
--- @field public cmd_id number 0x03
--- @field public version number 3
--- @field public args st.zwave.CommandClass.CentralScene.NotificationV3Args command-specific arguments
local NotificationV3 = {}
setmetatable(NotificationV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 CENTRAL_SCENE_NOTIFICATION object.
---
--- @param module st.zwave.CommandClass.CentralScene command class module instance
--- @param args st.zwave.CommandClass.CentralScene.NotificationV3Args command-specific arguments
function NotificationV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.CENTRAL_SCENE, CentralScene.NOTIFICATION, 3, args, ...)
end

--- Serialize v3 CENTRAL_SCENE_NOTIFICATION arguments.
---
--- @return string serialized payload
function NotificationV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.sequence_number)
  writer:write_bits(3, args.key_attributes)
  writer:write_bits(4, 0) -- reserved
  writer:write_bool(args.slow_refresh)
  writer:write_u8(args.scene_number)
  return writer.buf
end

--- Deserialize a v3 CENTRAL_SCENE_NOTIFICATION payload.
---
--- @return st.zwave.CommandClass.CentralScene.NotificationV3Args deserialized arguments
function NotificationV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("sequence_number")
  reader:read_bits(3, "key_attributes")
  reader:read_bits(4) -- reserved
  reader:read_bool("slow_refresh")
  reader:read_u8("scene_number")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.NotificationV3
--- @return st.zwave.CommandClass.CentralScene.NotificationV3Args
function NotificationV3._defaults(self)
  local args = {}
  args.sequence_number = self.args.sequence_number or 0
  args.key_attributes = self.args.key_attributes or 0
  args.slow_refresh = self.args.slow_refresh or false
  args.scene_number = self.args.scene_number or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.NotificationV3
--- @return st.zwave.CommandClass.CentralScene.NotificationV3Args
function NotificationV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.CentralScene.NotificationV3
function NotificationV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.CentralScene.NotificationV3
function NotificationV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.key_attributes = function()
    return zw._reflect(
      CentralScene._reflect_key_attributes,
      args.key_attributes
    )
  end
end

--- @class st.zwave.CommandClass.CentralScene.ConfigurationSetV3Args
--- @alias ConfigurationSetV3Args st.zwave.CommandClass.CentralScene.ConfigurationSetV3Args
--- @field public slow_refresh boolean
local ConfigurationSetV3Args = {}

--- @class st.zwave.CommandClass.CentralScene.ConfigurationSetV3:st.zwave.Command
--- @alias ConfigurationSetV3 st.zwave.CommandClass.CentralScene.ConfigurationSetV3
---
--- v3 CENTRAL_SCENE_CONFIGURATION_SET
---
--- @field public cmd_class number 0x5B
--- @field public cmd_id number 0x04
--- @field public version number 3
--- @field public args st.zwave.CommandClass.CentralScene.ConfigurationSetV3Args command-specific arguments
local ConfigurationSetV3 = {}
setmetatable(ConfigurationSetV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 CENTRAL_SCENE_CONFIGURATION_SET object.
---
--- @param module st.zwave.CommandClass.CentralScene command class module instance
--- @param args st.zwave.CommandClass.CentralScene.ConfigurationSetV3Args command-specific arguments
function ConfigurationSetV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.CENTRAL_SCENE, CentralScene.CONFIGURATION_SET, 3, args, ...)
end

--- Serialize v3 CENTRAL_SCENE_CONFIGURATION_SET arguments.
---
--- @return string serialized payload
function ConfigurationSetV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(7, 0) -- reserved
  writer:write_bool(args.slow_refresh)
  return writer.buf
end

--- Deserialize a v3 CENTRAL_SCENE_CONFIGURATION_SET payload.
---
--- @return st.zwave.CommandClass.CentralScene.ConfigurationSetV3Args deserialized arguments
function ConfigurationSetV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(7) -- reserved
  reader:read_bool("slow_refresh")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.ConfigurationSetV3
--- @return st.zwave.CommandClass.CentralScene.ConfigurationSetV3Args
function ConfigurationSetV3._defaults(self)
  local args = {}
  args.slow_refresh = self.args.slow_refresh or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.ConfigurationSetV3
--- @return st.zwave.CommandClass.CentralScene.ConfigurationSetV3Args
function ConfigurationSetV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.CentralScene.ConfigurationSetV3
function ConfigurationSetV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.CentralScene.ConfigurationSetV3
function ConfigurationSetV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.CentralScene.ConfigurationGetV3Args
--- @alias ConfigurationGetV3Args st.zwave.CommandClass.CentralScene.ConfigurationGetV3Args
local ConfigurationGetV3Args = {}

--- @class st.zwave.CommandClass.CentralScene.ConfigurationGetV3:st.zwave.Command
--- @alias ConfigurationGetV3 st.zwave.CommandClass.CentralScene.ConfigurationGetV3
---
--- v3 CENTRAL_SCENE_CONFIGURATION_GET
---
--- @field public cmd_class number 0x5B
--- @field public cmd_id number 0x05
--- @field public version number 3
--- @field public args st.zwave.CommandClass.CentralScene.ConfigurationGetV3Args command-specific arguments
local ConfigurationGetV3 = {}
setmetatable(ConfigurationGetV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 CENTRAL_SCENE_CONFIGURATION_GET object.
---
--- @param module st.zwave.CommandClass.CentralScene command class module instance
--- @param args st.zwave.CommandClass.CentralScene.ConfigurationGetV3Args command-specific arguments
function ConfigurationGetV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.CENTRAL_SCENE, CentralScene.CONFIGURATION_GET, 3, args, ...)
end

--- Serialize v3 CENTRAL_SCENE_CONFIGURATION_GET arguments.
---
--- @return string serialized payload
function ConfigurationGetV3:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v3 CENTRAL_SCENE_CONFIGURATION_GET payload.
---
--- @return st.zwave.CommandClass.CentralScene.ConfigurationGetV3Args deserialized arguments
function ConfigurationGetV3:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.ConfigurationGetV3
--- @return st.zwave.CommandClass.CentralScene.ConfigurationGetV3Args
function ConfigurationGetV3._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.ConfigurationGetV3
--- @return st.zwave.CommandClass.CentralScene.ConfigurationGetV3Args
function ConfigurationGetV3._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.CentralScene.ConfigurationGetV3
function ConfigurationGetV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.CentralScene.ConfigurationGetV3
function ConfigurationGetV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.CentralScene.ConfigurationReportV3Args
--- @alias ConfigurationReportV3Args st.zwave.CommandClass.CentralScene.ConfigurationReportV3Args
--- @field public slow_refresh boolean
local ConfigurationReportV3Args = {}

--- @class st.zwave.CommandClass.CentralScene.ConfigurationReportV3:st.zwave.Command
--- @alias ConfigurationReportV3 st.zwave.CommandClass.CentralScene.ConfigurationReportV3
---
--- v3 CENTRAL_SCENE_CONFIGURATION_REPORT
---
--- @field public cmd_class number 0x5B
--- @field public cmd_id number 0x06
--- @field public version number 3
--- @field public args st.zwave.CommandClass.CentralScene.ConfigurationReportV3Args command-specific arguments
local ConfigurationReportV3 = {}
setmetatable(ConfigurationReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 CENTRAL_SCENE_CONFIGURATION_REPORT object.
---
--- @param module st.zwave.CommandClass.CentralScene command class module instance
--- @param args st.zwave.CommandClass.CentralScene.ConfigurationReportV3Args command-specific arguments
function ConfigurationReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.CENTRAL_SCENE, CentralScene.CONFIGURATION_REPORT, 3, args, ...)
end

--- Serialize v3 CENTRAL_SCENE_CONFIGURATION_REPORT arguments.
---
--- @return string serialized payload
function ConfigurationReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(7, 0) -- reserved
  writer:write_bool(args.slow_refresh)
  return writer.buf
end

--- Deserialize a v3 CENTRAL_SCENE_CONFIGURATION_REPORT payload.
---
--- @return st.zwave.CommandClass.CentralScene.ConfigurationReportV3Args deserialized arguments
function ConfigurationReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(7) -- reserved
  reader:read_bool("slow_refresh")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.ConfigurationReportV3
--- @return st.zwave.CommandClass.CentralScene.ConfigurationReportV3Args
function ConfigurationReportV3._defaults(self)
  local args = {}
  args.slow_refresh = self.args.slow_refresh or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.CentralScene.ConfigurationReportV3
--- @return st.zwave.CommandClass.CentralScene.ConfigurationReportV3Args
function ConfigurationReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.CentralScene.ConfigurationReportV3
function ConfigurationReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.CentralScene.ConfigurationReportV3
function ConfigurationReportV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.CentralScene.SupportedGet
--- @alias _SupportedGet st.zwave.CommandClass.CentralScene.SupportedGet
---
--- Dynamically versioned CENTRAL_SCENE_SUPPORTED_GET
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x5B
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.CentralScene.SupportedGetV1Args
local _SupportedGet = {}
setmetatable(_SupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CENTRAL_SCENE_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.CentralScene command class module instance
--- @param args st.zwave.CommandClass.CentralScene.SupportedGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.CentralScene.SupportedGet
function _SupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, CentralScene.SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.CentralScene.SupportedReport
--- @alias _SupportedReport st.zwave.CommandClass.CentralScene.SupportedReport
---
--- Dynamically versioned CENTRAL_SCENE_SUPPORTED_REPORT
---
--- Supported versions: 1,2,3; unique base versions: 1,2,3
---
--- @field public cmd_class number 0x5B
--- @field public cmd_id number 0x02
--- @field public version number 1,2,3
--- @field public args st.zwave.CommandClass.CentralScene.SupportedReportV1Args|st.zwave.CommandClass.CentralScene.SupportedReportV2Args|st.zwave.CommandClass.CentralScene.SupportedReportV3Args
local _SupportedReport = {}
setmetatable(_SupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CENTRAL_SCENE_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.CentralScene command class module instance
--- @param args st.zwave.CommandClass.CentralScene.SupportedReportV1Args|st.zwave.CommandClass.CentralScene.SupportedReportV2Args|st.zwave.CommandClass.CentralScene.SupportedReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.CentralScene.SupportedReport
function _SupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, CentralScene.SUPPORTED_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.CentralScene.Notification
--- @alias _Notification st.zwave.CommandClass.CentralScene.Notification
---
--- Dynamically versioned CENTRAL_SCENE_NOTIFICATION
---
--- Supported versions: 1,2,3; unique base versions: 1,2,3
---
--- @field public cmd_class number 0x5B
--- @field public cmd_id number 0x03
--- @field public version number 1,2,3
--- @field public args st.zwave.CommandClass.CentralScene.NotificationV1Args|st.zwave.CommandClass.CentralScene.NotificationV2Args|st.zwave.CommandClass.CentralScene.NotificationV3Args
local _Notification = {}
setmetatable(_Notification, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CENTRAL_SCENE_NOTIFICATION object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.CentralScene command class module instance
--- @param args st.zwave.CommandClass.CentralScene.NotificationV1Args|st.zwave.CommandClass.CentralScene.NotificationV2Args|st.zwave.CommandClass.CentralScene.NotificationV3Args command-specific arguments
--- @return st.zwave.CommandClass.CentralScene.Notification
function _Notification:construct(module, args, ...)
  return zw.Command._construct(module, CentralScene.NOTIFICATION, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.CentralScene.ConfigurationSet
--- @alias _ConfigurationSet st.zwave.CommandClass.CentralScene.ConfigurationSet
---
--- Dynamically versioned CENTRAL_SCENE_CONFIGURATION_SET
---
--- Supported versions: 3; unique base versions: 3
---
--- @field public cmd_class number 0x5B
--- @field public cmd_id number 0x04
--- @field public version number 3
--- @field public args st.zwave.CommandClass.CentralScene.ConfigurationSetV3Args
local _ConfigurationSet = {}
setmetatable(_ConfigurationSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CENTRAL_SCENE_CONFIGURATION_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.CentralScene command class module instance
--- @param args st.zwave.CommandClass.CentralScene.ConfigurationSetV3Args command-specific arguments
--- @return st.zwave.CommandClass.CentralScene.ConfigurationSet
function _ConfigurationSet:construct(module, args, ...)
  return zw.Command._construct(module, CentralScene.CONFIGURATION_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.CentralScene.ConfigurationGet
--- @alias _ConfigurationGet st.zwave.CommandClass.CentralScene.ConfigurationGet
---
--- Dynamically versioned CENTRAL_SCENE_CONFIGURATION_GET
---
--- Supported versions: 3; unique base versions: 3
---
--- @field public cmd_class number 0x5B
--- @field public cmd_id number 0x05
--- @field public version number 3
--- @field public args st.zwave.CommandClass.CentralScene.ConfigurationGetV3Args
local _ConfigurationGet = {}
setmetatable(_ConfigurationGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CENTRAL_SCENE_CONFIGURATION_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.CentralScene command class module instance
--- @param args st.zwave.CommandClass.CentralScene.ConfigurationGetV3Args command-specific arguments
--- @return st.zwave.CommandClass.CentralScene.ConfigurationGet
function _ConfigurationGet:construct(module, args, ...)
  return zw.Command._construct(module, CentralScene.CONFIGURATION_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.CentralScene.ConfigurationReport
--- @alias _ConfigurationReport st.zwave.CommandClass.CentralScene.ConfigurationReport
---
--- Dynamically versioned CENTRAL_SCENE_CONFIGURATION_REPORT
---
--- Supported versions: 3; unique base versions: 3
---
--- @field public cmd_class number 0x5B
--- @field public cmd_id number 0x06
--- @field public version number 3
--- @field public args st.zwave.CommandClass.CentralScene.ConfigurationReportV3Args
local _ConfigurationReport = {}
setmetatable(_ConfigurationReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CENTRAL_SCENE_CONFIGURATION_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.CentralScene command class module instance
--- @param args st.zwave.CommandClass.CentralScene.ConfigurationReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.CentralScene.ConfigurationReport
function _ConfigurationReport:construct(module, args, ...)
  return zw.Command._construct(module, CentralScene.CONFIGURATION_REPORT, module._serialization_version, args, ...)
end

CentralScene.SupportedGetV1 = SupportedGetV1
CentralScene.SupportedReportV1 = SupportedReportV1
CentralScene.NotificationV1 = NotificationV1
CentralScene.SupportedReportV2 = SupportedReportV2
CentralScene.NotificationV2 = NotificationV2
CentralScene.SupportedReportV3 = SupportedReportV3
CentralScene.NotificationV3 = NotificationV3
CentralScene.ConfigurationSetV3 = ConfigurationSetV3
CentralScene.ConfigurationGetV3 = ConfigurationGetV3
CentralScene.ConfigurationReportV3 = ConfigurationReportV3
CentralScene.SupportedGet = _SupportedGet
CentralScene.SupportedReport = _SupportedReport
CentralScene.Notification = _Notification
CentralScene.ConfigurationSet = _ConfigurationSet
CentralScene.ConfigurationGet = _ConfigurationGet
CentralScene.ConfigurationReport = _ConfigurationReport

CentralScene._lut = {
  [0] = { -- dynamically versioned constructors
    [CentralScene.SUPPORTED_GET] = CentralScene.SupportedGet,
    [CentralScene.SUPPORTED_REPORT] = CentralScene.SupportedReport,
    [CentralScene.NOTIFICATION] = CentralScene.Notification,
    [CentralScene.CONFIGURATION_SET] = CentralScene.ConfigurationSet,
    [CentralScene.CONFIGURATION_GET] = CentralScene.ConfigurationGet,
    [CentralScene.CONFIGURATION_REPORT] = CentralScene.ConfigurationReport
  },
  [1] = { -- version 1
    [CentralScene.SUPPORTED_GET] = CentralScene.SupportedGetV1,
    [CentralScene.SUPPORTED_REPORT] = CentralScene.SupportedReportV1,
    [CentralScene.NOTIFICATION] = CentralScene.NotificationV1
  },
  [2] = { -- version 2
    [CentralScene.SUPPORTED_GET] = CentralScene.SupportedGetV1,
    [CentralScene.SUPPORTED_REPORT] = CentralScene.SupportedReportV2,
    [CentralScene.NOTIFICATION] = CentralScene.NotificationV2
  },
  [3] = { -- version 3
    [CentralScene.SUPPORTED_GET] = CentralScene.SupportedGetV1,
    [CentralScene.SUPPORTED_REPORT] = CentralScene.SupportedReportV3,
    [CentralScene.NOTIFICATION] = CentralScene.NotificationV3,
    [CentralScene.CONFIGURATION_SET] = CentralScene.ConfigurationSetV3,
    [CentralScene.CONFIGURATION_GET] = CentralScene.ConfigurationGetV3,
    [CentralScene.CONFIGURATION_REPORT] = CentralScene.ConfigurationReportV3
  }
}
--- @class st.zwave.CommandClass.CentralScene.key_attributes
--- @alias key_attributes st.zwave.CommandClass.CentralScene.key_attributes
--- @field public KEY_PRESSED_1_TIME number 0x00
--- @field public KEY_RELEASED number 0x01
--- @field public KEY_HELD_DOWN number 0x02
--- @field public KEY_PRESSED_2_TIMES number 0x03
--- @field public KEY_PRESSED_3_TIMES number 0x04
--- @field public KEY_PRESSED_4_TIMES number 0x05
--- @field public KEY_PRESSED_5_TIMES number 0x06
local key_attributes = {
  KEY_PRESSED_1_TIME = 0x00,
  KEY_RELEASED = 0x01,
  KEY_HELD_DOWN = 0x02,
  KEY_PRESSED_2_TIMES = 0x03,
  KEY_PRESSED_3_TIMES = 0x04,
  KEY_PRESSED_4_TIMES = 0x05,
  KEY_PRESSED_5_TIMES = 0x06
}
CentralScene.key_attributes = key_attributes
CentralScene._reflect_key_attributes = zw._reflection_builder(CentralScene.key_attributes)


return CentralScene
