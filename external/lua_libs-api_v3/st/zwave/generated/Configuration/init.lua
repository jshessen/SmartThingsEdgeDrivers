-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.Configuration
--- @alias Configuration st.zwave.CommandClass.Configuration
---
--- Supported versions: 1,2,3,4
---
--- @field public DEFAULT_RESET number 0x01 - CONFIGURATION_DEFAULT_RESET command id
--- @field public SET number 0x04 - CONFIGURATION_SET command id
--- @field public GET number 0x05 - CONFIGURATION_GET command id
--- @field public REPORT number 0x06 - CONFIGURATION_REPORT command id
--- @field public BULK_SET number 0x07 - CONFIGURATION_BULK_SET command id
--- @field public BULK_GET number 0x08 - CONFIGURATION_BULK_GET command id
--- @field public BULK_REPORT number 0x09 - CONFIGURATION_BULK_REPORT command id
--- @field public NAME_GET number 0x0A - CONFIGURATION_NAME_GET command id
--- @field public NAME_REPORT number 0x0B - CONFIGURATION_NAME_REPORT command id
--- @field public INFO_GET number 0x0C - CONFIGURATION_INFO_GET command id
--- @field public INFO_REPORT number 0x0D - CONFIGURATION_INFO_REPORT command id
--- @field public PROPERTIES_GET number 0x0E - CONFIGURATION_PROPERTIES_GET command id
--- @field public PROPERTIES_REPORT number 0x0F - CONFIGURATION_PROPERTIES_REPORT command id
local Configuration = {}
Configuration.DEFAULT_RESET = 0x01
Configuration.SET = 0x04
Configuration.GET = 0x05
Configuration.REPORT = 0x06
Configuration.BULK_SET = 0x07
Configuration.BULK_GET = 0x08
Configuration.BULK_REPORT = 0x09
Configuration.NAME_GET = 0x0A
Configuration.NAME_REPORT = 0x0B
Configuration.INFO_GET = 0x0C
Configuration.INFO_REPORT = 0x0D
Configuration.PROPERTIES_GET = 0x0E
Configuration.PROPERTIES_REPORT = 0x0F

Configuration._commands = {
  [Configuration.DEFAULT_RESET] = "DEFAULT_RESET",
  [Configuration.SET] = "SET",
  [Configuration.GET] = "GET",
  [Configuration.REPORT] = "REPORT",
  [Configuration.BULK_SET] = "BULK_SET",
  [Configuration.BULK_GET] = "BULK_GET",
  [Configuration.BULK_REPORT] = "BULK_REPORT",
  [Configuration.NAME_GET] = "NAME_GET",
  [Configuration.NAME_REPORT] = "NAME_REPORT",
  [Configuration.INFO_GET] = "INFO_GET",
  [Configuration.INFO_REPORT] = "INFO_REPORT",
  [Configuration.PROPERTIES_GET] = "PROPERTIES_GET",
  [Configuration.PROPERTIES_REPORT] = "PROPERTIES_REPORT"
}

--- Instantiate a versioned instance of the Configuration Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.Configuration versioned command class instance
function Configuration:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.CONFIGURATION][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(Configuration, {
  __call = Configuration.init
})

Configuration._serialization_version = nil
Configuration._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.CONFIGURATION] = {
  [1] = true,
  [2] = true,
  [3] = true,
  [4] = true
}

--- @class st.zwave.CommandClass.Configuration.SetV1Args
--- @alias SetV1Args st.zwave.CommandClass.Configuration.SetV1Args
--- @field public parameter_number integer [0,255]
--- @field public size integer [0,7]
--- @field public default boolean
--- @field public configuration_value integer [-2147483648,2147483647]
local SetV1Args = {}

--- @class st.zwave.CommandClass.Configuration.SetV1:st.zwave.Command
--- @alias SetV1 st.zwave.CommandClass.Configuration.SetV1
---
--- v1 and forward-compatible v2,v3,v4 CONFIGURATION_SET
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Configuration.SetV1Args command-specific arguments
local SetV1 = {}
setmetatable(SetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3,v4 CONFIGURATION_SET object.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.SetV1Args command-specific arguments
function SetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.CONFIGURATION, Configuration.SET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3,v4 CONFIGURATION_SET arguments.
---
--- @return string serialized payload
function SetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.parameter_number)
  writer:write_bits(3, args.size or writer.size(args.configuration_value))
  writer:write_bits(4, 0) -- reserved
  writer:write_bool(args.default)
  writer:write_signed(args.size or writer.size(args.configuration_value), args.configuration_value)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3,v4 CONFIGURATION_SET payload.
---
--- @return st.zwave.CommandClass.Configuration.SetV1Args deserialized arguments
function SetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("parameter_number")
  reader:read_bits(3, "size")
  reader:read_bits(4) -- reserved
  reader:read_bool("default")
  reader:read_signed(reader.parsed.size, "configuration_value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Configuration.SetV1
--- @return st.zwave.CommandClass.Configuration.SetV1Args
function SetV1._defaults(self)
  local args = {}
  args.parameter_number = self.args.parameter_number or 0
  args.default = self.args.default or false
  args.configuration_value = self.args.configuration_value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Configuration.SetV1
--- @return st.zwave.CommandClass.Configuration.SetV1Args
function SetV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.size = args.size or writer.size(args.configuration_value)
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Configuration.SetV1
function SetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Configuration.SetV1
function SetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Configuration.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.Configuration.GetV1Args
--- @field public parameter_number integer [0,255]
local GetV1Args = {}

--- @class st.zwave.CommandClass.Configuration.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.Configuration.GetV1
---
--- v1 and forward-compatible v2,v3,v4 CONFIGURATION_GET
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Configuration.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3,v4 CONFIGURATION_GET object.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.CONFIGURATION, Configuration.GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3,v4 CONFIGURATION_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.parameter_number)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3,v4 CONFIGURATION_GET payload.
---
--- @return st.zwave.CommandClass.Configuration.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("parameter_number")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Configuration.GetV1
--- @return st.zwave.CommandClass.Configuration.GetV1Args
function GetV1._defaults(self)
  local args = {}
  args.parameter_number = self.args.parameter_number or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Configuration.GetV1
--- @return st.zwave.CommandClass.Configuration.GetV1Args
function GetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Configuration.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Configuration.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Configuration.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.Configuration.ReportV1Args
--- @field public parameter_number integer [0,255]
--- @field public size integer [0,7]
--- @field public configuration_value integer [-2147483648,2147483647]
local ReportV1Args = {}

--- @class st.zwave.CommandClass.Configuration.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.Configuration.ReportV1
---
--- v1 and forward-compatible v2,v3,v4 CONFIGURATION_REPORT
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Configuration.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3,v4 CONFIGURATION_REPORT object.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.CONFIGURATION, Configuration.REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3,v4 CONFIGURATION_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.parameter_number)
  writer:write_bits(3, args.size or writer.size(args.configuration_value))
  writer:write_bits(5, 0) -- reserved
  writer:write_signed(args.size or writer.size(args.configuration_value), args.configuration_value)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3,v4 CONFIGURATION_REPORT payload.
---
--- @return st.zwave.CommandClass.Configuration.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("parameter_number")
  reader:read_bits(3, "size")
  reader:read_bits(5) -- reserved
  reader:read_signed(reader.parsed.size, "configuration_value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Configuration.ReportV1
--- @return st.zwave.CommandClass.Configuration.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.parameter_number = self.args.parameter_number or 0
  args.configuration_value = self.args.configuration_value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Configuration.ReportV1
--- @return st.zwave.CommandClass.Configuration.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.size = args.size or writer.size(args.configuration_value)
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Configuration.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Configuration.ReportV1
function ReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Configuration.BulkSetV2ArgsParameters
--- @alias BulkSetV2ArgsParameters st.zwave.CommandClass.Configuration.BulkSetV2ArgsParameters
--- @field public parameter integer [-2147483648,2147483647]
local BulkSetV2ArgsParameters = {}

--- @class st.zwave.CommandClass.Configuration.BulkSetV2Args
--- @alias BulkSetV2Args st.zwave.CommandClass.Configuration.BulkSetV2Args
--- @field public parameter_offset integer [0,65535]
--- @field public size integer [0,7]
--- @field public handshake boolean
--- @field public default boolean
--- @field public parameters st.zwave.CommandClass.Configuration.BulkSetV2ArgsParameters[]
local BulkSetV2Args = {}

--- @class st.zwave.CommandClass.Configuration.BulkSetV2:st.zwave.Command
--- @alias BulkSetV2 st.zwave.CommandClass.Configuration.BulkSetV2
---
--- v2 and forward-compatible v3,v4 CONFIGURATION_BULK_SET
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x07
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Configuration.BulkSetV2Args command-specific arguments
local BulkSetV2 = {}
setmetatable(BulkSetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 CONFIGURATION_BULK_SET object.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.BulkSetV2Args command-specific arguments
function BulkSetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.CONFIGURATION, Configuration.BULK_SET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 CONFIGURATION_BULK_SET arguments.
---
--- @return string serialized payload
function BulkSetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_be_u16(args.parameter_offset)
  writer:write_u8(writer.length(args.parameters))
  writer:write_bits(3, args.size or writer.consensus_size({ args.parameters, "parameter" }))
  writer:write_bits(3, 0) -- reserved
  writer:write_bool(args.handshake)
  writer:write_bool(args.default)
  for i=1,writer.length(args.parameters) do
    writer:write_signed(args.size or writer.consensus_size({ args.parameters, "parameter" }), args.parameters[i].parameter)
  end
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 CONFIGURATION_BULK_SET payload.
---
--- @return st.zwave.CommandClass.Configuration.BulkSetV2Args deserialized arguments
function BulkSetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_be_u16("parameter_offset")
  reader:read_u8("number_of_parameters")
  reader:read_bits(3, "size")
  reader:read_bits(3) -- reserved
  reader:read_bool("handshake")
  reader:read_bool("default")
  reader.parsed.parameters = {}
  for i=1,reader.parsed.number_of_parameters do
    reader.parsed.parameters[i] = {}
    reader:read_signed(reader.parsed.size, "parameter", reader.parsed.parameters[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Configuration.BulkSetV2
--- @return st.zwave.CommandClass.Configuration.BulkSetV2Args
function BulkSetV2._defaults(self)
  local args = {}
  args.parameter_offset = self.args.parameter_offset or 0
  args.handshake = self.args.handshake or false
  args.default = self.args.default or false
  args.parameters = self.args.parameters or {}
  for i=1,buf.Writer.length(args.parameters) do
    args.parameters[i] = args.parameters[i] or {}
    args.parameters[i].parameter = self.args.parameters[i].parameter or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Configuration.BulkSetV2
--- @return st.zwave.CommandClass.Configuration.BulkSetV2Args
function BulkSetV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.size = args.size or writer.consensus_size({ args.parameters, "parameter" })
  for i=1,buf.Writer.length(args.parameters) do
    args.parameters[i] = args.parameters[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Configuration.BulkSetV2
function BulkSetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Configuration.BulkSetV2
function BulkSetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Configuration.BulkGetV2Args
--- @alias BulkGetV2Args st.zwave.CommandClass.Configuration.BulkGetV2Args
--- @field public parameter_offset integer [0,65535]
--- @field public number_of_parameters integer [0,255]
local BulkGetV2Args = {}

--- @class st.zwave.CommandClass.Configuration.BulkGetV2:st.zwave.Command
--- @alias BulkGetV2 st.zwave.CommandClass.Configuration.BulkGetV2
---
--- v2 and forward-compatible v3,v4 CONFIGURATION_BULK_GET
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x08
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Configuration.BulkGetV2Args command-specific arguments
local BulkGetV2 = {}
setmetatable(BulkGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 CONFIGURATION_BULK_GET object.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.BulkGetV2Args command-specific arguments
function BulkGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.CONFIGURATION, Configuration.BULK_GET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 CONFIGURATION_BULK_GET arguments.
---
--- @return string serialized payload
function BulkGetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_be_u16(args.parameter_offset)
  writer:write_u8(args.number_of_parameters)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 CONFIGURATION_BULK_GET payload.
---
--- @return st.zwave.CommandClass.Configuration.BulkGetV2Args deserialized arguments
function BulkGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_be_u16("parameter_offset")
  reader:read_u8("number_of_parameters")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Configuration.BulkGetV2
--- @return st.zwave.CommandClass.Configuration.BulkGetV2Args
function BulkGetV2._defaults(self)
  local args = {}
  args.parameter_offset = self.args.parameter_offset or 0
  args.number_of_parameters = self.args.number_of_parameters or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Configuration.BulkGetV2
--- @return st.zwave.CommandClass.Configuration.BulkGetV2Args
function BulkGetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Configuration.BulkGetV2
function BulkGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Configuration.BulkGetV2
function BulkGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Configuration.BulkReportV2ArgsParameters
--- @alias BulkReportV2ArgsParameters st.zwave.CommandClass.Configuration.BulkReportV2ArgsParameters
--- @field public parameter integer [-2147483648,2147483647]
local BulkReportV2ArgsParameters = {}

--- @class st.zwave.CommandClass.Configuration.BulkReportV2Args
--- @alias BulkReportV2Args st.zwave.CommandClass.Configuration.BulkReportV2Args
--- @field public parameter_offset integer [0,65535]
--- @field public reports_to_follow integer [0,255]
--- @field public size integer [0,7]
--- @field public handshake boolean
--- @field public default boolean
--- @field public parameters st.zwave.CommandClass.Configuration.BulkReportV2ArgsParameters[]
local BulkReportV2Args = {}

--- @class st.zwave.CommandClass.Configuration.BulkReportV2:st.zwave.Command
--- @alias BulkReportV2 st.zwave.CommandClass.Configuration.BulkReportV2
---
--- v2 and forward-compatible v3,v4 CONFIGURATION_BULK_REPORT
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x09
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Configuration.BulkReportV2Args command-specific arguments
local BulkReportV2 = {}
setmetatable(BulkReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 CONFIGURATION_BULK_REPORT object.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.BulkReportV2Args command-specific arguments
function BulkReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.CONFIGURATION, Configuration.BULK_REPORT, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 CONFIGURATION_BULK_REPORT arguments.
---
--- @return string serialized payload
function BulkReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_be_u16(args.parameter_offset)
  writer:write_u8(writer.length(args.parameters))
  writer:write_u8(args.reports_to_follow)
  writer:write_bits(3, args.size or writer.consensus_size({ args.parameters, "parameter" }))
  writer:write_bits(3, 0) -- reserved
  writer:write_bool(args.handshake)
  writer:write_bool(args.default)
  for i=1,writer.length(args.parameters) do
    writer:write_signed(args.size or writer.consensus_size({ args.parameters, "parameter" }), args.parameters[i].parameter)
  end
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 CONFIGURATION_BULK_REPORT payload.
---
--- @return st.zwave.CommandClass.Configuration.BulkReportV2Args deserialized arguments
function BulkReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_be_u16("parameter_offset")
  reader:read_u8("number_of_parameters")
  reader:read_u8("reports_to_follow")
  reader:read_bits(3, "size")
  reader:read_bits(3) -- reserved
  reader:read_bool("handshake")
  reader:read_bool("default")
  reader.parsed.parameters = {}
  for i=1,reader.parsed.number_of_parameters do
    reader.parsed.parameters[i] = {}
    reader:read_signed(reader.parsed.size, "parameter", reader.parsed.parameters[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Configuration.BulkReportV2
--- @return st.zwave.CommandClass.Configuration.BulkReportV2Args
function BulkReportV2._defaults(self)
  local args = {}
  args.parameter_offset = self.args.parameter_offset or 0
  args.reports_to_follow = self.args.reports_to_follow or 0
  args.handshake = self.args.handshake or false
  args.default = self.args.default or false
  args.parameters = self.args.parameters or {}
  for i=1,buf.Writer.length(args.parameters) do
    args.parameters[i] = args.parameters[i] or {}
    args.parameters[i].parameter = self.args.parameters[i].parameter or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Configuration.BulkReportV2
--- @return st.zwave.CommandClass.Configuration.BulkReportV2Args
function BulkReportV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.size = args.size or writer.consensus_size({ args.parameters, "parameter" })
  for i=1,buf.Writer.length(args.parameters) do
    args.parameters[i] = args.parameters[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Configuration.BulkReportV2
function BulkReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Configuration.BulkReportV2
function BulkReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Configuration.NameGetV3Args
--- @alias NameGetV3Args st.zwave.CommandClass.Configuration.NameGetV3Args
--- @field public parameter_number integer [0,65535]
local NameGetV3Args = {}

--- @class st.zwave.CommandClass.Configuration.NameGetV3:st.zwave.Command
--- @alias NameGetV3 st.zwave.CommandClass.Configuration.NameGetV3
---
--- v3 and forward-compatible v4 CONFIGURATION_NAME_GET
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x0A
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Configuration.NameGetV3Args command-specific arguments
local NameGetV3 = {}
setmetatable(NameGetV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4 CONFIGURATION_NAME_GET object.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.NameGetV3Args command-specific arguments
function NameGetV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.CONFIGURATION, Configuration.NAME_GET, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4 CONFIGURATION_NAME_GET arguments.
---
--- @return string serialized payload
function NameGetV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_be_u16(args.parameter_number)
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4 CONFIGURATION_NAME_GET payload.
---
--- @return st.zwave.CommandClass.Configuration.NameGetV3Args deserialized arguments
function NameGetV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_be_u16("parameter_number")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Configuration.NameGetV3
--- @return st.zwave.CommandClass.Configuration.NameGetV3Args
function NameGetV3._defaults(self)
  local args = {}
  args.parameter_number = self.args.parameter_number or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Configuration.NameGetV3
--- @return st.zwave.CommandClass.Configuration.NameGetV3Args
function NameGetV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Configuration.NameGetV3
function NameGetV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Configuration.NameGetV3
function NameGetV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Configuration.NameReportV3Args
--- @alias NameReportV3Args st.zwave.CommandClass.Configuration.NameReportV3Args
--- @field public parameter_number integer [0,65535]
--- @field public reports_to_follow integer [0,255]
--- @field public name string
local NameReportV3Args = {}

--- @class st.zwave.CommandClass.Configuration.NameReportV3:st.zwave.Command
--- @alias NameReportV3 st.zwave.CommandClass.Configuration.NameReportV3
---
--- v3 and forward-compatible v4 CONFIGURATION_NAME_REPORT
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x0B
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Configuration.NameReportV3Args command-specific arguments
local NameReportV3 = {}
setmetatable(NameReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4 CONFIGURATION_NAME_REPORT object.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.NameReportV3Args command-specific arguments
function NameReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.CONFIGURATION, Configuration.NAME_REPORT, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4 CONFIGURATION_NAME_REPORT arguments.
---
--- @return string serialized payload
function NameReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_be_u16(args.parameter_number)
  writer:write_u8(args.reports_to_follow)
  writer:write_bytes(args.name)
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4 CONFIGURATION_NAME_REPORT payload.
---
--- @return st.zwave.CommandClass.Configuration.NameReportV3Args deserialized arguments
function NameReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_be_u16("parameter_number")
  reader:read_u8("reports_to_follow")
  reader:read_bytes(reader:remain(), "name")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Configuration.NameReportV3
--- @return st.zwave.CommandClass.Configuration.NameReportV3Args
function NameReportV3._defaults(self)
  local args = {}
  args.parameter_number = self.args.parameter_number or 0
  args.reports_to_follow = self.args.reports_to_follow or 0
  args.name = self.args.name or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Configuration.NameReportV3
--- @return st.zwave.CommandClass.Configuration.NameReportV3Args
function NameReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Configuration.NameReportV3
function NameReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Configuration.NameReportV3
function NameReportV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Configuration.InfoGetV3Args
--- @alias InfoGetV3Args st.zwave.CommandClass.Configuration.InfoGetV3Args
--- @field public parameter_number integer [0,65535]
local InfoGetV3Args = {}

--- @class st.zwave.CommandClass.Configuration.InfoGetV3:st.zwave.Command
--- @alias InfoGetV3 st.zwave.CommandClass.Configuration.InfoGetV3
---
--- v3 and forward-compatible v4 CONFIGURATION_INFO_GET
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x0C
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Configuration.InfoGetV3Args command-specific arguments
local InfoGetV3 = {}
setmetatable(InfoGetV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4 CONFIGURATION_INFO_GET object.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.InfoGetV3Args command-specific arguments
function InfoGetV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.CONFIGURATION, Configuration.INFO_GET, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4 CONFIGURATION_INFO_GET arguments.
---
--- @return string serialized payload
function InfoGetV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_be_u16(args.parameter_number)
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4 CONFIGURATION_INFO_GET payload.
---
--- @return st.zwave.CommandClass.Configuration.InfoGetV3Args deserialized arguments
function InfoGetV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_be_u16("parameter_number")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Configuration.InfoGetV3
--- @return st.zwave.CommandClass.Configuration.InfoGetV3Args
function InfoGetV3._defaults(self)
  local args = {}
  args.parameter_number = self.args.parameter_number or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Configuration.InfoGetV3
--- @return st.zwave.CommandClass.Configuration.InfoGetV3Args
function InfoGetV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Configuration.InfoGetV3
function InfoGetV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Configuration.InfoGetV3
function InfoGetV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Configuration.InfoReportV3Args
--- @alias InfoReportV3Args st.zwave.CommandClass.Configuration.InfoReportV3Args
--- @field public parameter_number integer [0,65535]
--- @field public reports_to_follow integer [0,255]
--- @field public info string
local InfoReportV3Args = {}

--- @class st.zwave.CommandClass.Configuration.InfoReportV3:st.zwave.Command
--- @alias InfoReportV3 st.zwave.CommandClass.Configuration.InfoReportV3
---
--- v3 and forward-compatible v4 CONFIGURATION_INFO_REPORT
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x0D
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Configuration.InfoReportV3Args command-specific arguments
local InfoReportV3 = {}
setmetatable(InfoReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4 CONFIGURATION_INFO_REPORT object.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.InfoReportV3Args command-specific arguments
function InfoReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.CONFIGURATION, Configuration.INFO_REPORT, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4 CONFIGURATION_INFO_REPORT arguments.
---
--- @return string serialized payload
function InfoReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_be_u16(args.parameter_number)
  writer:write_u8(args.reports_to_follow)
  writer:write_bytes(args.info)
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4 CONFIGURATION_INFO_REPORT payload.
---
--- @return st.zwave.CommandClass.Configuration.InfoReportV3Args deserialized arguments
function InfoReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_be_u16("parameter_number")
  reader:read_u8("reports_to_follow")
  reader:read_bytes(reader:remain(), "info")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Configuration.InfoReportV3
--- @return st.zwave.CommandClass.Configuration.InfoReportV3Args
function InfoReportV3._defaults(self)
  local args = {}
  args.parameter_number = self.args.parameter_number or 0
  args.reports_to_follow = self.args.reports_to_follow or 0
  args.info = self.args.info or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Configuration.InfoReportV3
--- @return st.zwave.CommandClass.Configuration.InfoReportV3Args
function InfoReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Configuration.InfoReportV3
function InfoReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Configuration.InfoReportV3
function InfoReportV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Configuration.PropertiesGetV3Args
--- @alias PropertiesGetV3Args st.zwave.CommandClass.Configuration.PropertiesGetV3Args
--- @field public parameter_number integer [0,65535]
local PropertiesGetV3Args = {}

--- @class st.zwave.CommandClass.Configuration.PropertiesGetV3:st.zwave.Command
--- @alias PropertiesGetV3 st.zwave.CommandClass.Configuration.PropertiesGetV3
---
--- v3 and forward-compatible v4 CONFIGURATION_PROPERTIES_GET
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x0E
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Configuration.PropertiesGetV3Args command-specific arguments
local PropertiesGetV3 = {}
setmetatable(PropertiesGetV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4 CONFIGURATION_PROPERTIES_GET object.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.PropertiesGetV3Args command-specific arguments
function PropertiesGetV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.CONFIGURATION, Configuration.PROPERTIES_GET, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4 CONFIGURATION_PROPERTIES_GET arguments.
---
--- @return string serialized payload
function PropertiesGetV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_be_u16(args.parameter_number)
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4 CONFIGURATION_PROPERTIES_GET payload.
---
--- @return st.zwave.CommandClass.Configuration.PropertiesGetV3Args deserialized arguments
function PropertiesGetV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_be_u16("parameter_number")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Configuration.PropertiesGetV3
--- @return st.zwave.CommandClass.Configuration.PropertiesGetV3Args
function PropertiesGetV3._defaults(self)
  local args = {}
  args.parameter_number = self.args.parameter_number or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Configuration.PropertiesGetV3
--- @return st.zwave.CommandClass.Configuration.PropertiesGetV3Args
function PropertiesGetV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Configuration.PropertiesGetV3
function PropertiesGetV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Configuration.PropertiesGetV3
function PropertiesGetV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Configuration.PropertiesReportV3Args
--- @alias PropertiesReportV3Args st.zwave.CommandClass.Configuration.PropertiesReportV3Args
--- @field public parameter_number integer [0,65535]
--- @field public size integer [0,7]
--- @field public format integer see :lua:class:`Configuration.format <st.zwave.CommandClass.Configuration.format>`
--- @field public min_value integer|string
--- @field public max_value integer|string
--- @field public default_value integer|string
--- @field public next_parameter_number integer [0,65535]
local PropertiesReportV3Args = {}

--- @class st.zwave.CommandClass.Configuration.PropertiesReportV3:st.zwave.Command
--- @alias PropertiesReportV3 st.zwave.CommandClass.Configuration.PropertiesReportV3
---
--- v3 CONFIGURATION_PROPERTIES_REPORT
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x0F
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Configuration.PropertiesReportV3Args command-specific arguments
local PropertiesReportV3 = {}
setmetatable(PropertiesReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 CONFIGURATION_PROPERTIES_REPORT object.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.PropertiesReportV3Args command-specific arguments
function PropertiesReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.CONFIGURATION, Configuration.PROPERTIES_REPORT, 3, args, ...)
end

--- Serialize v3 CONFIGURATION_PROPERTIES_REPORT arguments.
---
--- @return string serialized payload
function PropertiesReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_be_u16(args.parameter_number)
  writer:write_bits(3, args.size or writer.consensus_size({ args.default_value }, { args.max_value }, { args.min_value }))
  writer:write_bits(3, args.format or writer.consensus_format({ args.default_value }, { args.max_value }, { args.min_value }))
  writer:write_bits(2, 0) -- reserved
  writer:write_typed(args.format or writer.consensus_format({ args.default_value }, { args.max_value }, { args.min_value }), args.size or writer.consensus_size({ args.default_value }, { args.max_value }, { args.min_value }), args.min_value)
  writer:write_typed(args.format or writer.consensus_format({ args.default_value }, { args.max_value }, { args.min_value }), args.size or writer.consensus_size({ args.default_value }, { args.max_value }, { args.min_value }), args.max_value)
  writer:write_typed(args.format or writer.consensus_format({ args.default_value }, { args.max_value }, { args.min_value }), args.size or writer.consensus_size({ args.default_value }, { args.max_value }, { args.min_value }), args.default_value)
  writer:write_be_u16(args.next_parameter_number)
  return writer.buf
end

--- Deserialize a v3 CONFIGURATION_PROPERTIES_REPORT payload.
---
--- @return st.zwave.CommandClass.Configuration.PropertiesReportV3Args deserialized arguments
function PropertiesReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_be_u16("parameter_number")
  reader:read_bits(3, "size")
  reader:read_bits(3, "format")
  reader:read_bits(2) -- reserved
  reader:read_typed(reader.parsed.format, reader.parsed.size, "min_value")
  reader:read_typed(reader.parsed.format, reader.parsed.size, "max_value")
  reader:read_typed(reader.parsed.format, reader.parsed.size, "default_value")
  reader:read_be_u16("next_parameter_number")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Configuration.PropertiesReportV3
--- @return st.zwave.CommandClass.Configuration.PropertiesReportV3Args
function PropertiesReportV3._defaults(self)
  local args = {}
  args.parameter_number = self.args.parameter_number or 0
  args.min_value = self.args.min_value or 0
  args.max_value = self.args.max_value or 0
  args.default_value = self.args.default_value or 0
  args.next_parameter_number = self.args.next_parameter_number or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Configuration.PropertiesReportV3
--- @return st.zwave.CommandClass.Configuration.PropertiesReportV3Args
function PropertiesReportV3._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.size = args.size or writer.consensus_size({ args.default_value }, { args.max_value }, { args.min_value })
  args.format = args.format or writer.consensus_format({ args.default_value }, { args.max_value }, { args.min_value })
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Configuration.PropertiesReportV3
function PropertiesReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Configuration.PropertiesReportV3
function PropertiesReportV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.format = function()
    return zw._reflect(
      Configuration._reflect_format,
      args.format
    )
  end
end

--- @class st.zwave.CommandClass.Configuration.DefaultResetV4Args
--- @alias DefaultResetV4Args st.zwave.CommandClass.Configuration.DefaultResetV4Args
local DefaultResetV4Args = {}

--- @class st.zwave.CommandClass.Configuration.DefaultResetV4:st.zwave.Command
--- @alias DefaultResetV4 st.zwave.CommandClass.Configuration.DefaultResetV4
---
--- v4 CONFIGURATION_DEFAULT_RESET
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x01
--- @field public version number 4
--- @field public args st.zwave.CommandClass.Configuration.DefaultResetV4Args command-specific arguments
local DefaultResetV4 = {}
setmetatable(DefaultResetV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 CONFIGURATION_DEFAULT_RESET object.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.DefaultResetV4Args command-specific arguments
function DefaultResetV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.CONFIGURATION, Configuration.DEFAULT_RESET, 4, args, ...)
end

--- Serialize v4 CONFIGURATION_DEFAULT_RESET arguments.
---
--- @return string serialized payload
function DefaultResetV4:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v4 CONFIGURATION_DEFAULT_RESET payload.
---
--- @return st.zwave.CommandClass.Configuration.DefaultResetV4Args deserialized arguments
function DefaultResetV4:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Configuration.DefaultResetV4
--- @return st.zwave.CommandClass.Configuration.DefaultResetV4Args
function DefaultResetV4._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Configuration.DefaultResetV4
--- @return st.zwave.CommandClass.Configuration.DefaultResetV4Args
function DefaultResetV4._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Configuration.DefaultResetV4
function DefaultResetV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Configuration.DefaultResetV4
function DefaultResetV4._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Configuration.PropertiesReportV4Args
--- @alias PropertiesReportV4Args st.zwave.CommandClass.Configuration.PropertiesReportV4Args
--- @field public parameter_number integer [0,65535]
--- @field public size integer [0,7]
--- @field public format integer see :lua:class:`Configuration.format <st.zwave.CommandClass.Configuration.format>`
--- @field public readonly boolean
--- @field public altering_capabilities boolean
--- @field public min_value integer|string
--- @field public max_value integer|string
--- @field public default_value integer|string
--- @field public next_parameter_number integer [0,65535]
--- @field public advanced boolean
--- @field public no_bulk_support boolean
local PropertiesReportV4Args = {}

--- @class st.zwave.CommandClass.Configuration.PropertiesReportV4:st.zwave.Command
--- @alias PropertiesReportV4 st.zwave.CommandClass.Configuration.PropertiesReportV4
---
--- v4 CONFIGURATION_PROPERTIES_REPORT
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x0F
--- @field public version number 4
--- @field public args st.zwave.CommandClass.Configuration.PropertiesReportV4Args command-specific arguments
local PropertiesReportV4 = {}
setmetatable(PropertiesReportV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 CONFIGURATION_PROPERTIES_REPORT object.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.PropertiesReportV4Args command-specific arguments
function PropertiesReportV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.CONFIGURATION, Configuration.PROPERTIES_REPORT, 4, args, ...)
end

--- Serialize v4 CONFIGURATION_PROPERTIES_REPORT arguments.
---
--- @return string serialized payload
function PropertiesReportV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_be_u16(args.parameter_number)
  writer:write_bits(3, args.size or writer.consensus_size({ args.default_value }, { args.max_value }, { args.min_value }))
  writer:write_bits(3, args.format or writer.consensus_format({ args.default_value }, { args.max_value }, { args.min_value }))
  writer:write_bool(args.readonly)
  writer:write_bool(args.altering_capabilities)
  writer:write_typed(args.format or writer.consensus_format({ args.default_value }, { args.max_value }, { args.min_value }), args.size or writer.consensus_size({ args.default_value }, { args.max_value }, { args.min_value }), args.min_value)
  writer:write_typed(args.format or writer.consensus_format({ args.default_value }, { args.max_value }, { args.min_value }), args.size or writer.consensus_size({ args.default_value }, { args.max_value }, { args.min_value }), args.max_value)
  writer:write_typed(args.format or writer.consensus_format({ args.default_value }, { args.max_value }, { args.min_value }), args.size or writer.consensus_size({ args.default_value }, { args.max_value }, { args.min_value }), args.default_value)
  writer:write_be_u16(args.next_parameter_number)
  writer:write_bool(args.advanced)
  writer:write_bool(args.no_bulk_support)
  writer:write_bits(6, 0) -- reserved1
  return writer.buf
end

--- Deserialize a v4 CONFIGURATION_PROPERTIES_REPORT payload.
---
--- @return st.zwave.CommandClass.Configuration.PropertiesReportV4Args deserialized arguments
function PropertiesReportV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_be_u16("parameter_number")
  reader:read_bits(3, "size")
  reader:read_bits(3, "format")
  reader:read_bool("readonly")
  reader:read_bool("altering_capabilities")
  reader:read_typed(reader.parsed.format, reader.parsed.size, "min_value")
  reader:read_typed(reader.parsed.format, reader.parsed.size, "max_value")
  reader:read_typed(reader.parsed.format, reader.parsed.size, "default_value")
  reader:read_be_u16("next_parameter_number")
  reader:read_bool("advanced")
  reader:read_bool("no_bulk_support")
  reader:read_bits(6) -- reserved1
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Configuration.PropertiesReportV4
--- @return st.zwave.CommandClass.Configuration.PropertiesReportV4Args
function PropertiesReportV4._defaults(self)
  local args = {}
  args.parameter_number = self.args.parameter_number or 0
  args.readonly = self.args.readonly or false
  args.altering_capabilities = self.args.altering_capabilities or false
  args.min_value = self.args.min_value or 0
  args.max_value = self.args.max_value or 0
  args.default_value = self.args.default_value or 0
  args.next_parameter_number = self.args.next_parameter_number or 0
  args.advanced = self.args.advanced or false
  args.no_bulk_support = self.args.no_bulk_support or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Configuration.PropertiesReportV4
--- @return st.zwave.CommandClass.Configuration.PropertiesReportV4Args
function PropertiesReportV4._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.size = args.size or writer.consensus_size({ args.default_value }, { args.max_value }, { args.min_value })
  args.format = args.format or writer.consensus_format({ args.default_value }, { args.max_value }, { args.min_value })
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Configuration.PropertiesReportV4
function PropertiesReportV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Configuration.PropertiesReportV4
function PropertiesReportV4._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.format = function()
    return zw._reflect(
      Configuration._reflect_format,
      args.format
    )
  end
end

--- @class st.zwave.CommandClass.Configuration.Set
--- @alias _Set st.zwave.CommandClass.Configuration.Set
---
--- Dynamically versioned CONFIGURATION_SET
---
--- Supported versions: 1,2,3,4; unique base versions: 1
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Configuration.SetV1Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CONFIGURATION_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.SetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Configuration.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, Configuration.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Configuration.Get
--- @alias _Get st.zwave.CommandClass.Configuration.Get
---
--- Dynamically versioned CONFIGURATION_GET
---
--- Supported versions: 1,2,3,4; unique base versions: 1
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Configuration.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CONFIGURATION_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Configuration.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, Configuration.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Configuration.Report
--- @alias _Report st.zwave.CommandClass.Configuration.Report
---
--- Dynamically versioned CONFIGURATION_REPORT
---
--- Supported versions: 1,2,3,4; unique base versions: 1
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Configuration.ReportV1Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CONFIGURATION_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.ReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.Configuration.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, Configuration.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Configuration.BulkSet
--- @alias _BulkSet st.zwave.CommandClass.Configuration.BulkSet
---
--- Dynamically versioned CONFIGURATION_BULK_SET
---
--- Supported versions: 2,3,4; unique base versions: 2
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x07
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Configuration.BulkSetV2Args
local _BulkSet = {}
setmetatable(_BulkSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CONFIGURATION_BULK_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.BulkSetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Configuration.BulkSet
function _BulkSet:construct(module, args, ...)
  return zw.Command._construct(module, Configuration.BULK_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Configuration.BulkGet
--- @alias _BulkGet st.zwave.CommandClass.Configuration.BulkGet
---
--- Dynamically versioned CONFIGURATION_BULK_GET
---
--- Supported versions: 2,3,4; unique base versions: 2
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x08
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Configuration.BulkGetV2Args
local _BulkGet = {}
setmetatable(_BulkGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CONFIGURATION_BULK_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.BulkGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Configuration.BulkGet
function _BulkGet:construct(module, args, ...)
  return zw.Command._construct(module, Configuration.BULK_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Configuration.BulkReport
--- @alias _BulkReport st.zwave.CommandClass.Configuration.BulkReport
---
--- Dynamically versioned CONFIGURATION_BULK_REPORT
---
--- Supported versions: 2,3,4; unique base versions: 2
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x09
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Configuration.BulkReportV2Args
local _BulkReport = {}
setmetatable(_BulkReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CONFIGURATION_BULK_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.BulkReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.Configuration.BulkReport
function _BulkReport:construct(module, args, ...)
  return zw.Command._construct(module, Configuration.BULK_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Configuration.NameGet
--- @alias _NameGet st.zwave.CommandClass.Configuration.NameGet
---
--- Dynamically versioned CONFIGURATION_NAME_GET
---
--- Supported versions: 3,4; unique base versions: 3
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x0A
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Configuration.NameGetV3Args
local _NameGet = {}
setmetatable(_NameGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CONFIGURATION_NAME_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.NameGetV3Args command-specific arguments
--- @return st.zwave.CommandClass.Configuration.NameGet
function _NameGet:construct(module, args, ...)
  return zw.Command._construct(module, Configuration.NAME_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Configuration.NameReport
--- @alias _NameReport st.zwave.CommandClass.Configuration.NameReport
---
--- Dynamically versioned CONFIGURATION_NAME_REPORT
---
--- Supported versions: 3,4; unique base versions: 3
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x0B
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Configuration.NameReportV3Args
local _NameReport = {}
setmetatable(_NameReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CONFIGURATION_NAME_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.NameReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.Configuration.NameReport
function _NameReport:construct(module, args, ...)
  return zw.Command._construct(module, Configuration.NAME_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Configuration.InfoGet
--- @alias _InfoGet st.zwave.CommandClass.Configuration.InfoGet
---
--- Dynamically versioned CONFIGURATION_INFO_GET
---
--- Supported versions: 3,4; unique base versions: 3
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x0C
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Configuration.InfoGetV3Args
local _InfoGet = {}
setmetatable(_InfoGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CONFIGURATION_INFO_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.InfoGetV3Args command-specific arguments
--- @return st.zwave.CommandClass.Configuration.InfoGet
function _InfoGet:construct(module, args, ...)
  return zw.Command._construct(module, Configuration.INFO_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Configuration.InfoReport
--- @alias _InfoReport st.zwave.CommandClass.Configuration.InfoReport
---
--- Dynamically versioned CONFIGURATION_INFO_REPORT
---
--- Supported versions: 3,4; unique base versions: 3
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x0D
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Configuration.InfoReportV3Args
local _InfoReport = {}
setmetatable(_InfoReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CONFIGURATION_INFO_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.InfoReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.Configuration.InfoReport
function _InfoReport:construct(module, args, ...)
  return zw.Command._construct(module, Configuration.INFO_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Configuration.PropertiesGet
--- @alias _PropertiesGet st.zwave.CommandClass.Configuration.PropertiesGet
---
--- Dynamically versioned CONFIGURATION_PROPERTIES_GET
---
--- Supported versions: 3,4; unique base versions: 3
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x0E
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Configuration.PropertiesGetV3Args
local _PropertiesGet = {}
setmetatable(_PropertiesGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CONFIGURATION_PROPERTIES_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.PropertiesGetV3Args command-specific arguments
--- @return st.zwave.CommandClass.Configuration.PropertiesGet
function _PropertiesGet:construct(module, args, ...)
  return zw.Command._construct(module, Configuration.PROPERTIES_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Configuration.PropertiesReport
--- @alias _PropertiesReport st.zwave.CommandClass.Configuration.PropertiesReport
---
--- Dynamically versioned CONFIGURATION_PROPERTIES_REPORT
---
--- Supported versions: 3,4; unique base versions: 3,4
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x0F
--- @field public version number 3,4
--- @field public args st.zwave.CommandClass.Configuration.PropertiesReportV3Args|st.zwave.CommandClass.Configuration.PropertiesReportV4Args
local _PropertiesReport = {}
setmetatable(_PropertiesReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CONFIGURATION_PROPERTIES_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.PropertiesReportV3Args|st.zwave.CommandClass.Configuration.PropertiesReportV4Args command-specific arguments
--- @return st.zwave.CommandClass.Configuration.PropertiesReport
function _PropertiesReport:construct(module, args, ...)
  return zw.Command._construct(module, Configuration.PROPERTIES_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Configuration.DefaultReset
--- @alias _DefaultReset st.zwave.CommandClass.Configuration.DefaultReset
---
--- Dynamically versioned CONFIGURATION_DEFAULT_RESET
---
--- Supported versions: 4; unique base versions: 4
---
--- @field public cmd_class number 0x70
--- @field public cmd_id number 0x01
--- @field public version number 4
--- @field public args st.zwave.CommandClass.Configuration.DefaultResetV4Args
local _DefaultReset = {}
setmetatable(_DefaultReset, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a CONFIGURATION_DEFAULT_RESET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Configuration command class module instance
--- @param args st.zwave.CommandClass.Configuration.DefaultResetV4Args command-specific arguments
--- @return st.zwave.CommandClass.Configuration.DefaultReset
function _DefaultReset:construct(module, args, ...)
  return zw.Command._construct(module, Configuration.DEFAULT_RESET, module._serialization_version, args, ...)
end

Configuration.SetV1 = SetV1
Configuration.GetV1 = GetV1
Configuration.ReportV1 = ReportV1
Configuration.BulkSetV2 = BulkSetV2
Configuration.BulkGetV2 = BulkGetV2
Configuration.BulkReportV2 = BulkReportV2
Configuration.NameGetV3 = NameGetV3
Configuration.NameReportV3 = NameReportV3
Configuration.InfoGetV3 = InfoGetV3
Configuration.InfoReportV3 = InfoReportV3
Configuration.PropertiesGetV3 = PropertiesGetV3
Configuration.PropertiesReportV3 = PropertiesReportV3
Configuration.DefaultResetV4 = DefaultResetV4
Configuration.PropertiesReportV4 = PropertiesReportV4
Configuration.Set = _Set
Configuration.Get = _Get
Configuration.Report = _Report
Configuration.BulkSet = _BulkSet
Configuration.BulkGet = _BulkGet
Configuration.BulkReport = _BulkReport
Configuration.NameGet = _NameGet
Configuration.NameReport = _NameReport
Configuration.InfoGet = _InfoGet
Configuration.InfoReport = _InfoReport
Configuration.PropertiesGet = _PropertiesGet
Configuration.PropertiesReport = _PropertiesReport
Configuration.DefaultReset = _DefaultReset

Configuration._lut = {
  [0] = { -- dynamically versioned constructors
    [Configuration.DEFAULT_RESET] = Configuration.DefaultReset,
    [Configuration.SET] = Configuration.Set,
    [Configuration.GET] = Configuration.Get,
    [Configuration.REPORT] = Configuration.Report,
    [Configuration.BULK_SET] = Configuration.BulkSet,
    [Configuration.BULK_GET] = Configuration.BulkGet,
    [Configuration.BULK_REPORT] = Configuration.BulkReport,
    [Configuration.NAME_GET] = Configuration.NameGet,
    [Configuration.NAME_REPORT] = Configuration.NameReport,
    [Configuration.INFO_GET] = Configuration.InfoGet,
    [Configuration.INFO_REPORT] = Configuration.InfoReport,
    [Configuration.PROPERTIES_GET] = Configuration.PropertiesGet,
    [Configuration.PROPERTIES_REPORT] = Configuration.PropertiesReport
  },
  [1] = { -- version 1
    [Configuration.SET] = Configuration.SetV1,
    [Configuration.GET] = Configuration.GetV1,
    [Configuration.REPORT] = Configuration.ReportV1
  },
  [2] = { -- version 2
    [Configuration.SET] = Configuration.SetV1,
    [Configuration.GET] = Configuration.GetV1,
    [Configuration.REPORT] = Configuration.ReportV1,
    [Configuration.BULK_SET] = Configuration.BulkSetV2,
    [Configuration.BULK_GET] = Configuration.BulkGetV2,
    [Configuration.BULK_REPORT] = Configuration.BulkReportV2
  },
  [3] = { -- version 3
    [Configuration.SET] = Configuration.SetV1,
    [Configuration.GET] = Configuration.GetV1,
    [Configuration.REPORT] = Configuration.ReportV1,
    [Configuration.BULK_SET] = Configuration.BulkSetV2,
    [Configuration.BULK_GET] = Configuration.BulkGetV2,
    [Configuration.BULK_REPORT] = Configuration.BulkReportV2,
    [Configuration.NAME_GET] = Configuration.NameGetV3,
    [Configuration.NAME_REPORT] = Configuration.NameReportV3,
    [Configuration.INFO_GET] = Configuration.InfoGetV3,
    [Configuration.INFO_REPORT] = Configuration.InfoReportV3,
    [Configuration.PROPERTIES_GET] = Configuration.PropertiesGetV3,
    [Configuration.PROPERTIES_REPORT] = Configuration.PropertiesReportV3
  },
  [4] = { -- version 4
    [Configuration.DEFAULT_RESET] = Configuration.DefaultResetV4,
    [Configuration.SET] = Configuration.SetV1,
    [Configuration.GET] = Configuration.GetV1,
    [Configuration.REPORT] = Configuration.ReportV1,
    [Configuration.BULK_SET] = Configuration.BulkSetV2,
    [Configuration.BULK_GET] = Configuration.BulkGetV2,
    [Configuration.BULK_REPORT] = Configuration.BulkReportV2,
    [Configuration.NAME_GET] = Configuration.NameGetV3,
    [Configuration.NAME_REPORT] = Configuration.NameReportV3,
    [Configuration.INFO_GET] = Configuration.InfoGetV3,
    [Configuration.INFO_REPORT] = Configuration.InfoReportV3,
    [Configuration.PROPERTIES_GET] = Configuration.PropertiesGetV3,
    [Configuration.PROPERTIES_REPORT] = Configuration.PropertiesReportV4
  }
}
--- @class st.zwave.CommandClass.Configuration.format
--- @alias format st.zwave.CommandClass.Configuration.format
--- @field public SIGNED_INTEGER number 0x00
--- @field public UNSIGNED_INTEGER number 0x01
--- @field public ENUMERATED number 0x02
--- @field public BIT_FIELD number 0x03
local format = {
  SIGNED_INTEGER = 0x00,
  UNSIGNED_INTEGER = 0x01,
  ENUMERATED = 0x02,
  BIT_FIELD = 0x03
}
Configuration.format = format
Configuration._reflect_format = zw._reflection_builder(Configuration.format)


return Configuration
