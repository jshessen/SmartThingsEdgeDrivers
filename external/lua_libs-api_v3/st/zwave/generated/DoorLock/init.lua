-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.DoorLock
--- @alias DoorLock st.zwave.CommandClass.DoorLock
---
--- Supported versions: 1,2,3,4
---
--- @field public OPERATION_SET number 0x01 - DOOR_LOCK_OPERATION_SET command id
--- @field public OPERATION_GET number 0x02 - DOOR_LOCK_OPERATION_GET command id
--- @field public OPERATION_REPORT number 0x03 - DOOR_LOCK_OPERATION_REPORT command id
--- @field public CONFIGURATION_SET number 0x04 - DOOR_LOCK_CONFIGURATION_SET command id
--- @field public CONFIGURATION_GET number 0x05 - DOOR_LOCK_CONFIGURATION_GET command id
--- @field public CONFIGURATION_REPORT number 0x06 - DOOR_LOCK_CONFIGURATION_REPORT command id
--- @field public CAPABILITIES_GET number 0x07 - DOOR_LOCK_CAPABILITIES_GET command id
--- @field public CAPABILITIES_REPORT number 0x08 - DOOR_LOCK_CAPABILITIES_REPORT command id
local DoorLock = {}
DoorLock.OPERATION_SET = 0x01
DoorLock.OPERATION_GET = 0x02
DoorLock.OPERATION_REPORT = 0x03
DoorLock.CONFIGURATION_SET = 0x04
DoorLock.CONFIGURATION_GET = 0x05
DoorLock.CONFIGURATION_REPORT = 0x06
DoorLock.CAPABILITIES_GET = 0x07
DoorLock.CAPABILITIES_REPORT = 0x08

DoorLock._commands = {
  [DoorLock.OPERATION_SET] = "OPERATION_SET",
  [DoorLock.OPERATION_GET] = "OPERATION_GET",
  [DoorLock.OPERATION_REPORT] = "OPERATION_REPORT",
  [DoorLock.CONFIGURATION_SET] = "CONFIGURATION_SET",
  [DoorLock.CONFIGURATION_GET] = "CONFIGURATION_GET",
  [DoorLock.CONFIGURATION_REPORT] = "CONFIGURATION_REPORT",
  [DoorLock.CAPABILITIES_GET] = "CAPABILITIES_GET",
  [DoorLock.CAPABILITIES_REPORT] = "CAPABILITIES_REPORT"
}

--- Instantiate a versioned instance of the DoorLock Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.DoorLock versioned command class instance
function DoorLock:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.DOOR_LOCK][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(DoorLock, {
  __call = DoorLock.init
})

DoorLock._serialization_version = nil
DoorLock._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.DOOR_LOCK] = {
  [1] = true,
  [2] = true,
  [3] = true,
  [4] = true
}

--- @class st.zwave.CommandClass.DoorLock.OperationSetV1Args
--- @alias OperationSetV1Args st.zwave.CommandClass.DoorLock.OperationSetV1Args
--- @field public door_lock_mode integer see :lua:class:`DoorLock.door_lock_mode <st.zwave.CommandClass.DoorLock.door_lock_mode>`
local OperationSetV1Args = {}

--- @class st.zwave.CommandClass.DoorLock.OperationSetV1:st.zwave.Command
--- @alias OperationSetV1 st.zwave.CommandClass.DoorLock.OperationSetV1
---
--- v1 and forward-compatible v2,v3,v4 DOOR_LOCK_OPERATION_SET
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.DoorLock.OperationSetV1Args command-specific arguments
local OperationSetV1 = {}
setmetatable(OperationSetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3,v4 DOOR_LOCK_OPERATION_SET object.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.OperationSetV1Args command-specific arguments
function OperationSetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.DOOR_LOCK, DoorLock.OPERATION_SET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3,v4 DOOR_LOCK_OPERATION_SET arguments.
---
--- @return string serialized payload
function OperationSetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.door_lock_mode)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3,v4 DOOR_LOCK_OPERATION_SET payload.
---
--- @return st.zwave.CommandClass.DoorLock.OperationSetV1Args deserialized arguments
function OperationSetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("door_lock_mode")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.OperationSetV1
--- @return st.zwave.CommandClass.DoorLock.OperationSetV1Args
function OperationSetV1._defaults(self)
  local args = {}
  args.door_lock_mode = self.args.door_lock_mode or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.OperationSetV1
--- @return st.zwave.CommandClass.DoorLock.OperationSetV1Args
function OperationSetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.DoorLock.OperationSetV1
function OperationSetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.DoorLock.OperationSetV1
function OperationSetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.door_lock_mode = function()
    return zw._reflect(
      DoorLock._reflect_door_lock_mode,
      args.door_lock_mode
    )
  end
end

--- @class st.zwave.CommandClass.DoorLock.OperationGetV1Args
--- @alias OperationGetV1Args st.zwave.CommandClass.DoorLock.OperationGetV1Args
local OperationGetV1Args = {}

--- @class st.zwave.CommandClass.DoorLock.OperationGetV1:st.zwave.Command
--- @alias OperationGetV1 st.zwave.CommandClass.DoorLock.OperationGetV1
---
--- v1 and forward-compatible v2,v3,v4 DOOR_LOCK_OPERATION_GET
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.DoorLock.OperationGetV1Args command-specific arguments
local OperationGetV1 = {}
setmetatable(OperationGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3,v4 DOOR_LOCK_OPERATION_GET object.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.OperationGetV1Args command-specific arguments
function OperationGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.DOOR_LOCK, DoorLock.OPERATION_GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3,v4 DOOR_LOCK_OPERATION_GET arguments.
---
--- @return string serialized payload
function OperationGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3,v4 DOOR_LOCK_OPERATION_GET payload.
---
--- @return st.zwave.CommandClass.DoorLock.OperationGetV1Args deserialized arguments
function OperationGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.OperationGetV1
--- @return st.zwave.CommandClass.DoorLock.OperationGetV1Args
function OperationGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.OperationGetV1
--- @return st.zwave.CommandClass.DoorLock.OperationGetV1Args
function OperationGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.DoorLock.OperationGetV1
function OperationGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.DoorLock.OperationGetV1
function OperationGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.DoorLock.OperationReportV1Args
--- @alias OperationReportV1Args st.zwave.CommandClass.DoorLock.OperationReportV1Args
--- @field public door_lock_mode integer see :lua:class:`DoorLock.door_lock_mode <st.zwave.CommandClass.DoorLock.door_lock_mode>`
--- @field public inside_door_handles_mode integer [0,15]
--- @field public outside_door_handles_mode integer [0,15]
--- @field public door_condition integer [0,255]
--- @field public lock_timeout_minutes integer [0,255]
--- @field public lock_timeout_seconds integer [0,255]
local OperationReportV1Args = {}

--- @class st.zwave.CommandClass.DoorLock.OperationReportV1:st.zwave.Command
--- @alias OperationReportV1 st.zwave.CommandClass.DoorLock.OperationReportV1
---
--- v1 and forward-compatible v2 DOOR_LOCK_OPERATION_REPORT
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.DoorLock.OperationReportV1Args command-specific arguments
local OperationReportV1 = {}
setmetatable(OperationReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 DOOR_LOCK_OPERATION_REPORT object.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.OperationReportV1Args command-specific arguments
function OperationReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.DOOR_LOCK, DoorLock.OPERATION_REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 DOOR_LOCK_OPERATION_REPORT arguments.
---
--- @return string serialized payload
function OperationReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.door_lock_mode)
  writer:write_bits(4, args.inside_door_handles_mode)
  writer:write_bits(4, args.outside_door_handles_mode)
  writer:write_u8(args.door_condition)
  writer:write_u8(args.lock_timeout_minutes)
  writer:write_u8(args.lock_timeout_seconds)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 DOOR_LOCK_OPERATION_REPORT payload.
---
--- @return st.zwave.CommandClass.DoorLock.OperationReportV1Args deserialized arguments
function OperationReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("door_lock_mode")
  reader:read_bits(4, "inside_door_handles_mode")
  reader:read_bits(4, "outside_door_handles_mode")
  reader:read_u8("door_condition")
  reader:read_u8("lock_timeout_minutes")
  reader:read_u8("lock_timeout_seconds")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.OperationReportV1
--- @return st.zwave.CommandClass.DoorLock.OperationReportV1Args
function OperationReportV1._defaults(self)
  local args = {}
  args.door_lock_mode = self.args.door_lock_mode or 0
  args.inside_door_handles_mode = self.args.inside_door_handles_mode or 0
  args.outside_door_handles_mode = self.args.outside_door_handles_mode or 0
  args.door_condition = self.args.door_condition or 0
  args.lock_timeout_minutes = self.args.lock_timeout_minutes or 0
  args.lock_timeout_seconds = self.args.lock_timeout_seconds or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.OperationReportV1
--- @return st.zwave.CommandClass.DoorLock.OperationReportV1Args
function OperationReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.DoorLock.OperationReportV1
function OperationReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.DoorLock.OperationReportV1
function OperationReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.door_lock_mode = function()
    return zw._reflect(
      DoorLock._reflect_door_lock_mode,
      args.door_lock_mode
    )
  end
end

--- @class st.zwave.CommandClass.DoorLock.ConfigurationSetV1Args
--- @alias ConfigurationSetV1Args st.zwave.CommandClass.DoorLock.ConfigurationSetV1Args
--- @field public operation_type integer see :lua:class:`DoorLock.operation_type <st.zwave.CommandClass.DoorLock.operation_type>`
--- @field public inside_door_handles_state integer [0,15]
--- @field public outside_door_handles_state integer [0,15]
--- @field public lock_timeout_minutes integer [0,255]
--- @field public lock_timeout_seconds integer [0,255]
local ConfigurationSetV1Args = {}

--- @class st.zwave.CommandClass.DoorLock.ConfigurationSetV1:st.zwave.Command
--- @alias ConfigurationSetV1 st.zwave.CommandClass.DoorLock.ConfigurationSetV1
---
--- v1 and forward-compatible v2,v3 DOOR_LOCK_CONFIGURATION_SET
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.DoorLock.ConfigurationSetV1Args command-specific arguments
local ConfigurationSetV1 = {}
setmetatable(ConfigurationSetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 DOOR_LOCK_CONFIGURATION_SET object.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.ConfigurationSetV1Args command-specific arguments
function ConfigurationSetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.DOOR_LOCK, DoorLock.CONFIGURATION_SET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 DOOR_LOCK_CONFIGURATION_SET arguments.
---
--- @return string serialized payload
function ConfigurationSetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.operation_type)
  writer:write_bits(4, args.inside_door_handles_state)
  writer:write_bits(4, args.outside_door_handles_state)
  writer:write_u8(args.lock_timeout_minutes)
  writer:write_u8(args.lock_timeout_seconds)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 DOOR_LOCK_CONFIGURATION_SET payload.
---
--- @return st.zwave.CommandClass.DoorLock.ConfigurationSetV1Args deserialized arguments
function ConfigurationSetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("operation_type")
  reader:read_bits(4, "inside_door_handles_state")
  reader:read_bits(4, "outside_door_handles_state")
  reader:read_u8("lock_timeout_minutes")
  reader:read_u8("lock_timeout_seconds")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationSetV1
--- @return st.zwave.CommandClass.DoorLock.ConfigurationSetV1Args
function ConfigurationSetV1._defaults(self)
  local args = {}
  args.operation_type = self.args.operation_type or 0
  args.inside_door_handles_state = self.args.inside_door_handles_state or 0
  args.outside_door_handles_state = self.args.outside_door_handles_state or 0
  args.lock_timeout_minutes = self.args.lock_timeout_minutes or 0
  args.lock_timeout_seconds = self.args.lock_timeout_seconds or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationSetV1
--- @return st.zwave.CommandClass.DoorLock.ConfigurationSetV1Args
function ConfigurationSetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationSetV1
function ConfigurationSetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationSetV1
function ConfigurationSetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.operation_type = function()
    return zw._reflect(
      DoorLock._reflect_operation_type,
      args.operation_type
    )
  end
end

--- @class st.zwave.CommandClass.DoorLock.ConfigurationGetV1Args
--- @alias ConfigurationGetV1Args st.zwave.CommandClass.DoorLock.ConfigurationGetV1Args
local ConfigurationGetV1Args = {}

--- @class st.zwave.CommandClass.DoorLock.ConfigurationGetV1:st.zwave.Command
--- @alias ConfigurationGetV1 st.zwave.CommandClass.DoorLock.ConfigurationGetV1
---
--- v1 and forward-compatible v2,v3,v4 DOOR_LOCK_CONFIGURATION_GET
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.DoorLock.ConfigurationGetV1Args command-specific arguments
local ConfigurationGetV1 = {}
setmetatable(ConfigurationGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3,v4 DOOR_LOCK_CONFIGURATION_GET object.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.ConfigurationGetV1Args command-specific arguments
function ConfigurationGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.DOOR_LOCK, DoorLock.CONFIGURATION_GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3,v4 DOOR_LOCK_CONFIGURATION_GET arguments.
---
--- @return string serialized payload
function ConfigurationGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3,v4 DOOR_LOCK_CONFIGURATION_GET payload.
---
--- @return st.zwave.CommandClass.DoorLock.ConfigurationGetV1Args deserialized arguments
function ConfigurationGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationGetV1
--- @return st.zwave.CommandClass.DoorLock.ConfigurationGetV1Args
function ConfigurationGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationGetV1
--- @return st.zwave.CommandClass.DoorLock.ConfigurationGetV1Args
function ConfigurationGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationGetV1
function ConfigurationGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationGetV1
function ConfigurationGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.DoorLock.ConfigurationReportV1Args
--- @alias ConfigurationReportV1Args st.zwave.CommandClass.DoorLock.ConfigurationReportV1Args
--- @field public operation_type integer see :lua:class:`DoorLock.operation_type <st.zwave.CommandClass.DoorLock.operation_type>`
--- @field public inside_door_handles_state integer [0,15]
--- @field public outside_door_handles_state integer [0,15]
--- @field public lock_timeout_minutes integer [0,255]
--- @field public lock_timeout_seconds integer [0,255]
local ConfigurationReportV1Args = {}

--- @class st.zwave.CommandClass.DoorLock.ConfigurationReportV1:st.zwave.Command
--- @alias ConfigurationReportV1 st.zwave.CommandClass.DoorLock.ConfigurationReportV1
---
--- v1 and forward-compatible v2,v3 DOOR_LOCK_CONFIGURATION_REPORT
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.DoorLock.ConfigurationReportV1Args command-specific arguments
local ConfigurationReportV1 = {}
setmetatable(ConfigurationReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 DOOR_LOCK_CONFIGURATION_REPORT object.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.ConfigurationReportV1Args command-specific arguments
function ConfigurationReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.DOOR_LOCK, DoorLock.CONFIGURATION_REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 DOOR_LOCK_CONFIGURATION_REPORT arguments.
---
--- @return string serialized payload
function ConfigurationReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.operation_type)
  writer:write_bits(4, args.inside_door_handles_state)
  writer:write_bits(4, args.outside_door_handles_state)
  writer:write_u8(args.lock_timeout_minutes)
  writer:write_u8(args.lock_timeout_seconds)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 DOOR_LOCK_CONFIGURATION_REPORT payload.
---
--- @return st.zwave.CommandClass.DoorLock.ConfigurationReportV1Args deserialized arguments
function ConfigurationReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("operation_type")
  reader:read_bits(4, "inside_door_handles_state")
  reader:read_bits(4, "outside_door_handles_state")
  reader:read_u8("lock_timeout_minutes")
  reader:read_u8("lock_timeout_seconds")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationReportV1
--- @return st.zwave.CommandClass.DoorLock.ConfigurationReportV1Args
function ConfigurationReportV1._defaults(self)
  local args = {}
  args.operation_type = self.args.operation_type or 0
  args.inside_door_handles_state = self.args.inside_door_handles_state or 0
  args.outside_door_handles_state = self.args.outside_door_handles_state or 0
  args.lock_timeout_minutes = self.args.lock_timeout_minutes or 0
  args.lock_timeout_seconds = self.args.lock_timeout_seconds or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationReportV1
--- @return st.zwave.CommandClass.DoorLock.ConfigurationReportV1Args
function ConfigurationReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationReportV1
function ConfigurationReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationReportV1
function ConfigurationReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.operation_type = function()
    return zw._reflect(
      DoorLock._reflect_operation_type,
      args.operation_type
    )
  end
end

--- @class st.zwave.CommandClass.DoorLock.OperationReportV3Args
--- @alias OperationReportV3Args st.zwave.CommandClass.DoorLock.OperationReportV3Args
--- @field public current_door_lock_mode integer see :lua:class:`DoorLock.door_lock_mode <st.zwave.CommandClass.DoorLock.door_lock_mode>`
--- @field public inside_door_handles_mode integer [0,15]
--- @field public outside_door_handles_mode integer [0,15]
--- @field public door_condition integer [0,255]
--- @field public lock_timeout_minutes integer [0,255]
--- @field public lock_timeout_seconds integer [0,255]
--- @field public target_door_lock_mode integer see :lua:class:`DoorLock.door_lock_mode <st.zwave.CommandClass.DoorLock.door_lock_mode>`
--- @field public duration number|string [0,7560] or "unknown" or "reserved"
local OperationReportV3Args = {}

--- @class st.zwave.CommandClass.DoorLock.OperationReportV3:st.zwave.Command
--- @alias OperationReportV3 st.zwave.CommandClass.DoorLock.OperationReportV3
---
--- v3 and forward-compatible v4 DOOR_LOCK_OPERATION_REPORT
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x03
--- @field public version number 3
--- @field public args st.zwave.CommandClass.DoorLock.OperationReportV3Args command-specific arguments
local OperationReportV3 = {}
setmetatable(OperationReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4 DOOR_LOCK_OPERATION_REPORT object.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.OperationReportV3Args command-specific arguments
function OperationReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.DOOR_LOCK, DoorLock.OPERATION_REPORT, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4 DOOR_LOCK_OPERATION_REPORT arguments.
---
--- @return string serialized payload
function OperationReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.current_door_lock_mode)
  writer:write_bits(4, args.inside_door_handles_mode)
  writer:write_bits(4, args.outside_door_handles_mode)
  writer:write_u8(args.door_condition)
  writer:write_u8(args.lock_timeout_minutes)
  writer:write_u8(args.lock_timeout_seconds)
  writer:write_u8(args.target_door_lock_mode)
  writer:write_actuator_duration_report(args.duration)
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4 DOOR_LOCK_OPERATION_REPORT payload.
---
--- @return st.zwave.CommandClass.DoorLock.OperationReportV3Args deserialized arguments
function OperationReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("current_door_lock_mode")
  reader:read_bits(4, "inside_door_handles_mode")
  reader:read_bits(4, "outside_door_handles_mode")
  reader:read_u8("door_condition")
  reader:read_u8("lock_timeout_minutes")
  reader:read_u8("lock_timeout_seconds")
  reader:read_u8("target_door_lock_mode")
  reader:read_actuator_duration_report("duration")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.OperationReportV3
--- @return st.zwave.CommandClass.DoorLock.OperationReportV3Args
function OperationReportV3._defaults(self)
  local args = {}
  args.current_door_lock_mode = self.args.current_door_lock_mode or 0
  args.inside_door_handles_mode = self.args.inside_door_handles_mode or 0
  args.outside_door_handles_mode = self.args.outside_door_handles_mode or 0
  args.door_condition = self.args.door_condition or 0
  args.lock_timeout_minutes = self.args.lock_timeout_minutes or 0
  args.lock_timeout_seconds = self.args.lock_timeout_seconds or 0
  args.target_door_lock_mode = self.args.target_door_lock_mode or 0
  args.duration = self.args.duration or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.OperationReportV3
--- @return st.zwave.CommandClass.DoorLock.OperationReportV3Args
function OperationReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.DoorLock.OperationReportV3
function OperationReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.DoorLock.OperationReportV3
function OperationReportV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.current_door_lock_mode = function()
    return zw._reflect(
      DoorLock._reflect_door_lock_mode,
      args.current_door_lock_mode
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.target_door_lock_mode = function()
    return zw._reflect(
      DoorLock._reflect_door_lock_mode,
      args.target_door_lock_mode
    )
  end
end

--- @class st.zwave.CommandClass.DoorLock.ConfigurationSetV4Args
--- @alias ConfigurationSetV4Args st.zwave.CommandClass.DoorLock.ConfigurationSetV4Args
--- @field public operation_type integer see :lua:class:`DoorLock.operation_type <st.zwave.CommandClass.DoorLock.operation_type>`
--- @field public inside_door_handles_state integer [0,15]
--- @field public outside_door_handles_state integer [0,15]
--- @field public lock_timeout_minutes integer [0,255]
--- @field public lock_timeout_seconds integer [0,255]
--- @field public auto_relock_time integer [0,65535]
--- @field public hold_and_release_time integer [0,65535]
--- @field public ta boolean
--- @field public btb boolean
local ConfigurationSetV4Args = {}

--- @class st.zwave.CommandClass.DoorLock.ConfigurationSetV4:st.zwave.Command
--- @alias ConfigurationSetV4 st.zwave.CommandClass.DoorLock.ConfigurationSetV4
---
--- v4 DOOR_LOCK_CONFIGURATION_SET
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x04
--- @field public version number 4
--- @field public args st.zwave.CommandClass.DoorLock.ConfigurationSetV4Args command-specific arguments
local ConfigurationSetV4 = {}
setmetatable(ConfigurationSetV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 DOOR_LOCK_CONFIGURATION_SET object.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.ConfigurationSetV4Args command-specific arguments
function ConfigurationSetV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.DOOR_LOCK, DoorLock.CONFIGURATION_SET, 4, args, ...)
end

--- Serialize v4 DOOR_LOCK_CONFIGURATION_SET arguments.
---
--- @return string serialized payload
function ConfigurationSetV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.operation_type)
  writer:write_bits(4, args.inside_door_handles_state)
  writer:write_bits(4, args.outside_door_handles_state)
  writer:write_u8(args.lock_timeout_minutes)
  writer:write_u8(args.lock_timeout_seconds)
  writer:write_be_u16(args.auto_relock_time)
  writer:write_be_u16(args.hold_and_release_time)
  writer:write_bool(args.ta)
  writer:write_bool(args.btb)
  writer:write_bits(6, 0) -- reserved1
  return writer.buf
end

--- Deserialize a v4 DOOR_LOCK_CONFIGURATION_SET payload.
---
--- @return st.zwave.CommandClass.DoorLock.ConfigurationSetV4Args deserialized arguments
function ConfigurationSetV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("operation_type")
  reader:read_bits(4, "inside_door_handles_state")
  reader:read_bits(4, "outside_door_handles_state")
  reader:read_u8("lock_timeout_minutes")
  reader:read_u8("lock_timeout_seconds")
  reader:read_be_u16("auto_relock_time")
  reader:read_be_u16("hold_and_release_time")
  reader:read_bool("ta")
  reader:read_bool("btb")
  reader:read_bits(6) -- reserved1
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationSetV4
--- @return st.zwave.CommandClass.DoorLock.ConfigurationSetV4Args
function ConfigurationSetV4._defaults(self)
  local args = {}
  args.operation_type = self.args.operation_type or 0
  args.inside_door_handles_state = self.args.inside_door_handles_state or 0
  args.outside_door_handles_state = self.args.outside_door_handles_state or 0
  args.lock_timeout_minutes = self.args.lock_timeout_minutes or 0
  args.lock_timeout_seconds = self.args.lock_timeout_seconds or 0
  args.auto_relock_time = self.args.auto_relock_time or 0
  args.hold_and_release_time = self.args.hold_and_release_time or 0
  args.ta = self.args.ta or false
  args.btb = self.args.btb or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationSetV4
--- @return st.zwave.CommandClass.DoorLock.ConfigurationSetV4Args
function ConfigurationSetV4._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationSetV4
function ConfigurationSetV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationSetV4
function ConfigurationSetV4._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.operation_type = function()
    return zw._reflect(
      DoorLock._reflect_operation_type,
      args.operation_type
    )
  end
end

--- @class st.zwave.CommandClass.DoorLock.ConfigurationReportV4Args
--- @alias ConfigurationReportV4Args st.zwave.CommandClass.DoorLock.ConfigurationReportV4Args
--- @field public operation_type integer see :lua:class:`DoorLock.operation_type <st.zwave.CommandClass.DoorLock.operation_type>`
--- @field public inside_door_handles_state integer [0,15]
--- @field public outside_door_handles_state integer [0,15]
--- @field public lock_timeout_minutes integer [0,255]
--- @field public lock_timeout_seconds integer [0,255]
--- @field public auto_relock_time integer [0,65535]
--- @field public hold_and_release_time integer [0,65535]
--- @field public ta boolean
--- @field public btb boolean
local ConfigurationReportV4Args = {}

--- @class st.zwave.CommandClass.DoorLock.ConfigurationReportV4:st.zwave.Command
--- @alias ConfigurationReportV4 st.zwave.CommandClass.DoorLock.ConfigurationReportV4
---
--- v4 DOOR_LOCK_CONFIGURATION_REPORT
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x06
--- @field public version number 4
--- @field public args st.zwave.CommandClass.DoorLock.ConfigurationReportV4Args command-specific arguments
local ConfigurationReportV4 = {}
setmetatable(ConfigurationReportV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 DOOR_LOCK_CONFIGURATION_REPORT object.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.ConfigurationReportV4Args command-specific arguments
function ConfigurationReportV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.DOOR_LOCK, DoorLock.CONFIGURATION_REPORT, 4, args, ...)
end

--- Serialize v4 DOOR_LOCK_CONFIGURATION_REPORT arguments.
---
--- @return string serialized payload
function ConfigurationReportV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.operation_type)
  writer:write_bits(4, args.inside_door_handles_state)
  writer:write_bits(4, args.outside_door_handles_state)
  writer:write_u8(args.lock_timeout_minutes)
  writer:write_u8(args.lock_timeout_seconds)
  writer:write_be_u16(args.auto_relock_time)
  writer:write_be_u16(args.hold_and_release_time)
  writer:write_bool(args.ta)
  writer:write_bool(args.btb)
  writer:write_bits(6, 0) -- reserved1
  return writer.buf
end

--- Deserialize a v4 DOOR_LOCK_CONFIGURATION_REPORT payload.
---
--- @return st.zwave.CommandClass.DoorLock.ConfigurationReportV4Args deserialized arguments
function ConfigurationReportV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("operation_type")
  reader:read_bits(4, "inside_door_handles_state")
  reader:read_bits(4, "outside_door_handles_state")
  reader:read_u8("lock_timeout_minutes")
  reader:read_u8("lock_timeout_seconds")
  reader:read_be_u16("auto_relock_time")
  reader:read_be_u16("hold_and_release_time")
  reader:read_bool("ta")
  reader:read_bool("btb")
  reader:read_bits(6) -- reserved1
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationReportV4
--- @return st.zwave.CommandClass.DoorLock.ConfigurationReportV4Args
function ConfigurationReportV4._defaults(self)
  local args = {}
  args.operation_type = self.args.operation_type or 0
  args.inside_door_handles_state = self.args.inside_door_handles_state or 0
  args.outside_door_handles_state = self.args.outside_door_handles_state or 0
  args.lock_timeout_minutes = self.args.lock_timeout_minutes or 0
  args.lock_timeout_seconds = self.args.lock_timeout_seconds or 0
  args.auto_relock_time = self.args.auto_relock_time or 0
  args.hold_and_release_time = self.args.hold_and_release_time or 0
  args.ta = self.args.ta or false
  args.btb = self.args.btb or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationReportV4
--- @return st.zwave.CommandClass.DoorLock.ConfigurationReportV4Args
function ConfigurationReportV4._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationReportV4
function ConfigurationReportV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.DoorLock.ConfigurationReportV4
function ConfigurationReportV4._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.operation_type = function()
    return zw._reflect(
      DoorLock._reflect_operation_type,
      args.operation_type
    )
  end
end

--- @class st.zwave.CommandClass.DoorLock.CapabilitiesGetV4Args
--- @alias CapabilitiesGetV4Args st.zwave.CommandClass.DoorLock.CapabilitiesGetV4Args
local CapabilitiesGetV4Args = {}

--- @class st.zwave.CommandClass.DoorLock.CapabilitiesGetV4:st.zwave.Command
--- @alias CapabilitiesGetV4 st.zwave.CommandClass.DoorLock.CapabilitiesGetV4
---
--- v4 DOOR_LOCK_CAPABILITIES_GET
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x07
--- @field public version number 4
--- @field public args st.zwave.CommandClass.DoorLock.CapabilitiesGetV4Args command-specific arguments
local CapabilitiesGetV4 = {}
setmetatable(CapabilitiesGetV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 DOOR_LOCK_CAPABILITIES_GET object.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.CapabilitiesGetV4Args command-specific arguments
function CapabilitiesGetV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.DOOR_LOCK, DoorLock.CAPABILITIES_GET, 4, args, ...)
end

--- Serialize v4 DOOR_LOCK_CAPABILITIES_GET arguments.
---
--- @return string serialized payload
function CapabilitiesGetV4:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v4 DOOR_LOCK_CAPABILITIES_GET payload.
---
--- @return st.zwave.CommandClass.DoorLock.CapabilitiesGetV4Args deserialized arguments
function CapabilitiesGetV4:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.CapabilitiesGetV4
--- @return st.zwave.CommandClass.DoorLock.CapabilitiesGetV4Args
function CapabilitiesGetV4._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.CapabilitiesGetV4
--- @return st.zwave.CommandClass.DoorLock.CapabilitiesGetV4Args
function CapabilitiesGetV4._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.DoorLock.CapabilitiesGetV4
function CapabilitiesGetV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.DoorLock.CapabilitiesGetV4
function CapabilitiesGetV4._set_reflectors(self)
end

--- @class st.zwave.CommandClass.DoorLock.CapabilitiesReportV4Args
--- @alias CapabilitiesReportV4Args st.zwave.CommandClass.DoorLock.CapabilitiesReportV4Args
--- @field public supported_operation_type_bit_mask string
--- @field public supported_door_lock_mode string
--- @field public supported_inside_handle_modes_bitmask integer [0,15]
--- @field public supported_outside_handle_modes_bitmask integer [0,15]
--- @field public supported_door_components integer [0,255]
--- @field public btbs boolean
--- @field public tas boolean
--- @field public hrs boolean
--- @field public ars boolean
local CapabilitiesReportV4Args = {}

--- @class st.zwave.CommandClass.DoorLock.CapabilitiesReportV4:st.zwave.Command
--- @alias CapabilitiesReportV4 st.zwave.CommandClass.DoorLock.CapabilitiesReportV4
---
--- v4 DOOR_LOCK_CAPABILITIES_REPORT
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x08
--- @field public version number 4
--- @field public args st.zwave.CommandClass.DoorLock.CapabilitiesReportV4Args command-specific arguments
local CapabilitiesReportV4 = {}
setmetatable(CapabilitiesReportV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 DOOR_LOCK_CAPABILITIES_REPORT object.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.CapabilitiesReportV4Args command-specific arguments
function CapabilitiesReportV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.DOOR_LOCK, DoorLock.CAPABILITIES_REPORT, 4, args, ...)
end

--- Serialize v4 DOOR_LOCK_CAPABILITIES_REPORT arguments.
---
--- @return string serialized payload
function CapabilitiesReportV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, writer.length(args.supported_operation_type_bit_mask))
  writer:write_bits(3, 0) -- reserved
  writer:write_bytes(args.supported_operation_type_bit_mask)
  writer:write_u8(writer.length(args.supported_door_lock_mode))
  writer:write_bytes(args.supported_door_lock_mode)
  writer:write_bits(4, args.supported_inside_handle_modes_bitmask)
  writer:write_bits(4, args.supported_outside_handle_modes_bitmask)
  writer:write_u8(args.supported_door_components)
  writer:write_bool(args.btbs)
  writer:write_bool(args.tas)
  writer:write_bool(args.hrs)
  writer:write_bool(args.ars)
  writer:write_bits(4, 0) -- reserved
  return writer.buf
end

--- Deserialize a v4 DOOR_LOCK_CAPABILITIES_REPORT payload.
---
--- @return st.zwave.CommandClass.DoorLock.CapabilitiesReportV4Args deserialized arguments
function CapabilitiesReportV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "supported_operation_type_bit_mask_length")
  reader:read_bits(3) -- reserved
  reader:read_bytes(reader.parsed.supported_operation_type_bit_mask_length, "supported_operation_type_bit_mask")
  reader:read_u8("supported_door_lock_mode_list_length")
  reader:read_bytes(reader.parsed.supported_door_lock_mode_list_length, "supported_door_lock_mode")
  reader:read_bits(4, "supported_inside_handle_modes_bitmask")
  reader:read_bits(4, "supported_outside_handle_modes_bitmask")
  reader:read_u8("supported_door_components")
  reader:read_bool("btbs")
  reader:read_bool("tas")
  reader:read_bool("hrs")
  reader:read_bool("ars")
  reader:read_bits(4) -- reserved
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.CapabilitiesReportV4
--- @return st.zwave.CommandClass.DoorLock.CapabilitiesReportV4Args
function CapabilitiesReportV4._defaults(self)
  local args = {}
  args.supported_operation_type_bit_mask = self.args.supported_operation_type_bit_mask or ""
  args.supported_door_lock_mode = self.args.supported_door_lock_mode or ""
  args.supported_inside_handle_modes_bitmask = self.args.supported_inside_handle_modes_bitmask or 0
  args.supported_outside_handle_modes_bitmask = self.args.supported_outside_handle_modes_bitmask or 0
  args.supported_door_components = self.args.supported_door_components or 0
  args.btbs = self.args.btbs or false
  args.tas = self.args.tas or false
  args.hrs = self.args.hrs or false
  args.ars = self.args.ars or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.DoorLock.CapabilitiesReportV4
--- @return st.zwave.CommandClass.DoorLock.CapabilitiesReportV4Args
function CapabilitiesReportV4._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.DoorLock.CapabilitiesReportV4
function CapabilitiesReportV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.DoorLock.CapabilitiesReportV4
function CapabilitiesReportV4._set_reflectors(self)
end

--- @class st.zwave.CommandClass.DoorLock.OperationSet
--- @alias _OperationSet st.zwave.CommandClass.DoorLock.OperationSet
---
--- Dynamically versioned DOOR_LOCK_OPERATION_SET
---
--- Supported versions: 1,2,3,4; unique base versions: 1
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.DoorLock.OperationSetV1Args
local _OperationSet = {}
setmetatable(_OperationSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a DOOR_LOCK_OPERATION_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.OperationSetV1Args command-specific arguments
--- @return st.zwave.CommandClass.DoorLock.OperationSet
function _OperationSet:construct(module, args, ...)
  return zw.Command._construct(module, DoorLock.OPERATION_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.DoorLock.OperationGet
--- @alias _OperationGet st.zwave.CommandClass.DoorLock.OperationGet
---
--- Dynamically versioned DOOR_LOCK_OPERATION_GET
---
--- Supported versions: 1,2,3,4; unique base versions: 1
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.DoorLock.OperationGetV1Args
local _OperationGet = {}
setmetatable(_OperationGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a DOOR_LOCK_OPERATION_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.OperationGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.DoorLock.OperationGet
function _OperationGet:construct(module, args, ...)
  return zw.Command._construct(module, DoorLock.OPERATION_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.DoorLock.OperationReport
--- @alias _OperationReport st.zwave.CommandClass.DoorLock.OperationReport
---
--- Dynamically versioned DOOR_LOCK_OPERATION_REPORT
---
--- Supported versions: 1,2,3,4; unique base versions: 1,3
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x03
--- @field public version number 1,3
--- @field public args st.zwave.CommandClass.DoorLock.OperationReportV1Args|st.zwave.CommandClass.DoorLock.OperationReportV3Args
local _OperationReport = {}
setmetatable(_OperationReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a DOOR_LOCK_OPERATION_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.OperationReportV1Args|st.zwave.CommandClass.DoorLock.OperationReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.DoorLock.OperationReport
function _OperationReport:construct(module, args, ...)
  return zw.Command._construct(module, DoorLock.OPERATION_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.DoorLock.ConfigurationSet
--- @alias _ConfigurationSet st.zwave.CommandClass.DoorLock.ConfigurationSet
---
--- Dynamically versioned DOOR_LOCK_CONFIGURATION_SET
---
--- Supported versions: 1,2,3,4; unique base versions: 1,4
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x04
--- @field public version number 1,4
--- @field public args st.zwave.CommandClass.DoorLock.ConfigurationSetV1Args|st.zwave.CommandClass.DoorLock.ConfigurationSetV4Args
local _ConfigurationSet = {}
setmetatable(_ConfigurationSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a DOOR_LOCK_CONFIGURATION_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.ConfigurationSetV1Args|st.zwave.CommandClass.DoorLock.ConfigurationSetV4Args command-specific arguments
--- @return st.zwave.CommandClass.DoorLock.ConfigurationSet
function _ConfigurationSet:construct(module, args, ...)
  return zw.Command._construct(module, DoorLock.CONFIGURATION_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.DoorLock.ConfigurationGet
--- @alias _ConfigurationGet st.zwave.CommandClass.DoorLock.ConfigurationGet
---
--- Dynamically versioned DOOR_LOCK_CONFIGURATION_GET
---
--- Supported versions: 1,2,3,4; unique base versions: 1
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.DoorLock.ConfigurationGetV1Args
local _ConfigurationGet = {}
setmetatable(_ConfigurationGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a DOOR_LOCK_CONFIGURATION_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.ConfigurationGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.DoorLock.ConfigurationGet
function _ConfigurationGet:construct(module, args, ...)
  return zw.Command._construct(module, DoorLock.CONFIGURATION_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.DoorLock.ConfigurationReport
--- @alias _ConfigurationReport st.zwave.CommandClass.DoorLock.ConfigurationReport
---
--- Dynamically versioned DOOR_LOCK_CONFIGURATION_REPORT
---
--- Supported versions: 1,2,3,4; unique base versions: 1,4
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x06
--- @field public version number 1,4
--- @field public args st.zwave.CommandClass.DoorLock.ConfigurationReportV1Args|st.zwave.CommandClass.DoorLock.ConfigurationReportV4Args
local _ConfigurationReport = {}
setmetatable(_ConfigurationReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a DOOR_LOCK_CONFIGURATION_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.ConfigurationReportV1Args|st.zwave.CommandClass.DoorLock.ConfigurationReportV4Args command-specific arguments
--- @return st.zwave.CommandClass.DoorLock.ConfigurationReport
function _ConfigurationReport:construct(module, args, ...)
  return zw.Command._construct(module, DoorLock.CONFIGURATION_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.DoorLock.CapabilitiesGet
--- @alias _CapabilitiesGet st.zwave.CommandClass.DoorLock.CapabilitiesGet
---
--- Dynamically versioned DOOR_LOCK_CAPABILITIES_GET
---
--- Supported versions: 4; unique base versions: 4
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x07
--- @field public version number 4
--- @field public args st.zwave.CommandClass.DoorLock.CapabilitiesGetV4Args
local _CapabilitiesGet = {}
setmetatable(_CapabilitiesGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a DOOR_LOCK_CAPABILITIES_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.CapabilitiesGetV4Args command-specific arguments
--- @return st.zwave.CommandClass.DoorLock.CapabilitiesGet
function _CapabilitiesGet:construct(module, args, ...)
  return zw.Command._construct(module, DoorLock.CAPABILITIES_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.DoorLock.CapabilitiesReport
--- @alias _CapabilitiesReport st.zwave.CommandClass.DoorLock.CapabilitiesReport
---
--- Dynamically versioned DOOR_LOCK_CAPABILITIES_REPORT
---
--- Supported versions: 4; unique base versions: 4
---
--- @field public cmd_class number 0x62
--- @field public cmd_id number 0x08
--- @field public version number 4
--- @field public args st.zwave.CommandClass.DoorLock.CapabilitiesReportV4Args
local _CapabilitiesReport = {}
setmetatable(_CapabilitiesReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a DOOR_LOCK_CAPABILITIES_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.DoorLock command class module instance
--- @param args st.zwave.CommandClass.DoorLock.CapabilitiesReportV4Args command-specific arguments
--- @return st.zwave.CommandClass.DoorLock.CapabilitiesReport
function _CapabilitiesReport:construct(module, args, ...)
  return zw.Command._construct(module, DoorLock.CAPABILITIES_REPORT, module._serialization_version, args, ...)
end

DoorLock.OperationSetV1 = OperationSetV1
DoorLock.OperationGetV1 = OperationGetV1
DoorLock.OperationReportV1 = OperationReportV1
DoorLock.ConfigurationSetV1 = ConfigurationSetV1
DoorLock.ConfigurationGetV1 = ConfigurationGetV1
DoorLock.ConfigurationReportV1 = ConfigurationReportV1
DoorLock.OperationReportV3 = OperationReportV3
DoorLock.ConfigurationSetV4 = ConfigurationSetV4
DoorLock.ConfigurationReportV4 = ConfigurationReportV4
DoorLock.CapabilitiesGetV4 = CapabilitiesGetV4
DoorLock.CapabilitiesReportV4 = CapabilitiesReportV4
DoorLock.OperationSet = _OperationSet
DoorLock.OperationGet = _OperationGet
DoorLock.OperationReport = _OperationReport
DoorLock.ConfigurationSet = _ConfigurationSet
DoorLock.ConfigurationGet = _ConfigurationGet
DoorLock.ConfigurationReport = _ConfigurationReport
DoorLock.CapabilitiesGet = _CapabilitiesGet
DoorLock.CapabilitiesReport = _CapabilitiesReport

DoorLock._lut = {
  [0] = { -- dynamically versioned constructors
    [DoorLock.OPERATION_SET] = DoorLock.OperationSet,
    [DoorLock.OPERATION_GET] = DoorLock.OperationGet,
    [DoorLock.OPERATION_REPORT] = DoorLock.OperationReport,
    [DoorLock.CONFIGURATION_SET] = DoorLock.ConfigurationSet,
    [DoorLock.CONFIGURATION_GET] = DoorLock.ConfigurationGet,
    [DoorLock.CONFIGURATION_REPORT] = DoorLock.ConfigurationReport,
    [DoorLock.CAPABILITIES_GET] = DoorLock.CapabilitiesGet,
    [DoorLock.CAPABILITIES_REPORT] = DoorLock.CapabilitiesReport
  },
  [1] = { -- version 1
    [DoorLock.OPERATION_SET] = DoorLock.OperationSetV1,
    [DoorLock.OPERATION_GET] = DoorLock.OperationGetV1,
    [DoorLock.OPERATION_REPORT] = DoorLock.OperationReportV1,
    [DoorLock.CONFIGURATION_SET] = DoorLock.ConfigurationSetV1,
    [DoorLock.CONFIGURATION_GET] = DoorLock.ConfigurationGetV1,
    [DoorLock.CONFIGURATION_REPORT] = DoorLock.ConfigurationReportV1
  },
  [2] = { -- version 2
    [DoorLock.OPERATION_SET] = DoorLock.OperationSetV1,
    [DoorLock.OPERATION_GET] = DoorLock.OperationGetV1,
    [DoorLock.OPERATION_REPORT] = DoorLock.OperationReportV1,
    [DoorLock.CONFIGURATION_SET] = DoorLock.ConfigurationSetV1,
    [DoorLock.CONFIGURATION_GET] = DoorLock.ConfigurationGetV1,
    [DoorLock.CONFIGURATION_REPORT] = DoorLock.ConfigurationReportV1
  },
  [3] = { -- version 3
    [DoorLock.OPERATION_SET] = DoorLock.OperationSetV1,
    [DoorLock.OPERATION_GET] = DoorLock.OperationGetV1,
    [DoorLock.OPERATION_REPORT] = DoorLock.OperationReportV3,
    [DoorLock.CONFIGURATION_SET] = DoorLock.ConfigurationSetV1,
    [DoorLock.CONFIGURATION_GET] = DoorLock.ConfigurationGetV1,
    [DoorLock.CONFIGURATION_REPORT] = DoorLock.ConfigurationReportV1
  },
  [4] = { -- version 4
    [DoorLock.OPERATION_SET] = DoorLock.OperationSetV1,
    [DoorLock.OPERATION_GET] = DoorLock.OperationGetV1,
    [DoorLock.OPERATION_REPORT] = DoorLock.OperationReportV3,
    [DoorLock.CONFIGURATION_SET] = DoorLock.ConfigurationSetV4,
    [DoorLock.CONFIGURATION_GET] = DoorLock.ConfigurationGetV1,
    [DoorLock.CONFIGURATION_REPORT] = DoorLock.ConfigurationReportV4,
    [DoorLock.CAPABILITIES_GET] = DoorLock.CapabilitiesGetV4,
    [DoorLock.CAPABILITIES_REPORT] = DoorLock.CapabilitiesReportV4
  }
}
--- @class st.zwave.CommandClass.DoorLock.door_lock_mode
--- @alias door_lock_mode st.zwave.CommandClass.DoorLock.door_lock_mode
--- @field public DOOR_UNSECURED number 0x00
--- @field public DOOR_UNSECURED_WITH_TIMEOUT number 0x01
--- @field public DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES number 0x10
--- @field public DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT number 0x11
--- @field public DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES number 0x20
--- @field public DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT number 0x21
--- @field public DOOR_LOCK_STATE_UNKNOWN number 0xFE
--- @field public DOOR_SECURED number 0xFF
local door_lock_mode = {
  DOOR_UNSECURED = 0x00,
  DOOR_UNSECURED_WITH_TIMEOUT = 0x01,
  DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES = 0x10,
  DOOR_UNSECURED_FOR_INSIDE_DOOR_HANDLES_WITH_TIMEOUT = 0x11,
  DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES = 0x20,
  DOOR_UNSECURED_FOR_OUTSIDE_DOOR_HANDLES_WITH_TIMEOUT = 0x21,
  DOOR_LOCK_STATE_UNKNOWN = 0xFE,
  DOOR_SECURED = 0xFF
}
DoorLock.door_lock_mode = door_lock_mode
DoorLock._reflect_door_lock_mode = zw._reflection_builder(DoorLock.door_lock_mode)

--- @class st.zwave.CommandClass.DoorLock.operation_type
--- @alias operation_type st.zwave.CommandClass.DoorLock.operation_type
--- @field public CONSTANT_OPERATION number 0x01
--- @field public TIMED_OPERATION number 0x02
local operation_type = {
  CONSTANT_OPERATION = 0x01,
  TIMED_OPERATION = 0x02
}
DoorLock.operation_type = operation_type
DoorLock._reflect_operation_type = zw._reflection_builder(DoorLock.operation_type)


return DoorLock
