-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.EnergyProduction
--- @alias EnergyProduction st.zwave.CommandClass.EnergyProduction
---
--- Supported versions: 1
---
--- @field public GET number 0x02 - ENERGY_PRODUCTION_GET command id
--- @field public REPORT number 0x03 - ENERGY_PRODUCTION_REPORT command id
local EnergyProduction = {}
EnergyProduction.GET = 0x02
EnergyProduction.REPORT = 0x03

EnergyProduction._commands = {
  [EnergyProduction.GET] = "GET",
  [EnergyProduction.REPORT] = "REPORT"
}

--- Instantiate a versioned instance of the EnergyProduction Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.EnergyProduction versioned command class instance
function EnergyProduction:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.ENERGY_PRODUCTION][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(EnergyProduction, {
  __call = EnergyProduction.init
})

EnergyProduction._serialization_version = nil
EnergyProduction._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.ENERGY_PRODUCTION] = {
  [1] = true
}

--- @class st.zwave.CommandClass.EnergyProduction.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.EnergyProduction.GetV1Args
--- @field public parameter_number integer see :lua:class:`EnergyProduction.parameter_number <st.zwave.CommandClass.EnergyProduction.parameter_number>`
local GetV1Args = {}

--- @class st.zwave.CommandClass.EnergyProduction.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.EnergyProduction.GetV1
---
--- v1 ENERGY_PRODUCTION_GET
---
--- @field public cmd_class number 0x90
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EnergyProduction.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 ENERGY_PRODUCTION_GET object.
---
--- @param module st.zwave.CommandClass.EnergyProduction command class module instance
--- @param args st.zwave.CommandClass.EnergyProduction.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ENERGY_PRODUCTION, EnergyProduction.GET, 1, args, ...)
end

--- Serialize v1 ENERGY_PRODUCTION_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.parameter_number)
  return writer.buf
end

--- Deserialize a v1 ENERGY_PRODUCTION_GET payload.
---
--- @return st.zwave.CommandClass.EnergyProduction.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("parameter_number")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.EnergyProduction.GetV1
--- @return st.zwave.CommandClass.EnergyProduction.GetV1Args
function GetV1._defaults(self)
  local args = {}
  args.parameter_number = self.args.parameter_number or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.EnergyProduction.GetV1
--- @return st.zwave.CommandClass.EnergyProduction.GetV1Args
function GetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.EnergyProduction.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.EnergyProduction.GetV1
function GetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.parameter_number = function()
    return zw._reflect(
      EnergyProduction._reflect_parameter_number,
      args.parameter_number
    )
  end
end

--- @class st.zwave.CommandClass.EnergyProduction.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.EnergyProduction.ReportV1Args
--- @field public parameter_number integer see :lua:class:`EnergyProduction.parameter_number <st.zwave.CommandClass.EnergyProduction.parameter_number>`
--- @field public size integer [0,7]
--- @field public scale integer see :lua:class:`EnergyProduction.scale <st.zwave.CommandClass.EnergyProduction.scale>`
--- @field public precision integer [0,7]
--- @field public value number [-2147483648,2147483647]
local ReportV1Args = {}

--- @class st.zwave.CommandClass.EnergyProduction.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.EnergyProduction.ReportV1
---
--- v1 ENERGY_PRODUCTION_REPORT
---
--- @field public cmd_class number 0x90
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EnergyProduction.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 ENERGY_PRODUCTION_REPORT object.
---
--- @param module st.zwave.CommandClass.EnergyProduction command class module instance
--- @param args st.zwave.CommandClass.EnergyProduction.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ENERGY_PRODUCTION, EnergyProduction.REPORT, 1, args, ...)
end

--- Serialize v1 ENERGY_PRODUCTION_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.parameter_number)
  writer:write_bits(3, args.size or writer.size(args.value))
  writer:write_bits(2, args.scale)
  writer:write_bits(3, args.precision or writer.precision(args.value))
  writer:write_vfloat(args.size or writer.size(args.value), args.precision or writer.precision(args.value), args.value)
  return writer.buf
end

--- Deserialize a v1 ENERGY_PRODUCTION_REPORT payload.
---
--- @return st.zwave.CommandClass.EnergyProduction.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("parameter_number")
  reader:read_bits(3, "size")
  reader:read_bits(2, "scale")
  reader:read_bits(3, "precision")
  reader:read_vfloat(reader.parsed.size, reader.parsed.precision, "value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.EnergyProduction.ReportV1
--- @return st.zwave.CommandClass.EnergyProduction.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.parameter_number = self.args.parameter_number or 0
  args.scale = self.args.scale or 0
  args.value = self.args.value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.EnergyProduction.ReportV1
--- @return st.zwave.CommandClass.EnergyProduction.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.size = args.size or writer.size(args.value)
  args.precision = args.precision or writer.precision(args.value)
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.EnergyProduction.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.EnergyProduction.ReportV1
function ReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.parameter_number = function()
    return zw._reflect(
      EnergyProduction._reflect_parameter_number,
      args.parameter_number
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.scale = function()
    return zw._reflect(
      EnergyProduction._reflect_scale,
      args.parameter_number,
      args.scale
    )
  end
end

--- @class st.zwave.CommandClass.EnergyProduction.Get
--- @alias _Get st.zwave.CommandClass.EnergyProduction.Get
---
--- Dynamically versioned ENERGY_PRODUCTION_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x90
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EnergyProduction.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ENERGY_PRODUCTION_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.EnergyProduction command class module instance
--- @param args st.zwave.CommandClass.EnergyProduction.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.EnergyProduction.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, EnergyProduction.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.EnergyProduction.Report
--- @alias _Report st.zwave.CommandClass.EnergyProduction.Report
---
--- Dynamically versioned ENERGY_PRODUCTION_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x90
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EnergyProduction.ReportV1Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ENERGY_PRODUCTION_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.EnergyProduction command class module instance
--- @param args st.zwave.CommandClass.EnergyProduction.ReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.EnergyProduction.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, EnergyProduction.REPORT, module._serialization_version, args, ...)
end

EnergyProduction.GetV1 = GetV1
EnergyProduction.ReportV1 = ReportV1
EnergyProduction.Get = _Get
EnergyProduction.Report = _Report

EnergyProduction._lut = {
  [0] = { -- dynamically versioned constructors
    [EnergyProduction.GET] = EnergyProduction.Get,
    [EnergyProduction.REPORT] = EnergyProduction.Report
  },
  [1] = { -- version 1
    [EnergyProduction.GET] = EnergyProduction.GetV1,
    [EnergyProduction.REPORT] = EnergyProduction.ReportV1
  }
}
--- @class st.zwave.CommandClass.EnergyProduction.parameter_number
--- @alias parameter_number st.zwave.CommandClass.EnergyProduction.parameter_number
--- @field public INSTANT_ENERGY_PRODUCTION number 0x00
--- @field public TOTAL_ENERGY_PRODUCTION number 0x01
--- @field public ENERGY_PRODUCTION_TODAY number 0x02
--- @field public TOTAL_PRODUCTION_TIME number 0x03
local parameter_number = {
  INSTANT_ENERGY_PRODUCTION = 0x00,
  TOTAL_ENERGY_PRODUCTION = 0x01,
  ENERGY_PRODUCTION_TODAY = 0x02,
  TOTAL_PRODUCTION_TIME = 0x03
}
EnergyProduction.parameter_number = parameter_number
EnergyProduction._reflect_parameter_number = zw._reflection_builder(EnergyProduction.parameter_number)

--- @class st.zwave.CommandClass.EnergyProduction.scale_energy_production_today
--- @alias scale_energy_production_today st.zwave.CommandClass.EnergyProduction.scale_energy_production_today
--- @field public WATT_HOURS number 0x00
local scale_energy_production_today = {}

--- @class st.zwave.CommandClass.EnergyProduction.scale_instant_energy_production
--- @alias scale_instant_energy_production st.zwave.CommandClass.EnergyProduction.scale_instant_energy_production
--- @field public WATTS number 0x00
local scale_instant_energy_production = {}

--- @class st.zwave.CommandClass.EnergyProduction.scale_total_energy_production
--- @alias scale_total_energy_production st.zwave.CommandClass.EnergyProduction.scale_total_energy_production
--- @field public WATT_HOURS number 0x00
local scale_total_energy_production = {}

--- @class st.zwave.CommandClass.EnergyProduction.scale_total_production_time
--- @alias scale_total_production_time st.zwave.CommandClass.EnergyProduction.scale_total_production_time
--- @field public SECONDS number 0x00
--- @field public HOURS number 0x01
local scale_total_production_time = {}

--- @class st.zwave.CommandClass.EnergyProduction.scale
--- @alias scale st.zwave.CommandClass.EnergyProduction.scale
--- @field public energy_production_today st.zwave.CommandClass.scale_energy_production_today
--- @field public instant_energy_production st.zwave.CommandClass.scale_instant_energy_production
--- @field public total_energy_production st.zwave.CommandClass.scale_total_energy_production
--- @field public total_production_time st.zwave.CommandClass.scale_total_production_time
local scale = {
  energy_production_today = {
    WATT_HOURS = 0x00
  },
  instant_energy_production = {
    WATTS = 0x00
  },
  total_energy_production = {
    WATT_HOURS = 0x00
  },
  total_production_time = {
    SECONDS = 0x00,
    HOURS = 0x01
  }
}
EnergyProduction.scale = scale
EnergyProduction._reflect_scale = zw._reflection_builder(EnergyProduction.scale, EnergyProduction.parameter_number)


return EnergyProduction
