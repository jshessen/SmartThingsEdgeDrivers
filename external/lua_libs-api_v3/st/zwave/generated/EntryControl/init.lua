-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.EntryControl
--- @alias EntryControl st.zwave.CommandClass.EntryControl
---
--- Supported versions: 1
---
--- @field public NOTIFICATION number 0x01 - ENTRY_CONTROL_NOTIFICATION command id
--- @field public KEY_SUPPORTED_GET number 0x02 - ENTRY_CONTROL_KEY_SUPPORTED_GET command id
--- @field public KEY_SUPPORTED_REPORT number 0x03 - ENTRY_CONTROL_KEY_SUPPORTED_REPORT command id
--- @field public EVENT_SUPPORTED_GET number 0x04 - ENTRY_CONTROL_EVENT_SUPPORTED_GET command id
--- @field public EVENT_SUPPORTED_REPORT number 0x05 - ENTRY_CONTROL_EVENT_SUPPORTED_REPORT command id
--- @field public CONFIGURATION_SET number 0x06 - ENTRY_CONTROL_CONFIGURATION_SET command id
--- @field public CONFIGURATION_GET number 0x07 - ENTRY_CONTROL_CONFIGURATION_GET command id
--- @field public CONFIGURATION_REPORT number 0x08 - ENTRY_CONTROL_CONFIGURATION_REPORT command id
local EntryControl = {}
EntryControl.NOTIFICATION = 0x01
EntryControl.KEY_SUPPORTED_GET = 0x02
EntryControl.KEY_SUPPORTED_REPORT = 0x03
EntryControl.EVENT_SUPPORTED_GET = 0x04
EntryControl.EVENT_SUPPORTED_REPORT = 0x05
EntryControl.CONFIGURATION_SET = 0x06
EntryControl.CONFIGURATION_GET = 0x07
EntryControl.CONFIGURATION_REPORT = 0x08

EntryControl._commands = {
  [EntryControl.NOTIFICATION] = "NOTIFICATION",
  [EntryControl.KEY_SUPPORTED_GET] = "KEY_SUPPORTED_GET",
  [EntryControl.KEY_SUPPORTED_REPORT] = "KEY_SUPPORTED_REPORT",
  [EntryControl.EVENT_SUPPORTED_GET] = "EVENT_SUPPORTED_GET",
  [EntryControl.EVENT_SUPPORTED_REPORT] = "EVENT_SUPPORTED_REPORT",
  [EntryControl.CONFIGURATION_SET] = "CONFIGURATION_SET",
  [EntryControl.CONFIGURATION_GET] = "CONFIGURATION_GET",
  [EntryControl.CONFIGURATION_REPORT] = "CONFIGURATION_REPORT"
}

--- Instantiate a versioned instance of the EntryControl Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.EntryControl versioned command class instance
function EntryControl:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.ENTRY_CONTROL][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(EntryControl, {
  __call = EntryControl.init
})

EntryControl._serialization_version = nil
EntryControl._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.ENTRY_CONTROL] = {
  [1] = true
}

--- @class st.zwave.CommandClass.EntryControl.NotificationV1Args
--- @alias NotificationV1Args st.zwave.CommandClass.EntryControl.NotificationV1Args
--- @field public sequence_number integer [0,255]
--- @field public data_type integer see :lua:class:`EntryControl.data_type <st.zwave.CommandClass.EntryControl.data_type>`
--- @field public event_type integer see :lua:class:`EntryControl.event_type <st.zwave.CommandClass.EntryControl.event_type>`
--- @field public event_data string
local NotificationV1Args = {}

--- @class st.zwave.CommandClass.EntryControl.NotificationV1:st.zwave.Command
--- @alias NotificationV1 st.zwave.CommandClass.EntryControl.NotificationV1
---
--- v1 ENTRY_CONTROL_NOTIFICATION
---
--- @field public cmd_class number 0x6F
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EntryControl.NotificationV1Args command-specific arguments
local NotificationV1 = {}
setmetatable(NotificationV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 ENTRY_CONTROL_NOTIFICATION object.
---
--- @param module st.zwave.CommandClass.EntryControl command class module instance
--- @param args st.zwave.CommandClass.EntryControl.NotificationV1Args command-specific arguments
function NotificationV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ENTRY_CONTROL, EntryControl.NOTIFICATION, 1, args, ...)
end

--- Serialize v1 ENTRY_CONTROL_NOTIFICATION arguments.
---
--- @return string serialized payload
function NotificationV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.sequence_number)
  writer:write_bits(2, args.data_type)
  writer:write_bits(6, 0) -- reserved
  writer:write_u8(args.event_type)
  writer:write_u8(writer.length(args.event_data))
  writer:write_bytes(args.event_data)
  return writer.buf
end

--- Deserialize a v1 ENTRY_CONTROL_NOTIFICATION payload.
---
--- @return st.zwave.CommandClass.EntryControl.NotificationV1Args deserialized arguments
function NotificationV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("sequence_number")
  reader:read_bits(2, "data_type")
  reader:read_bits(6) -- reserved
  reader:read_u8("event_type")
  reader:read_u8("event_data_length")
  reader:read_bytes(reader.parsed.event_data_length, "event_data")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.EntryControl.NotificationV1
--- @return st.zwave.CommandClass.EntryControl.NotificationV1Args
function NotificationV1._defaults(self)
  local args = {}
  args.sequence_number = self.args.sequence_number or 0
  args.data_type = self.args.data_type or 0
  args.event_type = self.args.event_type or 0
  args.event_data = self.args.event_data or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.EntryControl.NotificationV1
--- @return st.zwave.CommandClass.EntryControl.NotificationV1Args
function NotificationV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.EntryControl.NotificationV1
function NotificationV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.EntryControl.NotificationV1
function NotificationV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.data_type = function()
    return zw._reflect(
      EntryControl._reflect_data_type,
      args.data_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.event_type = function()
    return zw._reflect(
      EntryControl._reflect_event_type,
      args.event_type
    )
  end
end

--- @class st.zwave.CommandClass.EntryControl.KeySupportedGetV1Args
--- @alias KeySupportedGetV1Args st.zwave.CommandClass.EntryControl.KeySupportedGetV1Args
local KeySupportedGetV1Args = {}

--- @class st.zwave.CommandClass.EntryControl.KeySupportedGetV1:st.zwave.Command
--- @alias KeySupportedGetV1 st.zwave.CommandClass.EntryControl.KeySupportedGetV1
---
--- v1 ENTRY_CONTROL_KEY_SUPPORTED_GET
---
--- @field public cmd_class number 0x6F
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EntryControl.KeySupportedGetV1Args command-specific arguments
local KeySupportedGetV1 = {}
setmetatable(KeySupportedGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 ENTRY_CONTROL_KEY_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.EntryControl command class module instance
--- @param args st.zwave.CommandClass.EntryControl.KeySupportedGetV1Args command-specific arguments
function KeySupportedGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ENTRY_CONTROL, EntryControl.KEY_SUPPORTED_GET, 1, args, ...)
end

--- Serialize v1 ENTRY_CONTROL_KEY_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function KeySupportedGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 ENTRY_CONTROL_KEY_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.EntryControl.KeySupportedGetV1Args deserialized arguments
function KeySupportedGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.EntryControl.KeySupportedGetV1
--- @return st.zwave.CommandClass.EntryControl.KeySupportedGetV1Args
function KeySupportedGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.EntryControl.KeySupportedGetV1
--- @return st.zwave.CommandClass.EntryControl.KeySupportedGetV1Args
function KeySupportedGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.EntryControl.KeySupportedGetV1
function KeySupportedGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.EntryControl.KeySupportedGetV1
function KeySupportedGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.EntryControl.KeySupportedReportV1Args
--- @alias KeySupportedReportV1Args st.zwave.CommandClass.EntryControl.KeySupportedReportV1Args
--- @field public key_supported_bit_mask string
local KeySupportedReportV1Args = {}

--- @class st.zwave.CommandClass.EntryControl.KeySupportedReportV1:st.zwave.Command
--- @alias KeySupportedReportV1 st.zwave.CommandClass.EntryControl.KeySupportedReportV1
---
--- v1 ENTRY_CONTROL_KEY_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x6F
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EntryControl.KeySupportedReportV1Args command-specific arguments
local KeySupportedReportV1 = {}
setmetatable(KeySupportedReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 ENTRY_CONTROL_KEY_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.EntryControl command class module instance
--- @param args st.zwave.CommandClass.EntryControl.KeySupportedReportV1Args command-specific arguments
function KeySupportedReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ENTRY_CONTROL, EntryControl.KEY_SUPPORTED_REPORT, 1, args, ...)
end

--- Serialize v1 ENTRY_CONTROL_KEY_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function KeySupportedReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(writer.length(args.key_supported_bit_mask))
  writer:write_bytes(args.key_supported_bit_mask)
  return writer.buf
end

--- Deserialize a v1 ENTRY_CONTROL_KEY_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.EntryControl.KeySupportedReportV1Args deserialized arguments
function KeySupportedReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("key_supported_bit_mask_length")
  reader:read_bytes(reader.parsed.key_supported_bit_mask_length, "key_supported_bit_mask")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.EntryControl.KeySupportedReportV1
--- @return st.zwave.CommandClass.EntryControl.KeySupportedReportV1Args
function KeySupportedReportV1._defaults(self)
  local args = {}
  args.key_supported_bit_mask = self.args.key_supported_bit_mask or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.EntryControl.KeySupportedReportV1
--- @return st.zwave.CommandClass.EntryControl.KeySupportedReportV1Args
function KeySupportedReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.EntryControl.KeySupportedReportV1
function KeySupportedReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.EntryControl.KeySupportedReportV1
function KeySupportedReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.EntryControl.EventSupportedGetV1Args
--- @alias EventSupportedGetV1Args st.zwave.CommandClass.EntryControl.EventSupportedGetV1Args
local EventSupportedGetV1Args = {}

--- @class st.zwave.CommandClass.EntryControl.EventSupportedGetV1:st.zwave.Command
--- @alias EventSupportedGetV1 st.zwave.CommandClass.EntryControl.EventSupportedGetV1
---
--- v1 ENTRY_CONTROL_EVENT_SUPPORTED_GET
---
--- @field public cmd_class number 0x6F
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EntryControl.EventSupportedGetV1Args command-specific arguments
local EventSupportedGetV1 = {}
setmetatable(EventSupportedGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 ENTRY_CONTROL_EVENT_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.EntryControl command class module instance
--- @param args st.zwave.CommandClass.EntryControl.EventSupportedGetV1Args command-specific arguments
function EventSupportedGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ENTRY_CONTROL, EntryControl.EVENT_SUPPORTED_GET, 1, args, ...)
end

--- Serialize v1 ENTRY_CONTROL_EVENT_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function EventSupportedGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 ENTRY_CONTROL_EVENT_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.EntryControl.EventSupportedGetV1Args deserialized arguments
function EventSupportedGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.EntryControl.EventSupportedGetV1
--- @return st.zwave.CommandClass.EntryControl.EventSupportedGetV1Args
function EventSupportedGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.EntryControl.EventSupportedGetV1
--- @return st.zwave.CommandClass.EntryControl.EventSupportedGetV1Args
function EventSupportedGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.EntryControl.EventSupportedGetV1
function EventSupportedGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.EntryControl.EventSupportedGetV1
function EventSupportedGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.EntryControl.EventSupportedReportV1Args
--- @alias EventSupportedReportV1Args st.zwave.CommandClass.EntryControl.EventSupportedReportV1Args
--- @field public na boolean
--- @field public raw boolean
--- @field public ascii boolean
--- @field public md5 boolean
--- @field public caching boolean
--- @field public cached_keys boolean
--- @field public enter boolean
--- @field public disarm_all boolean
--- @field public arm_all boolean
--- @field public arm_away boolean
--- @field public arm_home boolean
--- @field public exit_delay boolean
--- @field public arm_1 boolean
--- @field public arm_2 boolean
--- @field public arm_3 boolean
--- @field public arm_4 boolean
--- @field public arm_5 boolean
--- @field public arm_6 boolean
--- @field public rfid boolean
--- @field public bell boolean
--- @field public fire boolean
--- @field public police boolean
--- @field public alert_panic boolean
--- @field public alert_medical boolean
--- @field public gate_open boolean
--- @field public gate_close boolean
--- @field public lock boolean
--- @field public unlock boolean
--- @field public test boolean
--- @field public cancel boolean
--- @field public key_cached_size_supported_minimum integer [0,255]
--- @field public key_cached_size_supported_maximum integer [0,255]
--- @field public key_cached_timeout_supported_minimum integer [0,255]
--- @field public key_cached_timeout_supported_maximum integer [0,255]
local EventSupportedReportV1Args = {}

--- @class st.zwave.CommandClass.EntryControl.EventSupportedReportV1:st.zwave.Command
--- @alias EventSupportedReportV1 st.zwave.CommandClass.EntryControl.EventSupportedReportV1
---
--- v1 ENTRY_CONTROL_EVENT_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x6F
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EntryControl.EventSupportedReportV1Args command-specific arguments
local EventSupportedReportV1 = {}
setmetatable(EventSupportedReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 ENTRY_CONTROL_EVENT_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.EntryControl command class module instance
--- @param args st.zwave.CommandClass.EntryControl.EventSupportedReportV1Args command-specific arguments
function EventSupportedReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ENTRY_CONTROL, EntryControl.EVENT_SUPPORTED_REPORT, 1, args, ...)
end

--- Serialize v1 ENTRY_CONTROL_EVENT_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function EventSupportedReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(2, 1)
  writer:write_bits(6, 0) -- reserved1
  writer:write_bool(args.na)
  writer:write_bool(args.raw)
  writer:write_bool(args.ascii)
  writer:write_bool(args.md5)
  writer:write_bits(5, 4)
  writer:write_bits(3, 0) -- reserved2
  writer:write_bool(args.caching)
  writer:write_bool(args.cached_keys)
  writer:write_bool(args.enter)
  writer:write_bool(args.disarm_all)
  writer:write_bool(args.arm_all)
  writer:write_bool(args.arm_away)
  writer:write_bool(args.arm_home)
  writer:write_bool(args.exit_delay)
  writer:write_bool(args.arm_1)
  writer:write_bool(args.arm_2)
  writer:write_bool(args.arm_3)
  writer:write_bool(args.arm_4)
  writer:write_bool(args.arm_5)
  writer:write_bool(args.arm_6)
  writer:write_bool(args.rfid)
  writer:write_bool(args.bell)
  writer:write_bool(args.fire)
  writer:write_bool(args.police)
  writer:write_bool(args.alert_panic)
  writer:write_bool(args.alert_medical)
  writer:write_bool(args.gate_open)
  writer:write_bool(args.gate_close)
  writer:write_bool(args.lock)
  writer:write_bool(args.unlock)
  writer:write_bool(args.test)
  writer:write_bool(args.cancel)
  writer:write_u8(args.key_cached_size_supported_minimum)
  writer:write_u8(args.key_cached_size_supported_maximum)
  writer:write_u8(args.key_cached_timeout_supported_minimum)
  writer:write_u8(args.key_cached_timeout_supported_maximum)
  return writer.buf
end

--- Deserialize a v1 ENTRY_CONTROL_EVENT_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.EntryControl.EventSupportedReportV1Args deserialized arguments
function EventSupportedReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(2, "data_type_supported_bit_mask_length")
  reader:read_bits(6) -- reserved1
  if reader.parsed.data_type_supported_bit_mask_length > 0 then
    reader:read_bool("na")
    reader:read_bool("raw")
    reader:read_bool("ascii")
    reader:read_bool("md5")
  end
  reader:read_bits(5, "event_supported_bit_mask_length")
  reader:read_bits(3) -- reserved2
  if reader.parsed.event_supported_bit_mask_length > 0 then
    reader:read_bool("caching")
    reader:read_bool("cached_keys")
    reader:read_bool("enter")
    reader:read_bool("disarm_all")
    reader:read_bool("arm_all")
    reader:read_bool("arm_away")
    reader:read_bool("arm_home")
    reader:read_bool("exit_delay")
  end
  if reader.parsed.event_supported_bit_mask_length > 1 then
    reader:read_bool("arm_1")
    reader:read_bool("arm_2")
    reader:read_bool("arm_3")
    reader:read_bool("arm_4")
    reader:read_bool("arm_5")
    reader:read_bool("arm_6")
    reader:read_bool("rfid")
    reader:read_bool("bell")
  end
  if reader.parsed.event_supported_bit_mask_length > 2 then
    reader:read_bool("fire")
    reader:read_bool("police")
    reader:read_bool("alert_panic")
    reader:read_bool("alert_medical")
    reader:read_bool("gate_open")
    reader:read_bool("gate_close")
    reader:read_bool("lock")
    reader:read_bool("unlock")
  end
  if reader.parsed.event_supported_bit_mask_length > 3 then
    reader:read_bool("test")
    reader:read_bool("cancel")
  end
  reader:read_u8("key_cached_size_supported_minimum")
  reader:read_u8("key_cached_size_supported_maximum")
  reader:read_u8("key_cached_timeout_supported_minimum")
  reader:read_u8("key_cached_timeout_supported_maximum")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.EntryControl.EventSupportedReportV1
--- @return st.zwave.CommandClass.EntryControl.EventSupportedReportV1Args
function EventSupportedReportV1._defaults(self)
  local args = {}
  args.na = self.args.na or false
  args.raw = self.args.raw or false
  args.ascii = self.args.ascii or false
  args.md5 = self.args.md5 or false
  args.caching = self.args.caching or false
  args.cached_keys = self.args.cached_keys or false
  args.enter = self.args.enter or false
  args.disarm_all = self.args.disarm_all or false
  args.arm_all = self.args.arm_all or false
  args.arm_away = self.args.arm_away or false
  args.arm_home = self.args.arm_home or false
  args.exit_delay = self.args.exit_delay or false
  args.arm_1 = self.args.arm_1 or false
  args.arm_2 = self.args.arm_2 or false
  args.arm_3 = self.args.arm_3 or false
  args.arm_4 = self.args.arm_4 or false
  args.arm_5 = self.args.arm_5 or false
  args.arm_6 = self.args.arm_6 or false
  args.rfid = self.args.rfid or false
  args.bell = self.args.bell or false
  args.fire = self.args.fire or false
  args.police = self.args.police or false
  args.alert_panic = self.args.alert_panic or false
  args.alert_medical = self.args.alert_medical or false
  args.gate_open = self.args.gate_open or false
  args.gate_close = self.args.gate_close or false
  args.lock = self.args.lock or false
  args.unlock = self.args.unlock or false
  args.test = self.args.test or false
  args.cancel = self.args.cancel or false
  args.key_cached_size_supported_minimum = self.args.key_cached_size_supported_minimum or 0
  args.key_cached_size_supported_maximum = self.args.key_cached_size_supported_maximum or 0
  args.key_cached_timeout_supported_minimum = self.args.key_cached_timeout_supported_minimum or 0
  args.key_cached_timeout_supported_maximum = self.args.key_cached_timeout_supported_maximum or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.EntryControl.EventSupportedReportV1
--- @return st.zwave.CommandClass.EntryControl.EventSupportedReportV1Args
function EventSupportedReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.EntryControl.EventSupportedReportV1
function EventSupportedReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.EntryControl.EventSupportedReportV1
function EventSupportedReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.EntryControl.ConfigurationSetV1Args
--- @alias ConfigurationSetV1Args st.zwave.CommandClass.EntryControl.ConfigurationSetV1Args
--- @field public key_cache_size integer [0,255]
--- @field public key_cache_timeout integer [0,255]
local ConfigurationSetV1Args = {}

--- @class st.zwave.CommandClass.EntryControl.ConfigurationSetV1:st.zwave.Command
--- @alias ConfigurationSetV1 st.zwave.CommandClass.EntryControl.ConfigurationSetV1
---
--- v1 ENTRY_CONTROL_CONFIGURATION_SET
---
--- @field public cmd_class number 0x6F
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EntryControl.ConfigurationSetV1Args command-specific arguments
local ConfigurationSetV1 = {}
setmetatable(ConfigurationSetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 ENTRY_CONTROL_CONFIGURATION_SET object.
---
--- @param module st.zwave.CommandClass.EntryControl command class module instance
--- @param args st.zwave.CommandClass.EntryControl.ConfigurationSetV1Args command-specific arguments
function ConfigurationSetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ENTRY_CONTROL, EntryControl.CONFIGURATION_SET, 1, args, ...)
end

--- Serialize v1 ENTRY_CONTROL_CONFIGURATION_SET arguments.
---
--- @return string serialized payload
function ConfigurationSetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.key_cache_size)
  writer:write_u8(args.key_cache_timeout)
  return writer.buf
end

--- Deserialize a v1 ENTRY_CONTROL_CONFIGURATION_SET payload.
---
--- @return st.zwave.CommandClass.EntryControl.ConfigurationSetV1Args deserialized arguments
function ConfigurationSetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("key_cache_size")
  reader:read_u8("key_cache_timeout")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.EntryControl.ConfigurationSetV1
--- @return st.zwave.CommandClass.EntryControl.ConfigurationSetV1Args
function ConfigurationSetV1._defaults(self)
  local args = {}
  args.key_cache_size = self.args.key_cache_size or 0
  args.key_cache_timeout = self.args.key_cache_timeout or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.EntryControl.ConfigurationSetV1
--- @return st.zwave.CommandClass.EntryControl.ConfigurationSetV1Args
function ConfigurationSetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.EntryControl.ConfigurationSetV1
function ConfigurationSetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.EntryControl.ConfigurationSetV1
function ConfigurationSetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.EntryControl.ConfigurationGetV1Args
--- @alias ConfigurationGetV1Args st.zwave.CommandClass.EntryControl.ConfigurationGetV1Args
local ConfigurationGetV1Args = {}

--- @class st.zwave.CommandClass.EntryControl.ConfigurationGetV1:st.zwave.Command
--- @alias ConfigurationGetV1 st.zwave.CommandClass.EntryControl.ConfigurationGetV1
---
--- v1 ENTRY_CONTROL_CONFIGURATION_GET
---
--- @field public cmd_class number 0x6F
--- @field public cmd_id number 0x07
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EntryControl.ConfigurationGetV1Args command-specific arguments
local ConfigurationGetV1 = {}
setmetatable(ConfigurationGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 ENTRY_CONTROL_CONFIGURATION_GET object.
---
--- @param module st.zwave.CommandClass.EntryControl command class module instance
--- @param args st.zwave.CommandClass.EntryControl.ConfigurationGetV1Args command-specific arguments
function ConfigurationGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ENTRY_CONTROL, EntryControl.CONFIGURATION_GET, 1, args, ...)
end

--- Serialize v1 ENTRY_CONTROL_CONFIGURATION_GET arguments.
---
--- @return string serialized payload
function ConfigurationGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 ENTRY_CONTROL_CONFIGURATION_GET payload.
---
--- @return st.zwave.CommandClass.EntryControl.ConfigurationGetV1Args deserialized arguments
function ConfigurationGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.EntryControl.ConfigurationGetV1
--- @return st.zwave.CommandClass.EntryControl.ConfigurationGetV1Args
function ConfigurationGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.EntryControl.ConfigurationGetV1
--- @return st.zwave.CommandClass.EntryControl.ConfigurationGetV1Args
function ConfigurationGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.EntryControl.ConfigurationGetV1
function ConfigurationGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.EntryControl.ConfigurationGetV1
function ConfigurationGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.EntryControl.ConfigurationReportV1Args
--- @alias ConfigurationReportV1Args st.zwave.CommandClass.EntryControl.ConfigurationReportV1Args
--- @field public key_cache_size integer [0,255]
--- @field public key_cache_timeout integer [0,255]
local ConfigurationReportV1Args = {}

--- @class st.zwave.CommandClass.EntryControl.ConfigurationReportV1:st.zwave.Command
--- @alias ConfigurationReportV1 st.zwave.CommandClass.EntryControl.ConfigurationReportV1
---
--- v1 ENTRY_CONTROL_CONFIGURATION_REPORT
---
--- @field public cmd_class number 0x6F
--- @field public cmd_id number 0x08
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EntryControl.ConfigurationReportV1Args command-specific arguments
local ConfigurationReportV1 = {}
setmetatable(ConfigurationReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 ENTRY_CONTROL_CONFIGURATION_REPORT object.
---
--- @param module st.zwave.CommandClass.EntryControl command class module instance
--- @param args st.zwave.CommandClass.EntryControl.ConfigurationReportV1Args command-specific arguments
function ConfigurationReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.ENTRY_CONTROL, EntryControl.CONFIGURATION_REPORT, 1, args, ...)
end

--- Serialize v1 ENTRY_CONTROL_CONFIGURATION_REPORT arguments.
---
--- @return string serialized payload
function ConfigurationReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.key_cache_size)
  writer:write_u8(args.key_cache_timeout)
  return writer.buf
end

--- Deserialize a v1 ENTRY_CONTROL_CONFIGURATION_REPORT payload.
---
--- @return st.zwave.CommandClass.EntryControl.ConfigurationReportV1Args deserialized arguments
function ConfigurationReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("key_cache_size")
  reader:read_u8("key_cache_timeout")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.EntryControl.ConfigurationReportV1
--- @return st.zwave.CommandClass.EntryControl.ConfigurationReportV1Args
function ConfigurationReportV1._defaults(self)
  local args = {}
  args.key_cache_size = self.args.key_cache_size or 0
  args.key_cache_timeout = self.args.key_cache_timeout or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.EntryControl.ConfigurationReportV1
--- @return st.zwave.CommandClass.EntryControl.ConfigurationReportV1Args
function ConfigurationReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.EntryControl.ConfigurationReportV1
function ConfigurationReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.EntryControl.ConfigurationReportV1
function ConfigurationReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.EntryControl.Notification
--- @alias _Notification st.zwave.CommandClass.EntryControl.Notification
---
--- Dynamically versioned ENTRY_CONTROL_NOTIFICATION
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6F
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EntryControl.NotificationV1Args
local _Notification = {}
setmetatable(_Notification, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ENTRY_CONTROL_NOTIFICATION object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.EntryControl command class module instance
--- @param args st.zwave.CommandClass.EntryControl.NotificationV1Args command-specific arguments
--- @return st.zwave.CommandClass.EntryControl.Notification
function _Notification:construct(module, args, ...)
  return zw.Command._construct(module, EntryControl.NOTIFICATION, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.EntryControl.KeySupportedGet
--- @alias _KeySupportedGet st.zwave.CommandClass.EntryControl.KeySupportedGet
---
--- Dynamically versioned ENTRY_CONTROL_KEY_SUPPORTED_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6F
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EntryControl.KeySupportedGetV1Args
local _KeySupportedGet = {}
setmetatable(_KeySupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ENTRY_CONTROL_KEY_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.EntryControl command class module instance
--- @param args st.zwave.CommandClass.EntryControl.KeySupportedGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.EntryControl.KeySupportedGet
function _KeySupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, EntryControl.KEY_SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.EntryControl.KeySupportedReport
--- @alias _KeySupportedReport st.zwave.CommandClass.EntryControl.KeySupportedReport
---
--- Dynamically versioned ENTRY_CONTROL_KEY_SUPPORTED_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6F
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EntryControl.KeySupportedReportV1Args
local _KeySupportedReport = {}
setmetatable(_KeySupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ENTRY_CONTROL_KEY_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.EntryControl command class module instance
--- @param args st.zwave.CommandClass.EntryControl.KeySupportedReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.EntryControl.KeySupportedReport
function _KeySupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, EntryControl.KEY_SUPPORTED_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.EntryControl.EventSupportedGet
--- @alias _EventSupportedGet st.zwave.CommandClass.EntryControl.EventSupportedGet
---
--- Dynamically versioned ENTRY_CONTROL_EVENT_SUPPORTED_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6F
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EntryControl.EventSupportedGetV1Args
local _EventSupportedGet = {}
setmetatable(_EventSupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ENTRY_CONTROL_EVENT_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.EntryControl command class module instance
--- @param args st.zwave.CommandClass.EntryControl.EventSupportedGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.EntryControl.EventSupportedGet
function _EventSupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, EntryControl.EVENT_SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.EntryControl.EventSupportedReport
--- @alias _EventSupportedReport st.zwave.CommandClass.EntryControl.EventSupportedReport
---
--- Dynamically versioned ENTRY_CONTROL_EVENT_SUPPORTED_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6F
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EntryControl.EventSupportedReportV1Args
local _EventSupportedReport = {}
setmetatable(_EventSupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ENTRY_CONTROL_EVENT_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.EntryControl command class module instance
--- @param args st.zwave.CommandClass.EntryControl.EventSupportedReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.EntryControl.EventSupportedReport
function _EventSupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, EntryControl.EVENT_SUPPORTED_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.EntryControl.ConfigurationSet
--- @alias _ConfigurationSet st.zwave.CommandClass.EntryControl.ConfigurationSet
---
--- Dynamically versioned ENTRY_CONTROL_CONFIGURATION_SET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6F
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EntryControl.ConfigurationSetV1Args
local _ConfigurationSet = {}
setmetatable(_ConfigurationSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ENTRY_CONTROL_CONFIGURATION_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.EntryControl command class module instance
--- @param args st.zwave.CommandClass.EntryControl.ConfigurationSetV1Args command-specific arguments
--- @return st.zwave.CommandClass.EntryControl.ConfigurationSet
function _ConfigurationSet:construct(module, args, ...)
  return zw.Command._construct(module, EntryControl.CONFIGURATION_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.EntryControl.ConfigurationGet
--- @alias _ConfigurationGet st.zwave.CommandClass.EntryControl.ConfigurationGet
---
--- Dynamically versioned ENTRY_CONTROL_CONFIGURATION_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6F
--- @field public cmd_id number 0x07
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EntryControl.ConfigurationGetV1Args
local _ConfigurationGet = {}
setmetatable(_ConfigurationGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ENTRY_CONTROL_CONFIGURATION_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.EntryControl command class module instance
--- @param args st.zwave.CommandClass.EntryControl.ConfigurationGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.EntryControl.ConfigurationGet
function _ConfigurationGet:construct(module, args, ...)
  return zw.Command._construct(module, EntryControl.CONFIGURATION_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.EntryControl.ConfigurationReport
--- @alias _ConfigurationReport st.zwave.CommandClass.EntryControl.ConfigurationReport
---
--- Dynamically versioned ENTRY_CONTROL_CONFIGURATION_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6F
--- @field public cmd_id number 0x08
--- @field public version number 1
--- @field public args st.zwave.CommandClass.EntryControl.ConfigurationReportV1Args
local _ConfigurationReport = {}
setmetatable(_ConfigurationReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an ENTRY_CONTROL_CONFIGURATION_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.EntryControl command class module instance
--- @param args st.zwave.CommandClass.EntryControl.ConfigurationReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.EntryControl.ConfigurationReport
function _ConfigurationReport:construct(module, args, ...)
  return zw.Command._construct(module, EntryControl.CONFIGURATION_REPORT, module._serialization_version, args, ...)
end

EntryControl.NotificationV1 = NotificationV1
EntryControl.KeySupportedGetV1 = KeySupportedGetV1
EntryControl.KeySupportedReportV1 = KeySupportedReportV1
EntryControl.EventSupportedGetV1 = EventSupportedGetV1
EntryControl.EventSupportedReportV1 = EventSupportedReportV1
EntryControl.ConfigurationSetV1 = ConfigurationSetV1
EntryControl.ConfigurationGetV1 = ConfigurationGetV1
EntryControl.ConfigurationReportV1 = ConfigurationReportV1
EntryControl.Notification = _Notification
EntryControl.KeySupportedGet = _KeySupportedGet
EntryControl.KeySupportedReport = _KeySupportedReport
EntryControl.EventSupportedGet = _EventSupportedGet
EntryControl.EventSupportedReport = _EventSupportedReport
EntryControl.ConfigurationSet = _ConfigurationSet
EntryControl.ConfigurationGet = _ConfigurationGet
EntryControl.ConfigurationReport = _ConfigurationReport

EntryControl._lut = {
  [0] = { -- dynamically versioned constructors
    [EntryControl.NOTIFICATION] = EntryControl.Notification,
    [EntryControl.KEY_SUPPORTED_GET] = EntryControl.KeySupportedGet,
    [EntryControl.KEY_SUPPORTED_REPORT] = EntryControl.KeySupportedReport,
    [EntryControl.EVENT_SUPPORTED_GET] = EntryControl.EventSupportedGet,
    [EntryControl.EVENT_SUPPORTED_REPORT] = EntryControl.EventSupportedReport,
    [EntryControl.CONFIGURATION_SET] = EntryControl.ConfigurationSet,
    [EntryControl.CONFIGURATION_GET] = EntryControl.ConfigurationGet,
    [EntryControl.CONFIGURATION_REPORT] = EntryControl.ConfigurationReport
  },
  [1] = { -- version 1
    [EntryControl.NOTIFICATION] = EntryControl.NotificationV1,
    [EntryControl.KEY_SUPPORTED_GET] = EntryControl.KeySupportedGetV1,
    [EntryControl.KEY_SUPPORTED_REPORT] = EntryControl.KeySupportedReportV1,
    [EntryControl.EVENT_SUPPORTED_GET] = EntryControl.EventSupportedGetV1,
    [EntryControl.EVENT_SUPPORTED_REPORT] = EntryControl.EventSupportedReportV1,
    [EntryControl.CONFIGURATION_SET] = EntryControl.ConfigurationSetV1,
    [EntryControl.CONFIGURATION_GET] = EntryControl.ConfigurationGetV1,
    [EntryControl.CONFIGURATION_REPORT] = EntryControl.ConfigurationReportV1
  }
}
--- @class st.zwave.CommandClass.EntryControl.data_type
--- @alias data_type st.zwave.CommandClass.EntryControl.data_type
--- @field public NA number 0x00
--- @field public RAW number 0x01
--- @field public ASCII number 0x02
--- @field public MD5 number 0x03
local data_type = {
  NA = 0x00,
  RAW = 0x01,
  ASCII = 0x02,
  MD5 = 0x03
}
EntryControl.data_type = data_type
EntryControl._reflect_data_type = zw._reflection_builder(EntryControl.data_type)

--- @class st.zwave.CommandClass.EntryControl.event_type
--- @alias event_type st.zwave.CommandClass.EntryControl.event_type
--- @field public CACHING number 0x00
--- @field public CACHED_KEYS number 0x01
--- @field public ENTER number 0x02
--- @field public DISARM_ALL number 0x03
--- @field public ARM_ALL number 0x04
--- @field public ARM_AWAY number 0x05
--- @field public ARM_HOME number 0x06
--- @field public EXIT_DELAY number 0x07
--- @field public ARM_1 number 0x08
--- @field public ARM_2 number 0x09
--- @field public ARM_3 number 0x0A
--- @field public ARM_4 number 0x0B
--- @field public ARM_5 number 0x0C
--- @field public ARM_6 number 0x0D
--- @field public RFID number 0x0E
--- @field public BELL number 0x0F
--- @field public FIRE number 0x10
--- @field public POLICE number 0x11
--- @field public ALERT_PANIC number 0x12
--- @field public ALERT_MEDICAL number 0x13
--- @field public GATE_OPEN number 0x14
--- @field public GATE_CLOSE number 0x15
--- @field public LOCK number 0x16
--- @field public UNLOCK number 0x17
--- @field public TEST number 0x18
--- @field public CANCEL number 0x19
local event_type = {
  CACHING = 0x00,
  CACHED_KEYS = 0x01,
  ENTER = 0x02,
  DISARM_ALL = 0x03,
  ARM_ALL = 0x04,
  ARM_AWAY = 0x05,
  ARM_HOME = 0x06,
  EXIT_DELAY = 0x07,
  ARM_1 = 0x08,
  ARM_2 = 0x09,
  ARM_3 = 0x0A,
  ARM_4 = 0x0B,
  ARM_5 = 0x0C,
  ARM_6 = 0x0D,
  RFID = 0x0E,
  BELL = 0x0F,
  FIRE = 0x10,
  POLICE = 0x11,
  ALERT_PANIC = 0x12,
  ALERT_MEDICAL = 0x13,
  GATE_OPEN = 0x14,
  GATE_CLOSE = 0x15,
  LOCK = 0x16,
  UNLOCK = 0x17,
  TEST = 0x18,
  CANCEL = 0x19
}
EntryControl.event_type = event_type
EntryControl._reflect_event_type = zw._reflection_builder(EntryControl.event_type)


return EntryControl
