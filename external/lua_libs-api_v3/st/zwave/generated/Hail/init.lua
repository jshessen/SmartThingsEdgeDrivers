-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.Hail
--- @alias Hail st.zwave.CommandClass.Hail
---
--- Supported versions: 1
---
--- @field public HAIL number 0x01 - HAIL command id
local Hail = {}
Hail.HAIL = 0x01

Hail._commands = {
  [Hail.HAIL] = "HAIL"
}

--- Instantiate a versioned instance of the Hail Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.Hail versioned command class instance
function Hail:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.HAIL][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(Hail, {
  __call = Hail.init
})

Hail._serialization_version = nil
Hail._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.HAIL] = {
  [1] = true
}

--- @class st.zwave.CommandClass.Hail.HailV1Args
--- @alias HailV1Args st.zwave.CommandClass.Hail.HailV1Args
local HailV1Args = {}

--- @class st.zwave.CommandClass.Hail.HailV1:st.zwave.Command
--- @alias HailV1 st.zwave.CommandClass.Hail.HailV1
---
--- v1 HAIL
---
--- @field public cmd_class number 0x82
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Hail.HailV1Args command-specific arguments
local HailV1 = {}
setmetatable(HailV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 HAIL object.
---
--- @param module st.zwave.CommandClass.Hail command class module instance
--- @param args st.zwave.CommandClass.Hail.HailV1Args command-specific arguments
function HailV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.HAIL, Hail.HAIL, 1, args, ...)
end

--- Serialize v1 HAIL arguments.
---
--- @return string serialized payload
function HailV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 HAIL payload.
---
--- @return st.zwave.CommandClass.Hail.HailV1Args deserialized arguments
function HailV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Hail.HailV1
--- @return st.zwave.CommandClass.Hail.HailV1Args
function HailV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Hail.HailV1
--- @return st.zwave.CommandClass.Hail.HailV1Args
function HailV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Hail.HailV1
function HailV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Hail.HailV1
function HailV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Hail.Hail
--- @alias _Hail st.zwave.CommandClass.Hail.Hail
---
--- Dynamically versioned HAIL
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x82
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Hail.HailV1Args
local _Hail = {}
setmetatable(_Hail, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a HAIL object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Hail command class module instance
--- @param args st.zwave.CommandClass.Hail.HailV1Args command-specific arguments
--- @return st.zwave.CommandClass.Hail.Hail
function _Hail:construct(module, args, ...)
  return zw.Command._construct(module, Hail.HAIL, module._serialization_version, args, ...)
end

Hail.HailV1 = HailV1
Hail.Hail = _Hail

Hail._lut = {
  [0] = { -- dynamically versioned constructors
    [Hail.HAIL] = Hail.Hail
  },
  [1] = { -- version 1
    [Hail.HAIL] = Hail.HailV1
  }
}

return Hail
