-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.HrvControl
--- @alias HrvControl st.zwave.CommandClass.HrvControl
---
--- Supported versions: 1
---
--- @field public MODE_SET number 0x01 - HRV_CONTROL_MODE_SET command id
--- @field public MODE_GET number 0x02 - HRV_CONTROL_MODE_GET command id
--- @field public MODE_REPORT number 0x03 - HRV_CONTROL_MODE_REPORT command id
--- @field public BYPASS_SET number 0x04 - HRV_CONTROL_BYPASS_SET command id
--- @field public BYPASS_GET number 0x05 - HRV_CONTROL_BYPASS_GET command id
--- @field public BYPASS_REPORT number 0x06 - HRV_CONTROL_BYPASS_REPORT command id
--- @field public VENTILATION_RATE_SET number 0x07 - HRV_CONTROL_VENTILATION_RATE_SET command id
--- @field public VENTILATION_RATE_GET number 0x08 - HRV_CONTROL_VENTILATION_RATE_GET command id
--- @field public VENTILATION_RATE_REPORT number 0x09 - HRV_CONTROL_VENTILATION_RATE_REPORT command id
--- @field public MODE_SUPPORTED_GET number 0x0A - HRV_CONTROL_MODE_SUPPORTED_GET command id
--- @field public MODE_SUPPORTED_REPORT number 0x0B - HRV_CONTROL_MODE_SUPPORTED_REPORT command id
local HrvControl = {}
HrvControl.MODE_SET = 0x01
HrvControl.MODE_GET = 0x02
HrvControl.MODE_REPORT = 0x03
HrvControl.BYPASS_SET = 0x04
HrvControl.BYPASS_GET = 0x05
HrvControl.BYPASS_REPORT = 0x06
HrvControl.VENTILATION_RATE_SET = 0x07
HrvControl.VENTILATION_RATE_GET = 0x08
HrvControl.VENTILATION_RATE_REPORT = 0x09
HrvControl.MODE_SUPPORTED_GET = 0x0A
HrvControl.MODE_SUPPORTED_REPORT = 0x0B

HrvControl._commands = {
  [HrvControl.MODE_SET] = "MODE_SET",
  [HrvControl.MODE_GET] = "MODE_GET",
  [HrvControl.MODE_REPORT] = "MODE_REPORT",
  [HrvControl.BYPASS_SET] = "BYPASS_SET",
  [HrvControl.BYPASS_GET] = "BYPASS_GET",
  [HrvControl.BYPASS_REPORT] = "BYPASS_REPORT",
  [HrvControl.VENTILATION_RATE_SET] = "VENTILATION_RATE_SET",
  [HrvControl.VENTILATION_RATE_GET] = "VENTILATION_RATE_GET",
  [HrvControl.VENTILATION_RATE_REPORT] = "VENTILATION_RATE_REPORT",
  [HrvControl.MODE_SUPPORTED_GET] = "MODE_SUPPORTED_GET",
  [HrvControl.MODE_SUPPORTED_REPORT] = "MODE_SUPPORTED_REPORT"
}

--- Instantiate a versioned instance of the HrvControl Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.HrvControl versioned command class instance
function HrvControl:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.HRV_CONTROL][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(HrvControl, {
  __call = HrvControl.init
})

HrvControl._serialization_version = nil
HrvControl._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.HRV_CONTROL] = {
  [1] = true
}

--- @class st.zwave.CommandClass.HrvControl.ModeSetV1Args
--- @alias ModeSetV1Args st.zwave.CommandClass.HrvControl.ModeSetV1Args
--- @field public mode integer see :lua:class:`HrvControl.mode <st.zwave.CommandClass.HrvControl.mode>`
local ModeSetV1Args = {}

--- @class st.zwave.CommandClass.HrvControl.ModeSetV1:st.zwave.Command
--- @alias ModeSetV1 st.zwave.CommandClass.HrvControl.ModeSetV1
---
--- v1 HRV_CONTROL_MODE_SET
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.ModeSetV1Args command-specific arguments
local ModeSetV1 = {}
setmetatable(ModeSetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 HRV_CONTROL_MODE_SET object.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.ModeSetV1Args command-specific arguments
function ModeSetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.HRV_CONTROL, HrvControl.MODE_SET, 1, args, ...)
end

--- Serialize v1 HRV_CONTROL_MODE_SET arguments.
---
--- @return string serialized payload
function ModeSetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, args.mode)
  writer:write_bits(3, 0) -- reserved
  return writer.buf
end

--- Deserialize a v1 HRV_CONTROL_MODE_SET payload.
---
--- @return st.zwave.CommandClass.HrvControl.ModeSetV1Args deserialized arguments
function ModeSetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "mode")
  reader:read_bits(3) -- reserved
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeSetV1
--- @return st.zwave.CommandClass.HrvControl.ModeSetV1Args
function ModeSetV1._defaults(self)
  local args = {}
  args.mode = self.args.mode or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeSetV1
--- @return st.zwave.CommandClass.HrvControl.ModeSetV1Args
function ModeSetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeSetV1
function ModeSetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeSetV1
function ModeSetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.mode = function()
    return zw._reflect(
      HrvControl._reflect_mode,
      args.mode
    )
  end
end

--- @class st.zwave.CommandClass.HrvControl.ModeGetV1Args
--- @alias ModeGetV1Args st.zwave.CommandClass.HrvControl.ModeGetV1Args
local ModeGetV1Args = {}

--- @class st.zwave.CommandClass.HrvControl.ModeGetV1:st.zwave.Command
--- @alias ModeGetV1 st.zwave.CommandClass.HrvControl.ModeGetV1
---
--- v1 HRV_CONTROL_MODE_GET
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.ModeGetV1Args command-specific arguments
local ModeGetV1 = {}
setmetatable(ModeGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 HRV_CONTROL_MODE_GET object.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.ModeGetV1Args command-specific arguments
function ModeGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.HRV_CONTROL, HrvControl.MODE_GET, 1, args, ...)
end

--- Serialize v1 HRV_CONTROL_MODE_GET arguments.
---
--- @return string serialized payload
function ModeGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 HRV_CONTROL_MODE_GET payload.
---
--- @return st.zwave.CommandClass.HrvControl.ModeGetV1Args deserialized arguments
function ModeGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeGetV1
--- @return st.zwave.CommandClass.HrvControl.ModeGetV1Args
function ModeGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeGetV1
--- @return st.zwave.CommandClass.HrvControl.ModeGetV1Args
function ModeGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeGetV1
function ModeGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeGetV1
function ModeGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.HrvControl.ModeReportV1Args
--- @alias ModeReportV1Args st.zwave.CommandClass.HrvControl.ModeReportV1Args
--- @field public mode integer see :lua:class:`HrvControl.mode <st.zwave.CommandClass.HrvControl.mode>`
local ModeReportV1Args = {}

--- @class st.zwave.CommandClass.HrvControl.ModeReportV1:st.zwave.Command
--- @alias ModeReportV1 st.zwave.CommandClass.HrvControl.ModeReportV1
---
--- v1 HRV_CONTROL_MODE_REPORT
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.ModeReportV1Args command-specific arguments
local ModeReportV1 = {}
setmetatable(ModeReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 HRV_CONTROL_MODE_REPORT object.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.ModeReportV1Args command-specific arguments
function ModeReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.HRV_CONTROL, HrvControl.MODE_REPORT, 1, args, ...)
end

--- Serialize v1 HRV_CONTROL_MODE_REPORT arguments.
---
--- @return string serialized payload
function ModeReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, args.mode)
  writer:write_bits(3, 0) -- reserved
  return writer.buf
end

--- Deserialize a v1 HRV_CONTROL_MODE_REPORT payload.
---
--- @return st.zwave.CommandClass.HrvControl.ModeReportV1Args deserialized arguments
function ModeReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "mode")
  reader:read_bits(3) -- reserved
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeReportV1
--- @return st.zwave.CommandClass.HrvControl.ModeReportV1Args
function ModeReportV1._defaults(self)
  local args = {}
  args.mode = self.args.mode or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeReportV1
--- @return st.zwave.CommandClass.HrvControl.ModeReportV1Args
function ModeReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeReportV1
function ModeReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeReportV1
function ModeReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.mode = function()
    return zw._reflect(
      HrvControl._reflect_mode,
      args.mode
    )
  end
end

--- @class st.zwave.CommandClass.HrvControl.BypassSetV1Args
--- @alias BypassSetV1Args st.zwave.CommandClass.HrvControl.BypassSetV1Args
--- @field public bypass integer [0,255]
local BypassSetV1Args = {}

--- @class st.zwave.CommandClass.HrvControl.BypassSetV1:st.zwave.Command
--- @alias BypassSetV1 st.zwave.CommandClass.HrvControl.BypassSetV1
---
--- v1 HRV_CONTROL_BYPASS_SET
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.BypassSetV1Args command-specific arguments
local BypassSetV1 = {}
setmetatable(BypassSetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 HRV_CONTROL_BYPASS_SET object.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.BypassSetV1Args command-specific arguments
function BypassSetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.HRV_CONTROL, HrvControl.BYPASS_SET, 1, args, ...)
end

--- Serialize v1 HRV_CONTROL_BYPASS_SET arguments.
---
--- @return string serialized payload
function BypassSetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.bypass)
  return writer.buf
end

--- Deserialize a v1 HRV_CONTROL_BYPASS_SET payload.
---
--- @return st.zwave.CommandClass.HrvControl.BypassSetV1Args deserialized arguments
function BypassSetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("bypass")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.BypassSetV1
--- @return st.zwave.CommandClass.HrvControl.BypassSetV1Args
function BypassSetV1._defaults(self)
  local args = {}
  args.bypass = self.args.bypass or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.BypassSetV1
--- @return st.zwave.CommandClass.HrvControl.BypassSetV1Args
function BypassSetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.HrvControl.BypassSetV1
function BypassSetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.HrvControl.BypassSetV1
function BypassSetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.HrvControl.BypassGetV1Args
--- @alias BypassGetV1Args st.zwave.CommandClass.HrvControl.BypassGetV1Args
local BypassGetV1Args = {}

--- @class st.zwave.CommandClass.HrvControl.BypassGetV1:st.zwave.Command
--- @alias BypassGetV1 st.zwave.CommandClass.HrvControl.BypassGetV1
---
--- v1 HRV_CONTROL_BYPASS_GET
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.BypassGetV1Args command-specific arguments
local BypassGetV1 = {}
setmetatable(BypassGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 HRV_CONTROL_BYPASS_GET object.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.BypassGetV1Args command-specific arguments
function BypassGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.HRV_CONTROL, HrvControl.BYPASS_GET, 1, args, ...)
end

--- Serialize v1 HRV_CONTROL_BYPASS_GET arguments.
---
--- @return string serialized payload
function BypassGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 HRV_CONTROL_BYPASS_GET payload.
---
--- @return st.zwave.CommandClass.HrvControl.BypassGetV1Args deserialized arguments
function BypassGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.BypassGetV1
--- @return st.zwave.CommandClass.HrvControl.BypassGetV1Args
function BypassGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.BypassGetV1
--- @return st.zwave.CommandClass.HrvControl.BypassGetV1Args
function BypassGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.HrvControl.BypassGetV1
function BypassGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.HrvControl.BypassGetV1
function BypassGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.HrvControl.BypassReportV1Args
--- @alias BypassReportV1Args st.zwave.CommandClass.HrvControl.BypassReportV1Args
--- @field public bypass integer [0,255]
local BypassReportV1Args = {}

--- @class st.zwave.CommandClass.HrvControl.BypassReportV1:st.zwave.Command
--- @alias BypassReportV1 st.zwave.CommandClass.HrvControl.BypassReportV1
---
--- v1 HRV_CONTROL_BYPASS_REPORT
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.BypassReportV1Args command-specific arguments
local BypassReportV1 = {}
setmetatable(BypassReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 HRV_CONTROL_BYPASS_REPORT object.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.BypassReportV1Args command-specific arguments
function BypassReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.HRV_CONTROL, HrvControl.BYPASS_REPORT, 1, args, ...)
end

--- Serialize v1 HRV_CONTROL_BYPASS_REPORT arguments.
---
--- @return string serialized payload
function BypassReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.bypass)
  return writer.buf
end

--- Deserialize a v1 HRV_CONTROL_BYPASS_REPORT payload.
---
--- @return st.zwave.CommandClass.HrvControl.BypassReportV1Args deserialized arguments
function BypassReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("bypass")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.BypassReportV1
--- @return st.zwave.CommandClass.HrvControl.BypassReportV1Args
function BypassReportV1._defaults(self)
  local args = {}
  args.bypass = self.args.bypass or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.BypassReportV1
--- @return st.zwave.CommandClass.HrvControl.BypassReportV1Args
function BypassReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.HrvControl.BypassReportV1
function BypassReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.HrvControl.BypassReportV1
function BypassReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.HrvControl.VentilationRateSetV1Args
--- @alias VentilationRateSetV1Args st.zwave.CommandClass.HrvControl.VentilationRateSetV1Args
--- @field public ventilation_rate integer [0,255]
local VentilationRateSetV1Args = {}

--- @class st.zwave.CommandClass.HrvControl.VentilationRateSetV1:st.zwave.Command
--- @alias VentilationRateSetV1 st.zwave.CommandClass.HrvControl.VentilationRateSetV1
---
--- v1 HRV_CONTROL_VENTILATION_RATE_SET
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x07
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.VentilationRateSetV1Args command-specific arguments
local VentilationRateSetV1 = {}
setmetatable(VentilationRateSetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 HRV_CONTROL_VENTILATION_RATE_SET object.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.VentilationRateSetV1Args command-specific arguments
function VentilationRateSetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.HRV_CONTROL, HrvControl.VENTILATION_RATE_SET, 1, args, ...)
end

--- Serialize v1 HRV_CONTROL_VENTILATION_RATE_SET arguments.
---
--- @return string serialized payload
function VentilationRateSetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.ventilation_rate)
  return writer.buf
end

--- Deserialize a v1 HRV_CONTROL_VENTILATION_RATE_SET payload.
---
--- @return st.zwave.CommandClass.HrvControl.VentilationRateSetV1Args deserialized arguments
function VentilationRateSetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("ventilation_rate")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.VentilationRateSetV1
--- @return st.zwave.CommandClass.HrvControl.VentilationRateSetV1Args
function VentilationRateSetV1._defaults(self)
  local args = {}
  args.ventilation_rate = self.args.ventilation_rate or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.VentilationRateSetV1
--- @return st.zwave.CommandClass.HrvControl.VentilationRateSetV1Args
function VentilationRateSetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.HrvControl.VentilationRateSetV1
function VentilationRateSetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.HrvControl.VentilationRateSetV1
function VentilationRateSetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.HrvControl.VentilationRateGetV1Args
--- @alias VentilationRateGetV1Args st.zwave.CommandClass.HrvControl.VentilationRateGetV1Args
local VentilationRateGetV1Args = {}

--- @class st.zwave.CommandClass.HrvControl.VentilationRateGetV1:st.zwave.Command
--- @alias VentilationRateGetV1 st.zwave.CommandClass.HrvControl.VentilationRateGetV1
---
--- v1 HRV_CONTROL_VENTILATION_RATE_GET
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x08
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.VentilationRateGetV1Args command-specific arguments
local VentilationRateGetV1 = {}
setmetatable(VentilationRateGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 HRV_CONTROL_VENTILATION_RATE_GET object.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.VentilationRateGetV1Args command-specific arguments
function VentilationRateGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.HRV_CONTROL, HrvControl.VENTILATION_RATE_GET, 1, args, ...)
end

--- Serialize v1 HRV_CONTROL_VENTILATION_RATE_GET arguments.
---
--- @return string serialized payload
function VentilationRateGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 HRV_CONTROL_VENTILATION_RATE_GET payload.
---
--- @return st.zwave.CommandClass.HrvControl.VentilationRateGetV1Args deserialized arguments
function VentilationRateGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.VentilationRateGetV1
--- @return st.zwave.CommandClass.HrvControl.VentilationRateGetV1Args
function VentilationRateGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.VentilationRateGetV1
--- @return st.zwave.CommandClass.HrvControl.VentilationRateGetV1Args
function VentilationRateGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.HrvControl.VentilationRateGetV1
function VentilationRateGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.HrvControl.VentilationRateGetV1
function VentilationRateGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.HrvControl.VentilationRateReportV1Args
--- @alias VentilationRateReportV1Args st.zwave.CommandClass.HrvControl.VentilationRateReportV1Args
--- @field public ventilation_rate integer [0,255]
local VentilationRateReportV1Args = {}

--- @class st.zwave.CommandClass.HrvControl.VentilationRateReportV1:st.zwave.Command
--- @alias VentilationRateReportV1 st.zwave.CommandClass.HrvControl.VentilationRateReportV1
---
--- v1 HRV_CONTROL_VENTILATION_RATE_REPORT
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x09
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.VentilationRateReportV1Args command-specific arguments
local VentilationRateReportV1 = {}
setmetatable(VentilationRateReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 HRV_CONTROL_VENTILATION_RATE_REPORT object.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.VentilationRateReportV1Args command-specific arguments
function VentilationRateReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.HRV_CONTROL, HrvControl.VENTILATION_RATE_REPORT, 1, args, ...)
end

--- Serialize v1 HRV_CONTROL_VENTILATION_RATE_REPORT arguments.
---
--- @return string serialized payload
function VentilationRateReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.ventilation_rate)
  return writer.buf
end

--- Deserialize a v1 HRV_CONTROL_VENTILATION_RATE_REPORT payload.
---
--- @return st.zwave.CommandClass.HrvControl.VentilationRateReportV1Args deserialized arguments
function VentilationRateReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("ventilation_rate")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.VentilationRateReportV1
--- @return st.zwave.CommandClass.HrvControl.VentilationRateReportV1Args
function VentilationRateReportV1._defaults(self)
  local args = {}
  args.ventilation_rate = self.args.ventilation_rate or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.VentilationRateReportV1
--- @return st.zwave.CommandClass.HrvControl.VentilationRateReportV1Args
function VentilationRateReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.HrvControl.VentilationRateReportV1
function VentilationRateReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.HrvControl.VentilationRateReportV1
function VentilationRateReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.HrvControl.ModeSupportedGetV1Args
--- @alias ModeSupportedGetV1Args st.zwave.CommandClass.HrvControl.ModeSupportedGetV1Args
local ModeSupportedGetV1Args = {}

--- @class st.zwave.CommandClass.HrvControl.ModeSupportedGetV1:st.zwave.Command
--- @alias ModeSupportedGetV1 st.zwave.CommandClass.HrvControl.ModeSupportedGetV1
---
--- v1 HRV_CONTROL_MODE_SUPPORTED_GET
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x0A
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.ModeSupportedGetV1Args command-specific arguments
local ModeSupportedGetV1 = {}
setmetatable(ModeSupportedGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 HRV_CONTROL_MODE_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.ModeSupportedGetV1Args command-specific arguments
function ModeSupportedGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.HRV_CONTROL, HrvControl.MODE_SUPPORTED_GET, 1, args, ...)
end

--- Serialize v1 HRV_CONTROL_MODE_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function ModeSupportedGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 HRV_CONTROL_MODE_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.HrvControl.ModeSupportedGetV1Args deserialized arguments
function ModeSupportedGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeSupportedGetV1
--- @return st.zwave.CommandClass.HrvControl.ModeSupportedGetV1Args
function ModeSupportedGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeSupportedGetV1
--- @return st.zwave.CommandClass.HrvControl.ModeSupportedGetV1Args
function ModeSupportedGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeSupportedGetV1
function ModeSupportedGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeSupportedGetV1
function ModeSupportedGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.HrvControl.ModeSupportedReportV1Args
--- @alias ModeSupportedReportV1Args st.zwave.CommandClass.HrvControl.ModeSupportedReportV1Args
--- @field public manual_control_supported integer see :lua:class:`HrvControl.manual_control_supported <st.zwave.CommandClass.HrvControl.manual_control_supported>`
--- @field public off boolean
--- @field public demand_automatic boolean
--- @field public schedule boolean
--- @field public energy_savings_mode boolean
--- @field public manual boolean
local ModeSupportedReportV1Args = {}

--- @class st.zwave.CommandClass.HrvControl.ModeSupportedReportV1:st.zwave.Command
--- @alias ModeSupportedReportV1 st.zwave.CommandClass.HrvControl.ModeSupportedReportV1
---
--- v1 HRV_CONTROL_MODE_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x0B
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.ModeSupportedReportV1Args command-specific arguments
local ModeSupportedReportV1 = {}
setmetatable(ModeSupportedReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 HRV_CONTROL_MODE_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.ModeSupportedReportV1Args command-specific arguments
function ModeSupportedReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.HRV_CONTROL, HrvControl.MODE_SUPPORTED_REPORT, 1, args, ...)
end

--- Serialize v1 HRV_CONTROL_MODE_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function ModeSupportedReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(4, args.manual_control_supported)
  writer:write_bits(4, 0) -- reserved
  writer:write_bool(args.off)
  writer:write_bool(args.demand_automatic)
  writer:write_bool(args.schedule)
  writer:write_bool(args.energy_savings_mode)
  writer:write_bool(args.manual)
  return writer.buf
end

--- Deserialize a v1 HRV_CONTROL_MODE_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.HrvControl.ModeSupportedReportV1Args deserialized arguments
function ModeSupportedReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(4, "manual_control_supported")
  reader:read_bits(4) -- reserved
  reader:read_bool("off")
  reader:read_bool("demand_automatic")
  reader:read_bool("schedule")
  reader:read_bool("energy_savings_mode")
  reader:read_bool("manual")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeSupportedReportV1
--- @return st.zwave.CommandClass.HrvControl.ModeSupportedReportV1Args
function ModeSupportedReportV1._defaults(self)
  local args = {}
  args.manual_control_supported = self.args.manual_control_supported or 0
  args.off = self.args.off or false
  args.demand_automatic = self.args.demand_automatic or false
  args.schedule = self.args.schedule or false
  args.energy_savings_mode = self.args.energy_savings_mode or false
  args.manual = self.args.manual or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeSupportedReportV1
--- @return st.zwave.CommandClass.HrvControl.ModeSupportedReportV1Args
function ModeSupportedReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeSupportedReportV1
function ModeSupportedReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.HrvControl.ModeSupportedReportV1
function ModeSupportedReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.manual_control_supported = function()
    return zw._reflect(
      HrvControl._reflect_manual_control_supported,
      args.manual_control_supported
    )
  end
end

--- @class st.zwave.CommandClass.HrvControl.ModeSet
--- @alias _ModeSet st.zwave.CommandClass.HrvControl.ModeSet
---
--- Dynamically versioned HRV_CONTROL_MODE_SET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.ModeSetV1Args
local _ModeSet = {}
setmetatable(_ModeSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a HRV_CONTROL_MODE_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.ModeSetV1Args command-specific arguments
--- @return st.zwave.CommandClass.HrvControl.ModeSet
function _ModeSet:construct(module, args, ...)
  return zw.Command._construct(module, HrvControl.MODE_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.HrvControl.ModeGet
--- @alias _ModeGet st.zwave.CommandClass.HrvControl.ModeGet
---
--- Dynamically versioned HRV_CONTROL_MODE_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.ModeGetV1Args
local _ModeGet = {}
setmetatable(_ModeGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a HRV_CONTROL_MODE_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.ModeGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.HrvControl.ModeGet
function _ModeGet:construct(module, args, ...)
  return zw.Command._construct(module, HrvControl.MODE_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.HrvControl.ModeReport
--- @alias _ModeReport st.zwave.CommandClass.HrvControl.ModeReport
---
--- Dynamically versioned HRV_CONTROL_MODE_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.ModeReportV1Args
local _ModeReport = {}
setmetatable(_ModeReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a HRV_CONTROL_MODE_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.ModeReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.HrvControl.ModeReport
function _ModeReport:construct(module, args, ...)
  return zw.Command._construct(module, HrvControl.MODE_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.HrvControl.BypassSet
--- @alias _BypassSet st.zwave.CommandClass.HrvControl.BypassSet
---
--- Dynamically versioned HRV_CONTROL_BYPASS_SET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.BypassSetV1Args
local _BypassSet = {}
setmetatable(_BypassSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a HRV_CONTROL_BYPASS_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.BypassSetV1Args command-specific arguments
--- @return st.zwave.CommandClass.HrvControl.BypassSet
function _BypassSet:construct(module, args, ...)
  return zw.Command._construct(module, HrvControl.BYPASS_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.HrvControl.BypassGet
--- @alias _BypassGet st.zwave.CommandClass.HrvControl.BypassGet
---
--- Dynamically versioned HRV_CONTROL_BYPASS_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.BypassGetV1Args
local _BypassGet = {}
setmetatable(_BypassGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a HRV_CONTROL_BYPASS_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.BypassGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.HrvControl.BypassGet
function _BypassGet:construct(module, args, ...)
  return zw.Command._construct(module, HrvControl.BYPASS_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.HrvControl.BypassReport
--- @alias _BypassReport st.zwave.CommandClass.HrvControl.BypassReport
---
--- Dynamically versioned HRV_CONTROL_BYPASS_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.BypassReportV1Args
local _BypassReport = {}
setmetatable(_BypassReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a HRV_CONTROL_BYPASS_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.BypassReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.HrvControl.BypassReport
function _BypassReport:construct(module, args, ...)
  return zw.Command._construct(module, HrvControl.BYPASS_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.HrvControl.VentilationRateSet
--- @alias _VentilationRateSet st.zwave.CommandClass.HrvControl.VentilationRateSet
---
--- Dynamically versioned HRV_CONTROL_VENTILATION_RATE_SET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x07
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.VentilationRateSetV1Args
local _VentilationRateSet = {}
setmetatable(_VentilationRateSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a HRV_CONTROL_VENTILATION_RATE_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.VentilationRateSetV1Args command-specific arguments
--- @return st.zwave.CommandClass.HrvControl.VentilationRateSet
function _VentilationRateSet:construct(module, args, ...)
  return zw.Command._construct(module, HrvControl.VENTILATION_RATE_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.HrvControl.VentilationRateGet
--- @alias _VentilationRateGet st.zwave.CommandClass.HrvControl.VentilationRateGet
---
--- Dynamically versioned HRV_CONTROL_VENTILATION_RATE_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x08
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.VentilationRateGetV1Args
local _VentilationRateGet = {}
setmetatable(_VentilationRateGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a HRV_CONTROL_VENTILATION_RATE_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.VentilationRateGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.HrvControl.VentilationRateGet
function _VentilationRateGet:construct(module, args, ...)
  return zw.Command._construct(module, HrvControl.VENTILATION_RATE_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.HrvControl.VentilationRateReport
--- @alias _VentilationRateReport st.zwave.CommandClass.HrvControl.VentilationRateReport
---
--- Dynamically versioned HRV_CONTROL_VENTILATION_RATE_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x09
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.VentilationRateReportV1Args
local _VentilationRateReport = {}
setmetatable(_VentilationRateReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a HRV_CONTROL_VENTILATION_RATE_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.VentilationRateReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.HrvControl.VentilationRateReport
function _VentilationRateReport:construct(module, args, ...)
  return zw.Command._construct(module, HrvControl.VENTILATION_RATE_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.HrvControl.ModeSupportedGet
--- @alias _ModeSupportedGet st.zwave.CommandClass.HrvControl.ModeSupportedGet
---
--- Dynamically versioned HRV_CONTROL_MODE_SUPPORTED_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x0A
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.ModeSupportedGetV1Args
local _ModeSupportedGet = {}
setmetatable(_ModeSupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a HRV_CONTROL_MODE_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.ModeSupportedGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.HrvControl.ModeSupportedGet
function _ModeSupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, HrvControl.MODE_SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.HrvControl.ModeSupportedReport
--- @alias _ModeSupportedReport st.zwave.CommandClass.HrvControl.ModeSupportedReport
---
--- Dynamically versioned HRV_CONTROL_MODE_SUPPORTED_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x39
--- @field public cmd_id number 0x0B
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvControl.ModeSupportedReportV1Args
local _ModeSupportedReport = {}
setmetatable(_ModeSupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a HRV_CONTROL_MODE_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.HrvControl command class module instance
--- @param args st.zwave.CommandClass.HrvControl.ModeSupportedReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.HrvControl.ModeSupportedReport
function _ModeSupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, HrvControl.MODE_SUPPORTED_REPORT, module._serialization_version, args, ...)
end

HrvControl.ModeSetV1 = ModeSetV1
HrvControl.ModeGetV1 = ModeGetV1
HrvControl.ModeReportV1 = ModeReportV1
HrvControl.BypassSetV1 = BypassSetV1
HrvControl.BypassGetV1 = BypassGetV1
HrvControl.BypassReportV1 = BypassReportV1
HrvControl.VentilationRateSetV1 = VentilationRateSetV1
HrvControl.VentilationRateGetV1 = VentilationRateGetV1
HrvControl.VentilationRateReportV1 = VentilationRateReportV1
HrvControl.ModeSupportedGetV1 = ModeSupportedGetV1
HrvControl.ModeSupportedReportV1 = ModeSupportedReportV1
HrvControl.ModeSet = _ModeSet
HrvControl.ModeGet = _ModeGet
HrvControl.ModeReport = _ModeReport
HrvControl.BypassSet = _BypassSet
HrvControl.BypassGet = _BypassGet
HrvControl.BypassReport = _BypassReport
HrvControl.VentilationRateSet = _VentilationRateSet
HrvControl.VentilationRateGet = _VentilationRateGet
HrvControl.VentilationRateReport = _VentilationRateReport
HrvControl.ModeSupportedGet = _ModeSupportedGet
HrvControl.ModeSupportedReport = _ModeSupportedReport

HrvControl._lut = {
  [0] = { -- dynamically versioned constructors
    [HrvControl.MODE_SET] = HrvControl.ModeSet,
    [HrvControl.MODE_GET] = HrvControl.ModeGet,
    [HrvControl.MODE_REPORT] = HrvControl.ModeReport,
    [HrvControl.BYPASS_SET] = HrvControl.BypassSet,
    [HrvControl.BYPASS_GET] = HrvControl.BypassGet,
    [HrvControl.BYPASS_REPORT] = HrvControl.BypassReport,
    [HrvControl.VENTILATION_RATE_SET] = HrvControl.VentilationRateSet,
    [HrvControl.VENTILATION_RATE_GET] = HrvControl.VentilationRateGet,
    [HrvControl.VENTILATION_RATE_REPORT] = HrvControl.VentilationRateReport,
    [HrvControl.MODE_SUPPORTED_GET] = HrvControl.ModeSupportedGet,
    [HrvControl.MODE_SUPPORTED_REPORT] = HrvControl.ModeSupportedReport
  },
  [1] = { -- version 1
    [HrvControl.MODE_SET] = HrvControl.ModeSetV1,
    [HrvControl.MODE_GET] = HrvControl.ModeGetV1,
    [HrvControl.MODE_REPORT] = HrvControl.ModeReportV1,
    [HrvControl.BYPASS_SET] = HrvControl.BypassSetV1,
    [HrvControl.BYPASS_GET] = HrvControl.BypassGetV1,
    [HrvControl.BYPASS_REPORT] = HrvControl.BypassReportV1,
    [HrvControl.VENTILATION_RATE_SET] = HrvControl.VentilationRateSetV1,
    [HrvControl.VENTILATION_RATE_GET] = HrvControl.VentilationRateGetV1,
    [HrvControl.VENTILATION_RATE_REPORT] = HrvControl.VentilationRateReportV1,
    [HrvControl.MODE_SUPPORTED_GET] = HrvControl.ModeSupportedGetV1,
    [HrvControl.MODE_SUPPORTED_REPORT] = HrvControl.ModeSupportedReportV1
  }
}
--- @class st.zwave.CommandClass.HrvControl.manual_control_supported
--- @alias manual_control_supported st.zwave.CommandClass.HrvControl.manual_control_supported
--- @field public BYPASS_OPEN_CLOSE number 0x00
--- @field public BYPASS_AUTO number 0x01
--- @field public MODULATED_BYPASS number 0x02
--- @field public VENTILATION_RATE number 0x03
local manual_control_supported = {
  BYPASS_OPEN_CLOSE = 0x00,
  BYPASS_AUTO = 0x01,
  MODULATED_BYPASS = 0x02,
  VENTILATION_RATE = 0x03
}
HrvControl.manual_control_supported = manual_control_supported
HrvControl._reflect_manual_control_supported = zw._reflection_builder(HrvControl.manual_control_supported)

--- @class st.zwave.CommandClass.HrvControl.mode
--- @alias mode st.zwave.CommandClass.HrvControl.mode
--- @field public OFF number 0x00
--- @field public DEMAND_AUTOMATIC number 0x01
--- @field public SCHEDULE number 0x02
--- @field public ENERGY_SAVINGS_MODE number 0x03
--- @field public MANUAL number 0x04
local mode = {
  OFF = 0x00,
  DEMAND_AUTOMATIC = 0x01,
  SCHEDULE = 0x02,
  ENERGY_SAVINGS_MODE = 0x03,
  MANUAL = 0x04
}
HrvControl.mode = mode
HrvControl._reflect_mode = zw._reflection_builder(HrvControl.mode)


return HrvControl
