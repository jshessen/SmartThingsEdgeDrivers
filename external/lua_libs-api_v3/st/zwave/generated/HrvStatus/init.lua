-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.HrvStatus
--- @alias HrvStatus st.zwave.CommandClass.HrvStatus
---
--- Supported versions: 1
---
--- @field public GET number 0x01 - HRV_STATUS_GET command id
--- @field public REPORT number 0x02 - HRV_STATUS_REPORT command id
--- @field public SUPPORTED_GET number 0x03 - HRV_STATUS_SUPPORTED_GET command id
--- @field public SUPPORTED_REPORT number 0x04 - HRV_STATUS_SUPPORTED_REPORT command id
local HrvStatus = {}
HrvStatus.GET = 0x01
HrvStatus.REPORT = 0x02
HrvStatus.SUPPORTED_GET = 0x03
HrvStatus.SUPPORTED_REPORT = 0x04

HrvStatus._commands = {
  [HrvStatus.GET] = "GET",
  [HrvStatus.REPORT] = "REPORT",
  [HrvStatus.SUPPORTED_GET] = "SUPPORTED_GET",
  [HrvStatus.SUPPORTED_REPORT] = "SUPPORTED_REPORT"
}

--- Instantiate a versioned instance of the HrvStatus Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.HrvStatus versioned command class instance
function HrvStatus:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.HRV_STATUS][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(HrvStatus, {
  __call = HrvStatus.init
})

HrvStatus._serialization_version = nil
HrvStatus._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.HRV_STATUS] = {
  [1] = true
}

--- @class st.zwave.CommandClass.HrvStatus.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.HrvStatus.GetV1Args
--- @field public status_parameter integer see :lua:class:`HrvStatus.status_parameter <st.zwave.CommandClass.HrvStatus.status_parameter>`
local GetV1Args = {}

--- @class st.zwave.CommandClass.HrvStatus.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.HrvStatus.GetV1
---
--- v1 HRV_STATUS_GET
---
--- @field public cmd_class number 0x37
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvStatus.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 HRV_STATUS_GET object.
---
--- @param module st.zwave.CommandClass.HrvStatus command class module instance
--- @param args st.zwave.CommandClass.HrvStatus.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.HRV_STATUS, HrvStatus.GET, 1, args, ...)
end

--- Serialize v1 HRV_STATUS_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.status_parameter)
  return writer.buf
end

--- Deserialize a v1 HRV_STATUS_GET payload.
---
--- @return st.zwave.CommandClass.HrvStatus.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("status_parameter")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.HrvStatus.GetV1
--- @return st.zwave.CommandClass.HrvStatus.GetV1Args
function GetV1._defaults(self)
  local args = {}
  args.status_parameter = self.args.status_parameter or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.HrvStatus.GetV1
--- @return st.zwave.CommandClass.HrvStatus.GetV1Args
function GetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.HrvStatus.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.HrvStatus.GetV1
function GetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.status_parameter = function()
    return zw._reflect(
      HrvStatus._reflect_status_parameter,
      args.status_parameter
    )
  end
end

--- @class st.zwave.CommandClass.HrvStatus.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.HrvStatus.ReportV1Args
--- @field public status_parameter integer see :lua:class:`HrvStatus.status_parameter <st.zwave.CommandClass.HrvStatus.status_parameter>`
--- @field public size integer [0,7]
--- @field public scale integer see :lua:class:`HrvStatus.scale <st.zwave.CommandClass.HrvStatus.scale>`
--- @field public precision integer [0,7]
--- @field public value number [-2147483648,2147483647]
local ReportV1Args = {}

--- @class st.zwave.CommandClass.HrvStatus.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.HrvStatus.ReportV1
---
--- v1 HRV_STATUS_REPORT
---
--- @field public cmd_class number 0x37
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvStatus.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 HRV_STATUS_REPORT object.
---
--- @param module st.zwave.CommandClass.HrvStatus command class module instance
--- @param args st.zwave.CommandClass.HrvStatus.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.HRV_STATUS, HrvStatus.REPORT, 1, args, ...)
end

--- Serialize v1 HRV_STATUS_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.status_parameter)
  writer:write_bits(3, args.size or writer.size(args.value))
  writer:write_bits(2, args.scale)
  writer:write_bits(3, args.precision or writer.precision(args.value))
  writer:write_vfloat(args.size or writer.size(args.value), args.precision or writer.precision(args.value), args.value)
  return writer.buf
end

--- Deserialize a v1 HRV_STATUS_REPORT payload.
---
--- @return st.zwave.CommandClass.HrvStatus.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("status_parameter")
  reader:read_bits(3, "size")
  reader:read_bits(2, "scale")
  reader:read_bits(3, "precision")
  reader:read_vfloat(reader.parsed.size, reader.parsed.precision, "value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.HrvStatus.ReportV1
--- @return st.zwave.CommandClass.HrvStatus.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.status_parameter = self.args.status_parameter or 0
  args.scale = self.args.scale or 0
  args.value = self.args.value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.HrvStatus.ReportV1
--- @return st.zwave.CommandClass.HrvStatus.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.size = args.size or writer.size(args.value)
  args.precision = args.precision or writer.precision(args.value)
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.HrvStatus.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.HrvStatus.ReportV1
function ReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.status_parameter = function()
    return zw._reflect(
      HrvStatus._reflect_status_parameter,
      args.status_parameter
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.scale = function()
    return zw._reflect(
      HrvStatus._reflect_scale,
      args.status_parameter,
      args.scale
    )
  end
end

--- @class st.zwave.CommandClass.HrvStatus.SupportedGetV1Args
--- @alias SupportedGetV1Args st.zwave.CommandClass.HrvStatus.SupportedGetV1Args
local SupportedGetV1Args = {}

--- @class st.zwave.CommandClass.HrvStatus.SupportedGetV1:st.zwave.Command
--- @alias SupportedGetV1 st.zwave.CommandClass.HrvStatus.SupportedGetV1
---
--- v1 HRV_STATUS_SUPPORTED_GET
---
--- @field public cmd_class number 0x37
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvStatus.SupportedGetV1Args command-specific arguments
local SupportedGetV1 = {}
setmetatable(SupportedGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 HRV_STATUS_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.HrvStatus command class module instance
--- @param args st.zwave.CommandClass.HrvStatus.SupportedGetV1Args command-specific arguments
function SupportedGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.HRV_STATUS, HrvStatus.SUPPORTED_GET, 1, args, ...)
end

--- Serialize v1 HRV_STATUS_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function SupportedGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 HRV_STATUS_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.HrvStatus.SupportedGetV1Args deserialized arguments
function SupportedGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.HrvStatus.SupportedGetV1
--- @return st.zwave.CommandClass.HrvStatus.SupportedGetV1Args
function SupportedGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.HrvStatus.SupportedGetV1
--- @return st.zwave.CommandClass.HrvStatus.SupportedGetV1Args
function SupportedGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.HrvStatus.SupportedGetV1
function SupportedGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.HrvStatus.SupportedGetV1
function SupportedGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.HrvStatus.SupportedReportV1Args
--- @alias SupportedReportV1Args st.zwave.CommandClass.HrvStatus.SupportedReportV1Args
--- @field public outdoor_air_temperature boolean
--- @field public supply_air_temperature boolean
--- @field public exhaust_air_temperature boolean
--- @field public discharge_air_temperature boolean
--- @field public room_temperature boolean
--- @field public relative_humidity_in_room boolean
--- @field public remaining_filter_life boolean
local SupportedReportV1Args = {}

--- @class st.zwave.CommandClass.HrvStatus.SupportedReportV1:st.zwave.Command
--- @alias SupportedReportV1 st.zwave.CommandClass.HrvStatus.SupportedReportV1
---
--- v1 HRV_STATUS_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x37
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvStatus.SupportedReportV1Args command-specific arguments
local SupportedReportV1 = {}
setmetatable(SupportedReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 HRV_STATUS_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.HrvStatus command class module instance
--- @param args st.zwave.CommandClass.HrvStatus.SupportedReportV1Args command-specific arguments
function SupportedReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.HRV_STATUS, HrvStatus.SUPPORTED_REPORT, 1, args, ...)
end

--- Serialize v1 HRV_STATUS_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.outdoor_air_temperature)
  writer:write_bool(args.supply_air_temperature)
  writer:write_bool(args.exhaust_air_temperature)
  writer:write_bool(args.discharge_air_temperature)
  writer:write_bool(args.room_temperature)
  writer:write_bool(args.relative_humidity_in_room)
  writer:write_bool(args.remaining_filter_life)
  return writer.buf
end

--- Deserialize a v1 HRV_STATUS_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.HrvStatus.SupportedReportV1Args deserialized arguments
function SupportedReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("outdoor_air_temperature")
  reader:read_bool("supply_air_temperature")
  reader:read_bool("exhaust_air_temperature")
  reader:read_bool("discharge_air_temperature")
  reader:read_bool("room_temperature")
  reader:read_bool("relative_humidity_in_room")
  reader:read_bool("remaining_filter_life")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.HrvStatus.SupportedReportV1
--- @return st.zwave.CommandClass.HrvStatus.SupportedReportV1Args
function SupportedReportV1._defaults(self)
  local args = {}
  args.outdoor_air_temperature = self.args.outdoor_air_temperature or false
  args.supply_air_temperature = self.args.supply_air_temperature or false
  args.exhaust_air_temperature = self.args.exhaust_air_temperature or false
  args.discharge_air_temperature = self.args.discharge_air_temperature or false
  args.room_temperature = self.args.room_temperature or false
  args.relative_humidity_in_room = self.args.relative_humidity_in_room or false
  args.remaining_filter_life = self.args.remaining_filter_life or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.HrvStatus.SupportedReportV1
--- @return st.zwave.CommandClass.HrvStatus.SupportedReportV1Args
function SupportedReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.HrvStatus.SupportedReportV1
function SupportedReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.HrvStatus.SupportedReportV1
function SupportedReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.HrvStatus.Get
--- @alias _Get st.zwave.CommandClass.HrvStatus.Get
---
--- Dynamically versioned HRV_STATUS_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x37
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvStatus.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a HRV_STATUS_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.HrvStatus command class module instance
--- @param args st.zwave.CommandClass.HrvStatus.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.HrvStatus.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, HrvStatus.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.HrvStatus.Report
--- @alias _Report st.zwave.CommandClass.HrvStatus.Report
---
--- Dynamically versioned HRV_STATUS_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x37
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvStatus.ReportV1Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a HRV_STATUS_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.HrvStatus command class module instance
--- @param args st.zwave.CommandClass.HrvStatus.ReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.HrvStatus.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, HrvStatus.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.HrvStatus.SupportedGet
--- @alias _SupportedGet st.zwave.CommandClass.HrvStatus.SupportedGet
---
--- Dynamically versioned HRV_STATUS_SUPPORTED_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x37
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvStatus.SupportedGetV1Args
local _SupportedGet = {}
setmetatable(_SupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a HRV_STATUS_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.HrvStatus command class module instance
--- @param args st.zwave.CommandClass.HrvStatus.SupportedGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.HrvStatus.SupportedGet
function _SupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, HrvStatus.SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.HrvStatus.SupportedReport
--- @alias _SupportedReport st.zwave.CommandClass.HrvStatus.SupportedReport
---
--- Dynamically versioned HRV_STATUS_SUPPORTED_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x37
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.HrvStatus.SupportedReportV1Args
local _SupportedReport = {}
setmetatable(_SupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a HRV_STATUS_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.HrvStatus command class module instance
--- @param args st.zwave.CommandClass.HrvStatus.SupportedReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.HrvStatus.SupportedReport
function _SupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, HrvStatus.SUPPORTED_REPORT, module._serialization_version, args, ...)
end

HrvStatus.GetV1 = GetV1
HrvStatus.ReportV1 = ReportV1
HrvStatus.SupportedGetV1 = SupportedGetV1
HrvStatus.SupportedReportV1 = SupportedReportV1
HrvStatus.Get = _Get
HrvStatus.Report = _Report
HrvStatus.SupportedGet = _SupportedGet
HrvStatus.SupportedReport = _SupportedReport

HrvStatus._lut = {
  [0] = { -- dynamically versioned constructors
    [HrvStatus.GET] = HrvStatus.Get,
    [HrvStatus.REPORT] = HrvStatus.Report,
    [HrvStatus.SUPPORTED_GET] = HrvStatus.SupportedGet,
    [HrvStatus.SUPPORTED_REPORT] = HrvStatus.SupportedReport
  },
  [1] = { -- version 1
    [HrvStatus.GET] = HrvStatus.GetV1,
    [HrvStatus.REPORT] = HrvStatus.ReportV1,
    [HrvStatus.SUPPORTED_GET] = HrvStatus.SupportedGetV1,
    [HrvStatus.SUPPORTED_REPORT] = HrvStatus.SupportedReportV1
  }
}
--- @class st.zwave.CommandClass.HrvStatus.status_parameter
--- @alias status_parameter st.zwave.CommandClass.HrvStatus.status_parameter
--- @field public OUTDOOR_AIR_TEMPERATURE number 0x00
--- @field public SUPPLY_AIR_TEMPERATURE number 0x01
--- @field public EXHAUST_AIR_TEMPERATURE number 0x02
--- @field public DISCHARGE_AIR_TEMPERATURE number 0x03
--- @field public ROOM_TEMPERATURE number 0x04
--- @field public RELATIVE_HUMIDITY_IN_ROOM number 0x05
--- @field public REMAINING_FILTER_LIFE number 0x06
local status_parameter = {
  OUTDOOR_AIR_TEMPERATURE = 0x00,
  SUPPLY_AIR_TEMPERATURE = 0x01,
  EXHAUST_AIR_TEMPERATURE = 0x02,
  DISCHARGE_AIR_TEMPERATURE = 0x03,
  ROOM_TEMPERATURE = 0x04,
  RELATIVE_HUMIDITY_IN_ROOM = 0x05,
  REMAINING_FILTER_LIFE = 0x06
}
HrvStatus.status_parameter = status_parameter
HrvStatus._reflect_status_parameter = zw._reflection_builder(HrvStatus.status_parameter)

--- @class st.zwave.CommandClass.HrvStatus.scale_discharge_air_temperature
--- @alias scale_discharge_air_temperature st.zwave.CommandClass.HrvStatus.scale_discharge_air_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_discharge_air_temperature = {}

--- @class st.zwave.CommandClass.HrvStatus.scale_exhaust_air_temperature
--- @alias scale_exhaust_air_temperature st.zwave.CommandClass.HrvStatus.scale_exhaust_air_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_exhaust_air_temperature = {}

--- @class st.zwave.CommandClass.HrvStatus.scale_outdoor_air_temperature
--- @alias scale_outdoor_air_temperature st.zwave.CommandClass.HrvStatus.scale_outdoor_air_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_outdoor_air_temperature = {}

--- @class st.zwave.CommandClass.HrvStatus.scale_relative_humidity_in_room
--- @alias scale_relative_humidity_in_room st.zwave.CommandClass.HrvStatus.scale_relative_humidity_in_room
--- @field public PERCENTAGE number 0x00
local scale_relative_humidity_in_room = {}

--- @class st.zwave.CommandClass.HrvStatus.scale_remaining_filter_life
--- @alias scale_remaining_filter_life st.zwave.CommandClass.HrvStatus.scale_remaining_filter_life
--- @field public PERCENTAGE number 0x00
local scale_remaining_filter_life = {}

--- @class st.zwave.CommandClass.HrvStatus.scale_room_temperature
--- @alias scale_room_temperature st.zwave.CommandClass.HrvStatus.scale_room_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_room_temperature = {}

--- @class st.zwave.CommandClass.HrvStatus.scale_supply_air_temperature
--- @alias scale_supply_air_temperature st.zwave.CommandClass.HrvStatus.scale_supply_air_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_supply_air_temperature = {}

--- @class st.zwave.CommandClass.HrvStatus.scale
--- @alias scale st.zwave.CommandClass.HrvStatus.scale
--- @field public discharge_air_temperature st.zwave.CommandClass.scale_discharge_air_temperature
--- @field public exhaust_air_temperature st.zwave.CommandClass.scale_exhaust_air_temperature
--- @field public outdoor_air_temperature st.zwave.CommandClass.scale_outdoor_air_temperature
--- @field public relative_humidity_in_room st.zwave.CommandClass.scale_relative_humidity_in_room
--- @field public remaining_filter_life st.zwave.CommandClass.scale_remaining_filter_life
--- @field public room_temperature st.zwave.CommandClass.scale_room_temperature
--- @field public supply_air_temperature st.zwave.CommandClass.scale_supply_air_temperature
local scale = {
  discharge_air_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  exhaust_air_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  outdoor_air_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  relative_humidity_in_room = {
    PERCENTAGE = 0x00
  },
  remaining_filter_life = {
    PERCENTAGE = 0x00
  },
  room_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  supply_air_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  }
}
HrvStatus.scale = scale
HrvStatus._reflect_scale = zw._reflection_builder(HrvStatus.scale, HrvStatus.status_parameter)


return HrvStatus
