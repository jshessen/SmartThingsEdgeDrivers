-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.Indicator
--- @alias Indicator st.zwave.CommandClass.Indicator
---
--- Supported versions: 1,2,3,4
---
--- @field public SET number 0x01 - INDICATOR_SET command id
--- @field public GET number 0x02 - INDICATOR_GET command id
--- @field public REPORT number 0x03 - INDICATOR_REPORT command id
--- @field public SUPPORTED_GET number 0x04 - INDICATOR_SUPPORTED_GET command id
--- @field public SUPPORTED_REPORT number 0x05 - INDICATOR_SUPPORTED_REPORT command id
--- @field public DESCRIPTION_GET number 0x06 - INDICATOR_DESCRIPTION_GET command id
--- @field public DESCRIPTION_REPORT number 0x07 - INDICATOR_DESCRIPTION_REPORT command id
local Indicator = {}
Indicator.SET = 0x01
Indicator.GET = 0x02
Indicator.REPORT = 0x03
Indicator.SUPPORTED_GET = 0x04
Indicator.SUPPORTED_REPORT = 0x05
Indicator.DESCRIPTION_GET = 0x06
Indicator.DESCRIPTION_REPORT = 0x07

Indicator._commands = {
  [Indicator.SET] = "SET",
  [Indicator.GET] = "GET",
  [Indicator.REPORT] = "REPORT",
  [Indicator.SUPPORTED_GET] = "SUPPORTED_GET",
  [Indicator.SUPPORTED_REPORT] = "SUPPORTED_REPORT",
  [Indicator.DESCRIPTION_GET] = "DESCRIPTION_GET",
  [Indicator.DESCRIPTION_REPORT] = "DESCRIPTION_REPORT"
}

--- Instantiate a versioned instance of the Indicator Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.Indicator versioned command class instance
function Indicator:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.INDICATOR][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(Indicator, {
  __call = Indicator.init
})

Indicator._serialization_version = nil
Indicator._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.INDICATOR] = {
  [1] = true,
  [2] = true,
  [3] = true,
  [4] = true
}

--- @class st.zwave.CommandClass.Indicator.SetV1Args
--- @alias SetV1Args st.zwave.CommandClass.Indicator.SetV1Args
--- @field public value integer see :lua:class:`Indicator.value <st.zwave.CommandClass.Indicator.value>`
local SetV1Args = {}

--- @class st.zwave.CommandClass.Indicator.SetV1:st.zwave.Command
--- @alias SetV1 st.zwave.CommandClass.Indicator.SetV1
---
--- v1 INDICATOR_SET
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Indicator.SetV1Args command-specific arguments
local SetV1 = {}
setmetatable(SetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 INDICATOR_SET object.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.SetV1Args command-specific arguments
function SetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.INDICATOR, Indicator.SET, 1, args, ...)
end

--- Serialize v1 INDICATOR_SET arguments.
---
--- @return string serialized payload
function SetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.value)
  return writer.buf
end

--- Deserialize a v1 INDICATOR_SET payload.
---
--- @return st.zwave.CommandClass.Indicator.SetV1Args deserialized arguments
function SetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Indicator.SetV1
--- @return st.zwave.CommandClass.Indicator.SetV1Args
function SetV1._defaults(self)
  local args = {}
  args.value = self.args.value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Indicator.SetV1
--- @return st.zwave.CommandClass.Indicator.SetV1Args
function SetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Indicator.SetV1
function SetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Indicator.SetV1
function SetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.value = function()
    return zw._reflect(
      Indicator._reflect_value,
      args.value
    )
  end
end

--- @class st.zwave.CommandClass.Indicator.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.Indicator.GetV1Args
local GetV1Args = {}

--- @class st.zwave.CommandClass.Indicator.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.Indicator.GetV1
---
--- v1 INDICATOR_GET
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Indicator.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 INDICATOR_GET object.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.INDICATOR, Indicator.GET, 1, args, ...)
end

--- Serialize v1 INDICATOR_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 INDICATOR_GET payload.
---
--- @return st.zwave.CommandClass.Indicator.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Indicator.GetV1
--- @return st.zwave.CommandClass.Indicator.GetV1Args
function GetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Indicator.GetV1
--- @return st.zwave.CommandClass.Indicator.GetV1Args
function GetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Indicator.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Indicator.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Indicator.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.Indicator.ReportV1Args
--- @field public value integer see :lua:class:`Indicator.value <st.zwave.CommandClass.Indicator.value>`
local ReportV1Args = {}

--- @class st.zwave.CommandClass.Indicator.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.Indicator.ReportV1
---
--- v1 INDICATOR_REPORT
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Indicator.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 INDICATOR_REPORT object.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.INDICATOR, Indicator.REPORT, 1, args, ...)
end

--- Serialize v1 INDICATOR_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.value)
  return writer.buf
end

--- Deserialize a v1 INDICATOR_REPORT payload.
---
--- @return st.zwave.CommandClass.Indicator.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Indicator.ReportV1
--- @return st.zwave.CommandClass.Indicator.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.value = self.args.value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Indicator.ReportV1
--- @return st.zwave.CommandClass.Indicator.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Indicator.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Indicator.ReportV1
function ReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.value = function()
    return zw._reflect(
      Indicator._reflect_value,
      args.value
    )
  end
end

--- @class st.zwave.CommandClass.Indicator.SetV2ArgsIndicatorObjects
--- @alias SetV2ArgsIndicatorObjects st.zwave.CommandClass.Indicator.SetV2ArgsIndicatorObjects
--- @field public indicator_id integer see :lua:class:`Indicator.indicator_id <st.zwave.CommandClass.Indicator.indicator_id>`
--- @field public property_id integer see :lua:class:`Indicator.property_id <st.zwave.CommandClass.Indicator.property_id>`
--- @field public value integer see :lua:class:`Indicator.value <st.zwave.CommandClass.Indicator.value>`
local SetV2ArgsIndicatorObjects = {}

--- @class st.zwave.CommandClass.Indicator.SetV2Args
--- @alias SetV2Args st.zwave.CommandClass.Indicator.SetV2Args
--- @field public indicator_0_value integer see :lua:class:`Indicator.indicator_0_value <st.zwave.CommandClass.Indicator.indicator_0_value>`
--- @field public indicator_objects st.zwave.CommandClass.Indicator.SetV2ArgsIndicatorObjects[]
local SetV2Args = {}

--- @class st.zwave.CommandClass.Indicator.SetV2:st.zwave.Command
--- @alias SetV2 st.zwave.CommandClass.Indicator.SetV2
---
--- v2 and forward-compatible v3,v4 INDICATOR_SET
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x01
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Indicator.SetV2Args command-specific arguments
local SetV2 = {}
setmetatable(SetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 INDICATOR_SET object.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.SetV2Args command-specific arguments
function SetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.INDICATOR, Indicator.SET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 INDICATOR_SET arguments.
---
--- @return string serialized payload
function SetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.indicator_0_value)
  writer:write_bits(5, writer.length(args.indicator_objects))
  writer:write_bits(3, 0) -- reserved
  for i=1,writer.length(args.indicator_objects) do
    writer:write_u8(args.indicator_objects[i].indicator_id)
    writer:write_u8(args.indicator_objects[i].property_id)
    writer:write_u8(args.indicator_objects[i].value)
  end
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 INDICATOR_SET payload.
---
--- @return st.zwave.CommandClass.Indicator.SetV2Args deserialized arguments
function SetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("indicator_0_value")
  reader:read_bits(5, "indicator_object_count")
  reader:read_bits(3) -- reserved
  reader.parsed.indicator_objects = {}
  for i=1,reader.parsed.indicator_object_count do
    reader.parsed.indicator_objects[i] = {}
    reader:read_u8("indicator_id", reader.parsed.indicator_objects[i])
    reader:read_u8("property_id", reader.parsed.indicator_objects[i])
    reader:read_u8("value", reader.parsed.indicator_objects[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Indicator.SetV2
--- @return st.zwave.CommandClass.Indicator.SetV2Args
function SetV2._defaults(self)
  local args = {}
  args.indicator_0_value = self.args.indicator_0_value or 0
  args.indicator_objects = self.args.indicator_objects or {}
  for i=1,buf.Writer.length(args.indicator_objects) do
    args.indicator_objects[i] = args.indicator_objects[i] or {}
    args.indicator_objects[i].indicator_id = self.args.indicator_objects[i].indicator_id or 0
    args.indicator_objects[i].property_id = self.args.indicator_objects[i].property_id or 0
    args.indicator_objects[i].value = self.args.indicator_objects[i].value or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Indicator.SetV2
--- @return st.zwave.CommandClass.Indicator.SetV2Args
function SetV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.indicator_objects) do
    args.indicator_objects[i] = args.indicator_objects[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Indicator.SetV2
function SetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Indicator.SetV2
function SetV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.indicator_0_value = function()
    return zw._reflect(
      Indicator._reflect_indicator_0_value,
      args.indicator_0_value
    )
  end
  for i=1,buf.Writer.length(args.indicator_objects) do
    args.indicator_objects[i]._reflect = args.indicator_objects[i]._reflect or {}
    args.indicator_objects[i]._reflect.indicator_id = function()
      return zw._reflect(
        Indicator._reflect_indicator_id,
        args.indicator_objects[i].indicator_id
      )
    end
    args.indicator_objects[i]._reflect = args.indicator_objects[i]._reflect or {}
    args.indicator_objects[i]._reflect.property_id = function()
      return zw._reflect(
        Indicator._reflect_property_id,
        args.indicator_objects[i].property_id
      )
    end
  end
end

--- @class st.zwave.CommandClass.Indicator.GetV2Args
--- @alias GetV2Args st.zwave.CommandClass.Indicator.GetV2Args
--- @field public indicator_id integer see :lua:class:`Indicator.indicator_id <st.zwave.CommandClass.Indicator.indicator_id>`
local GetV2Args = {}

--- @class st.zwave.CommandClass.Indicator.GetV2:st.zwave.Command
--- @alias GetV2 st.zwave.CommandClass.Indicator.GetV2
---
--- v2 and forward-compatible v3,v4 INDICATOR_GET
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x02
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Indicator.GetV2Args command-specific arguments
local GetV2 = {}
setmetatable(GetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 INDICATOR_GET object.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.GetV2Args command-specific arguments
function GetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.INDICATOR, Indicator.GET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 INDICATOR_GET arguments.
---
--- @return string serialized payload
function GetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.indicator_id)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 INDICATOR_GET payload.
---
--- @return st.zwave.CommandClass.Indicator.GetV2Args deserialized arguments
function GetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("indicator_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Indicator.GetV2
--- @return st.zwave.CommandClass.Indicator.GetV2Args
function GetV2._defaults(self)
  local args = {}
  args.indicator_id = self.args.indicator_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Indicator.GetV2
--- @return st.zwave.CommandClass.Indicator.GetV2Args
function GetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Indicator.GetV2
function GetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Indicator.GetV2
function GetV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.indicator_id = function()
    return zw._reflect(
      Indicator._reflect_indicator_id,
      args.indicator_id
    )
  end
end

--- @class st.zwave.CommandClass.Indicator.ReportV2ArgsIndicatorObjects
--- @alias ReportV2ArgsIndicatorObjects st.zwave.CommandClass.Indicator.ReportV2ArgsIndicatorObjects
--- @field public indicator_id integer see :lua:class:`Indicator.indicator_id <st.zwave.CommandClass.Indicator.indicator_id>`
--- @field public property_id integer see :lua:class:`Indicator.property_id <st.zwave.CommandClass.Indicator.property_id>`
--- @field public value integer see :lua:class:`Indicator.value <st.zwave.CommandClass.Indicator.value>`
local ReportV2ArgsIndicatorObjects = {}

--- @class st.zwave.CommandClass.Indicator.ReportV2Args
--- @alias ReportV2Args st.zwave.CommandClass.Indicator.ReportV2Args
--- @field public indicator_0_value integer see :lua:class:`Indicator.indicator_0_value <st.zwave.CommandClass.Indicator.indicator_0_value>`
--- @field public indicator_objects st.zwave.CommandClass.Indicator.ReportV2ArgsIndicatorObjects[]
local ReportV2Args = {}

--- @class st.zwave.CommandClass.Indicator.ReportV2:st.zwave.Command
--- @alias ReportV2 st.zwave.CommandClass.Indicator.ReportV2
---
--- v2 and forward-compatible v3,v4 INDICATOR_REPORT
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x03
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Indicator.ReportV2Args command-specific arguments
local ReportV2 = {}
setmetatable(ReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 INDICATOR_REPORT object.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.ReportV2Args command-specific arguments
function ReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.INDICATOR, Indicator.REPORT, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 INDICATOR_REPORT arguments.
---
--- @return string serialized payload
function ReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.indicator_0_value)
  writer:write_bits(5, writer.length(args.indicator_objects))
  writer:write_bits(3, 0) -- reserved
  for i=1,writer.length(args.indicator_objects) do
    writer:write_u8(args.indicator_objects[i].indicator_id)
    writer:write_u8(args.indicator_objects[i].property_id)
    writer:write_u8(args.indicator_objects[i].value)
  end
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 INDICATOR_REPORT payload.
---
--- @return st.zwave.CommandClass.Indicator.ReportV2Args deserialized arguments
function ReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("indicator_0_value")
  reader:read_bits(5, "indicator_object_count")
  reader:read_bits(3) -- reserved
  reader.parsed.indicator_objects = {}
  for i=1,reader.parsed.indicator_object_count do
    reader.parsed.indicator_objects[i] = {}
    reader:read_u8("indicator_id", reader.parsed.indicator_objects[i])
    reader:read_u8("property_id", reader.parsed.indicator_objects[i])
    reader:read_u8("value", reader.parsed.indicator_objects[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Indicator.ReportV2
--- @return st.zwave.CommandClass.Indicator.ReportV2Args
function ReportV2._defaults(self)
  local args = {}
  args.indicator_0_value = self.args.indicator_0_value or 0
  args.indicator_objects = self.args.indicator_objects or {}
  for i=1,buf.Writer.length(args.indicator_objects) do
    args.indicator_objects[i] = args.indicator_objects[i] or {}
    args.indicator_objects[i].indicator_id = self.args.indicator_objects[i].indicator_id or 0
    args.indicator_objects[i].property_id = self.args.indicator_objects[i].property_id or 0
    args.indicator_objects[i].value = self.args.indicator_objects[i].value or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Indicator.ReportV2
--- @return st.zwave.CommandClass.Indicator.ReportV2Args
function ReportV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.indicator_objects) do
    args.indicator_objects[i] = args.indicator_objects[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Indicator.ReportV2
function ReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Indicator.ReportV2
function ReportV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.indicator_0_value = function()
    return zw._reflect(
      Indicator._reflect_indicator_0_value,
      args.indicator_0_value
    )
  end
  for i=1,buf.Writer.length(args.indicator_objects) do
    args.indicator_objects[i]._reflect = args.indicator_objects[i]._reflect or {}
    args.indicator_objects[i]._reflect.indicator_id = function()
      return zw._reflect(
        Indicator._reflect_indicator_id,
        args.indicator_objects[i].indicator_id
      )
    end
    args.indicator_objects[i]._reflect = args.indicator_objects[i]._reflect or {}
    args.indicator_objects[i]._reflect.property_id = function()
      return zw._reflect(
        Indicator._reflect_property_id,
        args.indicator_objects[i].property_id
      )
    end
  end
end

--- @class st.zwave.CommandClass.Indicator.SupportedGetV2Args
--- @alias SupportedGetV2Args st.zwave.CommandClass.Indicator.SupportedGetV2Args
--- @field public indicator_id integer see :lua:class:`Indicator.indicator_id <st.zwave.CommandClass.Indicator.indicator_id>`
local SupportedGetV2Args = {}

--- @class st.zwave.CommandClass.Indicator.SupportedGetV2:st.zwave.Command
--- @alias SupportedGetV2 st.zwave.CommandClass.Indicator.SupportedGetV2
---
--- v2 and forward-compatible v3,v4 INDICATOR_SUPPORTED_GET
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x04
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Indicator.SupportedGetV2Args command-specific arguments
local SupportedGetV2 = {}
setmetatable(SupportedGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 INDICATOR_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.SupportedGetV2Args command-specific arguments
function SupportedGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.INDICATOR, Indicator.SUPPORTED_GET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 INDICATOR_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function SupportedGetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.indicator_id)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 INDICATOR_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.Indicator.SupportedGetV2Args deserialized arguments
function SupportedGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("indicator_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Indicator.SupportedGetV2
--- @return st.zwave.CommandClass.Indicator.SupportedGetV2Args
function SupportedGetV2._defaults(self)
  local args = {}
  args.indicator_id = self.args.indicator_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Indicator.SupportedGetV2
--- @return st.zwave.CommandClass.Indicator.SupportedGetV2Args
function SupportedGetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Indicator.SupportedGetV2
function SupportedGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Indicator.SupportedGetV2
function SupportedGetV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.indicator_id = function()
    return zw._reflect(
      Indicator._reflect_indicator_id,
      args.indicator_id
    )
  end
end

--- @class st.zwave.CommandClass.Indicator.SupportedReportV2Args
--- @alias SupportedReportV2Args st.zwave.CommandClass.Indicator.SupportedReportV2Args
--- @field public indicator_id integer see :lua:class:`Indicator.indicator_id <st.zwave.CommandClass.Indicator.indicator_id>`
--- @field public next_indicator_id integer see :lua:class:`Indicator.next_indicator_id <st.zwave.CommandClass.Indicator.next_indicator_id>`
--- @field public multilevel boolean
--- @field public binary boolean
--- @field public on_off_period boolean
--- @field public on_off_cycles boolean
--- @field public low_power boolean
local SupportedReportV2Args = {}

--- @class st.zwave.CommandClass.Indicator.SupportedReportV2:st.zwave.Command
--- @alias SupportedReportV2 st.zwave.CommandClass.Indicator.SupportedReportV2
---
--- v2 INDICATOR_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x05
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Indicator.SupportedReportV2Args command-specific arguments
local SupportedReportV2 = {}
setmetatable(SupportedReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 INDICATOR_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.SupportedReportV2Args command-specific arguments
function SupportedReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.INDICATOR, Indicator.SUPPORTED_REPORT, 2, args, ...)
end

--- Serialize v2 INDICATOR_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.indicator_id)
  writer:write_u8(args.next_indicator_id)
  writer:write_bits(5, 2)
  writer:write_bits(3, 0) -- reserved
  writer:write_bits(1, 0) -- reserved
  writer:write_bool(args.multilevel)
  writer:write_bool(args.binary)
  writer:write_bool(args.on_off_period)
  writer:write_bool(args.on_off_cycles)
  writer:write_bits(11, 0) -- reserved
  writer:write_bool(args.low_power)
  return writer.buf
end

--- Deserialize a v2 INDICATOR_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.Indicator.SupportedReportV2Args deserialized arguments
function SupportedReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("indicator_id")
  reader:read_u8("next_indicator_id")
  reader:read_bits(5, "property_supported_bit_mask_length")
  reader:read_bits(3) -- reserved
  if reader.parsed.property_supported_bit_mask_length > 0 then
    reader:bit_seek(1) -- reserved
    reader:read_bool("multilevel")
    reader:read_bool("binary")
    reader:read_bool("on_off_period")
    reader:read_bool("on_off_cycles")
    reader:bit_seek(11) -- reserved
    reader:read_bool("low_power")
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Indicator.SupportedReportV2
--- @return st.zwave.CommandClass.Indicator.SupportedReportV2Args
function SupportedReportV2._defaults(self)
  local args = {}
  args.indicator_id = self.args.indicator_id or 0
  args.next_indicator_id = self.args.next_indicator_id or 0
  args.multilevel = self.args.multilevel or false
  args.binary = self.args.binary or false
  args.on_off_period = self.args.on_off_period or false
  args.on_off_cycles = self.args.on_off_cycles or false
  args.low_power = self.args.low_power or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Indicator.SupportedReportV2
--- @return st.zwave.CommandClass.Indicator.SupportedReportV2Args
function SupportedReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Indicator.SupportedReportV2
function SupportedReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Indicator.SupportedReportV2
function SupportedReportV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.indicator_id = function()
    return zw._reflect(
      Indicator._reflect_indicator_id,
      args.indicator_id
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.next_indicator_id = function()
    return zw._reflect(
      Indicator._reflect_next_indicator_id,
      args.next_indicator_id
    )
  end
end

--- @class st.zwave.CommandClass.Indicator.SupportedReportV3Args
--- @alias SupportedReportV3Args st.zwave.CommandClass.Indicator.SupportedReportV3Args
--- @field public indicator_id integer see :lua:class:`Indicator.indicator_id <st.zwave.CommandClass.Indicator.indicator_id>`
--- @field public next_indicator_id integer see :lua:class:`Indicator.next_indicator_id <st.zwave.CommandClass.Indicator.next_indicator_id>`
--- @field public multilevel boolean
--- @field public binary boolean
--- @field public on_off_period boolean
--- @field public on_off_cycles boolean
--- @field public one_time_on_off_period boolean
--- @field public timeout_minutes boolean
--- @field public timeout_seconds boolean
--- @field public timeout_1_100_seconds boolean
--- @field public specific_volume boolean
--- @field public low_power boolean
local SupportedReportV3Args = {}

--- @class st.zwave.CommandClass.Indicator.SupportedReportV3:st.zwave.Command
--- @alias SupportedReportV3 st.zwave.CommandClass.Indicator.SupportedReportV3
---
--- v3 and forward-compatible v4 INDICATOR_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x05
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Indicator.SupportedReportV3Args command-specific arguments
local SupportedReportV3 = {}
setmetatable(SupportedReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4 INDICATOR_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.SupportedReportV3Args command-specific arguments
function SupportedReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.INDICATOR, Indicator.SUPPORTED_REPORT, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4 INDICATOR_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.indicator_id)
  writer:write_u8(args.next_indicator_id)
  writer:write_bits(5, 2)
  writer:write_bits(3, 0) -- reserved
  writer:write_bits(1, 0) -- reserved
  writer:write_bool(args.multilevel)
  writer:write_bool(args.binary)
  writer:write_bool(args.on_off_period)
  writer:write_bool(args.on_off_cycles)
  writer:write_bool(args.one_time_on_off_period)
  writer:write_bool(args.timeout_minutes)
  writer:write_bool(args.timeout_seconds)
  writer:write_bool(args.timeout_1_100_seconds)
  writer:write_bool(args.specific_volume)
  writer:write_bits(6, 0) -- reserved
  writer:write_bool(args.low_power)
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4 INDICATOR_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.Indicator.SupportedReportV3Args deserialized arguments
function SupportedReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("indicator_id")
  reader:read_u8("next_indicator_id")
  reader:read_bits(5, "property_supported_bit_mask_length")
  reader:read_bits(3) -- reserved
  if reader.parsed.property_supported_bit_mask_length > 0 then
    reader:bit_seek(1) -- reserved
    reader:read_bool("multilevel")
    reader:read_bool("binary")
    reader:read_bool("on_off_period")
    reader:read_bool("on_off_cycles")
    reader:read_bool("one_time_on_off_period")
    reader:read_bool("timeout_minutes")
    reader:read_bool("timeout_seconds")
  end
  if reader.parsed.property_supported_bit_mask_length > 1 then
    reader:read_bool("timeout_1_100_seconds")
    reader:read_bool("specific_volume")
    reader:bit_seek(6) -- reserved
    reader:read_bool("low_power")
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Indicator.SupportedReportV3
--- @return st.zwave.CommandClass.Indicator.SupportedReportV3Args
function SupportedReportV3._defaults(self)
  local args = {}
  args.indicator_id = self.args.indicator_id or 0
  args.next_indicator_id = self.args.next_indicator_id or 0
  args.multilevel = self.args.multilevel or false
  args.binary = self.args.binary or false
  args.on_off_period = self.args.on_off_period or false
  args.on_off_cycles = self.args.on_off_cycles or false
  args.one_time_on_off_period = self.args.one_time_on_off_period or false
  args.timeout_minutes = self.args.timeout_minutes or false
  args.timeout_seconds = self.args.timeout_seconds or false
  args.timeout_1_100_seconds = self.args.timeout_1_100_seconds or false
  args.specific_volume = self.args.specific_volume or false
  args.low_power = self.args.low_power or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Indicator.SupportedReportV3
--- @return st.zwave.CommandClass.Indicator.SupportedReportV3Args
function SupportedReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Indicator.SupportedReportV3
function SupportedReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Indicator.SupportedReportV3
function SupportedReportV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.indicator_id = function()
    return zw._reflect(
      Indicator._reflect_indicator_id,
      args.indicator_id
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.next_indicator_id = function()
    return zw._reflect(
      Indicator._reflect_next_indicator_id,
      args.next_indicator_id
    )
  end
end

--- @class st.zwave.CommandClass.Indicator.DescriptionGetV4Args
--- @alias DescriptionGetV4Args st.zwave.CommandClass.Indicator.DescriptionGetV4Args
--- @field public indicator_id integer see :lua:class:`Indicator.indicator_id <st.zwave.CommandClass.Indicator.indicator_id>`
local DescriptionGetV4Args = {}

--- @class st.zwave.CommandClass.Indicator.DescriptionGetV4:st.zwave.Command
--- @alias DescriptionGetV4 st.zwave.CommandClass.Indicator.DescriptionGetV4
---
--- v4 INDICATOR_DESCRIPTION_GET
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x06
--- @field public version number 4
--- @field public args st.zwave.CommandClass.Indicator.DescriptionGetV4Args command-specific arguments
local DescriptionGetV4 = {}
setmetatable(DescriptionGetV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 INDICATOR_DESCRIPTION_GET object.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.DescriptionGetV4Args command-specific arguments
function DescriptionGetV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.INDICATOR, Indicator.DESCRIPTION_GET, 4, args, ...)
end

--- Serialize v4 INDICATOR_DESCRIPTION_GET arguments.
---
--- @return string serialized payload
function DescriptionGetV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.indicator_id)
  return writer.buf
end

--- Deserialize a v4 INDICATOR_DESCRIPTION_GET payload.
---
--- @return st.zwave.CommandClass.Indicator.DescriptionGetV4Args deserialized arguments
function DescriptionGetV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("indicator_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Indicator.DescriptionGetV4
--- @return st.zwave.CommandClass.Indicator.DescriptionGetV4Args
function DescriptionGetV4._defaults(self)
  local args = {}
  args.indicator_id = self.args.indicator_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Indicator.DescriptionGetV4
--- @return st.zwave.CommandClass.Indicator.DescriptionGetV4Args
function DescriptionGetV4._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Indicator.DescriptionGetV4
function DescriptionGetV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Indicator.DescriptionGetV4
function DescriptionGetV4._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Indicator.DescriptionReportV4Args
--- @alias DescriptionReportV4Args st.zwave.CommandClass.Indicator.DescriptionReportV4Args
--- @field public indicator_id integer see :lua:class:`Indicator.indicator_id <st.zwave.CommandClass.Indicator.indicator_id>`
--- @field public description string
local DescriptionReportV4Args = {}

--- @class st.zwave.CommandClass.Indicator.DescriptionReportV4:st.zwave.Command
--- @alias DescriptionReportV4 st.zwave.CommandClass.Indicator.DescriptionReportV4
---
--- v4 INDICATOR_DESCRIPTION_REPORT
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x07
--- @field public version number 4
--- @field public args st.zwave.CommandClass.Indicator.DescriptionReportV4Args command-specific arguments
local DescriptionReportV4 = {}
setmetatable(DescriptionReportV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 INDICATOR_DESCRIPTION_REPORT object.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.DescriptionReportV4Args command-specific arguments
function DescriptionReportV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.INDICATOR, Indicator.DESCRIPTION_REPORT, 4, args, ...)
end

--- Serialize v4 INDICATOR_DESCRIPTION_REPORT arguments.
---
--- @return string serialized payload
function DescriptionReportV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.indicator_id)
  writer:write_u8(writer.length(args.description))
  writer:write_bytes(args.description)
  return writer.buf
end

--- Deserialize a v4 INDICATOR_DESCRIPTION_REPORT payload.
---
--- @return st.zwave.CommandClass.Indicator.DescriptionReportV4Args deserialized arguments
function DescriptionReportV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("indicator_id")
  reader:read_u8("description_length")
  reader:read_bytes(reader.parsed.description_length, "description")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Indicator.DescriptionReportV4
--- @return st.zwave.CommandClass.Indicator.DescriptionReportV4Args
function DescriptionReportV4._defaults(self)
  local args = {}
  args.indicator_id = self.args.indicator_id or 0
  args.description = self.args.description or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Indicator.DescriptionReportV4
--- @return st.zwave.CommandClass.Indicator.DescriptionReportV4Args
function DescriptionReportV4._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Indicator.DescriptionReportV4
function DescriptionReportV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Indicator.DescriptionReportV4
function DescriptionReportV4._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Indicator.Set
--- @alias _Set st.zwave.CommandClass.Indicator.Set
---
--- Dynamically versioned INDICATOR_SET
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x01
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.Indicator.SetV1Args|st.zwave.CommandClass.Indicator.SetV2Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an INDICATOR_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.SetV1Args|st.zwave.CommandClass.Indicator.SetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Indicator.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, Indicator.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Indicator.Get
--- @alias _Get st.zwave.CommandClass.Indicator.Get
---
--- Dynamically versioned INDICATOR_GET
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x02
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.Indicator.GetV1Args|st.zwave.CommandClass.Indicator.GetV2Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an INDICATOR_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.GetV1Args|st.zwave.CommandClass.Indicator.GetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Indicator.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, Indicator.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Indicator.Report
--- @alias _Report st.zwave.CommandClass.Indicator.Report
---
--- Dynamically versioned INDICATOR_REPORT
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x03
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.Indicator.ReportV1Args|st.zwave.CommandClass.Indicator.ReportV2Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an INDICATOR_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.ReportV1Args|st.zwave.CommandClass.Indicator.ReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.Indicator.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, Indicator.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Indicator.SupportedGet
--- @alias _SupportedGet st.zwave.CommandClass.Indicator.SupportedGet
---
--- Dynamically versioned INDICATOR_SUPPORTED_GET
---
--- Supported versions: 2,3,4; unique base versions: 2
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x04
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Indicator.SupportedGetV2Args
local _SupportedGet = {}
setmetatable(_SupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an INDICATOR_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.SupportedGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Indicator.SupportedGet
function _SupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, Indicator.SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Indicator.SupportedReport
--- @alias _SupportedReport st.zwave.CommandClass.Indicator.SupportedReport
---
--- Dynamically versioned INDICATOR_SUPPORTED_REPORT
---
--- Supported versions: 2,3,4; unique base versions: 2,3
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x05
--- @field public version number 2,3
--- @field public args st.zwave.CommandClass.Indicator.SupportedReportV2Args|st.zwave.CommandClass.Indicator.SupportedReportV3Args
local _SupportedReport = {}
setmetatable(_SupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an INDICATOR_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.SupportedReportV2Args|st.zwave.CommandClass.Indicator.SupportedReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.Indicator.SupportedReport
function _SupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, Indicator.SUPPORTED_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Indicator.DescriptionGet
--- @alias _DescriptionGet st.zwave.CommandClass.Indicator.DescriptionGet
---
--- Dynamically versioned INDICATOR_DESCRIPTION_GET
---
--- Supported versions: 4; unique base versions: 4
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x06
--- @field public version number 4
--- @field public args st.zwave.CommandClass.Indicator.DescriptionGetV4Args
local _DescriptionGet = {}
setmetatable(_DescriptionGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an INDICATOR_DESCRIPTION_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.DescriptionGetV4Args command-specific arguments
--- @return st.zwave.CommandClass.Indicator.DescriptionGet
function _DescriptionGet:construct(module, args, ...)
  return zw.Command._construct(module, Indicator.DESCRIPTION_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Indicator.DescriptionReport
--- @alias _DescriptionReport st.zwave.CommandClass.Indicator.DescriptionReport
---
--- Dynamically versioned INDICATOR_DESCRIPTION_REPORT
---
--- Supported versions: 4; unique base versions: 4
---
--- @field public cmd_class number 0x87
--- @field public cmd_id number 0x07
--- @field public version number 4
--- @field public args st.zwave.CommandClass.Indicator.DescriptionReportV4Args
local _DescriptionReport = {}
setmetatable(_DescriptionReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an INDICATOR_DESCRIPTION_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Indicator command class module instance
--- @param args st.zwave.CommandClass.Indicator.DescriptionReportV4Args command-specific arguments
--- @return st.zwave.CommandClass.Indicator.DescriptionReport
function _DescriptionReport:construct(module, args, ...)
  return zw.Command._construct(module, Indicator.DESCRIPTION_REPORT, module._serialization_version, args, ...)
end

Indicator.SetV1 = SetV1
Indicator.GetV1 = GetV1
Indicator.ReportV1 = ReportV1
Indicator.SetV2 = SetV2
Indicator.GetV2 = GetV2
Indicator.ReportV2 = ReportV2
Indicator.SupportedGetV2 = SupportedGetV2
Indicator.SupportedReportV2 = SupportedReportV2
Indicator.SupportedReportV3 = SupportedReportV3
Indicator.DescriptionGetV4 = DescriptionGetV4
Indicator.DescriptionReportV4 = DescriptionReportV4
Indicator.Set = _Set
Indicator.Get = _Get
Indicator.Report = _Report
Indicator.SupportedGet = _SupportedGet
Indicator.SupportedReport = _SupportedReport
Indicator.DescriptionGet = _DescriptionGet
Indicator.DescriptionReport = _DescriptionReport

Indicator._lut = {
  [0] = { -- dynamically versioned constructors
    [Indicator.SET] = Indicator.Set,
    [Indicator.GET] = Indicator.Get,
    [Indicator.REPORT] = Indicator.Report,
    [Indicator.SUPPORTED_GET] = Indicator.SupportedGet,
    [Indicator.SUPPORTED_REPORT] = Indicator.SupportedReport,
    [Indicator.DESCRIPTION_GET] = Indicator.DescriptionGet,
    [Indicator.DESCRIPTION_REPORT] = Indicator.DescriptionReport
  },
  [1] = { -- version 1
    [Indicator.SET] = Indicator.SetV1,
    [Indicator.GET] = Indicator.GetV1,
    [Indicator.REPORT] = Indicator.ReportV1
  },
  [2] = { -- version 2
    [Indicator.SET] = Indicator.SetV2,
    [Indicator.GET] = Indicator.GetV2,
    [Indicator.REPORT] = Indicator.ReportV2,
    [Indicator.SUPPORTED_GET] = Indicator.SupportedGetV2,
    [Indicator.SUPPORTED_REPORT] = Indicator.SupportedReportV2
  },
  [3] = { -- version 3
    [Indicator.SET] = Indicator.SetV2,
    [Indicator.GET] = Indicator.GetV2,
    [Indicator.REPORT] = Indicator.ReportV2,
    [Indicator.SUPPORTED_GET] = Indicator.SupportedGetV2,
    [Indicator.SUPPORTED_REPORT] = Indicator.SupportedReportV3
  },
  [4] = { -- version 4
    [Indicator.SET] = Indicator.SetV2,
    [Indicator.GET] = Indicator.GetV2,
    [Indicator.REPORT] = Indicator.ReportV2,
    [Indicator.SUPPORTED_GET] = Indicator.SupportedGetV2,
    [Indicator.SUPPORTED_REPORT] = Indicator.SupportedReportV3,
    [Indicator.DESCRIPTION_GET] = Indicator.DescriptionGetV4,
    [Indicator.DESCRIPTION_REPORT] = Indicator.DescriptionReportV4
  }
}
--- @class st.zwave.CommandClass.Indicator.indicator_0_value
--- @alias indicator_0_value st.zwave.CommandClass.Indicator.indicator_0_value
--- @field public OFF_DISABLE number 0x00
--- @field public ON_ENABLE number 0xFF
local indicator_0_value = {
  OFF_DISABLE = 0x00,
  ON_ENABLE = 0xFF
}
Indicator.indicator_0_value = indicator_0_value
Indicator._reflect_indicator_0_value = zw._reflection_builder(Indicator.indicator_0_value)

--- @class st.zwave.CommandClass.Indicator.indicator_id
--- @alias indicator_id st.zwave.CommandClass.Indicator.indicator_id
--- @field public NA number 0x00
--- @field public ARMED number 0x01
--- @field public NOT_ARMED number 0x02
--- @field public READY number 0x03
--- @field public FAULT number 0x04
--- @field public BUSY number 0x05
--- @field public ENTER_ID number 0x06
--- @field public ENTER_PIN number 0x07
--- @field public OK number 0x08
--- @field public NOT_OK number 0x09
--- @field public ARMED_STAY number 0x0A
--- @field public ARMED_AWAY number 0x0B
--- @field public ALARMING number 0x0C
--- @field public ALARMING_BURGLAR number 0x0D
--- @field public ALARMING_SMOKE_FIRE number 0x0E
--- @field public ALARMING_CARBON_MONOXIDE number 0x0F
--- @field public BYPASS_CHALLENGE number 0x10
--- @field public ENTRY_DELAY number 0x11
--- @field public EXIT_DELAY number 0x12
--- @field public ZONE1_ARMED number 0x20
--- @field public ZONE2_ARMED number 0x21
--- @field public ZONE3_ARMED number 0x22
--- @field public ZONE4_ARMED number 0x23
--- @field public ZONE5_ARMED number 0x24
--- @field public ZONE6_ARMED number 0x25
--- @field public LCD_BACKLIGHT number 0x30
--- @field public BUTTON_BACKLIGHT_LETTERS number 0x40
--- @field public BUTTON_BACKLIGHT_DIGITS number 0x41
--- @field public BUTTON_BACKLIGHT_COMMAND number 0x42
--- @field public BUTTON1_INDICATION number 0x43
--- @field public BUTTON2_INDICATION number 0x44
--- @field public BUTTON3_INDICATION number 0x45
--- @field public BUTTON4_INDICATION number 0x46
--- @field public BUTTON5_INDICATION number 0x47
--- @field public BUTTON6_INDICATION number 0x48
--- @field public BUTTON7_INDICATION number 0x49
--- @field public BUTTON8_INDICATION number 0x4A
--- @field public BUTTON9_INDICATION number 0x4B
--- @field public BUTTON10_INDICATION number 0x4C
--- @field public BUTTON11_INDICATION number 0x4D
--- @field public BUTTON12_INDICATION number 0x4E
--- @field public NODE_IDENTIFY number 0x50
--- @field public BUZZER number 0xF0
local indicator_id = {
  NA = 0x00,
  ARMED = 0x01,
  NOT_ARMED = 0x02,
  READY = 0x03,
  FAULT = 0x04,
  BUSY = 0x05,
  ENTER_ID = 0x06,
  ENTER_PIN = 0x07,
  OK = 0x08,
  NOT_OK = 0x09,
  ARMED_STAY = 0x0A,
  ARMED_AWAY = 0x0B,
  ALARMING = 0x0C,
  ALARMING_BURGLAR = 0x0D,
  ALARMING_SMOKE_FIRE = 0x0E,
  ALARMING_CARBON_MONOXIDE = 0x0F,
  BYPASS_CHALLENGE = 0x10,
  ENTRY_DELAY = 0x11,
  EXIT_DELAY = 0x12,
  ZONE1_ARMED = 0x20,
  ZONE2_ARMED = 0x21,
  ZONE3_ARMED = 0x22,
  ZONE4_ARMED = 0x23,
  ZONE5_ARMED = 0x24,
  ZONE6_ARMED = 0x25,
  LCD_BACKLIGHT = 0x30,
  BUTTON_BACKLIGHT_LETTERS = 0x40,
  BUTTON_BACKLIGHT_DIGITS = 0x41,
  BUTTON_BACKLIGHT_COMMAND = 0x42,
  BUTTON1_INDICATION = 0x43,
  BUTTON2_INDICATION = 0x44,
  BUTTON3_INDICATION = 0x45,
  BUTTON4_INDICATION = 0x46,
  BUTTON5_INDICATION = 0x47,
  BUTTON6_INDICATION = 0x48,
  BUTTON7_INDICATION = 0x49,
  BUTTON8_INDICATION = 0x4A,
  BUTTON9_INDICATION = 0x4B,
  BUTTON10_INDICATION = 0x4C,
  BUTTON11_INDICATION = 0x4D,
  BUTTON12_INDICATION = 0x4E,
  NODE_IDENTIFY = 0x50,
  BUZZER = 0xF0
}
Indicator.indicator_id = indicator_id
Indicator._reflect_indicator_id = zw._reflection_builder(Indicator.indicator_id)

--- @class st.zwave.CommandClass.Indicator.next_indicator_id
--- @alias next_indicator_id st.zwave.CommandClass.Indicator.next_indicator_id
--- @field public NA number 0x00
--- @field public ARMED number 0x01
--- @field public NOT_ARMED number 0x02
--- @field public READY number 0x03
--- @field public FAULT number 0x04
--- @field public BUSY number 0x05
--- @field public ENTER_ID number 0x06
--- @field public ENTER_PIN number 0x07
--- @field public OK number 0x08
--- @field public NOT_OK number 0x09
--- @field public ARMED_STAY number 0x0A
--- @field public ARMED_AWAY number 0x0B
--- @field public ALARMING number 0x0C
--- @field public ALARMING_BURGLAR number 0x0D
--- @field public ALARMING_SMOKE_FIRE number 0x0E
--- @field public ALARMING_CARBON_MONOXIDE number 0x0F
--- @field public BYPASS_CHALLENGE number 0x10
--- @field public ENTRY_DELAY number 0x11
--- @field public EXIT_DELAY number 0x12
--- @field public ZONE1_ARMED number 0x20
--- @field public ZONE2_ARMED number 0x21
--- @field public ZONE3_ARMED number 0x22
--- @field public ZONE4_ARMED number 0x23
--- @field public ZONE5_ARMED number 0x24
--- @field public ZONE6_ARMED number 0x25
--- @field public LCD_BACKLIGHT number 0x30
--- @field public BUTTON_BACKLIGHT_LETTERS number 0x40
--- @field public BUTTON_BACKLIGHT_DIGITS number 0x41
--- @field public BUTTON_BACKLIGHT_COMMAND number 0x42
--- @field public BUTTON1_INDICATION number 0x43
--- @field public BUTTON2_INDICATION number 0x44
--- @field public BUTTON3_INDICATION number 0x45
--- @field public BUTTON4_INDICATION number 0x46
--- @field public BUTTON5_INDICATION number 0x47
--- @field public BUTTON6_INDICATION number 0x48
--- @field public BUTTON7_INDICATION number 0x49
--- @field public BUTTON8_INDICATION number 0x4A
--- @field public BUTTON9_INDICATION number 0x4B
--- @field public BUTTON10_INDICATION number 0x4C
--- @field public BUTTON11_INDICATION number 0x4D
--- @field public BUTTON12_INDICATION number 0x4E
--- @field public NODE_IDENTIFY number 0x50
--- @field public BUZZER number 0xF0
local next_indicator_id = {
  NA = 0x00,
  ARMED = 0x01,
  NOT_ARMED = 0x02,
  READY = 0x03,
  FAULT = 0x04,
  BUSY = 0x05,
  ENTER_ID = 0x06,
  ENTER_PIN = 0x07,
  OK = 0x08,
  NOT_OK = 0x09,
  ARMED_STAY = 0x0A,
  ARMED_AWAY = 0x0B,
  ALARMING = 0x0C,
  ALARMING_BURGLAR = 0x0D,
  ALARMING_SMOKE_FIRE = 0x0E,
  ALARMING_CARBON_MONOXIDE = 0x0F,
  BYPASS_CHALLENGE = 0x10,
  ENTRY_DELAY = 0x11,
  EXIT_DELAY = 0x12,
  ZONE1_ARMED = 0x20,
  ZONE2_ARMED = 0x21,
  ZONE3_ARMED = 0x22,
  ZONE4_ARMED = 0x23,
  ZONE5_ARMED = 0x24,
  ZONE6_ARMED = 0x25,
  LCD_BACKLIGHT = 0x30,
  BUTTON_BACKLIGHT_LETTERS = 0x40,
  BUTTON_BACKLIGHT_DIGITS = 0x41,
  BUTTON_BACKLIGHT_COMMAND = 0x42,
  BUTTON1_INDICATION = 0x43,
  BUTTON2_INDICATION = 0x44,
  BUTTON3_INDICATION = 0x45,
  BUTTON4_INDICATION = 0x46,
  BUTTON5_INDICATION = 0x47,
  BUTTON6_INDICATION = 0x48,
  BUTTON7_INDICATION = 0x49,
  BUTTON8_INDICATION = 0x4A,
  BUTTON9_INDICATION = 0x4B,
  BUTTON10_INDICATION = 0x4C,
  BUTTON11_INDICATION = 0x4D,
  BUTTON12_INDICATION = 0x4E,
  NODE_IDENTIFY = 0x50,
  BUZZER = 0xF0
}
Indicator.next_indicator_id = next_indicator_id
Indicator._reflect_next_indicator_id = zw._reflection_builder(Indicator.next_indicator_id)

--- @class st.zwave.CommandClass.Indicator.property_id
--- @alias property_id st.zwave.CommandClass.Indicator.property_id
--- @field public MULTILEVEL number 0x01
--- @field public BINARY number 0x02
--- @field public ON_OFF_PERIOD number 0x03
--- @field public ON_OFF_CYCLES number 0x04
--- @field public ONE_TIME_ON_OFF_PERIOD number 0x05
--- @field public TIMEOUT_MINUTES number 0x06
--- @field public TIMEOUT_SECONDS number 0x07
--- @field public TIMEOUT_1_100_SECONDS number 0x08
--- @field public SPECIFIC_VOLUME number 0x09
--- @field public LOW_POWER number 0x10
local property_id = {
  MULTILEVEL = 0x01,
  BINARY = 0x02,
  ON_OFF_PERIOD = 0x03,
  ON_OFF_CYCLES = 0x04,
  ONE_TIME_ON_OFF_PERIOD = 0x05,
  TIMEOUT_MINUTES = 0x06,
  TIMEOUT_SECONDS = 0x07,
  TIMEOUT_1_100_SECONDS = 0x08,
  SPECIFIC_VOLUME = 0x09,
  LOW_POWER = 0x10
}
Indicator.property_id = property_id
Indicator._reflect_property_id = zw._reflection_builder(Indicator.property_id)

--- @class st.zwave.CommandClass.Indicator.value
--- @alias value st.zwave.CommandClass.Indicator.value
--- @field public OFF_DISABLE number 0x00
--- @field public ON_ENABLE number 0xFF
local value = {
  OFF_DISABLE = 0x00,
  ON_ENABLE = 0xFF
}
Indicator.value = value
Indicator._reflect_value = zw._reflection_builder(Indicator.value)


return Indicator
