-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.Irrigation
--- @alias Irrigation st.zwave.CommandClass.Irrigation
---
--- Supported versions: 1
---
--- @field public SYSTEM_INFO_GET number 0x01 - IRRIGATION_SYSTEM_INFO_GET command id
--- @field public SYSTEM_INFO_REPORT number 0x02 - IRRIGATION_SYSTEM_INFO_REPORT command id
--- @field public SYSTEM_STATUS_GET number 0x03 - IRRIGATION_SYSTEM_STATUS_GET command id
--- @field public SYSTEM_STATUS_REPORT number 0x04 - IRRIGATION_SYSTEM_STATUS_REPORT command id
--- @field public SYSTEM_CONFIG_SET number 0x05 - IRRIGATION_SYSTEM_CONFIG_SET command id
--- @field public SYSTEM_CONFIG_GET number 0x06 - IRRIGATION_SYSTEM_CONFIG_GET command id
--- @field public SYSTEM_CONFIG_REPORT number 0x07 - IRRIGATION_SYSTEM_CONFIG_REPORT command id
--- @field public VALVE_INFO_GET number 0x08 - IRRIGATION_VALVE_INFO_GET command id
--- @field public VALVE_INFO_REPORT number 0x09 - IRRIGATION_VALVE_INFO_REPORT command id
--- @field public VALVE_CONFIG_SET number 0x0A - IRRIGATION_VALVE_CONFIG_SET command id
--- @field public VALVE_CONFIG_GET number 0x0B - IRRIGATION_VALVE_CONFIG_GET command id
--- @field public VALVE_CONFIG_REPORT number 0x0C - IRRIGATION_VALVE_CONFIG_REPORT command id
--- @field public VALVE_RUN number 0x0D - IRRIGATION_VALVE_RUN command id
--- @field public VALVE_TABLE_SET number 0x0E - IRRIGATION_VALVE_TABLE_SET command id
--- @field public VALVE_TABLE_GET number 0x0F - IRRIGATION_VALVE_TABLE_GET command id
--- @field public VALVE_TABLE_REPORT number 0x10 - IRRIGATION_VALVE_TABLE_REPORT command id
--- @field public VALVE_TABLE_RUN number 0x11 - IRRIGATION_VALVE_TABLE_RUN command id
--- @field public SYSTEM_SHUTOFF number 0x12 - IRRIGATION_SYSTEM_SHUTOFF command id
local Irrigation = {}
Irrigation.SYSTEM_INFO_GET = 0x01
Irrigation.SYSTEM_INFO_REPORT = 0x02
Irrigation.SYSTEM_STATUS_GET = 0x03
Irrigation.SYSTEM_STATUS_REPORT = 0x04
Irrigation.SYSTEM_CONFIG_SET = 0x05
Irrigation.SYSTEM_CONFIG_GET = 0x06
Irrigation.SYSTEM_CONFIG_REPORT = 0x07
Irrigation.VALVE_INFO_GET = 0x08
Irrigation.VALVE_INFO_REPORT = 0x09
Irrigation.VALVE_CONFIG_SET = 0x0A
Irrigation.VALVE_CONFIG_GET = 0x0B
Irrigation.VALVE_CONFIG_REPORT = 0x0C
Irrigation.VALVE_RUN = 0x0D
Irrigation.VALVE_TABLE_SET = 0x0E
Irrigation.VALVE_TABLE_GET = 0x0F
Irrigation.VALVE_TABLE_REPORT = 0x10
Irrigation.VALVE_TABLE_RUN = 0x11
Irrigation.SYSTEM_SHUTOFF = 0x12

Irrigation._commands = {
  [Irrigation.SYSTEM_INFO_GET] = "SYSTEM_INFO_GET",
  [Irrigation.SYSTEM_INFO_REPORT] = "SYSTEM_INFO_REPORT",
  [Irrigation.SYSTEM_STATUS_GET] = "SYSTEM_STATUS_GET",
  [Irrigation.SYSTEM_STATUS_REPORT] = "SYSTEM_STATUS_REPORT",
  [Irrigation.SYSTEM_CONFIG_SET] = "SYSTEM_CONFIG_SET",
  [Irrigation.SYSTEM_CONFIG_GET] = "SYSTEM_CONFIG_GET",
  [Irrigation.SYSTEM_CONFIG_REPORT] = "SYSTEM_CONFIG_REPORT",
  [Irrigation.VALVE_INFO_GET] = "VALVE_INFO_GET",
  [Irrigation.VALVE_INFO_REPORT] = "VALVE_INFO_REPORT",
  [Irrigation.VALVE_CONFIG_SET] = "VALVE_CONFIG_SET",
  [Irrigation.VALVE_CONFIG_GET] = "VALVE_CONFIG_GET",
  [Irrigation.VALVE_CONFIG_REPORT] = "VALVE_CONFIG_REPORT",
  [Irrigation.VALVE_RUN] = "VALVE_RUN",
  [Irrigation.VALVE_TABLE_SET] = "VALVE_TABLE_SET",
  [Irrigation.VALVE_TABLE_GET] = "VALVE_TABLE_GET",
  [Irrigation.VALVE_TABLE_REPORT] = "VALVE_TABLE_REPORT",
  [Irrigation.VALVE_TABLE_RUN] = "VALVE_TABLE_RUN",
  [Irrigation.SYSTEM_SHUTOFF] = "SYSTEM_SHUTOFF"
}

--- Instantiate a versioned instance of the Irrigation Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.Irrigation versioned command class instance
function Irrigation:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.IRRIGATION][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(Irrigation, {
  __call = Irrigation.init
})

Irrigation._serialization_version = nil
Irrigation._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.IRRIGATION] = {
  [1] = true
}

--- @class st.zwave.CommandClass.Irrigation.SystemInfoGetV1Args
--- @alias SystemInfoGetV1Args st.zwave.CommandClass.Irrigation.SystemInfoGetV1Args
local SystemInfoGetV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.SystemInfoGetV1:st.zwave.Command
--- @alias SystemInfoGetV1 st.zwave.CommandClass.Irrigation.SystemInfoGetV1
---
--- v1 IRRIGATION_SYSTEM_INFO_GET
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.SystemInfoGetV1Args command-specific arguments
local SystemInfoGetV1 = {}
setmetatable(SystemInfoGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_SYSTEM_INFO_GET object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.SystemInfoGetV1Args command-specific arguments
function SystemInfoGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.SYSTEM_INFO_GET, 1, args, ...)
end

--- Serialize v1 IRRIGATION_SYSTEM_INFO_GET arguments.
---
--- @return string serialized payload
function SystemInfoGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_SYSTEM_INFO_GET payload.
---
--- @return st.zwave.CommandClass.Irrigation.SystemInfoGetV1Args deserialized arguments
function SystemInfoGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemInfoGetV1
--- @return st.zwave.CommandClass.Irrigation.SystemInfoGetV1Args
function SystemInfoGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemInfoGetV1
--- @return st.zwave.CommandClass.Irrigation.SystemInfoGetV1Args
function SystemInfoGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemInfoGetV1
function SystemInfoGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemInfoGetV1
function SystemInfoGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.SystemInfoReportV1Args
--- @alias SystemInfoReportV1Args st.zwave.CommandClass.Irrigation.SystemInfoReportV1Args
--- @field public master_valve boolean
--- @field public total_number_of_valves integer [0,255]
--- @field public total_number_of_valve_tables integer [0,255]
--- @field public valve_table_max_size integer [0,15]
local SystemInfoReportV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.SystemInfoReportV1:st.zwave.Command
--- @alias SystemInfoReportV1 st.zwave.CommandClass.Irrigation.SystemInfoReportV1
---
--- v1 IRRIGATION_SYSTEM_INFO_REPORT
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.SystemInfoReportV1Args command-specific arguments
local SystemInfoReportV1 = {}
setmetatable(SystemInfoReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_SYSTEM_INFO_REPORT object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.SystemInfoReportV1Args command-specific arguments
function SystemInfoReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.SYSTEM_INFO_REPORT, 1, args, ...)
end

--- Serialize v1 IRRIGATION_SYSTEM_INFO_REPORT arguments.
---
--- @return string serialized payload
function SystemInfoReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.master_valve)
  writer:write_bits(2, 0) -- reserved1
  writer:write_bits(2, 0) -- reserved2
  writer:write_bits(3, 0) -- reserved3
  writer:write_u8(args.total_number_of_valves)
  writer:write_u8(args.total_number_of_valve_tables)
  writer:write_bits(4, args.valve_table_max_size)
  writer:write_bits(4, 0) -- reserved
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_SYSTEM_INFO_REPORT payload.
---
--- @return st.zwave.CommandClass.Irrigation.SystemInfoReportV1Args deserialized arguments
function SystemInfoReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("master_valve")
  reader:read_bits(2) -- reserved1
  reader:read_bits(2) -- reserved2
  reader:read_bits(3) -- reserved3
  reader:read_u8("total_number_of_valves")
  reader:read_u8("total_number_of_valve_tables")
  reader:read_bits(4, "valve_table_max_size")
  reader:read_bits(4) -- reserved
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemInfoReportV1
--- @return st.zwave.CommandClass.Irrigation.SystemInfoReportV1Args
function SystemInfoReportV1._defaults(self)
  local args = {}
  args.master_valve = self.args.master_valve or false
  args.total_number_of_valves = self.args.total_number_of_valves or 0
  args.total_number_of_valve_tables = self.args.total_number_of_valve_tables or 0
  args.valve_table_max_size = self.args.valve_table_max_size or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemInfoReportV1
--- @return st.zwave.CommandClass.Irrigation.SystemInfoReportV1Args
function SystemInfoReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemInfoReportV1
function SystemInfoReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemInfoReportV1
function SystemInfoReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.SystemStatusGetV1Args
--- @alias SystemStatusGetV1Args st.zwave.CommandClass.Irrigation.SystemStatusGetV1Args
local SystemStatusGetV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.SystemStatusGetV1:st.zwave.Command
--- @alias SystemStatusGetV1 st.zwave.CommandClass.Irrigation.SystemStatusGetV1
---
--- v1 IRRIGATION_SYSTEM_STATUS_GET
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.SystemStatusGetV1Args command-specific arguments
local SystemStatusGetV1 = {}
setmetatable(SystemStatusGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_SYSTEM_STATUS_GET object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.SystemStatusGetV1Args command-specific arguments
function SystemStatusGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.SYSTEM_STATUS_GET, 1, args, ...)
end

--- Serialize v1 IRRIGATION_SYSTEM_STATUS_GET arguments.
---
--- @return string serialized payload
function SystemStatusGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_SYSTEM_STATUS_GET payload.
---
--- @return st.zwave.CommandClass.Irrigation.SystemStatusGetV1Args deserialized arguments
function SystemStatusGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemStatusGetV1
--- @return st.zwave.CommandClass.Irrigation.SystemStatusGetV1Args
function SystemStatusGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemStatusGetV1
--- @return st.zwave.CommandClass.Irrigation.SystemStatusGetV1Args
function SystemStatusGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemStatusGetV1
function SystemStatusGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemStatusGetV1
function SystemStatusGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.SystemStatusReportV1Args
--- @alias SystemStatusReportV1Args st.zwave.CommandClass.Irrigation.SystemStatusReportV1Args
--- @field public system_voltage integer [0,255]
--- @field public sensor_status integer see :lua:class:`Irrigation.sensor_status <st.zwave.CommandClass.Irrigation.sensor_status>`
--- @field public flow_size integer [0,7]
--- @field public flow_scale integer [0,3]
--- @field public flow_precision integer [0,7]
--- @field public flow_value number [-2147483648,2147483647]
--- @field public pressure_size integer [0,7]
--- @field public pressure_scale integer [0,3]
--- @field public pressure_precision integer [0,7]
--- @field public pressure_value number [-2147483648,2147483647]
--- @field public shutoff_duration integer [0,255]
--- @field public not_programmed boolean
--- @field public emergency_shutdown boolean
--- @field public high_threshold_triggered boolean
--- @field public low_threshold_triggered boolean
--- @field public valve_errors boolean
--- @field public master_valve boolean
--- @field public valve_id integer [0,255]
local SystemStatusReportV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.SystemStatusReportV1:st.zwave.Command
--- @alias SystemStatusReportV1 st.zwave.CommandClass.Irrigation.SystemStatusReportV1
---
--- v1 IRRIGATION_SYSTEM_STATUS_REPORT
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.SystemStatusReportV1Args command-specific arguments
local SystemStatusReportV1 = {}
setmetatable(SystemStatusReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_SYSTEM_STATUS_REPORT object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.SystemStatusReportV1Args command-specific arguments
function SystemStatusReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.SYSTEM_STATUS_REPORT, 1, args, ...)
end

--- Serialize v1 IRRIGATION_SYSTEM_STATUS_REPORT arguments.
---
--- @return string serialized payload
function SystemStatusReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.system_voltage)
  writer:write_u8(args.sensor_status)
  writer:write_bits(3, args.flow_size or writer.size(args.flow_value))
  writer:write_bits(2, args.flow_scale)
  writer:write_bits(3, args.flow_precision or writer.precision(args.flow_value))
  writer:write_vfloat(args.flow_size or writer.size(args.flow_value), args.flow_precision or writer.precision(args.flow_value), args.flow_value)
  writer:write_bits(3, args.pressure_size or writer.size(args.pressure_value))
  writer:write_bits(2, args.pressure_scale)
  writer:write_bits(3, args.pressure_precision or writer.precision(args.pressure_value))
  writer:write_vfloat(args.pressure_size or writer.size(args.pressure_value), args.pressure_precision or writer.precision(args.pressure_value), args.pressure_value)
  writer:write_u8(args.shutoff_duration)
  writer:write_bool(args.not_programmed)
  writer:write_bool(args.emergency_shutdown)
  writer:write_bool(args.high_threshold_triggered)
  writer:write_bool(args.low_threshold_triggered)
  writer:write_bool(args.valve_errors)
  writer:write_bool(args.master_valve)
  writer:write_bits(7, 0) -- reserved
  writer:write_u8(args.valve_id)
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_SYSTEM_STATUS_REPORT payload.
---
--- @return st.zwave.CommandClass.Irrigation.SystemStatusReportV1Args deserialized arguments
function SystemStatusReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("system_voltage")
  reader:read_u8("sensor_status")
  reader:read_bits(3, "flow_size")
  reader:read_bits(2, "flow_scale")
  reader:read_bits(3, "flow_precision")
  reader:read_vfloat(reader.parsed.flow_size, reader.parsed.flow_precision, "flow_value")
  reader:read_bits(3, "pressure_size")
  reader:read_bits(2, "pressure_scale")
  reader:read_bits(3, "pressure_precision")
  reader:read_vfloat(reader.parsed.pressure_size, reader.parsed.pressure_precision, "pressure_value")
  reader:read_u8("shutoff_duration")
  reader:read_bool("not_programmed")
  reader:read_bool("emergency_shutdown")
  reader:read_bool("high_threshold_triggered")
  reader:read_bool("low_threshold_triggered")
  reader:read_bool("valve_errors")
  reader:read_bool("master_valve")
  reader:read_bits(7) -- reserved
  reader:read_u8("valve_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemStatusReportV1
--- @return st.zwave.CommandClass.Irrigation.SystemStatusReportV1Args
function SystemStatusReportV1._defaults(self)
  local args = {}
  args.system_voltage = self.args.system_voltage or 0
  args.sensor_status = self.args.sensor_status or 0
  args.flow_scale = self.args.flow_scale or 0
  args.flow_value = self.args.flow_value or 0
  args.pressure_scale = self.args.pressure_scale or 0
  args.pressure_value = self.args.pressure_value or 0
  args.shutoff_duration = self.args.shutoff_duration or 0
  args.not_programmed = self.args.not_programmed or false
  args.emergency_shutdown = self.args.emergency_shutdown or false
  args.high_threshold_triggered = self.args.high_threshold_triggered or false
  args.low_threshold_triggered = self.args.low_threshold_triggered or false
  args.valve_errors = self.args.valve_errors or false
  args.master_valve = self.args.master_valve or false
  args.valve_id = self.args.valve_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemStatusReportV1
--- @return st.zwave.CommandClass.Irrigation.SystemStatusReportV1Args
function SystemStatusReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.flow_size = args.flow_size or writer.size(args.flow_value)
  args.flow_precision = args.flow_precision or writer.precision(args.flow_value)
  args.pressure_size = args.pressure_size or writer.size(args.pressure_value)
  args.pressure_precision = args.pressure_precision or writer.precision(args.pressure_value)
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemStatusReportV1
function SystemStatusReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemStatusReportV1
function SystemStatusReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.sensor_status = function()
    return zw._reflect(
      Irrigation._reflect_sensor_status,
      args.sensor_status
    )
  end
end

--- @class st.zwave.CommandClass.Irrigation.SystemConfigSetV1Args
--- @alias SystemConfigSetV1Args st.zwave.CommandClass.Irrigation.SystemConfigSetV1Args
--- @field public master_valve_delay integer [0,255]
--- @field public high_pressure_threshold_size integer [0,7]
--- @field public high_pressure_threshold_scale integer [0,3]
--- @field public high_pressure_threshold_precision integer [0,7]
--- @field public high_pressure_threshold_value number [-2147483648,2147483647]
--- @field public low_pressure_threshold_size integer [0,7]
--- @field public low_pressure_threshold_scale integer [0,3]
--- @field public low_pressure_threshold_precision integer [0,7]
--- @field public low_pressure_threshold_value number [-2147483648,2147483647]
--- @field public rain_sensor_polarity boolean
--- @field public moisture_sensor_polarity boolean
--- @field public valid boolean
local SystemConfigSetV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.SystemConfigSetV1:st.zwave.Command
--- @alias SystemConfigSetV1 st.zwave.CommandClass.Irrigation.SystemConfigSetV1
---
--- v1 IRRIGATION_SYSTEM_CONFIG_SET
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.SystemConfigSetV1Args command-specific arguments
local SystemConfigSetV1 = {}
setmetatable(SystemConfigSetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_SYSTEM_CONFIG_SET object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.SystemConfigSetV1Args command-specific arguments
function SystemConfigSetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.SYSTEM_CONFIG_SET, 1, args, ...)
end

--- Serialize v1 IRRIGATION_SYSTEM_CONFIG_SET arguments.
---
--- @return string serialized payload
function SystemConfigSetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.master_valve_delay)
  writer:write_bits(3, args.high_pressure_threshold_size or writer.size(args.high_pressure_threshold_value))
  writer:write_bits(2, args.high_pressure_threshold_scale)
  writer:write_bits(3, args.high_pressure_threshold_precision or writer.precision(args.high_pressure_threshold_value))
  writer:write_vfloat(args.high_pressure_threshold_size or writer.size(args.high_pressure_threshold_value), args.high_pressure_threshold_precision or writer.precision(args.high_pressure_threshold_value), args.high_pressure_threshold_value)
  writer:write_bits(3, args.low_pressure_threshold_size or writer.size(args.low_pressure_threshold_value))
  writer:write_bits(2, args.low_pressure_threshold_scale)
  writer:write_bits(3, args.low_pressure_threshold_precision or writer.precision(args.low_pressure_threshold_value))
  writer:write_vfloat(args.low_pressure_threshold_size or writer.size(args.low_pressure_threshold_value), args.low_pressure_threshold_precision or writer.precision(args.low_pressure_threshold_value), args.low_pressure_threshold_value)
  writer:write_bool(args.rain_sensor_polarity)
  writer:write_bool(args.moisture_sensor_polarity)
  writer:write_bits(5, 0) -- reserved
  writer:write_bool(args.valid)
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_SYSTEM_CONFIG_SET payload.
---
--- @return st.zwave.CommandClass.Irrigation.SystemConfigSetV1Args deserialized arguments
function SystemConfigSetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("master_valve_delay")
  reader:read_bits(3, "high_pressure_threshold_size")
  reader:read_bits(2, "high_pressure_threshold_scale")
  reader:read_bits(3, "high_pressure_threshold_precision")
  reader:read_vfloat(reader.parsed.high_pressure_threshold_size, reader.parsed.high_pressure_threshold_precision, "high_pressure_threshold_value")
  reader:read_bits(3, "low_pressure_threshold_size")
  reader:read_bits(2, "low_pressure_threshold_scale")
  reader:read_bits(3, "low_pressure_threshold_precision")
  reader:read_vfloat(reader.parsed.low_pressure_threshold_size, reader.parsed.low_pressure_threshold_precision, "low_pressure_threshold_value")
  reader:read_bool("rain_sensor_polarity")
  reader:read_bool("moisture_sensor_polarity")
  reader:bit_seek(5) -- reserved
  reader:read_bool("valid")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemConfigSetV1
--- @return st.zwave.CommandClass.Irrigation.SystemConfigSetV1Args
function SystemConfigSetV1._defaults(self)
  local args = {}
  args.master_valve_delay = self.args.master_valve_delay or 0
  args.high_pressure_threshold_scale = self.args.high_pressure_threshold_scale or 0
  args.high_pressure_threshold_value = self.args.high_pressure_threshold_value or 0
  args.low_pressure_threshold_scale = self.args.low_pressure_threshold_scale or 0
  args.low_pressure_threshold_value = self.args.low_pressure_threshold_value or 0
  args.rain_sensor_polarity = self.args.rain_sensor_polarity or false
  args.moisture_sensor_polarity = self.args.moisture_sensor_polarity or false
  args.valid = self.args.valid or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemConfigSetV1
--- @return st.zwave.CommandClass.Irrigation.SystemConfigSetV1Args
function SystemConfigSetV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.high_pressure_threshold_size = args.high_pressure_threshold_size or writer.size(args.high_pressure_threshold_value)
  args.high_pressure_threshold_precision = args.high_pressure_threshold_precision or writer.precision(args.high_pressure_threshold_value)
  args.low_pressure_threshold_size = args.low_pressure_threshold_size or writer.size(args.low_pressure_threshold_value)
  args.low_pressure_threshold_precision = args.low_pressure_threshold_precision or writer.precision(args.low_pressure_threshold_value)
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemConfigSetV1
function SystemConfigSetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemConfigSetV1
function SystemConfigSetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.SystemConfigGetV1Args
--- @alias SystemConfigGetV1Args st.zwave.CommandClass.Irrigation.SystemConfigGetV1Args
local SystemConfigGetV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.SystemConfigGetV1:st.zwave.Command
--- @alias SystemConfigGetV1 st.zwave.CommandClass.Irrigation.SystemConfigGetV1
---
--- v1 IRRIGATION_SYSTEM_CONFIG_GET
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.SystemConfigGetV1Args command-specific arguments
local SystemConfigGetV1 = {}
setmetatable(SystemConfigGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_SYSTEM_CONFIG_GET object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.SystemConfigGetV1Args command-specific arguments
function SystemConfigGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.SYSTEM_CONFIG_GET, 1, args, ...)
end

--- Serialize v1 IRRIGATION_SYSTEM_CONFIG_GET arguments.
---
--- @return string serialized payload
function SystemConfigGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_SYSTEM_CONFIG_GET payload.
---
--- @return st.zwave.CommandClass.Irrigation.SystemConfigGetV1Args deserialized arguments
function SystemConfigGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemConfigGetV1
--- @return st.zwave.CommandClass.Irrigation.SystemConfigGetV1Args
function SystemConfigGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemConfigGetV1
--- @return st.zwave.CommandClass.Irrigation.SystemConfigGetV1Args
function SystemConfigGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemConfigGetV1
function SystemConfigGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemConfigGetV1
function SystemConfigGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.SystemConfigReportV1Args
--- @alias SystemConfigReportV1Args st.zwave.CommandClass.Irrigation.SystemConfigReportV1Args
--- @field public master_valve_delay integer [0,255]
--- @field public high_pressure_threshold_size integer [0,7]
--- @field public high_pressure_threshold_scale integer [0,3]
--- @field public high_pressure_threshold_precision integer [0,7]
--- @field public high_pressure_threshold_value number [-2147483648,2147483647]
--- @field public low_pressure_threshold_size integer [0,7]
--- @field public low_pressure_threshold_scale integer [0,3]
--- @field public low_pressure_threshold_precision integer [0,7]
--- @field public low_pressure_threshold_value number [-2147483648,2147483647]
--- @field public rain_sensor_polarity boolean
--- @field public moisture_sensor_polarity boolean
--- @field public valid boolean
local SystemConfigReportV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.SystemConfigReportV1:st.zwave.Command
--- @alias SystemConfigReportV1 st.zwave.CommandClass.Irrigation.SystemConfigReportV1
---
--- v1 IRRIGATION_SYSTEM_CONFIG_REPORT
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x07
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.SystemConfigReportV1Args command-specific arguments
local SystemConfigReportV1 = {}
setmetatable(SystemConfigReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_SYSTEM_CONFIG_REPORT object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.SystemConfigReportV1Args command-specific arguments
function SystemConfigReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.SYSTEM_CONFIG_REPORT, 1, args, ...)
end

--- Serialize v1 IRRIGATION_SYSTEM_CONFIG_REPORT arguments.
---
--- @return string serialized payload
function SystemConfigReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.master_valve_delay)
  writer:write_bits(3, args.high_pressure_threshold_size or writer.size(args.high_pressure_threshold_value))
  writer:write_bits(2, args.high_pressure_threshold_scale)
  writer:write_bits(3, args.high_pressure_threshold_precision or writer.precision(args.high_pressure_threshold_value))
  writer:write_vfloat(args.high_pressure_threshold_size or writer.size(args.high_pressure_threshold_value), args.high_pressure_threshold_precision or writer.precision(args.high_pressure_threshold_value), args.high_pressure_threshold_value)
  writer:write_bits(3, args.low_pressure_threshold_size or writer.size(args.low_pressure_threshold_value))
  writer:write_bits(2, args.low_pressure_threshold_scale)
  writer:write_bits(3, args.low_pressure_threshold_precision or writer.precision(args.low_pressure_threshold_value))
  writer:write_vfloat(args.low_pressure_threshold_size or writer.size(args.low_pressure_threshold_value), args.low_pressure_threshold_precision or writer.precision(args.low_pressure_threshold_value), args.low_pressure_threshold_value)
  writer:write_bool(args.rain_sensor_polarity)
  writer:write_bool(args.moisture_sensor_polarity)
  writer:write_bits(5, 0) -- reserved
  writer:write_bool(args.valid)
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_SYSTEM_CONFIG_REPORT payload.
---
--- @return st.zwave.CommandClass.Irrigation.SystemConfigReportV1Args deserialized arguments
function SystemConfigReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("master_valve_delay")
  reader:read_bits(3, "high_pressure_threshold_size")
  reader:read_bits(2, "high_pressure_threshold_scale")
  reader:read_bits(3, "high_pressure_threshold_precision")
  reader:read_vfloat(reader.parsed.high_pressure_threshold_size, reader.parsed.high_pressure_threshold_precision, "high_pressure_threshold_value")
  reader:read_bits(3, "low_pressure_threshold_size")
  reader:read_bits(2, "low_pressure_threshold_scale")
  reader:read_bits(3, "low_pressure_threshold_precision")
  reader:read_vfloat(reader.parsed.low_pressure_threshold_size, reader.parsed.low_pressure_threshold_precision, "low_pressure_threshold_value")
  reader:read_bool("rain_sensor_polarity")
  reader:read_bool("moisture_sensor_polarity")
  reader:bit_seek(5) -- reserved
  reader:read_bool("valid")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemConfigReportV1
--- @return st.zwave.CommandClass.Irrigation.SystemConfigReportV1Args
function SystemConfigReportV1._defaults(self)
  local args = {}
  args.master_valve_delay = self.args.master_valve_delay or 0
  args.high_pressure_threshold_scale = self.args.high_pressure_threshold_scale or 0
  args.high_pressure_threshold_value = self.args.high_pressure_threshold_value or 0
  args.low_pressure_threshold_scale = self.args.low_pressure_threshold_scale or 0
  args.low_pressure_threshold_value = self.args.low_pressure_threshold_value or 0
  args.rain_sensor_polarity = self.args.rain_sensor_polarity or false
  args.moisture_sensor_polarity = self.args.moisture_sensor_polarity or false
  args.valid = self.args.valid or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemConfigReportV1
--- @return st.zwave.CommandClass.Irrigation.SystemConfigReportV1Args
function SystemConfigReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.high_pressure_threshold_size = args.high_pressure_threshold_size or writer.size(args.high_pressure_threshold_value)
  args.high_pressure_threshold_precision = args.high_pressure_threshold_precision or writer.precision(args.high_pressure_threshold_value)
  args.low_pressure_threshold_size = args.low_pressure_threshold_size or writer.size(args.low_pressure_threshold_value)
  args.low_pressure_threshold_precision = args.low_pressure_threshold_precision or writer.precision(args.low_pressure_threshold_value)
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemConfigReportV1
function SystemConfigReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemConfigReportV1
function SystemConfigReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.ValveInfoGetV1Args
--- @alias ValveInfoGetV1Args st.zwave.CommandClass.Irrigation.ValveInfoGetV1Args
--- @field public master_valve boolean
--- @field public valve_id integer [0,255]
local ValveInfoGetV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.ValveInfoGetV1:st.zwave.Command
--- @alias ValveInfoGetV1 st.zwave.CommandClass.Irrigation.ValveInfoGetV1
---
--- v1 IRRIGATION_VALVE_INFO_GET
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x08
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveInfoGetV1Args command-specific arguments
local ValveInfoGetV1 = {}
setmetatable(ValveInfoGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_VALVE_INFO_GET object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveInfoGetV1Args command-specific arguments
function ValveInfoGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.VALVE_INFO_GET, 1, args, ...)
end

--- Serialize v1 IRRIGATION_VALVE_INFO_GET arguments.
---
--- @return string serialized payload
function ValveInfoGetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.master_valve)
  writer:write_bits(7, 0) -- reserved
  writer:write_u8(args.valve_id)
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_VALVE_INFO_GET payload.
---
--- @return st.zwave.CommandClass.Irrigation.ValveInfoGetV1Args deserialized arguments
function ValveInfoGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("master_valve")
  reader:read_bits(7) -- reserved
  reader:read_u8("valve_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveInfoGetV1
--- @return st.zwave.CommandClass.Irrigation.ValveInfoGetV1Args
function ValveInfoGetV1._defaults(self)
  local args = {}
  args.master_valve = self.args.master_valve or false
  args.valve_id = self.args.valve_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveInfoGetV1
--- @return st.zwave.CommandClass.Irrigation.ValveInfoGetV1Args
function ValveInfoGetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveInfoGetV1
function ValveInfoGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveInfoGetV1
function ValveInfoGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.ValveInfoReportV1Args
--- @alias ValveInfoReportV1Args st.zwave.CommandClass.Irrigation.ValveInfoReportV1Args
--- @field public master boolean
--- @field public connected boolean
--- @field public valve_id integer [0,255]
--- @field public nominal_current integer [0,255]
--- @field public short_circuit boolean
--- @field public current_high_threshold boolean
--- @field public current_low_threshold boolean
--- @field public maximum_flow boolean
--- @field public flow_high_threshold boolean
--- @field public flow_low_threshold boolean
local ValveInfoReportV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.ValveInfoReportV1:st.zwave.Command
--- @alias ValveInfoReportV1 st.zwave.CommandClass.Irrigation.ValveInfoReportV1
---
--- v1 IRRIGATION_VALVE_INFO_REPORT
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x09
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveInfoReportV1Args command-specific arguments
local ValveInfoReportV1 = {}
setmetatable(ValveInfoReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_VALVE_INFO_REPORT object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveInfoReportV1Args command-specific arguments
function ValveInfoReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.VALVE_INFO_REPORT, 1, args, ...)
end

--- Serialize v1 IRRIGATION_VALVE_INFO_REPORT arguments.
---
--- @return string serialized payload
function ValveInfoReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.master)
  writer:write_bool(args.connected)
  writer:write_bits(6, 0) -- reserved
  writer:write_u8(args.valve_id)
  writer:write_u8(args.nominal_current)
  writer:write_bool(args.short_circuit)
  writer:write_bool(args.current_high_threshold)
  writer:write_bool(args.current_low_threshold)
  writer:write_bool(args.maximum_flow)
  writer:write_bool(args.flow_high_threshold)
  writer:write_bool(args.flow_low_threshold)
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_VALVE_INFO_REPORT payload.
---
--- @return st.zwave.CommandClass.Irrigation.ValveInfoReportV1Args deserialized arguments
function ValveInfoReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("master")
  reader:read_bool("connected")
  reader:read_bits(6) -- reserved
  reader:read_u8("valve_id")
  reader:read_u8("nominal_current")
  reader:read_bool("short_circuit")
  reader:read_bool("current_high_threshold")
  reader:read_bool("current_low_threshold")
  reader:read_bool("maximum_flow")
  reader:read_bool("flow_high_threshold")
  reader:read_bool("flow_low_threshold")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveInfoReportV1
--- @return st.zwave.CommandClass.Irrigation.ValveInfoReportV1Args
function ValveInfoReportV1._defaults(self)
  local args = {}
  args.master = self.args.master or false
  args.connected = self.args.connected or false
  args.valve_id = self.args.valve_id or 0
  args.nominal_current = self.args.nominal_current or 0
  args.short_circuit = self.args.short_circuit or false
  args.current_high_threshold = self.args.current_high_threshold or false
  args.current_low_threshold = self.args.current_low_threshold or false
  args.maximum_flow = self.args.maximum_flow or false
  args.flow_high_threshold = self.args.flow_high_threshold or false
  args.flow_low_threshold = self.args.flow_low_threshold or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveInfoReportV1
--- @return st.zwave.CommandClass.Irrigation.ValveInfoReportV1Args
function ValveInfoReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveInfoReportV1
function ValveInfoReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveInfoReportV1
function ValveInfoReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.ValveConfigSetV1Args
--- @alias ValveConfigSetV1Args st.zwave.CommandClass.Irrigation.ValveConfigSetV1Args
--- @field public master_valve boolean
--- @field public valve_id integer [0,255]
--- @field public nominal_current_high_threshold integer [0,255]
--- @field public nominal_current_low_threshold integer [0,255]
--- @field public maximum_flow_size integer [0,7]
--- @field public maximum_flow_scale integer [0,3]
--- @field public maximum_flow_precision integer [0,7]
--- @field public maximum_flow_value number [-2147483648,2147483647]
--- @field public flow_high_threshold_size integer [0,7]
--- @field public flow_high_threshold_scale integer [0,3]
--- @field public flow_high_threshold_precision integer [0,7]
--- @field public flow_high_threshold_value number [-2147483648,2147483647]
--- @field public flow_low_threshold_size integer [0,7]
--- @field public flow_low_threshold_scale integer [0,3]
--- @field public flow_low_threshold_precision integer [0,7]
--- @field public flow_low_threshold_value number [-2147483648,2147483647]
--- @field public use_rain_sensor boolean
--- @field public use_moisture_sensor boolean
local ValveConfigSetV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.ValveConfigSetV1:st.zwave.Command
--- @alias ValveConfigSetV1 st.zwave.CommandClass.Irrigation.ValveConfigSetV1
---
--- v1 IRRIGATION_VALVE_CONFIG_SET
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x0A
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveConfigSetV1Args command-specific arguments
local ValveConfigSetV1 = {}
setmetatable(ValveConfigSetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_VALVE_CONFIG_SET object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveConfigSetV1Args command-specific arguments
function ValveConfigSetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.VALVE_CONFIG_SET, 1, args, ...)
end

--- Serialize v1 IRRIGATION_VALVE_CONFIG_SET arguments.
---
--- @return string serialized payload
function ValveConfigSetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.master_valve)
  writer:write_bits(7, 0) -- reserved
  writer:write_u8(args.valve_id)
  writer:write_u8(args.nominal_current_high_threshold)
  writer:write_u8(args.nominal_current_low_threshold)
  writer:write_bits(3, args.maximum_flow_size or writer.size(args.maximum_flow_value))
  writer:write_bits(2, args.maximum_flow_scale)
  writer:write_bits(3, args.maximum_flow_precision or writer.precision(args.maximum_flow_value))
  writer:write_vfloat(args.maximum_flow_size or writer.size(args.maximum_flow_value), args.maximum_flow_precision or writer.precision(args.maximum_flow_value), args.maximum_flow_value)
  writer:write_bits(3, args.flow_high_threshold_size or writer.size(args.flow_high_threshold_value))
  writer:write_bits(2, args.flow_high_threshold_scale)
  writer:write_bits(3, args.flow_high_threshold_precision or writer.precision(args.flow_high_threshold_value))
  writer:write_vfloat(args.flow_high_threshold_size or writer.size(args.flow_high_threshold_value), args.flow_high_threshold_precision or writer.precision(args.flow_high_threshold_value), args.flow_high_threshold_value)
  writer:write_bits(3, args.flow_low_threshold_size or writer.size(args.flow_low_threshold_value))
  writer:write_bits(2, args.flow_low_threshold_scale)
  writer:write_bits(3, args.flow_low_threshold_precision or writer.precision(args.flow_low_threshold_value))
  writer:write_vfloat(args.flow_low_threshold_size or writer.size(args.flow_low_threshold_value), args.flow_low_threshold_precision or writer.precision(args.flow_low_threshold_value), args.flow_low_threshold_value)
  writer:write_bool(args.use_rain_sensor)
  writer:write_bool(args.use_moisture_sensor)
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_VALVE_CONFIG_SET payload.
---
--- @return st.zwave.CommandClass.Irrigation.ValveConfigSetV1Args deserialized arguments
function ValveConfigSetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("master_valve")
  reader:read_bits(7) -- reserved
  reader:read_u8("valve_id")
  reader:read_u8("nominal_current_high_threshold")
  reader:read_u8("nominal_current_low_threshold")
  reader:read_bits(3, "maximum_flow_size")
  reader:read_bits(2, "maximum_flow_scale")
  reader:read_bits(3, "maximum_flow_precision")
  reader:read_vfloat(reader.parsed.maximum_flow_size, reader.parsed.maximum_flow_precision, "maximum_flow_value")
  reader:read_bits(3, "flow_high_threshold_size")
  reader:read_bits(2, "flow_high_threshold_scale")
  reader:read_bits(3, "flow_high_threshold_precision")
  reader:read_vfloat(reader.parsed.flow_high_threshold_size, reader.parsed.flow_high_threshold_precision, "flow_high_threshold_value")
  reader:read_bits(3, "flow_low_threshold_size")
  reader:read_bits(2, "flow_low_threshold_scale")
  reader:read_bits(3, "flow_low_threshold_precision")
  reader:read_vfloat(reader.parsed.flow_low_threshold_size, reader.parsed.flow_low_threshold_precision, "flow_low_threshold_value")
  reader:read_bool("use_rain_sensor")
  reader:read_bool("use_moisture_sensor")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveConfigSetV1
--- @return st.zwave.CommandClass.Irrigation.ValveConfigSetV1Args
function ValveConfigSetV1._defaults(self)
  local args = {}
  args.master_valve = self.args.master_valve or false
  args.valve_id = self.args.valve_id or 0
  args.nominal_current_high_threshold = self.args.nominal_current_high_threshold or 0
  args.nominal_current_low_threshold = self.args.nominal_current_low_threshold or 0
  args.maximum_flow_scale = self.args.maximum_flow_scale or 0
  args.maximum_flow_value = self.args.maximum_flow_value or 0
  args.flow_high_threshold_scale = self.args.flow_high_threshold_scale or 0
  args.flow_high_threshold_value = self.args.flow_high_threshold_value or 0
  args.flow_low_threshold_scale = self.args.flow_low_threshold_scale or 0
  args.flow_low_threshold_value = self.args.flow_low_threshold_value or 0
  args.use_rain_sensor = self.args.use_rain_sensor or false
  args.use_moisture_sensor = self.args.use_moisture_sensor or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveConfigSetV1
--- @return st.zwave.CommandClass.Irrigation.ValveConfigSetV1Args
function ValveConfigSetV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.maximum_flow_size = args.maximum_flow_size or writer.size(args.maximum_flow_value)
  args.maximum_flow_precision = args.maximum_flow_precision or writer.precision(args.maximum_flow_value)
  args.flow_high_threshold_size = args.flow_high_threshold_size or writer.size(args.flow_high_threshold_value)
  args.flow_high_threshold_precision = args.flow_high_threshold_precision or writer.precision(args.flow_high_threshold_value)
  args.flow_low_threshold_size = args.flow_low_threshold_size or writer.size(args.flow_low_threshold_value)
  args.flow_low_threshold_precision = args.flow_low_threshold_precision or writer.precision(args.flow_low_threshold_value)
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveConfigSetV1
function ValveConfigSetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveConfigSetV1
function ValveConfigSetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.ValveConfigGetV1Args
--- @alias ValveConfigGetV1Args st.zwave.CommandClass.Irrigation.ValveConfigGetV1Args
--- @field public master_valve boolean
--- @field public valve_id integer [0,255]
local ValveConfigGetV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.ValveConfigGetV1:st.zwave.Command
--- @alias ValveConfigGetV1 st.zwave.CommandClass.Irrigation.ValveConfigGetV1
---
--- v1 IRRIGATION_VALVE_CONFIG_GET
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x0B
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveConfigGetV1Args command-specific arguments
local ValveConfigGetV1 = {}
setmetatable(ValveConfigGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_VALVE_CONFIG_GET object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveConfigGetV1Args command-specific arguments
function ValveConfigGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.VALVE_CONFIG_GET, 1, args, ...)
end

--- Serialize v1 IRRIGATION_VALVE_CONFIG_GET arguments.
---
--- @return string serialized payload
function ValveConfigGetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.master_valve)
  writer:write_bits(7, 0) -- reserved
  writer:write_u8(args.valve_id)
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_VALVE_CONFIG_GET payload.
---
--- @return st.zwave.CommandClass.Irrigation.ValveConfigGetV1Args deserialized arguments
function ValveConfigGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("master_valve")
  reader:read_bits(7) -- reserved
  reader:read_u8("valve_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveConfigGetV1
--- @return st.zwave.CommandClass.Irrigation.ValveConfigGetV1Args
function ValveConfigGetV1._defaults(self)
  local args = {}
  args.master_valve = self.args.master_valve or false
  args.valve_id = self.args.valve_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveConfigGetV1
--- @return st.zwave.CommandClass.Irrigation.ValveConfigGetV1Args
function ValveConfigGetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveConfigGetV1
function ValveConfigGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveConfigGetV1
function ValveConfigGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.ValveConfigReportV1Args
--- @alias ValveConfigReportV1Args st.zwave.CommandClass.Irrigation.ValveConfigReportV1Args
--- @field public master_valve boolean
--- @field public valve_id integer [0,255]
--- @field public nominal_current_high_threshold integer [0,255]
--- @field public nominal_current_low_threshold integer [0,255]
--- @field public maximum_flow_size integer [0,7]
--- @field public maximum_flow_scale integer [0,3]
--- @field public maximum_flow_precision integer [0,7]
--- @field public maximum_flow_value number [-2147483648,2147483647]
--- @field public flow_high_threshold_size integer [0,7]
--- @field public flow_high_threshold_scale integer [0,3]
--- @field public flow_high_threshold_precision integer [0,7]
--- @field public flow_high_threshold_value number [-2147483648,2147483647]
--- @field public flow_low_threshold_size integer [0,7]
--- @field public flow_low_threshold_scale integer [0,3]
--- @field public flow_low_threshold_precision integer [0,7]
--- @field public flow_low_threshold_value number [-2147483648,2147483647]
--- @field public use_rain_sensor boolean
--- @field public use_moisture_sensor boolean
local ValveConfigReportV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.ValveConfigReportV1:st.zwave.Command
--- @alias ValveConfigReportV1 st.zwave.CommandClass.Irrigation.ValveConfigReportV1
---
--- v1 IRRIGATION_VALVE_CONFIG_REPORT
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x0C
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveConfigReportV1Args command-specific arguments
local ValveConfigReportV1 = {}
setmetatable(ValveConfigReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_VALVE_CONFIG_REPORT object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveConfigReportV1Args command-specific arguments
function ValveConfigReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.VALVE_CONFIG_REPORT, 1, args, ...)
end

--- Serialize v1 IRRIGATION_VALVE_CONFIG_REPORT arguments.
---
--- @return string serialized payload
function ValveConfigReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.master_valve)
  writer:write_bits(7, 0) -- reserved
  writer:write_u8(args.valve_id)
  writer:write_u8(args.nominal_current_high_threshold)
  writer:write_u8(args.nominal_current_low_threshold)
  writer:write_bits(3, args.maximum_flow_size or writer.size(args.maximum_flow_value))
  writer:write_bits(2, args.maximum_flow_scale)
  writer:write_bits(3, args.maximum_flow_precision or writer.precision(args.maximum_flow_value))
  writer:write_vfloat(args.maximum_flow_size or writer.size(args.maximum_flow_value), args.maximum_flow_precision or writer.precision(args.maximum_flow_value), args.maximum_flow_value)
  writer:write_bits(3, args.flow_high_threshold_size or writer.size(args.flow_high_threshold_value))
  writer:write_bits(2, args.flow_high_threshold_scale)
  writer:write_bits(3, args.flow_high_threshold_precision or writer.precision(args.flow_high_threshold_value))
  writer:write_vfloat(args.flow_high_threshold_size or writer.size(args.flow_high_threshold_value), args.flow_high_threshold_precision or writer.precision(args.flow_high_threshold_value), args.flow_high_threshold_value)
  writer:write_bits(3, args.flow_low_threshold_size or writer.size(args.flow_low_threshold_value))
  writer:write_bits(2, args.flow_low_threshold_scale)
  writer:write_bits(3, args.flow_low_threshold_precision or writer.precision(args.flow_low_threshold_value))
  writer:write_vfloat(args.flow_low_threshold_size or writer.size(args.flow_low_threshold_value), args.flow_low_threshold_precision or writer.precision(args.flow_low_threshold_value), args.flow_low_threshold_value)
  writer:write_bool(args.use_rain_sensor)
  writer:write_bool(args.use_moisture_sensor)
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_VALVE_CONFIG_REPORT payload.
---
--- @return st.zwave.CommandClass.Irrigation.ValveConfigReportV1Args deserialized arguments
function ValveConfigReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("master_valve")
  reader:read_bits(7) -- reserved
  reader:read_u8("valve_id")
  reader:read_u8("nominal_current_high_threshold")
  reader:read_u8("nominal_current_low_threshold")
  reader:read_bits(3, "maximum_flow_size")
  reader:read_bits(2, "maximum_flow_scale")
  reader:read_bits(3, "maximum_flow_precision")
  reader:read_vfloat(reader.parsed.maximum_flow_size, reader.parsed.maximum_flow_precision, "maximum_flow_value")
  reader:read_bits(3, "flow_high_threshold_size")
  reader:read_bits(2, "flow_high_threshold_scale")
  reader:read_bits(3, "flow_high_threshold_precision")
  reader:read_vfloat(reader.parsed.flow_high_threshold_size, reader.parsed.flow_high_threshold_precision, "flow_high_threshold_value")
  reader:read_bits(3, "flow_low_threshold_size")
  reader:read_bits(2, "flow_low_threshold_scale")
  reader:read_bits(3, "flow_low_threshold_precision")
  reader:read_vfloat(reader.parsed.flow_low_threshold_size, reader.parsed.flow_low_threshold_precision, "flow_low_threshold_value")
  reader:read_bool("use_rain_sensor")
  reader:read_bool("use_moisture_sensor")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveConfigReportV1
--- @return st.zwave.CommandClass.Irrigation.ValveConfigReportV1Args
function ValveConfigReportV1._defaults(self)
  local args = {}
  args.master_valve = self.args.master_valve or false
  args.valve_id = self.args.valve_id or 0
  args.nominal_current_high_threshold = self.args.nominal_current_high_threshold or 0
  args.nominal_current_low_threshold = self.args.nominal_current_low_threshold or 0
  args.maximum_flow_scale = self.args.maximum_flow_scale or 0
  args.maximum_flow_value = self.args.maximum_flow_value or 0
  args.flow_high_threshold_scale = self.args.flow_high_threshold_scale or 0
  args.flow_high_threshold_value = self.args.flow_high_threshold_value or 0
  args.flow_low_threshold_scale = self.args.flow_low_threshold_scale or 0
  args.flow_low_threshold_value = self.args.flow_low_threshold_value or 0
  args.use_rain_sensor = self.args.use_rain_sensor or false
  args.use_moisture_sensor = self.args.use_moisture_sensor or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveConfigReportV1
--- @return st.zwave.CommandClass.Irrigation.ValveConfigReportV1Args
function ValveConfigReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.maximum_flow_size = args.maximum_flow_size or writer.size(args.maximum_flow_value)
  args.maximum_flow_precision = args.maximum_flow_precision or writer.precision(args.maximum_flow_value)
  args.flow_high_threshold_size = args.flow_high_threshold_size or writer.size(args.flow_high_threshold_value)
  args.flow_high_threshold_precision = args.flow_high_threshold_precision or writer.precision(args.flow_high_threshold_value)
  args.flow_low_threshold_size = args.flow_low_threshold_size or writer.size(args.flow_low_threshold_value)
  args.flow_low_threshold_precision = args.flow_low_threshold_precision or writer.precision(args.flow_low_threshold_value)
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveConfigReportV1
function ValveConfigReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveConfigReportV1
function ValveConfigReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.ValveRunV1Args
--- @alias ValveRunV1Args st.zwave.CommandClass.Irrigation.ValveRunV1Args
--- @field public master_valve boolean
--- @field public valve_id integer [0,255]
--- @field public duration integer [0,65535]
local ValveRunV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.ValveRunV1:st.zwave.Command
--- @alias ValveRunV1 st.zwave.CommandClass.Irrigation.ValveRunV1
---
--- v1 IRRIGATION_VALVE_RUN
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x0D
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveRunV1Args command-specific arguments
local ValveRunV1 = {}
setmetatable(ValveRunV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_VALVE_RUN object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveRunV1Args command-specific arguments
function ValveRunV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.VALVE_RUN, 1, args, ...)
end

--- Serialize v1 IRRIGATION_VALVE_RUN arguments.
---
--- @return string serialized payload
function ValveRunV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.master_valve)
  writer:write_bits(7, 0) -- reserved
  writer:write_u8(args.valve_id)
  writer:write_be_u16(args.duration)
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_VALVE_RUN payload.
---
--- @return st.zwave.CommandClass.Irrigation.ValveRunV1Args deserialized arguments
function ValveRunV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("master_valve")
  reader:read_bits(7) -- reserved
  reader:read_u8("valve_id")
  reader:read_be_u16("duration")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveRunV1
--- @return st.zwave.CommandClass.Irrigation.ValveRunV1Args
function ValveRunV1._defaults(self)
  local args = {}
  args.master_valve = self.args.master_valve or false
  args.valve_id = self.args.valve_id or 0
  args.duration = self.args.duration or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveRunV1
--- @return st.zwave.CommandClass.Irrigation.ValveRunV1Args
function ValveRunV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveRunV1
function ValveRunV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveRunV1
function ValveRunV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.ValveTableSetV1ArgsVg1
--- @alias ValveTableSetV1ArgsVg1 st.zwave.CommandClass.Irrigation.ValveTableSetV1ArgsVg1
--- @field public valve_id integer [0,255]
--- @field public duration integer [0,65535]
local ValveTableSetV1ArgsVg1 = {}

--- @class st.zwave.CommandClass.Irrigation.ValveTableSetV1Args
--- @alias ValveTableSetV1Args st.zwave.CommandClass.Irrigation.ValveTableSetV1Args
--- @field public valve_table_id integer [0,255]
--- @field public vg1 st.zwave.CommandClass.Irrigation.ValveTableSetV1ArgsVg1[]
local ValveTableSetV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.ValveTableSetV1:st.zwave.Command
--- @alias ValveTableSetV1 st.zwave.CommandClass.Irrigation.ValveTableSetV1
---
--- v1 IRRIGATION_VALVE_TABLE_SET
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x0E
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveTableSetV1Args command-specific arguments
local ValveTableSetV1 = {}
setmetatable(ValveTableSetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_VALVE_TABLE_SET object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveTableSetV1Args command-specific arguments
function ValveTableSetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.VALVE_TABLE_SET, 1, args, ...)
end

--- Serialize v1 IRRIGATION_VALVE_TABLE_SET arguments.
---
--- @return string serialized payload
function ValveTableSetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.valve_table_id)
  for i=1,writer.length(args.vg1) do
    writer:write_u8(args.vg1[i].valve_id)
    writer:write_be_u16(args.vg1[i].duration)
  end
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_VALVE_TABLE_SET payload.
---
--- @return st.zwave.CommandClass.Irrigation.ValveTableSetV1Args deserialized arguments
function ValveTableSetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("valve_table_id")
  reader.parsed.vg1 = {}
  while reader:remain() > 0 do
    local i = #reader.parsed.vg1 + 1
    reader.parsed.vg1[i] = {}
    reader:read_u8("valve_id", reader.parsed.vg1[i])
    reader:read_be_u16("duration", reader.parsed.vg1[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveTableSetV1
--- @return st.zwave.CommandClass.Irrigation.ValveTableSetV1Args
function ValveTableSetV1._defaults(self)
  local args = {}
  args.valve_table_id = self.args.valve_table_id or 0
  args.vg1 = self.args.vg1 or {}
  for i=1,buf.Writer.length(args.vg1) do
    args.vg1[i] = args.vg1[i] or {}
    args.vg1[i].valve_id = self.args.vg1[i].valve_id or 0
    args.vg1[i].duration = self.args.vg1[i].duration or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveTableSetV1
--- @return st.zwave.CommandClass.Irrigation.ValveTableSetV1Args
function ValveTableSetV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.vg1) do
    args.vg1[i] = args.vg1[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveTableSetV1
function ValveTableSetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveTableSetV1
function ValveTableSetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.ValveTableGetV1Args
--- @alias ValveTableGetV1Args st.zwave.CommandClass.Irrigation.ValveTableGetV1Args
--- @field public valve_table_id integer [0,255]
local ValveTableGetV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.ValveTableGetV1:st.zwave.Command
--- @alias ValveTableGetV1 st.zwave.CommandClass.Irrigation.ValveTableGetV1
---
--- v1 IRRIGATION_VALVE_TABLE_GET
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x0F
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveTableGetV1Args command-specific arguments
local ValveTableGetV1 = {}
setmetatable(ValveTableGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_VALVE_TABLE_GET object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveTableGetV1Args command-specific arguments
function ValveTableGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.VALVE_TABLE_GET, 1, args, ...)
end

--- Serialize v1 IRRIGATION_VALVE_TABLE_GET arguments.
---
--- @return string serialized payload
function ValveTableGetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.valve_table_id)
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_VALVE_TABLE_GET payload.
---
--- @return st.zwave.CommandClass.Irrigation.ValveTableGetV1Args deserialized arguments
function ValveTableGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("valve_table_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveTableGetV1
--- @return st.zwave.CommandClass.Irrigation.ValveTableGetV1Args
function ValveTableGetV1._defaults(self)
  local args = {}
  args.valve_table_id = self.args.valve_table_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveTableGetV1
--- @return st.zwave.CommandClass.Irrigation.ValveTableGetV1Args
function ValveTableGetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveTableGetV1
function ValveTableGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveTableGetV1
function ValveTableGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.ValveTableReportV1ArgsVg1
--- @alias ValveTableReportV1ArgsVg1 st.zwave.CommandClass.Irrigation.ValveTableReportV1ArgsVg1
--- @field public valve_id integer [0,255]
--- @field public duration integer [0,65535]
local ValveTableReportV1ArgsVg1 = {}

--- @class st.zwave.CommandClass.Irrigation.ValveTableReportV1Args
--- @alias ValveTableReportV1Args st.zwave.CommandClass.Irrigation.ValveTableReportV1Args
--- @field public valve_table_id integer [0,255]
--- @field public vg1 st.zwave.CommandClass.Irrigation.ValveTableReportV1ArgsVg1[]
local ValveTableReportV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.ValveTableReportV1:st.zwave.Command
--- @alias ValveTableReportV1 st.zwave.CommandClass.Irrigation.ValveTableReportV1
---
--- v1 IRRIGATION_VALVE_TABLE_REPORT
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x10
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveTableReportV1Args command-specific arguments
local ValveTableReportV1 = {}
setmetatable(ValveTableReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_VALVE_TABLE_REPORT object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveTableReportV1Args command-specific arguments
function ValveTableReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.VALVE_TABLE_REPORT, 1, args, ...)
end

--- Serialize v1 IRRIGATION_VALVE_TABLE_REPORT arguments.
---
--- @return string serialized payload
function ValveTableReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.valve_table_id)
  for i=1,writer.length(args.vg1) do
    writer:write_u8(args.vg1[i].valve_id)
    writer:write_be_u16(args.vg1[i].duration)
  end
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_VALVE_TABLE_REPORT payload.
---
--- @return st.zwave.CommandClass.Irrigation.ValveTableReportV1Args deserialized arguments
function ValveTableReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("valve_table_id")
  reader.parsed.vg1 = {}
  while reader:remain() > 0 do
    local i = #reader.parsed.vg1 + 1
    reader.parsed.vg1[i] = {}
    reader:read_u8("valve_id", reader.parsed.vg1[i])
    reader:read_be_u16("duration", reader.parsed.vg1[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveTableReportV1
--- @return st.zwave.CommandClass.Irrigation.ValveTableReportV1Args
function ValveTableReportV1._defaults(self)
  local args = {}
  args.valve_table_id = self.args.valve_table_id or 0
  args.vg1 = self.args.vg1 or {}
  for i=1,buf.Writer.length(args.vg1) do
    args.vg1[i] = args.vg1[i] or {}
    args.vg1[i].valve_id = self.args.vg1[i].valve_id or 0
    args.vg1[i].duration = self.args.vg1[i].duration or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveTableReportV1
--- @return st.zwave.CommandClass.Irrigation.ValveTableReportV1Args
function ValveTableReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.vg1) do
    args.vg1[i] = args.vg1[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveTableReportV1
function ValveTableReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveTableReportV1
function ValveTableReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.ValveTableRunV1Args
--- @alias ValveTableRunV1Args st.zwave.CommandClass.Irrigation.ValveTableRunV1Args
--- @field public valve_table_id string
local ValveTableRunV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.ValveTableRunV1:st.zwave.Command
--- @alias ValveTableRunV1 st.zwave.CommandClass.Irrigation.ValveTableRunV1
---
--- v1 IRRIGATION_VALVE_TABLE_RUN
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x11
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveTableRunV1Args command-specific arguments
local ValveTableRunV1 = {}
setmetatable(ValveTableRunV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_VALVE_TABLE_RUN object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveTableRunV1Args command-specific arguments
function ValveTableRunV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.VALVE_TABLE_RUN, 1, args, ...)
end

--- Serialize v1 IRRIGATION_VALVE_TABLE_RUN arguments.
---
--- @return string serialized payload
function ValveTableRunV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bytes(args.valve_table_id)
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_VALVE_TABLE_RUN payload.
---
--- @return st.zwave.CommandClass.Irrigation.ValveTableRunV1Args deserialized arguments
function ValveTableRunV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bytes(reader:remain(), "valve_table_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveTableRunV1
--- @return st.zwave.CommandClass.Irrigation.ValveTableRunV1Args
function ValveTableRunV1._defaults(self)
  local args = {}
  args.valve_table_id = self.args.valve_table_id or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveTableRunV1
--- @return st.zwave.CommandClass.Irrigation.ValveTableRunV1Args
function ValveTableRunV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveTableRunV1
function ValveTableRunV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.ValveTableRunV1
function ValveTableRunV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.SystemShutoffV1Args
--- @alias SystemShutoffV1Args st.zwave.CommandClass.Irrigation.SystemShutoffV1Args
--- @field public duration integer [0,255]
local SystemShutoffV1Args = {}

--- @class st.zwave.CommandClass.Irrigation.SystemShutoffV1:st.zwave.Command
--- @alias SystemShutoffV1 st.zwave.CommandClass.Irrigation.SystemShutoffV1
---
--- v1 IRRIGATION_SYSTEM_SHUTOFF
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x12
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.SystemShutoffV1Args command-specific arguments
local SystemShutoffV1 = {}
setmetatable(SystemShutoffV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 IRRIGATION_SYSTEM_SHUTOFF object.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.SystemShutoffV1Args command-specific arguments
function SystemShutoffV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.IRRIGATION, Irrigation.SYSTEM_SHUTOFF, 1, args, ...)
end

--- Serialize v1 IRRIGATION_SYSTEM_SHUTOFF arguments.
---
--- @return string serialized payload
function SystemShutoffV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.duration)
  return writer.buf
end

--- Deserialize a v1 IRRIGATION_SYSTEM_SHUTOFF payload.
---
--- @return st.zwave.CommandClass.Irrigation.SystemShutoffV1Args deserialized arguments
function SystemShutoffV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("duration")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemShutoffV1
--- @return st.zwave.CommandClass.Irrigation.SystemShutoffV1Args
function SystemShutoffV1._defaults(self)
  local args = {}
  args.duration = self.args.duration or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemShutoffV1
--- @return st.zwave.CommandClass.Irrigation.SystemShutoffV1Args
function SystemShutoffV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemShutoffV1
function SystemShutoffV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Irrigation.SystemShutoffV1
function SystemShutoffV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Irrigation.SystemInfoGet
--- @alias _SystemInfoGet st.zwave.CommandClass.Irrigation.SystemInfoGet
---
--- Dynamically versioned IRRIGATION_SYSTEM_INFO_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.SystemInfoGetV1Args
local _SystemInfoGet = {}
setmetatable(_SystemInfoGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_SYSTEM_INFO_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.SystemInfoGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.SystemInfoGet
function _SystemInfoGet:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.SYSTEM_INFO_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.SystemInfoReport
--- @alias _SystemInfoReport st.zwave.CommandClass.Irrigation.SystemInfoReport
---
--- Dynamically versioned IRRIGATION_SYSTEM_INFO_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.SystemInfoReportV1Args
local _SystemInfoReport = {}
setmetatable(_SystemInfoReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_SYSTEM_INFO_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.SystemInfoReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.SystemInfoReport
function _SystemInfoReport:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.SYSTEM_INFO_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.SystemStatusGet
--- @alias _SystemStatusGet st.zwave.CommandClass.Irrigation.SystemStatusGet
---
--- Dynamically versioned IRRIGATION_SYSTEM_STATUS_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.SystemStatusGetV1Args
local _SystemStatusGet = {}
setmetatable(_SystemStatusGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_SYSTEM_STATUS_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.SystemStatusGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.SystemStatusGet
function _SystemStatusGet:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.SYSTEM_STATUS_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.SystemStatusReport
--- @alias _SystemStatusReport st.zwave.CommandClass.Irrigation.SystemStatusReport
---
--- Dynamically versioned IRRIGATION_SYSTEM_STATUS_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.SystemStatusReportV1Args
local _SystemStatusReport = {}
setmetatable(_SystemStatusReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_SYSTEM_STATUS_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.SystemStatusReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.SystemStatusReport
function _SystemStatusReport:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.SYSTEM_STATUS_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.SystemConfigSet
--- @alias _SystemConfigSet st.zwave.CommandClass.Irrigation.SystemConfigSet
---
--- Dynamically versioned IRRIGATION_SYSTEM_CONFIG_SET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.SystemConfigSetV1Args
local _SystemConfigSet = {}
setmetatable(_SystemConfigSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_SYSTEM_CONFIG_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.SystemConfigSetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.SystemConfigSet
function _SystemConfigSet:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.SYSTEM_CONFIG_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.SystemConfigGet
--- @alias _SystemConfigGet st.zwave.CommandClass.Irrigation.SystemConfigGet
---
--- Dynamically versioned IRRIGATION_SYSTEM_CONFIG_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.SystemConfigGetV1Args
local _SystemConfigGet = {}
setmetatable(_SystemConfigGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_SYSTEM_CONFIG_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.SystemConfigGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.SystemConfigGet
function _SystemConfigGet:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.SYSTEM_CONFIG_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.SystemConfigReport
--- @alias _SystemConfigReport st.zwave.CommandClass.Irrigation.SystemConfigReport
---
--- Dynamically versioned IRRIGATION_SYSTEM_CONFIG_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x07
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.SystemConfigReportV1Args
local _SystemConfigReport = {}
setmetatable(_SystemConfigReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_SYSTEM_CONFIG_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.SystemConfigReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.SystemConfigReport
function _SystemConfigReport:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.SYSTEM_CONFIG_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.ValveInfoGet
--- @alias _ValveInfoGet st.zwave.CommandClass.Irrigation.ValveInfoGet
---
--- Dynamically versioned IRRIGATION_VALVE_INFO_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x08
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveInfoGetV1Args
local _ValveInfoGet = {}
setmetatable(_ValveInfoGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_VALVE_INFO_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveInfoGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.ValveInfoGet
function _ValveInfoGet:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.VALVE_INFO_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.ValveInfoReport
--- @alias _ValveInfoReport st.zwave.CommandClass.Irrigation.ValveInfoReport
---
--- Dynamically versioned IRRIGATION_VALVE_INFO_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x09
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveInfoReportV1Args
local _ValveInfoReport = {}
setmetatable(_ValveInfoReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_VALVE_INFO_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveInfoReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.ValveInfoReport
function _ValveInfoReport:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.VALVE_INFO_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.ValveConfigSet
--- @alias _ValveConfigSet st.zwave.CommandClass.Irrigation.ValveConfigSet
---
--- Dynamically versioned IRRIGATION_VALVE_CONFIG_SET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x0A
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveConfigSetV1Args
local _ValveConfigSet = {}
setmetatable(_ValveConfigSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_VALVE_CONFIG_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveConfigSetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.ValveConfigSet
function _ValveConfigSet:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.VALVE_CONFIG_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.ValveConfigGet
--- @alias _ValveConfigGet st.zwave.CommandClass.Irrigation.ValveConfigGet
---
--- Dynamically versioned IRRIGATION_VALVE_CONFIG_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x0B
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveConfigGetV1Args
local _ValveConfigGet = {}
setmetatable(_ValveConfigGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_VALVE_CONFIG_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveConfigGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.ValveConfigGet
function _ValveConfigGet:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.VALVE_CONFIG_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.ValveConfigReport
--- @alias _ValveConfigReport st.zwave.CommandClass.Irrigation.ValveConfigReport
---
--- Dynamically versioned IRRIGATION_VALVE_CONFIG_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x0C
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveConfigReportV1Args
local _ValveConfigReport = {}
setmetatable(_ValveConfigReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_VALVE_CONFIG_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveConfigReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.ValveConfigReport
function _ValveConfigReport:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.VALVE_CONFIG_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.ValveRun
--- @alias _ValveRun st.zwave.CommandClass.Irrigation.ValveRun
---
--- Dynamically versioned IRRIGATION_VALVE_RUN
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x0D
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveRunV1Args
local _ValveRun = {}
setmetatable(_ValveRun, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_VALVE_RUN object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveRunV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.ValveRun
function _ValveRun:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.VALVE_RUN, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.ValveTableSet
--- @alias _ValveTableSet st.zwave.CommandClass.Irrigation.ValveTableSet
---
--- Dynamically versioned IRRIGATION_VALVE_TABLE_SET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x0E
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveTableSetV1Args
local _ValveTableSet = {}
setmetatable(_ValveTableSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_VALVE_TABLE_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveTableSetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.ValveTableSet
function _ValveTableSet:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.VALVE_TABLE_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.ValveTableGet
--- @alias _ValveTableGet st.zwave.CommandClass.Irrigation.ValveTableGet
---
--- Dynamically versioned IRRIGATION_VALVE_TABLE_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x0F
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveTableGetV1Args
local _ValveTableGet = {}
setmetatable(_ValveTableGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_VALVE_TABLE_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveTableGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.ValveTableGet
function _ValveTableGet:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.VALVE_TABLE_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.ValveTableReport
--- @alias _ValveTableReport st.zwave.CommandClass.Irrigation.ValveTableReport
---
--- Dynamically versioned IRRIGATION_VALVE_TABLE_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x10
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveTableReportV1Args
local _ValveTableReport = {}
setmetatable(_ValveTableReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_VALVE_TABLE_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveTableReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.ValveTableReport
function _ValveTableReport:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.VALVE_TABLE_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.ValveTableRun
--- @alias _ValveTableRun st.zwave.CommandClass.Irrigation.ValveTableRun
---
--- Dynamically versioned IRRIGATION_VALVE_TABLE_RUN
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x11
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.ValveTableRunV1Args
local _ValveTableRun = {}
setmetatable(_ValveTableRun, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_VALVE_TABLE_RUN object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.ValveTableRunV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.ValveTableRun
function _ValveTableRun:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.VALVE_TABLE_RUN, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Irrigation.SystemShutoff
--- @alias _SystemShutoff st.zwave.CommandClass.Irrigation.SystemShutoff
---
--- Dynamically versioned IRRIGATION_SYSTEM_SHUTOFF
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x6B
--- @field public cmd_id number 0x12
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Irrigation.SystemShutoffV1Args
local _SystemShutoff = {}
setmetatable(_SystemShutoff, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an IRRIGATION_SYSTEM_SHUTOFF object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Irrigation command class module instance
--- @param args st.zwave.CommandClass.Irrigation.SystemShutoffV1Args command-specific arguments
--- @return st.zwave.CommandClass.Irrigation.SystemShutoff
function _SystemShutoff:construct(module, args, ...)
  return zw.Command._construct(module, Irrigation.SYSTEM_SHUTOFF, module._serialization_version, args, ...)
end

Irrigation.SystemInfoGetV1 = SystemInfoGetV1
Irrigation.SystemInfoReportV1 = SystemInfoReportV1
Irrigation.SystemStatusGetV1 = SystemStatusGetV1
Irrigation.SystemStatusReportV1 = SystemStatusReportV1
Irrigation.SystemConfigSetV1 = SystemConfigSetV1
Irrigation.SystemConfigGetV1 = SystemConfigGetV1
Irrigation.SystemConfigReportV1 = SystemConfigReportV1
Irrigation.ValveInfoGetV1 = ValveInfoGetV1
Irrigation.ValveInfoReportV1 = ValveInfoReportV1
Irrigation.ValveConfigSetV1 = ValveConfigSetV1
Irrigation.ValveConfigGetV1 = ValveConfigGetV1
Irrigation.ValveConfigReportV1 = ValveConfigReportV1
Irrigation.ValveRunV1 = ValveRunV1
Irrigation.ValveTableSetV1 = ValveTableSetV1
Irrigation.ValveTableGetV1 = ValveTableGetV1
Irrigation.ValveTableReportV1 = ValveTableReportV1
Irrigation.ValveTableRunV1 = ValveTableRunV1
Irrigation.SystemShutoffV1 = SystemShutoffV1
Irrigation.SystemInfoGet = _SystemInfoGet
Irrigation.SystemInfoReport = _SystemInfoReport
Irrigation.SystemStatusGet = _SystemStatusGet
Irrigation.SystemStatusReport = _SystemStatusReport
Irrigation.SystemConfigSet = _SystemConfigSet
Irrigation.SystemConfigGet = _SystemConfigGet
Irrigation.SystemConfigReport = _SystemConfigReport
Irrigation.ValveInfoGet = _ValveInfoGet
Irrigation.ValveInfoReport = _ValveInfoReport
Irrigation.ValveConfigSet = _ValveConfigSet
Irrigation.ValveConfigGet = _ValveConfigGet
Irrigation.ValveConfigReport = _ValveConfigReport
Irrigation.ValveRun = _ValveRun
Irrigation.ValveTableSet = _ValveTableSet
Irrigation.ValveTableGet = _ValveTableGet
Irrigation.ValveTableReport = _ValveTableReport
Irrigation.ValveTableRun = _ValveTableRun
Irrigation.SystemShutoff = _SystemShutoff

Irrigation._lut = {
  [0] = { -- dynamically versioned constructors
    [Irrigation.SYSTEM_INFO_GET] = Irrigation.SystemInfoGet,
    [Irrigation.SYSTEM_INFO_REPORT] = Irrigation.SystemInfoReport,
    [Irrigation.SYSTEM_STATUS_GET] = Irrigation.SystemStatusGet,
    [Irrigation.SYSTEM_STATUS_REPORT] = Irrigation.SystemStatusReport,
    [Irrigation.SYSTEM_CONFIG_SET] = Irrigation.SystemConfigSet,
    [Irrigation.SYSTEM_CONFIG_GET] = Irrigation.SystemConfigGet,
    [Irrigation.SYSTEM_CONFIG_REPORT] = Irrigation.SystemConfigReport,
    [Irrigation.VALVE_INFO_GET] = Irrigation.ValveInfoGet,
    [Irrigation.VALVE_INFO_REPORT] = Irrigation.ValveInfoReport,
    [Irrigation.VALVE_CONFIG_SET] = Irrigation.ValveConfigSet,
    [Irrigation.VALVE_CONFIG_GET] = Irrigation.ValveConfigGet,
    [Irrigation.VALVE_CONFIG_REPORT] = Irrigation.ValveConfigReport,
    [Irrigation.VALVE_RUN] = Irrigation.ValveRun,
    [Irrigation.VALVE_TABLE_SET] = Irrigation.ValveTableSet,
    [Irrigation.VALVE_TABLE_GET] = Irrigation.ValveTableGet,
    [Irrigation.VALVE_TABLE_REPORT] = Irrigation.ValveTableReport,
    [Irrigation.VALVE_TABLE_RUN] = Irrigation.ValveTableRun,
    [Irrigation.SYSTEM_SHUTOFF] = Irrigation.SystemShutoff
  },
  [1] = { -- version 1
    [Irrigation.SYSTEM_INFO_GET] = Irrigation.SystemInfoGetV1,
    [Irrigation.SYSTEM_INFO_REPORT] = Irrigation.SystemInfoReportV1,
    [Irrigation.SYSTEM_STATUS_GET] = Irrigation.SystemStatusGetV1,
    [Irrigation.SYSTEM_STATUS_REPORT] = Irrigation.SystemStatusReportV1,
    [Irrigation.SYSTEM_CONFIG_SET] = Irrigation.SystemConfigSetV1,
    [Irrigation.SYSTEM_CONFIG_GET] = Irrigation.SystemConfigGetV1,
    [Irrigation.SYSTEM_CONFIG_REPORT] = Irrigation.SystemConfigReportV1,
    [Irrigation.VALVE_INFO_GET] = Irrigation.ValveInfoGetV1,
    [Irrigation.VALVE_INFO_REPORT] = Irrigation.ValveInfoReportV1,
    [Irrigation.VALVE_CONFIG_SET] = Irrigation.ValveConfigSetV1,
    [Irrigation.VALVE_CONFIG_GET] = Irrigation.ValveConfigGetV1,
    [Irrigation.VALVE_CONFIG_REPORT] = Irrigation.ValveConfigReportV1,
    [Irrigation.VALVE_RUN] = Irrigation.ValveRunV1,
    [Irrigation.VALVE_TABLE_SET] = Irrigation.ValveTableSetV1,
    [Irrigation.VALVE_TABLE_GET] = Irrigation.ValveTableGetV1,
    [Irrigation.VALVE_TABLE_REPORT] = Irrigation.ValveTableReportV1,
    [Irrigation.VALVE_TABLE_RUN] = Irrigation.ValveTableRunV1,
    [Irrigation.SYSTEM_SHUTOFF] = Irrigation.SystemShutoffV1
  }
}
--- @class st.zwave.CommandClass.Irrigation.sensor_status
--- @alias sensor_status st.zwave.CommandClass.Irrigation.sensor_status
--- @field public FLOW_SENSOR_DETECTED number 0x00
--- @field public PRESSURE_SENSOR_DETECTED number 0x01
--- @field public RAIN_SENSOR_DETECTED number 0x02
--- @field public MOISTURE_SENSOR_DETECTED number 0x03
local sensor_status = {
  FLOW_SENSOR_DETECTED = 0x00,
  PRESSURE_SENSOR_DETECTED = 0x01,
  RAIN_SENSOR_DETECTED = 0x02,
  MOISTURE_SENSOR_DETECTED = 0x03
}
Irrigation.sensor_status = sensor_status
Irrigation._reflect_sensor_status = zw._reflection_builder(Irrigation.sensor_status)


return Irrigation
