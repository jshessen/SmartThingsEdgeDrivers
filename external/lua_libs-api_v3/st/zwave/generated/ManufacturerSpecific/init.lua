-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.ManufacturerSpecific
--- @alias ManufacturerSpecific st.zwave.CommandClass.ManufacturerSpecific
---
--- Supported versions: 1,2
---
--- @field public GET number 0x04 - MANUFACTURER_SPECIFIC_GET command id
--- @field public REPORT number 0x05 - MANUFACTURER_SPECIFIC_REPORT command id
--- @field public DEVICE_SPECIFIC_GET number 0x06 - DEVICE_SPECIFIC_GET command id
--- @field public DEVICE_SPECIFIC_REPORT number 0x07 - DEVICE_SPECIFIC_REPORT command id
local ManufacturerSpecific = {}
ManufacturerSpecific.GET = 0x04
ManufacturerSpecific.REPORT = 0x05
ManufacturerSpecific.DEVICE_SPECIFIC_GET = 0x06
ManufacturerSpecific.DEVICE_SPECIFIC_REPORT = 0x07

ManufacturerSpecific._commands = {
  [ManufacturerSpecific.GET] = "GET",
  [ManufacturerSpecific.REPORT] = "REPORT",
  [ManufacturerSpecific.DEVICE_SPECIFIC_GET] = "DEVICE_SPECIFIC_GET",
  [ManufacturerSpecific.DEVICE_SPECIFIC_REPORT] = "DEVICE_SPECIFIC_REPORT"
}

--- Instantiate a versioned instance of the ManufacturerSpecific Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.ManufacturerSpecific versioned command class instance
function ManufacturerSpecific:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.MANUFACTURER_SPECIFIC][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(ManufacturerSpecific, {
  __call = ManufacturerSpecific.init
})

ManufacturerSpecific._serialization_version = nil
ManufacturerSpecific._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.MANUFACTURER_SPECIFIC] = {
  [1] = true,
  [2] = true
}

--- @class st.zwave.CommandClass.ManufacturerSpecific.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.ManufacturerSpecific.GetV1Args
local GetV1Args = {}

--- @class st.zwave.CommandClass.ManufacturerSpecific.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.ManufacturerSpecific.GetV1
---
--- v1 and forward-compatible v2 MANUFACTURER_SPECIFIC_GET
---
--- @field public cmd_class number 0x72
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ManufacturerSpecific.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 MANUFACTURER_SPECIFIC_GET object.
---
--- @param module st.zwave.CommandClass.ManufacturerSpecific command class module instance
--- @param args st.zwave.CommandClass.ManufacturerSpecific.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.MANUFACTURER_SPECIFIC, ManufacturerSpecific.GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 MANUFACTURER_SPECIFIC_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 MANUFACTURER_SPECIFIC_GET payload.
---
--- @return st.zwave.CommandClass.ManufacturerSpecific.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ManufacturerSpecific.GetV1
--- @return st.zwave.CommandClass.ManufacturerSpecific.GetV1Args
function GetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ManufacturerSpecific.GetV1
--- @return st.zwave.CommandClass.ManufacturerSpecific.GetV1Args
function GetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ManufacturerSpecific.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ManufacturerSpecific.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ManufacturerSpecific.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.ManufacturerSpecific.ReportV1Args
--- @field public manufacturer_id integer [0,65535]
--- @field public product_type_id integer [0,65535]
--- @field public product_id integer [0,65535]
local ReportV1Args = {}

--- @class st.zwave.CommandClass.ManufacturerSpecific.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.ManufacturerSpecific.ReportV1
---
--- v1 and forward-compatible v2 MANUFACTURER_SPECIFIC_REPORT
---
--- @field public cmd_class number 0x72
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ManufacturerSpecific.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 MANUFACTURER_SPECIFIC_REPORT object.
---
--- @param module st.zwave.CommandClass.ManufacturerSpecific command class module instance
--- @param args st.zwave.CommandClass.ManufacturerSpecific.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.MANUFACTURER_SPECIFIC, ManufacturerSpecific.REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 MANUFACTURER_SPECIFIC_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_be_u16(args.manufacturer_id)
  writer:write_be_u16(args.product_type_id)
  writer:write_be_u16(args.product_id)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 MANUFACTURER_SPECIFIC_REPORT payload.
---
--- @return st.zwave.CommandClass.ManufacturerSpecific.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_be_u16("manufacturer_id")
  reader:read_be_u16("product_type_id")
  reader:read_be_u16("product_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ManufacturerSpecific.ReportV1
--- @return st.zwave.CommandClass.ManufacturerSpecific.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.manufacturer_id = self.args.manufacturer_id or 0
  args.product_type_id = self.args.product_type_id or 0
  args.product_id = self.args.product_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ManufacturerSpecific.ReportV1
--- @return st.zwave.CommandClass.ManufacturerSpecific.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ManufacturerSpecific.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ManufacturerSpecific.ReportV1
function ReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGetV2Args
--- @alias DeviceSpecificGetV2Args st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGetV2Args
--- @field public device_id_type integer see :lua:class:`ManufacturerSpecific.device_id_type <st.zwave.CommandClass.ManufacturerSpecific.device_id_type>`
local DeviceSpecificGetV2Args = {}

--- @class st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGetV2:st.zwave.Command
--- @alias DeviceSpecificGetV2 st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGetV2
---
--- v2 DEVICE_SPECIFIC_GET
---
--- @field public cmd_class number 0x72
--- @field public cmd_id number 0x06
--- @field public version number 2
--- @field public args st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGetV2Args command-specific arguments
local DeviceSpecificGetV2 = {}
setmetatable(DeviceSpecificGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 DEVICE_SPECIFIC_GET object.
---
--- @param module st.zwave.CommandClass.ManufacturerSpecific command class module instance
--- @param args st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGetV2Args command-specific arguments
function DeviceSpecificGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.MANUFACTURER_SPECIFIC, ManufacturerSpecific.DEVICE_SPECIFIC_GET, 2, args, ...)
end

--- Serialize v2 DEVICE_SPECIFIC_GET arguments.
---
--- @return string serialized payload
function DeviceSpecificGetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(3, args.device_id_type)
  writer:write_bits(5, 0) -- reserved
  return writer.buf
end

--- Deserialize a v2 DEVICE_SPECIFIC_GET payload.
---
--- @return st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGetV2Args deserialized arguments
function DeviceSpecificGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(3, "device_id_type")
  reader:read_bits(5) -- reserved
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGetV2
--- @return st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGetV2Args
function DeviceSpecificGetV2._defaults(self)
  local args = {}
  args.device_id_type = self.args.device_id_type or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGetV2
--- @return st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGetV2Args
function DeviceSpecificGetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGetV2
function DeviceSpecificGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGetV2
function DeviceSpecificGetV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.device_id_type = function()
    return zw._reflect(
      ManufacturerSpecific._reflect_device_id_type,
      args.device_id_type
    )
  end
end

--- @class st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReportV2Args
--- @alias DeviceSpecificReportV2Args st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReportV2Args
--- @field public device_id_type integer see :lua:class:`ManufacturerSpecific.device_id_type <st.zwave.CommandClass.ManufacturerSpecific.device_id_type>`
--- @field public device_id_data_format integer see :lua:class:`ManufacturerSpecific.device_id_data_format <st.zwave.CommandClass.ManufacturerSpecific.device_id_data_format>`
--- @field public device_id_data string
local DeviceSpecificReportV2Args = {}

--- @class st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReportV2:st.zwave.Command
--- @alias DeviceSpecificReportV2 st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReportV2
---
--- v2 DEVICE_SPECIFIC_REPORT
---
--- @field public cmd_class number 0x72
--- @field public cmd_id number 0x07
--- @field public version number 2
--- @field public args st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReportV2Args command-specific arguments
local DeviceSpecificReportV2 = {}
setmetatable(DeviceSpecificReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 DEVICE_SPECIFIC_REPORT object.
---
--- @param module st.zwave.CommandClass.ManufacturerSpecific command class module instance
--- @param args st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReportV2Args command-specific arguments
function DeviceSpecificReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.MANUFACTURER_SPECIFIC, ManufacturerSpecific.DEVICE_SPECIFIC_REPORT, 2, args, ...)
end

--- Serialize v2 DEVICE_SPECIFIC_REPORT arguments.
---
--- @return string serialized payload
function DeviceSpecificReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(3, args.device_id_type)
  writer:write_bits(5, 0) -- reserved
  writer:write_bits(5, writer.length(args.device_id_data))
  writer:write_bits(3, args.device_id_data_format)
  writer:write_bytes(args.device_id_data)
  return writer.buf
end

--- Deserialize a v2 DEVICE_SPECIFIC_REPORT payload.
---
--- @return st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReportV2Args deserialized arguments
function DeviceSpecificReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(3, "device_id_type")
  reader:read_bits(5) -- reserved
  reader:read_bits(5, "device_id_data_length_indicator")
  reader:read_bits(3, "device_id_data_format")
  reader:read_bytes(reader.parsed.device_id_data_length_indicator, "device_id_data")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReportV2
--- @return st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReportV2Args
function DeviceSpecificReportV2._defaults(self)
  local args = {}
  args.device_id_type = self.args.device_id_type or 0
  args.device_id_data_format = self.args.device_id_data_format or 0
  args.device_id_data = self.args.device_id_data or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReportV2
--- @return st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReportV2Args
function DeviceSpecificReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReportV2
function DeviceSpecificReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReportV2
function DeviceSpecificReportV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.device_id_type = function()
    return zw._reflect(
      ManufacturerSpecific._reflect_device_id_type,
      args.device_id_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.device_id_data_format = function()
    return zw._reflect(
      ManufacturerSpecific._reflect_device_id_data_format,
      args.device_id_data_format
    )
  end
end

--- @class st.zwave.CommandClass.ManufacturerSpecific.Get
--- @alias _Get st.zwave.CommandClass.ManufacturerSpecific.Get
---
--- Dynamically versioned MANUFACTURER_SPECIFIC_GET
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x72
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ManufacturerSpecific.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MANUFACTURER_SPECIFIC_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ManufacturerSpecific command class module instance
--- @param args st.zwave.CommandClass.ManufacturerSpecific.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.ManufacturerSpecific.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, ManufacturerSpecific.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ManufacturerSpecific.Report
--- @alias _Report st.zwave.CommandClass.ManufacturerSpecific.Report
---
--- Dynamically versioned MANUFACTURER_SPECIFIC_REPORT
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x72
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ManufacturerSpecific.ReportV1Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MANUFACTURER_SPECIFIC_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ManufacturerSpecific command class module instance
--- @param args st.zwave.CommandClass.ManufacturerSpecific.ReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.ManufacturerSpecific.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, ManufacturerSpecific.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGet
--- @alias _DeviceSpecificGet st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGet
---
--- Dynamically versioned DEVICE_SPECIFIC_GET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x72
--- @field public cmd_id number 0x06
--- @field public version number 2
--- @field public args st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGetV2Args
local _DeviceSpecificGet = {}
setmetatable(_DeviceSpecificGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a DEVICE_SPECIFIC_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ManufacturerSpecific command class module instance
--- @param args st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificGet
function _DeviceSpecificGet:construct(module, args, ...)
  return zw.Command._construct(module, ManufacturerSpecific.DEVICE_SPECIFIC_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReport
--- @alias _DeviceSpecificReport st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReport
---
--- Dynamically versioned DEVICE_SPECIFIC_REPORT
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x72
--- @field public cmd_id number 0x07
--- @field public version number 2
--- @field public args st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReportV2Args
local _DeviceSpecificReport = {}
setmetatable(_DeviceSpecificReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a DEVICE_SPECIFIC_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ManufacturerSpecific command class module instance
--- @param args st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.ManufacturerSpecific.DeviceSpecificReport
function _DeviceSpecificReport:construct(module, args, ...)
  return zw.Command._construct(module, ManufacturerSpecific.DEVICE_SPECIFIC_REPORT, module._serialization_version, args, ...)
end

ManufacturerSpecific.GetV1 = GetV1
ManufacturerSpecific.ReportV1 = ReportV1
ManufacturerSpecific.DeviceSpecificGetV2 = DeviceSpecificGetV2
ManufacturerSpecific.DeviceSpecificReportV2 = DeviceSpecificReportV2
ManufacturerSpecific.Get = _Get
ManufacturerSpecific.Report = _Report
ManufacturerSpecific.DeviceSpecificGet = _DeviceSpecificGet
ManufacturerSpecific.DeviceSpecificReport = _DeviceSpecificReport

ManufacturerSpecific._lut = {
  [0] = { -- dynamically versioned constructors
    [ManufacturerSpecific.GET] = ManufacturerSpecific.Get,
    [ManufacturerSpecific.REPORT] = ManufacturerSpecific.Report,
    [ManufacturerSpecific.DEVICE_SPECIFIC_GET] = ManufacturerSpecific.DeviceSpecificGet,
    [ManufacturerSpecific.DEVICE_SPECIFIC_REPORT] = ManufacturerSpecific.DeviceSpecificReport
  },
  [1] = { -- version 1
    [ManufacturerSpecific.GET] = ManufacturerSpecific.GetV1,
    [ManufacturerSpecific.REPORT] = ManufacturerSpecific.ReportV1
  },
  [2] = { -- version 2
    [ManufacturerSpecific.GET] = ManufacturerSpecific.GetV1,
    [ManufacturerSpecific.REPORT] = ManufacturerSpecific.ReportV1,
    [ManufacturerSpecific.DEVICE_SPECIFIC_GET] = ManufacturerSpecific.DeviceSpecificGetV2,
    [ManufacturerSpecific.DEVICE_SPECIFIC_REPORT] = ManufacturerSpecific.DeviceSpecificReportV2
  }
}
--- @class st.zwave.CommandClass.ManufacturerSpecific.device_id_data_format
--- @alias device_id_data_format st.zwave.CommandClass.ManufacturerSpecific.device_id_data_format
--- @field public BINARY number 0x01
local device_id_data_format = {
  BINARY = 0x01
}
ManufacturerSpecific.device_id_data_format = device_id_data_format
ManufacturerSpecific._reflect_device_id_data_format = zw._reflection_builder(ManufacturerSpecific.device_id_data_format)

--- @class st.zwave.CommandClass.ManufacturerSpecific.device_id_type
--- @alias device_id_type st.zwave.CommandClass.ManufacturerSpecific.device_id_type
--- @field public SERIAL_NUMBER number 0x01
local device_id_type = {
  SERIAL_NUMBER = 0x01
}
ManufacturerSpecific.device_id_type = device_id_type
ManufacturerSpecific._reflect_device_id_type = zw._reflection_builder(ManufacturerSpecific.device_id_type)


return ManufacturerSpecific
