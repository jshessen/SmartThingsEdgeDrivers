-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.Meter
--- @alias Meter st.zwave.CommandClass.Meter
---
--- Supported versions: 1,2,3,4,5,6
---
--- @field public GET number 0x01 - METER_GET command id
--- @field public REPORT number 0x02 - METER_REPORT command id
--- @field public SUPPORTED_GET number 0x03 - METER_SUPPORTED_GET command id
--- @field public SUPPORTED_REPORT number 0x04 - METER_SUPPORTED_REPORT command id
--- @field public RESET number 0x05 - METER_RESET command id
local Meter = {}
Meter.GET = 0x01
Meter.REPORT = 0x02
Meter.SUPPORTED_GET = 0x03
Meter.SUPPORTED_REPORT = 0x04
Meter.RESET = 0x05

Meter._commands = {
  [Meter.GET] = "GET",
  [Meter.REPORT] = "REPORT",
  [Meter.SUPPORTED_GET] = "SUPPORTED_GET",
  [Meter.SUPPORTED_REPORT] = "SUPPORTED_REPORT",
  [Meter.RESET] = "RESET"
}

--- Instantiate a versioned instance of the Meter Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.Meter versioned command class instance
function Meter:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.METER][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(Meter, {
  __call = Meter.init
})

Meter._serialization_version = nil
Meter._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.METER] = {
  [1] = true,
  [2] = true,
  [3] = true,
  [4] = true,
  [5] = true,
  [6] = true
}

--- @class st.zwave.CommandClass.Meter.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.Meter.GetV1Args
local GetV1Args = {}

--- @class st.zwave.CommandClass.Meter.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.Meter.GetV1
---
--- v1 METER_GET
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Meter.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 METER_GET object.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.METER, Meter.GET, 1, args, ...)
end

--- Serialize v1 METER_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 METER_GET payload.
---
--- @return st.zwave.CommandClass.Meter.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Meter.GetV1
--- @return st.zwave.CommandClass.Meter.GetV1Args
function GetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Meter.GetV1
--- @return st.zwave.CommandClass.Meter.GetV1Args
function GetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Meter.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Meter.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Meter.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.Meter.ReportV1Args
--- @field public meter_type integer see :lua:class:`Meter.meter_type <st.zwave.CommandClass.Meter.meter_type>`
--- @field public size integer [0,7]
--- @field public scale integer see :lua:class:`Meter.scale <st.zwave.CommandClass.Meter.scale>`
--- @field public precision integer [0,7]
--- @field public meter_value number [-2147483648,2147483647]
local ReportV1Args = {}

--- @class st.zwave.CommandClass.Meter.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.Meter.ReportV1
---
--- v1 METER_REPORT
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Meter.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 METER_REPORT object.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.METER, Meter.REPORT, 1, args, ...)
end

--- Serialize v1 METER_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.meter_type)
  writer:write_bits(3, args.size or writer.size(args.meter_value))
  writer:write_bits(2, args.scale)
  writer:write_bits(3, args.precision or writer.precision(args.meter_value))
  writer:write_vfloat(args.size or writer.size(args.meter_value), args.precision or writer.precision(args.meter_value), args.meter_value)
  return writer.buf
end

--- Deserialize a v1 METER_REPORT payload.
---
--- @return st.zwave.CommandClass.Meter.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("meter_type")
  reader:read_bits(3, "size")
  reader:read_bits(2, "scale")
  reader:read_bits(3, "precision")
  reader:read_vfloat(reader.parsed.size, reader.parsed.precision, "meter_value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Meter.ReportV1
--- @return st.zwave.CommandClass.Meter.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.meter_type = self.args.meter_type or 0
  args.scale = self.args.scale or 0
  args.meter_value = self.args.meter_value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Meter.ReportV1
--- @return st.zwave.CommandClass.Meter.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.size = args.size or writer.size(args.meter_value)
  args.precision = args.precision or writer.precision(args.meter_value)
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Meter.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Meter.ReportV1
function ReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.meter_type = function()
    return zw._reflect(
      Meter._reflect_meter_type,
      args.meter_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.scale = function()
    return zw._reflect(
      Meter._reflect_scale,
      args.meter_type,
      args.scale
    )
  end
end

--- @class st.zwave.CommandClass.Meter.GetV2Args
--- @alias GetV2Args st.zwave.CommandClass.Meter.GetV2Args
--- @field public scale integer see :lua:class:`Meter.scale <st.zwave.CommandClass.Meter.scale>`
local GetV2Args = {}

--- @class st.zwave.CommandClass.Meter.GetV2:st.zwave.Command
--- @alias GetV2 st.zwave.CommandClass.Meter.GetV2
---
--- v2 METER_GET
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x01
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Meter.GetV2Args command-specific arguments
local GetV2 = {}
setmetatable(GetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 METER_GET object.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.GetV2Args command-specific arguments
function GetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.METER, Meter.GET, 2, args, ...)
end

--- Serialize v2 METER_GET arguments.
---
--- @return string serialized payload
function GetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(3, 0) -- reserved
  writer:write_bits(2, args.scale)
  writer:write_bits(3, 0) -- reserved2
  return writer.buf
end

--- Deserialize a v2 METER_GET payload.
---
--- @return st.zwave.CommandClass.Meter.GetV2Args deserialized arguments
function GetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(3) -- reserved
  reader:read_bits(2, "scale")
  reader:read_bits(3) -- reserved2
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Meter.GetV2
--- @return st.zwave.CommandClass.Meter.GetV2Args
function GetV2._defaults(self)
  local args = {}
  args.scale = self.args.scale or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Meter.GetV2
--- @return st.zwave.CommandClass.Meter.GetV2Args
function GetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Meter.GetV2
function GetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Meter.GetV2
function GetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Meter.ReportV2Args
--- @alias ReportV2Args st.zwave.CommandClass.Meter.ReportV2Args
--- @field public meter_type integer see :lua:class:`Meter.meter_type <st.zwave.CommandClass.Meter.meter_type>`
--- @field public rate_type integer see :lua:class:`Meter.rate_type <st.zwave.CommandClass.Meter.rate_type>`
--- @field public size integer [0,7]
--- @field public scale integer see :lua:class:`Meter.scale <st.zwave.CommandClass.Meter.scale>`
--- @field public precision integer [0,7]
--- @field public meter_value number [-2147483648,2147483647]
--- @field public delta_time integer [0,65535]
--- @field public previous_meter_value number [-2147483648,2147483647]
local ReportV2Args = {}

--- @class st.zwave.CommandClass.Meter.ReportV2:st.zwave.Command
--- @alias ReportV2 st.zwave.CommandClass.Meter.ReportV2
---
--- v2 METER_REPORT
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x02
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Meter.ReportV2Args command-specific arguments
local ReportV2 = {}
setmetatable(ReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 METER_REPORT object.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.ReportV2Args command-specific arguments
function ReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.METER, Meter.REPORT, 2, args, ...)
end

--- Serialize v2 METER_REPORT arguments.
---
--- @return string serialized payload
function ReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, args.meter_type)
  writer:write_bits(2, args.rate_type)
  writer:write_bool(false) -- reserved
  writer:write_bits(3, args.size or writer.consensus_size({ args.meter_value }, { args.previous_meter_value }))
  writer:write_bits(2, args.scale)
  writer:write_bits(3, args.precision or writer.consensus_precision({ args.meter_value }, { args.previous_meter_value }))
  writer:write_vfloat(args.size or writer.consensus_size({ args.meter_value }, { args.previous_meter_value }), args.precision or writer.consensus_precision({ args.meter_value }, { args.previous_meter_value }), args.meter_value)
  writer:write_be_u16(args.delta_time)
  if args.previous_meter_value then
      writer:write_vfloat(args.size or writer.consensus_size({ args.meter_value }, { args.previous_meter_value }), args.precision or writer.consensus_precision({ args.meter_value }, { args.previous_meter_value }), args.previous_meter_value)
  end
  return writer.buf
end

--- Deserialize a v2 METER_REPORT payload.
---
--- @return st.zwave.CommandClass.Meter.ReportV2Args deserialized arguments
function ReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "meter_type")
  reader:read_bits(2, "rate_type")
  reader:read_bool() -- reserved
  reader:read_bits(3, "size")
  reader:read_bits(2, "scale")
  reader:read_bits(3, "precision")
  reader:read_vfloat(reader.parsed.size, reader.parsed.precision, "meter_value")
  reader:read_be_u16("delta_time")
  if reader:remain() > 0 then
    reader:read_vfloat(reader.parsed.size, reader.parsed.precision, "previous_meter_value")
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Meter.ReportV2
--- @return st.zwave.CommandClass.Meter.ReportV2Args
function ReportV2._defaults(self)
  local args = {}
  args.meter_type = self.args.meter_type or 0
  args.rate_type = self.args.rate_type or 0
  args.scale = self.args.scale or 0
  args.meter_value = self.args.meter_value or 0
  args.delta_time = self.args.delta_time or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Meter.ReportV2
--- @return st.zwave.CommandClass.Meter.ReportV2Args
function ReportV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.size = args.size or writer.consensus_size({ args.meter_value }, { args.previous_meter_value })
  args.precision = args.precision or writer.consensus_precision({ args.meter_value }, { args.previous_meter_value })
  args.previous_meter_value = self.args.previous_meter_value or 0
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Meter.ReportV2
function ReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Meter.ReportV2
function ReportV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.scale = function()
    return zw._reflect(
      Meter._reflect_scale,
      args.meter_type,
      args.scale
    )
  end
end

--- @class st.zwave.CommandClass.Meter.SupportedGetV2Args
--- @alias SupportedGetV2Args st.zwave.CommandClass.Meter.SupportedGetV2Args
local SupportedGetV2Args = {}

--- @class st.zwave.CommandClass.Meter.SupportedGetV2:st.zwave.Command
--- @alias SupportedGetV2 st.zwave.CommandClass.Meter.SupportedGetV2
---
--- v2 and forward-compatible v3,v4,v5,v6 METER_SUPPORTED_GET
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x03
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Meter.SupportedGetV2Args command-specific arguments
local SupportedGetV2 = {}
setmetatable(SupportedGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4,v5,v6 METER_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.SupportedGetV2Args command-specific arguments
function SupportedGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.METER, Meter.SUPPORTED_GET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4,v5,v6 METER_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function SupportedGetV2:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4,v5,v6 METER_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.Meter.SupportedGetV2Args deserialized arguments
function SupportedGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Meter.SupportedGetV2
--- @return st.zwave.CommandClass.Meter.SupportedGetV2Args
function SupportedGetV2._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Meter.SupportedGetV2
--- @return st.zwave.CommandClass.Meter.SupportedGetV2Args
function SupportedGetV2._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Meter.SupportedGetV2
function SupportedGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Meter.SupportedGetV2
function SupportedGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Meter.SupportedReportV2Args
--- @alias SupportedReportV2Args st.zwave.CommandClass.Meter.SupportedReportV2Args
--- @field public meter_type integer see :lua:class:`Meter.meter_type <st.zwave.CommandClass.Meter.meter_type>`
--- @field public meter_reset boolean
--- @field public scale_supported integer see :lua:class:`Meter.scale <st.zwave.CommandClass.Meter.scale>`
local SupportedReportV2Args = {}

--- @class st.zwave.CommandClass.Meter.SupportedReportV2:st.zwave.Command
--- @alias SupportedReportV2 st.zwave.CommandClass.Meter.SupportedReportV2
---
--- v2 METER_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x04
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Meter.SupportedReportV2Args command-specific arguments
local SupportedReportV2 = {}
setmetatable(SupportedReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 METER_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.SupportedReportV2Args command-specific arguments
function SupportedReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.METER, Meter.SUPPORTED_REPORT, 2, args, ...)
end

--- Serialize v2 METER_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, args.meter_type)
  writer:write_bits(2, 0) -- reserved1
  writer:write_bool(args.meter_reset)
  writer:write_bits(4, args.scale_supported)
  writer:write_bits(4, 0) -- reserved2
  return writer.buf
end

--- Deserialize a v2 METER_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.Meter.SupportedReportV2Args deserialized arguments
function SupportedReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "meter_type")
  reader:read_bits(2) -- reserved1
  reader:read_bool("meter_reset")
  reader:read_bits(4, "scale_supported")
  reader:read_bits(4) -- reserved2
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Meter.SupportedReportV2
--- @return st.zwave.CommandClass.Meter.SupportedReportV2Args
function SupportedReportV2._defaults(self)
  local args = {}
  args.meter_type = self.args.meter_type or 0
  args.meter_reset = self.args.meter_reset or false
  args.scale_supported = self.args.scale_supported or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Meter.SupportedReportV2
--- @return st.zwave.CommandClass.Meter.SupportedReportV2Args
function SupportedReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Meter.SupportedReportV2
function SupportedReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Meter.SupportedReportV2
function SupportedReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Meter.ResetV2Args
--- @alias ResetV2Args st.zwave.CommandClass.Meter.ResetV2Args
local ResetV2Args = {}

--- @class st.zwave.CommandClass.Meter.ResetV2:st.zwave.Command
--- @alias ResetV2 st.zwave.CommandClass.Meter.ResetV2
---
--- v2 and forward-compatible v3,v4,v5 METER_RESET
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x05
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Meter.ResetV2Args command-specific arguments
local ResetV2 = {}
setmetatable(ResetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4,v5 METER_RESET object.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.ResetV2Args command-specific arguments
function ResetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.METER, Meter.RESET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4,v5 METER_RESET arguments.
---
--- @return string serialized payload
function ResetV2:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4,v5 METER_RESET payload.
---
--- @return st.zwave.CommandClass.Meter.ResetV2Args deserialized arguments
function ResetV2:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Meter.ResetV2
--- @return st.zwave.CommandClass.Meter.ResetV2Args
function ResetV2._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Meter.ResetV2
--- @return st.zwave.CommandClass.Meter.ResetV2Args
function ResetV2._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Meter.ResetV2
function ResetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Meter.ResetV2
function ResetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Meter.GetV3Args
--- @alias GetV3Args st.zwave.CommandClass.Meter.GetV3Args
--- @field public scale integer see :lua:class:`Meter.scale <st.zwave.CommandClass.Meter.scale>`
local GetV3Args = {}

--- @class st.zwave.CommandClass.Meter.GetV3:st.zwave.Command
--- @alias GetV3 st.zwave.CommandClass.Meter.GetV3
---
--- v3 METER_GET
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x01
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Meter.GetV3Args command-specific arguments
local GetV3 = {}
setmetatable(GetV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 METER_GET object.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.GetV3Args command-specific arguments
function GetV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.METER, Meter.GET, 3, args, ...)
end

--- Serialize v3 METER_GET arguments.
---
--- @return string serialized payload
function GetV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(3, 0) -- reserved
  writer:write_bits(3, args.scale)
  writer:write_bits(2, 0) -- reserved2
  return writer.buf
end

--- Deserialize a v3 METER_GET payload.
---
--- @return st.zwave.CommandClass.Meter.GetV3Args deserialized arguments
function GetV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(3) -- reserved
  reader:read_bits(3, "scale")
  reader:read_bits(2) -- reserved2
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Meter.GetV3
--- @return st.zwave.CommandClass.Meter.GetV3Args
function GetV3._defaults(self)
  local args = {}
  args.scale = self.args.scale or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Meter.GetV3
--- @return st.zwave.CommandClass.Meter.GetV3Args
function GetV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Meter.GetV3
function GetV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Meter.GetV3
function GetV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Meter.ReportV3Args
--- @alias ReportV3Args st.zwave.CommandClass.Meter.ReportV3Args
--- @field public meter_type integer see :lua:class:`Meter.meter_type <st.zwave.CommandClass.Meter.meter_type>`
--- @field public rate_type integer see :lua:class:`Meter.rate_type <st.zwave.CommandClass.Meter.rate_type>`
--- @field public size integer [0,7]
--- @field public precision integer [0,7]
--- @field public meter_value number [-2147483648,2147483647]
--- @field public delta_time integer [0,65535]
--- @field public previous_meter_value number [-2147483648,2147483647]
local ReportV3Args = {}

--- @class st.zwave.CommandClass.Meter.ReportV3:st.zwave.Command
--- @alias ReportV3 st.zwave.CommandClass.Meter.ReportV3
---
--- v3 METER_REPORT
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x02
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Meter.ReportV3Args command-specific arguments
local ReportV3 = {}
setmetatable(ReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 METER_REPORT object.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.ReportV3Args command-specific arguments
function ReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.METER, Meter.REPORT, 3, args, ...)
end

--- Serialize v3 METER_REPORT arguments.
---
--- @return string serialized payload
function ReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, args.meter_type)
  writer:write_bits(2, args.rate_type)
  writer:write_bool(args.scale >> 2) -- scale_bit_2
  writer:write_bits(3, args.size or writer.consensus_size({ args.meter_value }, { args.previous_meter_value }))
  writer:write_bits(2, args.scale & 3) -- scale_bits_10
  writer:write_bits(3, args.precision or writer.consensus_precision({ args.meter_value }, { args.previous_meter_value }))
  writer:write_vfloat(args.size or writer.consensus_size({ args.meter_value }, { args.previous_meter_value }), args.precision or writer.consensus_precision({ args.meter_value }, { args.previous_meter_value }), args.meter_value)
  writer:write_be_u16(args.delta_time)
  if args.previous_meter_value then
      writer:write_vfloat(args.size or writer.consensus_size({ args.meter_value }, { args.previous_meter_value }), args.precision or writer.consensus_precision({ args.meter_value }, { args.previous_meter_value }), args.previous_meter_value)
  end
  return writer.buf
end

--- Deserialize a v3 METER_REPORT payload.
---
--- @return st.zwave.CommandClass.Meter.ReportV3Args deserialized arguments
function ReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "meter_type")
  reader:read_bits(2, "rate_type")
  reader.parsed.scale = 0
  if reader:read_bool() then -- scale_bit_2
    reader.parsed.scale = (1 << 2)
  end
  reader:read_bits(3, "size")
  reader.parsed.scale = reader.parsed.scale + reader:read_bits(2) -- scale_bits_10
  reader:read_bits(3, "precision")
  reader:read_vfloat(reader.parsed.size, reader.parsed.precision, "meter_value")
  reader:read_be_u16("delta_time")
  if reader:remain() > 0 then
    reader:read_vfloat(reader.parsed.size, reader.parsed.precision, "previous_meter_value")
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Meter.ReportV3
--- @return st.zwave.CommandClass.Meter.ReportV3Args
function ReportV3._defaults(self)
  local args = {}
  args.meter_type = self.args.meter_type or 0
  args.rate_type = self.args.rate_type or 0
  args.scale = self.args.scale or 0
  args.meter_value = self.args.meter_value or 0
  args.delta_time = self.args.delta_time or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Meter.ReportV3
--- @return st.zwave.CommandClass.Meter.ReportV3Args
function ReportV3._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.size = args.size or writer.consensus_size({ args.meter_value }, { args.previous_meter_value })
  args.precision = args.precision or writer.consensus_precision({ args.meter_value }, { args.previous_meter_value })
  args.previous_meter_value = self.args.previous_meter_value or 0
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Meter.ReportV3
function ReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Meter.ReportV3
function ReportV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.meter_type = function()
    return zw._reflect(
      Meter._reflect_meter_type,
      args.meter_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.rate_type = function()
    return zw._reflect(
      Meter._reflect_rate_type,
      args.rate_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.scale = function()
    return zw._reflect(
      Meter._reflect_scale,
      args.meter_type,
      args.scale
    )
  end
end

--- @class st.zwave.CommandClass.Meter.SupportedReportV3Args
--- @alias SupportedReportV3Args st.zwave.CommandClass.Meter.SupportedReportV3Args
--- @field public meter_type integer see :lua:class:`Meter.meter_type <st.zwave.CommandClass.Meter.meter_type>`
--- @field public meter_reset boolean
--- @field public scale_supported integer see :lua:class:`Meter.scale <st.zwave.CommandClass.Meter.scale>`
local SupportedReportV3Args = {}

--- @class st.zwave.CommandClass.Meter.SupportedReportV3:st.zwave.Command
--- @alias SupportedReportV3 st.zwave.CommandClass.Meter.SupportedReportV3
---
--- v3 METER_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x04
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Meter.SupportedReportV3Args command-specific arguments
local SupportedReportV3 = {}
setmetatable(SupportedReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 METER_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.SupportedReportV3Args command-specific arguments
function SupportedReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.METER, Meter.SUPPORTED_REPORT, 3, args, ...)
end

--- Serialize v3 METER_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, args.meter_type)
  writer:write_bits(2, 0) -- reserved
  writer:write_bool(args.meter_reset)
  writer:write_u8(args.scale_supported)
  return writer.buf
end

--- Deserialize a v3 METER_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.Meter.SupportedReportV3Args deserialized arguments
function SupportedReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "meter_type")
  reader:read_bits(2) -- reserved
  reader:read_bool("meter_reset")
  reader:read_u8("scale_supported")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Meter.SupportedReportV3
--- @return st.zwave.CommandClass.Meter.SupportedReportV3Args
function SupportedReportV3._defaults(self)
  local args = {}
  args.meter_type = self.args.meter_type or 0
  args.meter_reset = self.args.meter_reset or false
  args.scale_supported = self.args.scale_supported or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Meter.SupportedReportV3
--- @return st.zwave.CommandClass.Meter.SupportedReportV3Args
function SupportedReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Meter.SupportedReportV3
function SupportedReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Meter.SupportedReportV3
function SupportedReportV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.meter_type = function()
    return zw._reflect(
      Meter._reflect_meter_type,
      args.meter_type
    )
  end
end

--- @class st.zwave.CommandClass.Meter.GetV4Args
--- @alias GetV4Args st.zwave.CommandClass.Meter.GetV4Args
--- @field public scale integer see :lua:class:`Meter.scale <st.zwave.CommandClass.Meter.scale>`
--- @field public rate_type integer see :lua:class:`Meter.rate_type <st.zwave.CommandClass.Meter.rate_type>`
--- @field public scale_2 integer see :lua:class:`Meter.scale <st.zwave.CommandClass.Meter.scale>`
local GetV4Args = {}

--- @class st.zwave.CommandClass.Meter.GetV4:st.zwave.Command
--- @alias GetV4 st.zwave.CommandClass.Meter.GetV4
---
--- v4 and forward-compatible v5,v6 METER_GET
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x01
--- @field public version number 4
--- @field public args st.zwave.CommandClass.Meter.GetV4Args command-specific arguments
local GetV4 = {}
setmetatable(GetV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 and forward-compatible v5,v6 METER_GET object.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.GetV4Args command-specific arguments
function GetV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.METER, Meter.GET, 4, args, ...)
end

--- Serialize v4 or forward-compatible v5,v6 METER_GET arguments.
---
--- @return string serialized payload
function GetV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(3, 0) -- reserved
  writer:write_bits(3, args.scale)
  writer:write_bits(2, args.rate_type)
  writer:write_u8(args.scale_2)
  return writer.buf
end

--- Deserialize a v4 or forward-compatible v5,v6 METER_GET payload.
---
--- @return st.zwave.CommandClass.Meter.GetV4Args deserialized arguments
function GetV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(3) -- reserved
  reader:read_bits(3, "scale")
  reader:read_bits(2, "rate_type")
  reader:read_u8("scale_2")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Meter.GetV4
--- @return st.zwave.CommandClass.Meter.GetV4Args
function GetV4._defaults(self)
  local args = {}
  args.scale = self.args.scale or 0
  args.rate_type = self.args.rate_type or 0
  args.scale_2 = self.args.scale_2 or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Meter.GetV4
--- @return st.zwave.CommandClass.Meter.GetV4Args
function GetV4._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Meter.GetV4
function GetV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Meter.GetV4
function GetV4._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.rate_type = function()
    return zw._reflect(
      Meter._reflect_rate_type,
      args.rate_type
    )
  end
end

--- @class st.zwave.CommandClass.Meter.ReportV4Args
--- @alias ReportV4Args st.zwave.CommandClass.Meter.ReportV4Args
--- @field public meter_type integer see :lua:class:`Meter.meter_type <st.zwave.CommandClass.Meter.meter_type>`
--- @field public rate_type integer see :lua:class:`Meter.rate_type <st.zwave.CommandClass.Meter.rate_type>`
--- @field public size integer [0,7]
--- @field public precision integer [0,7]
--- @field public meter_value number [-2147483648,2147483647]
--- @field public delta_time integer [0,65535]
--- @field public previous_meter_value number [-2147483648,2147483647]
--- @field public scale_2 integer see :lua:class:`Meter.scale <st.zwave.CommandClass.Meter.scale>`
local ReportV4Args = {}

--- @class st.zwave.CommandClass.Meter.ReportV4:st.zwave.Command
--- @alias ReportV4 st.zwave.CommandClass.Meter.ReportV4
---
--- v4 and forward-compatible v5,v6 METER_REPORT
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x02
--- @field public version number 4
--- @field public args st.zwave.CommandClass.Meter.ReportV4Args command-specific arguments
local ReportV4 = {}
setmetatable(ReportV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 and forward-compatible v5,v6 METER_REPORT object.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.ReportV4Args command-specific arguments
function ReportV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.METER, Meter.REPORT, 4, args, ...)
end

--- Serialize v4 or forward-compatible v5,v6 METER_REPORT arguments.
---
--- @return string serialized payload
function ReportV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, args.meter_type)
  writer:write_bits(2, args.rate_type)
  writer:write_bool(args.scale >> 2) -- scale_bit_2
  writer:write_bits(3, args.size or writer.consensus_size({ args.meter_value }, { args.previous_meter_value }))
  writer:write_bits(2, args.scale & 3) -- scale_bits_10
  writer:write_bits(3, args.precision or writer.consensus_precision({ args.meter_value }, { args.previous_meter_value }))
  writer:write_vfloat(args.size or writer.consensus_size({ args.meter_value }, { args.previous_meter_value }), args.precision or writer.consensus_precision({ args.meter_value }, { args.previous_meter_value }), args.meter_value)
  writer:write_be_u16(args.delta_time)
  if args.previous_meter_value then
      writer:write_vfloat(args.size or writer.consensus_size({ args.meter_value }, { args.previous_meter_value }), args.precision or writer.consensus_precision({ args.meter_value }, { args.previous_meter_value }), args.previous_meter_value)
  end
  if self.args.scale == Meter.scale.electric_meter.MST then
    writer:write_u8(args.scale_2)
  end
  return writer.buf
end

--- Deserialize a v4 or forward-compatible v5,v6 METER_REPORT payload.
---
--- @return st.zwave.CommandClass.Meter.ReportV4Args deserialized arguments
function ReportV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "meter_type")
  reader:read_bits(2, "rate_type")
  reader.parsed.scale = 0
  if reader:read_bool() then -- scale_bit_2
    reader.parsed.scale = (1 << 2)
  end
  reader:read_bits(3, "size")
  reader.parsed.scale = reader.parsed.scale + reader:read_bits(2) -- scale_bits_10
  reader:read_bits(3, "precision")
  reader:read_vfloat(reader.parsed.size, reader.parsed.precision, "meter_value")
  reader:read_be_u16("delta_time")
  if self.args.scale == Meter.scale.electric_meter.MST and reader:remain() > 1 or reader:remain() > 0 then
    reader:read_vfloat(reader.parsed.size, reader.parsed.precision, "previous_meter_value")
  end
  if self.args.scale == Meter.scale.electric_meter.MST then
    reader:read_u8("scale_2")
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Meter.ReportV4
--- @return st.zwave.CommandClass.Meter.ReportV4Args
function ReportV4._defaults(self)
  local args = {}
  args.meter_type = self.args.meter_type or 0
  args.rate_type = self.args.rate_type or 0
  args.scale = self.args.scale or 0
  args.meter_value = self.args.meter_value or 0
  args.delta_time = self.args.delta_time or 0
  if self.args.scale == Meter.scale.electric_meter.MST then
    args.scale_2 = self.args.scale_2 or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Meter.ReportV4
--- @return st.zwave.CommandClass.Meter.ReportV4Args
function ReportV4._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.size = args.size or writer.consensus_size({ args.meter_value }, { args.previous_meter_value })
  args.precision = args.precision or writer.consensus_precision({ args.meter_value }, { args.previous_meter_value })
  args.previous_meter_value = self.args.previous_meter_value or 0
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Meter.ReportV4
function ReportV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Meter.ReportV4
function ReportV4._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.meter_type = function()
    return zw._reflect(
      Meter._reflect_meter_type,
      args.meter_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.rate_type = function()
    return zw._reflect(
      Meter._reflect_rate_type,
      args.rate_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.scale = function()
    return zw._reflect(
      Meter._reflect_scale,
      args.meter_type,
      args.scale
    )
  end
end

--- @class st.zwave.CommandClass.Meter.SupportedReportV4Args
--- @alias SupportedReportV4Args st.zwave.CommandClass.Meter.SupportedReportV4Args
--- @field public meter_type integer see :lua:class:`Meter.meter_type <st.zwave.CommandClass.Meter.meter_type>`
--- @field public rate_type integer see :lua:class:`Meter.rate_type <st.zwave.CommandClass.Meter.rate_type>`
--- @field public meter_reset boolean
--- @field public scale_supported_0 integer see :lua:class:`Meter.scale <st.zwave.CommandClass.Meter.scale>`
--- @field public mst boolean
--- @field public scale_supported string
local SupportedReportV4Args = {}

--- @class st.zwave.CommandClass.Meter.SupportedReportV4:st.zwave.Command
--- @alias SupportedReportV4 st.zwave.CommandClass.Meter.SupportedReportV4
---
--- v4 and forward-compatible v5,v6 METER_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x04
--- @field public version number 4
--- @field public args st.zwave.CommandClass.Meter.SupportedReportV4Args command-specific arguments
local SupportedReportV4 = {}
setmetatable(SupportedReportV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 and forward-compatible v5,v6 METER_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.SupportedReportV4Args command-specific arguments
function SupportedReportV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.METER, Meter.SUPPORTED_REPORT, 4, args, ...)
end

--- Serialize v4 or forward-compatible v5,v6 METER_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, args.meter_type)
  writer:write_bits(2, args.rate_type)
  writer:write_bool(args.meter_reset)
  writer:write_bits(7, args.scale_supported_0)
  writer:write_bool(args.mst)
  writer:write_u8(writer.length(args.scale_supported))
  writer:write_bytes(args.scale_supported)
  return writer.buf
end

--- Deserialize a v4 or forward-compatible v5,v6 METER_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.Meter.SupportedReportV4Args deserialized arguments
function SupportedReportV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "meter_type")
  reader:read_bits(2, "rate_type")
  reader:read_bool("meter_reset")
  reader:read_bits(7, "scale_supported_0")
  reader:read_bool("mst")
  reader:read_u8("number_of_scale_supported_bytes_to_follow")
  reader:read_bytes(reader.parsed.number_of_scale_supported_bytes_to_follow, "scale_supported")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Meter.SupportedReportV4
--- @return st.zwave.CommandClass.Meter.SupportedReportV4Args
function SupportedReportV4._defaults(self)
  local args = {}
  args.meter_type = self.args.meter_type or 0
  args.rate_type = self.args.rate_type or 0
  args.meter_reset = self.args.meter_reset or false
  args.scale_supported_0 = self.args.scale_supported_0 or 0
  args.mst = self.args.mst or false
  args.scale_supported = self.args.scale_supported or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Meter.SupportedReportV4
--- @return st.zwave.CommandClass.Meter.SupportedReportV4Args
function SupportedReportV4._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Meter.SupportedReportV4
function SupportedReportV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Meter.SupportedReportV4
function SupportedReportV4._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.meter_type = function()
    return zw._reflect(
      Meter._reflect_meter_type,
      args.meter_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.rate_type = function()
    return zw._reflect(
      Meter._reflect_rate_type,
      args.rate_type
    )
  end
end

--- @class st.zwave.CommandClass.Meter.ResetV6Args
--- @alias ResetV6Args st.zwave.CommandClass.Meter.ResetV6Args
--- @field public meter_type integer see :lua:class:`Meter.meter_type <st.zwave.CommandClass.Meter.meter_type>`
--- @field public meter_value string
local ResetV6Args = {}

--- @class st.zwave.CommandClass.Meter.ResetV6:st.zwave.Command
--- @alias ResetV6 st.zwave.CommandClass.Meter.ResetV6
---
--- v6 METER_RESET
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x05
--- @field public version number 6
--- @field public args st.zwave.CommandClass.Meter.ResetV6Args command-specific arguments
local ResetV6 = {}
setmetatable(ResetV6, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v6 METER_RESET object.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.ResetV6Args command-specific arguments
function ResetV6:init(module, args, ...)
  zw.Command._parse(self, module, zw.METER, Meter.RESET, 6, args, ...)
end

--- Serialize v6 METER_RESET arguments.
---
--- @return string serialized payload
function ResetV6:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, args.meter_type)
  writer:write_bits(3, writer.length(args.meter_value))
  writer:write_bytes(args.meter_value)
  return writer.buf
end

--- Deserialize a v6 METER_RESET payload.
---
--- @return st.zwave.CommandClass.Meter.ResetV6Args deserialized arguments
function ResetV6:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "meter_type")
  reader:read_bits(3, "size")
  reader:read_bytes(reader.parsed.size, "meter_value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Meter.ResetV6
--- @return st.zwave.CommandClass.Meter.ResetV6Args
function ResetV6._defaults(self)
  local args = {}
  args.meter_type = self.args.meter_type or 0
  args.meter_value = self.args.meter_value or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Meter.ResetV6
--- @return st.zwave.CommandClass.Meter.ResetV6Args
function ResetV6._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Meter.ResetV6
function ResetV6._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Meter.ResetV6
function ResetV6._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.meter_type = function()
    return zw._reflect(
      Meter._reflect_meter_type,
      args.meter_type
    )
  end
end

--- @class st.zwave.CommandClass.Meter.Get
--- @alias _Get st.zwave.CommandClass.Meter.Get
---
--- Dynamically versioned METER_GET
---
--- Supported versions: 1,2,3,4,5,6; unique base versions: 1,2,3,4
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x01
--- @field public version number 1,2,3,4
--- @field public args st.zwave.CommandClass.Meter.GetV1Args|st.zwave.CommandClass.Meter.GetV2Args|st.zwave.CommandClass.Meter.GetV3Args|st.zwave.CommandClass.Meter.GetV4Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a METER_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.GetV1Args|st.zwave.CommandClass.Meter.GetV2Args|st.zwave.CommandClass.Meter.GetV3Args|st.zwave.CommandClass.Meter.GetV4Args command-specific arguments
--- @return st.zwave.CommandClass.Meter.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, Meter.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Meter.Report
--- @alias _Report st.zwave.CommandClass.Meter.Report
---
--- Dynamically versioned METER_REPORT
---
--- Supported versions: 1,2,3,4,5,6; unique base versions: 1,2,3,4
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x02
--- @field public version number 1,2,3,4
--- @field public args st.zwave.CommandClass.Meter.ReportV1Args|st.zwave.CommandClass.Meter.ReportV2Args|st.zwave.CommandClass.Meter.ReportV3Args|st.zwave.CommandClass.Meter.ReportV4Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a METER_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.ReportV1Args|st.zwave.CommandClass.Meter.ReportV2Args|st.zwave.CommandClass.Meter.ReportV3Args|st.zwave.CommandClass.Meter.ReportV4Args command-specific arguments
--- @return st.zwave.CommandClass.Meter.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, Meter.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Meter.SupportedGet
--- @alias _SupportedGet st.zwave.CommandClass.Meter.SupportedGet
---
--- Dynamically versioned METER_SUPPORTED_GET
---
--- Supported versions: 2,3,4,5,6; unique base versions: 2
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x03
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Meter.SupportedGetV2Args
local _SupportedGet = {}
setmetatable(_SupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a METER_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.SupportedGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Meter.SupportedGet
function _SupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, Meter.SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Meter.SupportedReport
--- @alias _SupportedReport st.zwave.CommandClass.Meter.SupportedReport
---
--- Dynamically versioned METER_SUPPORTED_REPORT
---
--- Supported versions: 2,3,4,5,6; unique base versions: 2,3,4
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x04
--- @field public version number 2,3,4
--- @field public args st.zwave.CommandClass.Meter.SupportedReportV2Args|st.zwave.CommandClass.Meter.SupportedReportV3Args|st.zwave.CommandClass.Meter.SupportedReportV4Args
local _SupportedReport = {}
setmetatable(_SupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a METER_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.SupportedReportV2Args|st.zwave.CommandClass.Meter.SupportedReportV3Args|st.zwave.CommandClass.Meter.SupportedReportV4Args command-specific arguments
--- @return st.zwave.CommandClass.Meter.SupportedReport
function _SupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, Meter.SUPPORTED_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Meter.Reset
--- @alias _Reset st.zwave.CommandClass.Meter.Reset
---
--- Dynamically versioned METER_RESET
---
--- Supported versions: 2,3,4,5,6; unique base versions: 2,6
---
--- @field public cmd_class number 0x32
--- @field public cmd_id number 0x05
--- @field public version number 2,6
--- @field public args st.zwave.CommandClass.Meter.ResetV2Args|st.zwave.CommandClass.Meter.ResetV6Args
local _Reset = {}
setmetatable(_Reset, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a METER_RESET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Meter command class module instance
--- @param args st.zwave.CommandClass.Meter.ResetV2Args|st.zwave.CommandClass.Meter.ResetV6Args command-specific arguments
--- @return st.zwave.CommandClass.Meter.Reset
function _Reset:construct(module, args, ...)
  return zw.Command._construct(module, Meter.RESET, module._serialization_version, args, ...)
end

Meter.GetV1 = GetV1
Meter.ReportV1 = ReportV1
Meter.GetV2 = GetV2
Meter.ReportV2 = ReportV2
Meter.SupportedGetV2 = SupportedGetV2
Meter.SupportedReportV2 = SupportedReportV2
Meter.ResetV2 = ResetV2
Meter.GetV3 = GetV3
Meter.ReportV3 = ReportV3
Meter.SupportedReportV3 = SupportedReportV3
Meter.GetV4 = GetV4
Meter.ReportV4 = ReportV4
Meter.SupportedReportV4 = SupportedReportV4
Meter.ResetV6 = ResetV6
Meter.Get = _Get
Meter.Report = _Report
Meter.SupportedGet = _SupportedGet
Meter.SupportedReport = _SupportedReport
Meter.Reset = _Reset

Meter._lut = {
  [0] = { -- dynamically versioned constructors
    [Meter.GET] = Meter.Get,
    [Meter.REPORT] = Meter.Report,
    [Meter.SUPPORTED_GET] = Meter.SupportedGet,
    [Meter.SUPPORTED_REPORT] = Meter.SupportedReport,
    [Meter.RESET] = Meter.Reset
  },
  [1] = { -- version 1
    [Meter.GET] = Meter.GetV1,
    [Meter.REPORT] = Meter.ReportV1
  },
  [2] = { -- version 2
    [Meter.GET] = Meter.GetV2,
    [Meter.REPORT] = Meter.ReportV2,
    [Meter.SUPPORTED_GET] = Meter.SupportedGetV2,
    [Meter.SUPPORTED_REPORT] = Meter.SupportedReportV2,
    [Meter.RESET] = Meter.ResetV2
  },
  [3] = { -- version 3
    [Meter.GET] = Meter.GetV3,
    [Meter.REPORT] = Meter.ReportV3,
    [Meter.SUPPORTED_GET] = Meter.SupportedGetV2,
    [Meter.SUPPORTED_REPORT] = Meter.SupportedReportV3,
    [Meter.RESET] = Meter.ResetV2
  },
  [4] = { -- version 4
    [Meter.GET] = Meter.GetV4,
    [Meter.REPORT] = Meter.ReportV4,
    [Meter.SUPPORTED_GET] = Meter.SupportedGetV2,
    [Meter.SUPPORTED_REPORT] = Meter.SupportedReportV4,
    [Meter.RESET] = Meter.ResetV2
  },
  [5] = { -- version 5
    [Meter.GET] = Meter.GetV4,
    [Meter.REPORT] = Meter.ReportV4,
    [Meter.SUPPORTED_GET] = Meter.SupportedGetV2,
    [Meter.SUPPORTED_REPORT] = Meter.SupportedReportV4,
    [Meter.RESET] = Meter.ResetV2
  },
  [6] = { -- version 6
    [Meter.GET] = Meter.GetV4,
    [Meter.REPORT] = Meter.ReportV4,
    [Meter.SUPPORTED_GET] = Meter.SupportedGetV2,
    [Meter.SUPPORTED_REPORT] = Meter.SupportedReportV4,
    [Meter.RESET] = Meter.ResetV6
  }
}
--- @class st.zwave.CommandClass.Meter.meter_type
--- @alias meter_type st.zwave.CommandClass.Meter.meter_type
--- @field public ELECTRIC_METER number 0x01
--- @field public GAS_METER number 0x02
--- @field public WATER_METER number 0x03
--- @field public HEATING_METER number 0x04
--- @field public COOLING_METER number 0x05
local meter_type = {
  ELECTRIC_METER = 0x01,
  GAS_METER = 0x02,
  WATER_METER = 0x03,
  HEATING_METER = 0x04,
  COOLING_METER = 0x05
}
Meter.meter_type = meter_type
Meter._reflect_meter_type = zw._reflection_builder(Meter.meter_type)

--- @class st.zwave.CommandClass.Meter.rate_type
--- @alias rate_type st.zwave.CommandClass.Meter.rate_type
--- @field public IMPORT number 0x01
--- @field public EXPORT number 0x02
--- @field public IMPORT_AND_EXPORT number 0x03
local rate_type = {
  IMPORT = 0x01,
  EXPORT = 0x02,
  IMPORT_AND_EXPORT = 0x03
}
Meter.rate_type = rate_type
Meter._reflect_rate_type = zw._reflection_builder(Meter.rate_type)

--- @class st.zwave.CommandClass.Meter.scale_cooling_meter
--- @alias scale_cooling_meter st.zwave.CommandClass.Meter.scale_cooling_meter
--- @field public KILOWATT_HOURS number 0x00
local scale_cooling_meter = {}

--- @class st.zwave.CommandClass.Meter.scale_electric_meter
--- @alias scale_electric_meter st.zwave.CommandClass.Meter.scale_electric_meter
--- @field public KILOWATT_HOURS number 0x00
--- @field public KILOVOLT_AMPERE_HOURS number 0x01
--- @field public WATTS number 0x02
--- @field public PULSE_COUNT number 0x03
--- @field public VOLTS number 0x04
--- @field public AMPERES number 0x05
--- @field public POWER_FACTOR number 0x06
--- @field public MST number 0x07
local scale_electric_meter = {}

--- @class st.zwave.CommandClass.Meter.scale_gas_meter
--- @alias scale_gas_meter st.zwave.CommandClass.Meter.scale_gas_meter
--- @field public CUBIC_METERS number 0x00
--- @field public CUBIC_FEET number 0x01
--- @field public PULSE_COUNT number 0x03
--- @field public MST number 0x07
local scale_gas_meter = {}

--- @class st.zwave.CommandClass.Meter.scale_heating_meter
--- @alias scale_heating_meter st.zwave.CommandClass.Meter.scale_heating_meter
--- @field public KILOWATT_HOURS number 0x00
local scale_heating_meter = {}

--- @class st.zwave.CommandClass.Meter.scale_water_meter
--- @alias scale_water_meter st.zwave.CommandClass.Meter.scale_water_meter
--- @field public CUBIC_METERS number 0x00
--- @field public CUBIC_FEET number 0x01
--- @field public US_GALLONS number 0x02
--- @field public PULSE_COUNT number 0x03
--- @field public MST number 0x07
local scale_water_meter = {}

--- @class st.zwave.CommandClass.Meter.scale
--- @alias scale st.zwave.CommandClass.Meter.scale
--- @field public cooling_meter st.zwave.CommandClass.scale_cooling_meter
--- @field public electric_meter st.zwave.CommandClass.scale_electric_meter
--- @field public gas_meter st.zwave.CommandClass.scale_gas_meter
--- @field public heating_meter st.zwave.CommandClass.scale_heating_meter
--- @field public water_meter st.zwave.CommandClass.scale_water_meter
local scale = {
  cooling_meter = {
    KILOWATT_HOURS = 0x00
  },
  electric_meter = {
    KILOWATT_HOURS = 0x00,
    KILOVOLT_AMPERE_HOURS = 0x01,
    WATTS = 0x02,
    PULSE_COUNT = 0x03,
    VOLTS = 0x04,
    AMPERES = 0x05,
    POWER_FACTOR = 0x06,
    MST = 0x07
  },
  gas_meter = {
    CUBIC_METERS = 0x00,
    CUBIC_FEET = 0x01,
    PULSE_COUNT = 0x03,
    MST = 0x07
  },
  heating_meter = {
    KILOWATT_HOURS = 0x00
  },
  water_meter = {
    CUBIC_METERS = 0x00,
    CUBIC_FEET = 0x01,
    US_GALLONS = 0x02,
    PULSE_COUNT = 0x03,
    MST = 0x07
  }
}
Meter.scale = scale
Meter._reflect_scale = zw._reflection_builder(Meter.scale, Meter.meter_type)


return Meter
