-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.MtpWindowCovering
--- @alias MtpWindowCovering st.zwave.CommandClass.MtpWindowCovering
---
--- Supported versions: 1
---
--- @field public MOVE_TO_POSITION_SET number 0x01 - MOVE_TO_POSITION_SET command id
--- @field public MOVE_TO_POSITION_GET number 0x02 - MOVE_TO_POSITION_GET command id
--- @field public MOVE_TO_POSITION_REPORT number 0x03 - MOVE_TO_POSITION_REPORT command id
local MtpWindowCovering = {}
MtpWindowCovering.MOVE_TO_POSITION_SET = 0x01
MtpWindowCovering.MOVE_TO_POSITION_GET = 0x02
MtpWindowCovering.MOVE_TO_POSITION_REPORT = 0x03

MtpWindowCovering._commands = {
  [MtpWindowCovering.MOVE_TO_POSITION_SET] = "MOVE_TO_POSITION_SET",
  [MtpWindowCovering.MOVE_TO_POSITION_GET] = "MOVE_TO_POSITION_GET",
  [MtpWindowCovering.MOVE_TO_POSITION_REPORT] = "MOVE_TO_POSITION_REPORT"
}

--- Instantiate a versioned instance of the MtpWindowCovering Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.MtpWindowCovering versioned command class instance
function MtpWindowCovering:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.MTP_WINDOW_COVERING][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(MtpWindowCovering, {
  __call = MtpWindowCovering.init
})

MtpWindowCovering._serialization_version = nil
MtpWindowCovering._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.MTP_WINDOW_COVERING] = {
  [1] = true
}

--- @class st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSetV1Args
--- @alias MoveToPositionSetV1Args st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSetV1Args
--- @field public value integer see :lua:class:`MtpWindowCovering.value <st.zwave.CommandClass.MtpWindowCovering.value>`
local MoveToPositionSetV1Args = {}

--- @class st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSetV1:st.zwave.Command
--- @alias MoveToPositionSetV1 st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSetV1
---
--- v1 MOVE_TO_POSITION_SET
---
--- @field public cmd_class number 0x51
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSetV1Args command-specific arguments
local MoveToPositionSetV1 = {}
setmetatable(MoveToPositionSetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 MOVE_TO_POSITION_SET object.
---
--- @param module st.zwave.CommandClass.MtpWindowCovering command class module instance
--- @param args st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSetV1Args command-specific arguments
function MoveToPositionSetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.MTP_WINDOW_COVERING, MtpWindowCovering.MOVE_TO_POSITION_SET, 1, args, ...)
end

--- Serialize v1 MOVE_TO_POSITION_SET arguments.
---
--- @return string serialized payload
function MoveToPositionSetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.value)
  return writer.buf
end

--- Deserialize a v1 MOVE_TO_POSITION_SET payload.
---
--- @return st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSetV1Args deserialized arguments
function MoveToPositionSetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSetV1
--- @return st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSetV1Args
function MoveToPositionSetV1._defaults(self)
  local args = {}
  args.value = self.args.value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSetV1
--- @return st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSetV1Args
function MoveToPositionSetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSetV1
function MoveToPositionSetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSetV1
function MoveToPositionSetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.value = function()
    return zw._reflect(
      MtpWindowCovering._reflect_value,
      args.value
    )
  end
end

--- @class st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGetV1Args
--- @alias MoveToPositionGetV1Args st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGetV1Args
local MoveToPositionGetV1Args = {}

--- @class st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGetV1:st.zwave.Command
--- @alias MoveToPositionGetV1 st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGetV1
---
--- v1 MOVE_TO_POSITION_GET
---
--- @field public cmd_class number 0x51
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGetV1Args command-specific arguments
local MoveToPositionGetV1 = {}
setmetatable(MoveToPositionGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 MOVE_TO_POSITION_GET object.
---
--- @param module st.zwave.CommandClass.MtpWindowCovering command class module instance
--- @param args st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGetV1Args command-specific arguments
function MoveToPositionGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.MTP_WINDOW_COVERING, MtpWindowCovering.MOVE_TO_POSITION_GET, 1, args, ...)
end

--- Serialize v1 MOVE_TO_POSITION_GET arguments.
---
--- @return string serialized payload
function MoveToPositionGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 MOVE_TO_POSITION_GET payload.
---
--- @return st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGetV1Args deserialized arguments
function MoveToPositionGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGetV1
--- @return st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGetV1Args
function MoveToPositionGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGetV1
--- @return st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGetV1Args
function MoveToPositionGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGetV1
function MoveToPositionGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGetV1
function MoveToPositionGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReportV1Args
--- @alias MoveToPositionReportV1Args st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReportV1Args
--- @field public value integer see :lua:class:`MtpWindowCovering.value <st.zwave.CommandClass.MtpWindowCovering.value>`
local MoveToPositionReportV1Args = {}

--- @class st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReportV1:st.zwave.Command
--- @alias MoveToPositionReportV1 st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReportV1
---
--- v1 MOVE_TO_POSITION_REPORT
---
--- @field public cmd_class number 0x51
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReportV1Args command-specific arguments
local MoveToPositionReportV1 = {}
setmetatable(MoveToPositionReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 MOVE_TO_POSITION_REPORT object.
---
--- @param module st.zwave.CommandClass.MtpWindowCovering command class module instance
--- @param args st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReportV1Args command-specific arguments
function MoveToPositionReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.MTP_WINDOW_COVERING, MtpWindowCovering.MOVE_TO_POSITION_REPORT, 1, args, ...)
end

--- Serialize v1 MOVE_TO_POSITION_REPORT arguments.
---
--- @return string serialized payload
function MoveToPositionReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.value)
  return writer.buf
end

--- Deserialize a v1 MOVE_TO_POSITION_REPORT payload.
---
--- @return st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReportV1Args deserialized arguments
function MoveToPositionReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReportV1
--- @return st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReportV1Args
function MoveToPositionReportV1._defaults(self)
  local args = {}
  args.value = self.args.value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReportV1
--- @return st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReportV1Args
function MoveToPositionReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReportV1
function MoveToPositionReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReportV1
function MoveToPositionReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.value = function()
    return zw._reflect(
      MtpWindowCovering._reflect_value,
      args.value
    )
  end
end

--- @class st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSet
--- @alias _MoveToPositionSet st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSet
---
--- Dynamically versioned MOVE_TO_POSITION_SET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x51
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSetV1Args
local _MoveToPositionSet = {}
setmetatable(_MoveToPositionSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MOVE_TO_POSITION_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MtpWindowCovering command class module instance
--- @param args st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSetV1Args command-specific arguments
--- @return st.zwave.CommandClass.MtpWindowCovering.MoveToPositionSet
function _MoveToPositionSet:construct(module, args, ...)
  return zw.Command._construct(module, MtpWindowCovering.MOVE_TO_POSITION_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGet
--- @alias _MoveToPositionGet st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGet
---
--- Dynamically versioned MOVE_TO_POSITION_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x51
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGetV1Args
local _MoveToPositionGet = {}
setmetatable(_MoveToPositionGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MOVE_TO_POSITION_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MtpWindowCovering command class module instance
--- @param args st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.MtpWindowCovering.MoveToPositionGet
function _MoveToPositionGet:construct(module, args, ...)
  return zw.Command._construct(module, MtpWindowCovering.MOVE_TO_POSITION_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReport
--- @alias _MoveToPositionReport st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReport
---
--- Dynamically versioned MOVE_TO_POSITION_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x51
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReportV1Args
local _MoveToPositionReport = {}
setmetatable(_MoveToPositionReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MOVE_TO_POSITION_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MtpWindowCovering command class module instance
--- @param args st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.MtpWindowCovering.MoveToPositionReport
function _MoveToPositionReport:construct(module, args, ...)
  return zw.Command._construct(module, MtpWindowCovering.MOVE_TO_POSITION_REPORT, module._serialization_version, args, ...)
end

MtpWindowCovering.MoveToPositionSetV1 = MoveToPositionSetV1
MtpWindowCovering.MoveToPositionGetV1 = MoveToPositionGetV1
MtpWindowCovering.MoveToPositionReportV1 = MoveToPositionReportV1
MtpWindowCovering.MoveToPositionSet = _MoveToPositionSet
MtpWindowCovering.MoveToPositionGet = _MoveToPositionGet
MtpWindowCovering.MoveToPositionReport = _MoveToPositionReport

MtpWindowCovering._lut = {
  [0] = { -- dynamically versioned constructors
    [MtpWindowCovering.MOVE_TO_POSITION_SET] = MtpWindowCovering.MoveToPositionSet,
    [MtpWindowCovering.MOVE_TO_POSITION_GET] = MtpWindowCovering.MoveToPositionGet,
    [MtpWindowCovering.MOVE_TO_POSITION_REPORT] = MtpWindowCovering.MoveToPositionReport
  },
  [1] = { -- version 1
    [MtpWindowCovering.MOVE_TO_POSITION_SET] = MtpWindowCovering.MoveToPositionSetV1,
    [MtpWindowCovering.MOVE_TO_POSITION_GET] = MtpWindowCovering.MoveToPositionGetV1,
    [MtpWindowCovering.MOVE_TO_POSITION_REPORT] = MtpWindowCovering.MoveToPositionReportV1
  }
}
--- @class st.zwave.CommandClass.MtpWindowCovering.value
--- @alias value st.zwave.CommandClass.MtpWindowCovering.value
--- @field public CLOSE number 0x00
--- @field public OPEN number 0xFF
local value = {
  CLOSE = 0x00,
  OPEN = 0xFF
}
MtpWindowCovering.value = value
MtpWindowCovering._reflect_value = zw._reflection_builder(MtpWindowCovering.value)


return MtpWindowCovering
