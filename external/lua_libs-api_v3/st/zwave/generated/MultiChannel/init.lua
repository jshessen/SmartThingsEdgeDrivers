-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.MultiChannel
--- @alias MultiChannel st.zwave.CommandClass.MultiChannel
---
--- Supported versions: 2,3,4
---
--- @field public MULTI_INSTANCE_GET number 0x04 - MULTI_INSTANCE_GET command id
--- @field public MULTI_INSTANCE_REPORT number 0x05 - MULTI_INSTANCE_REPORT command id
--- @field public MULTI_INSTANCE_CMD_ENCAP number 0x06 - MULTI_INSTANCE_CMD_ENCAP command id
--- @field public END_POINT_GET number 0x07 - MULTI_CHANNEL_END_POINT_GET command id
--- @field public END_POINT_REPORT number 0x08 - MULTI_CHANNEL_END_POINT_REPORT command id
--- @field public CAPABILITY_GET number 0x09 - MULTI_CHANNEL_CAPABILITY_GET command id
--- @field public CAPABILITY_REPORT number 0x0A - MULTI_CHANNEL_CAPABILITY_REPORT command id
--- @field public END_POINT_FIND number 0x0B - MULTI_CHANNEL_END_POINT_FIND command id
--- @field public END_POINT_FIND_REPORT number 0x0C - MULTI_CHANNEL_END_POINT_FIND_REPORT command id
--- @field public CMD_ENCAP number 0x0D - MULTI_CHANNEL_CMD_ENCAP command id
--- @field public AGGREGATED_MEMBERS_GET number 0x0E - MULTI_CHANNEL_AGGREGATED_MEMBERS_GET command id
--- @field public AGGREGATED_MEMBERS_REPORT number 0x0F - MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT command id
local MultiChannel = {}
MultiChannel.MULTI_INSTANCE_GET = 0x04
MultiChannel.MULTI_INSTANCE_REPORT = 0x05
MultiChannel.MULTI_INSTANCE_CMD_ENCAP = 0x06
MultiChannel.END_POINT_GET = 0x07
MultiChannel.END_POINT_REPORT = 0x08
MultiChannel.CAPABILITY_GET = 0x09
MultiChannel.CAPABILITY_REPORT = 0x0A
MultiChannel.END_POINT_FIND = 0x0B
MultiChannel.END_POINT_FIND_REPORT = 0x0C
MultiChannel.CMD_ENCAP = 0x0D
MultiChannel.AGGREGATED_MEMBERS_GET = 0x0E
MultiChannel.AGGREGATED_MEMBERS_REPORT = 0x0F

MultiChannel._commands = {
  [MultiChannel.MULTI_INSTANCE_GET] = "MULTI_INSTANCE_GET",
  [MultiChannel.MULTI_INSTANCE_REPORT] = "MULTI_INSTANCE_REPORT",
  [MultiChannel.MULTI_INSTANCE_CMD_ENCAP] = "MULTI_INSTANCE_CMD_ENCAP",
  [MultiChannel.END_POINT_GET] = "END_POINT_GET",
  [MultiChannel.END_POINT_REPORT] = "END_POINT_REPORT",
  [MultiChannel.CAPABILITY_GET] = "CAPABILITY_GET",
  [MultiChannel.CAPABILITY_REPORT] = "CAPABILITY_REPORT",
  [MultiChannel.END_POINT_FIND] = "END_POINT_FIND",
  [MultiChannel.END_POINT_FIND_REPORT] = "END_POINT_FIND_REPORT",
  [MultiChannel.CMD_ENCAP] = "CMD_ENCAP",
  [MultiChannel.AGGREGATED_MEMBERS_GET] = "AGGREGATED_MEMBERS_GET",
  [MultiChannel.AGGREGATED_MEMBERS_REPORT] = "AGGREGATED_MEMBERS_REPORT"
}
setmetatable(MultiChannel._commands, {
  __index = (require "st.zwave.CommandClass.MultiInstance")._commands, -- inherit parentage
})

--- Instantiate a versioned instance of the MultiChannel Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.MultiChannel versioned command class instance
function MultiChannel:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.MULTI_CHANNEL][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(MultiChannel, {
  __index = require "st.zwave.CommandClass.MultiInstance", -- inherit parentage
  __call = MultiChannel.init
})

MultiChannel._serialization_version = nil
MultiChannel._strict = false
zw._versions[zw.MULTI_CHANNEL][2] = true
zw._versions[zw.MULTI_CHANNEL][3] = true
zw._versions[zw.MULTI_CHANNEL][4] = true

--- @class st.zwave.CommandClass.MultiChannel.MultiInstanceReportV2Args
--- @alias MultiInstanceReportV2Args st.zwave.CommandClass.MultiChannel.MultiInstanceReportV2Args
--- @field public command_class integer
--- @field public instances integer [0,127]
--- @field public res boolean
local MultiInstanceReportV2Args = {}

--- @class st.zwave.CommandClass.MultiChannel.MultiInstanceReportV2:st.zwave.Command
--- @alias MultiInstanceReportV2 st.zwave.CommandClass.MultiChannel.MultiInstanceReportV2
---
--- v2 and forward-compatible v3,v4 MULTI_INSTANCE_REPORT
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x05
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannel.MultiInstanceReportV2Args command-specific arguments
local MultiInstanceReportV2 = {}
setmetatable(MultiInstanceReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 MULTI_INSTANCE_REPORT object.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.MultiInstanceReportV2Args command-specific arguments
function MultiInstanceReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_CHANNEL, MultiChannel.MULTI_INSTANCE_REPORT, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 MULTI_INSTANCE_REPORT arguments.
---
--- @return string serialized payload
function MultiInstanceReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_cmd_class(args.command_class)
  writer:write_bits(7, args.instances)
  writer:write_bool(args.res)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 MULTI_INSTANCE_REPORT payload.
---
--- @return st.zwave.CommandClass.MultiChannel.MultiInstanceReportV2Args deserialized arguments
function MultiInstanceReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_cmd_class("command_class")
  reader:read_bits(7, "instances")
  reader:read_bool("res")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.MultiInstanceReportV2
--- @return st.zwave.CommandClass.MultiChannel.MultiInstanceReportV2Args
function MultiInstanceReportV2._defaults(self)
  local args = {}
  args.command_class = self.args.command_class or 0
  args.instances = self.args.instances or 0
  args.res = self.args.res or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.MultiInstanceReportV2
--- @return st.zwave.CommandClass.MultiChannel.MultiInstanceReportV2Args
function MultiInstanceReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiChannel.MultiInstanceReportV2
function MultiInstanceReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiChannel.MultiInstanceReportV2
function MultiInstanceReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncapV2Args
--- @alias MultiInstanceCmdEncapV2Args st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncapV2Args
--- @field public instance integer [0,127]
--- @field public res boolean
--- @field public command_class integer
--- @field public command integer [0,255]
--- @field public parameter string
local MultiInstanceCmdEncapV2Args = {}

--- @class st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncapV2:st.zwave.Command
--- @alias MultiInstanceCmdEncapV2 st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncapV2
---
--- v2 and forward-compatible v3,v4 MULTI_INSTANCE_CMD_ENCAP
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x06
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncapV2Args command-specific arguments
local MultiInstanceCmdEncapV2 = {}
setmetatable(MultiInstanceCmdEncapV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 MULTI_INSTANCE_CMD_ENCAP object.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncapV2Args command-specific arguments
function MultiInstanceCmdEncapV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_CHANNEL, MultiChannel.MULTI_INSTANCE_CMD_ENCAP, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 MULTI_INSTANCE_CMD_ENCAP arguments.
---
--- @return string serialized payload
function MultiInstanceCmdEncapV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(7, args.instance)
  writer:write_bool(args.res)
  writer:write_cmd_class(args.command_class)
  writer:write_u8(args.command)
  writer:write_bytes(args.parameter)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 MULTI_INSTANCE_CMD_ENCAP payload.
---
--- @return st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncapV2Args deserialized arguments
function MultiInstanceCmdEncapV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(7, "instance")
  reader:read_bool("res")
  reader:read_cmd_class("command_class")
  reader:read_u8("command")
  reader:read_bytes(reader:remain(), "parameter")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncapV2
--- @return st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncapV2Args
function MultiInstanceCmdEncapV2._defaults(self)
  local args = {}
  args.instance = self.args.instance or 0
  args.res = self.args.res or false
  args.command_class = self.args.command_class or 0
  args.command = self.args.command or 0
  args.parameter = self.args.parameter or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncapV2
--- @return st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncapV2Args
function MultiInstanceCmdEncapV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncapV2
function MultiInstanceCmdEncapV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncapV2
function MultiInstanceCmdEncapV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiChannel.EndPointGetV2Args
--- @alias EndPointGetV2Args st.zwave.CommandClass.MultiChannel.EndPointGetV2Args
local EndPointGetV2Args = {}

--- @class st.zwave.CommandClass.MultiChannel.EndPointGetV2:st.zwave.Command
--- @alias EndPointGetV2 st.zwave.CommandClass.MultiChannel.EndPointGetV2
---
--- v2 and forward-compatible v3,v4 MULTI_CHANNEL_END_POINT_GET
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x07
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannel.EndPointGetV2Args command-specific arguments
local EndPointGetV2 = {}
setmetatable(EndPointGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 MULTI_CHANNEL_END_POINT_GET object.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.EndPointGetV2Args command-specific arguments
function EndPointGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_CHANNEL, MultiChannel.END_POINT_GET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 MULTI_CHANNEL_END_POINT_GET arguments.
---
--- @return string serialized payload
function EndPointGetV2:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 MULTI_CHANNEL_END_POINT_GET payload.
---
--- @return st.zwave.CommandClass.MultiChannel.EndPointGetV2Args deserialized arguments
function EndPointGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointGetV2
--- @return st.zwave.CommandClass.MultiChannel.EndPointGetV2Args
function EndPointGetV2._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointGetV2
--- @return st.zwave.CommandClass.MultiChannel.EndPointGetV2Args
function EndPointGetV2._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointGetV2
function EndPointGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointGetV2
function EndPointGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiChannel.EndPointReportV2Args
--- @alias EndPointReportV2Args st.zwave.CommandClass.MultiChannel.EndPointReportV2Args
--- @field public identical boolean
--- @field public dynamic boolean
--- @field public end_points integer [0,127]
local EndPointReportV2Args = {}

--- @class st.zwave.CommandClass.MultiChannel.EndPointReportV2:st.zwave.Command
--- @alias EndPointReportV2 st.zwave.CommandClass.MultiChannel.EndPointReportV2
---
--- v2 and forward-compatible v3 MULTI_CHANNEL_END_POINT_REPORT
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x08
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannel.EndPointReportV2Args command-specific arguments
local EndPointReportV2 = {}
setmetatable(EndPointReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3 MULTI_CHANNEL_END_POINT_REPORT object.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.EndPointReportV2Args command-specific arguments
function EndPointReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_CHANNEL, MultiChannel.END_POINT_REPORT, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3 MULTI_CHANNEL_END_POINT_REPORT arguments.
---
--- @return string serialized payload
function EndPointReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(6, 0) -- res1
  writer:write_bool(args.identical)
  writer:write_bool(args.dynamic)
  writer:write_bits(7, args.end_points)
  writer:write_bool(false) -- res2
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3 MULTI_CHANNEL_END_POINT_REPORT payload.
---
--- @return st.zwave.CommandClass.MultiChannel.EndPointReportV2Args deserialized arguments
function EndPointReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(6) -- res1
  reader:read_bool("identical")
  reader:read_bool("dynamic")
  reader:read_bits(7, "end_points")
  reader:read_bool() -- res2
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointReportV2
--- @return st.zwave.CommandClass.MultiChannel.EndPointReportV2Args
function EndPointReportV2._defaults(self)
  local args = {}
  args.identical = self.args.identical or false
  args.dynamic = self.args.dynamic or false
  args.end_points = self.args.end_points or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointReportV2
--- @return st.zwave.CommandClass.MultiChannel.EndPointReportV2Args
function EndPointReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointReportV2
function EndPointReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointReportV2
function EndPointReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiChannel.CapabilityGetV2Args
--- @alias CapabilityGetV2Args st.zwave.CommandClass.MultiChannel.CapabilityGetV2Args
--- @field public end_point integer [0,127]
--- @field public res boolean
local CapabilityGetV2Args = {}

--- @class st.zwave.CommandClass.MultiChannel.CapabilityGetV2:st.zwave.Command
--- @alias CapabilityGetV2 st.zwave.CommandClass.MultiChannel.CapabilityGetV2
---
--- v2 and forward-compatible v3,v4 MULTI_CHANNEL_CAPABILITY_GET
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x09
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannel.CapabilityGetV2Args command-specific arguments
local CapabilityGetV2 = {}
setmetatable(CapabilityGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 MULTI_CHANNEL_CAPABILITY_GET object.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.CapabilityGetV2Args command-specific arguments
function CapabilityGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_CHANNEL, MultiChannel.CAPABILITY_GET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 MULTI_CHANNEL_CAPABILITY_GET arguments.
---
--- @return string serialized payload
function CapabilityGetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(7, args.end_point)
  writer:write_bool(args.res)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 MULTI_CHANNEL_CAPABILITY_GET payload.
---
--- @return st.zwave.CommandClass.MultiChannel.CapabilityGetV2Args deserialized arguments
function CapabilityGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(7, "end_point")
  reader:read_bool("res")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.CapabilityGetV2
--- @return st.zwave.CommandClass.MultiChannel.CapabilityGetV2Args
function CapabilityGetV2._defaults(self)
  local args = {}
  args.end_point = self.args.end_point or 0
  args.res = self.args.res or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.CapabilityGetV2
--- @return st.zwave.CommandClass.MultiChannel.CapabilityGetV2Args
function CapabilityGetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiChannel.CapabilityGetV2
function CapabilityGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiChannel.CapabilityGetV2
function CapabilityGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiChannel.CapabilityReportV2Args
--- @alias CapabilityReportV2Args st.zwave.CommandClass.MultiChannel.CapabilityReportV2Args
--- @field public end_point integer [0,127]
--- @field public dynamic boolean
--- @field public generic_device_class integer [0,255]
--- @field public specific_device_class integer [0,255]
--- @field public command_class string
local CapabilityReportV2Args = {}

--- @class st.zwave.CommandClass.MultiChannel.CapabilityReportV2:st.zwave.Command
--- @alias CapabilityReportV2 st.zwave.CommandClass.MultiChannel.CapabilityReportV2
---
--- v2 and forward-compatible v3,v4 MULTI_CHANNEL_CAPABILITY_REPORT
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x0A
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannel.CapabilityReportV2Args command-specific arguments
local CapabilityReportV2 = {}
setmetatable(CapabilityReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 MULTI_CHANNEL_CAPABILITY_REPORT object.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.CapabilityReportV2Args command-specific arguments
function CapabilityReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_CHANNEL, MultiChannel.CAPABILITY_REPORT, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 MULTI_CHANNEL_CAPABILITY_REPORT arguments.
---
--- @return string serialized payload
function CapabilityReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(7, args.end_point)
  writer:write_bool(args.dynamic)
  writer:write_u8(args.generic_device_class)
  writer:write_u8(args.specific_device_class)
  writer:write_bytes(args.command_class)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 MULTI_CHANNEL_CAPABILITY_REPORT payload.
---
--- @return st.zwave.CommandClass.MultiChannel.CapabilityReportV2Args deserialized arguments
function CapabilityReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(7, "end_point")
  reader:read_bool("dynamic")
  reader:read_u8("generic_device_class")
  reader:read_u8("specific_device_class")
  reader:read_bytes(reader:remain(), "command_class")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.CapabilityReportV2
--- @return st.zwave.CommandClass.MultiChannel.CapabilityReportV2Args
function CapabilityReportV2._defaults(self)
  local args = {}
  args.end_point = self.args.end_point or 0
  args.dynamic = self.args.dynamic or false
  args.generic_device_class = self.args.generic_device_class or 0
  args.specific_device_class = self.args.specific_device_class or 0
  args.command_class = self.args.command_class or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.CapabilityReportV2
--- @return st.zwave.CommandClass.MultiChannel.CapabilityReportV2Args
function CapabilityReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiChannel.CapabilityReportV2
function CapabilityReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiChannel.CapabilityReportV2
function CapabilityReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiChannel.EndPointFindV2Args
--- @alias EndPointFindV2Args st.zwave.CommandClass.MultiChannel.EndPointFindV2Args
--- @field public generic_device_class integer [0,255]
--- @field public specific_device_class integer [0,255]
local EndPointFindV2Args = {}

--- @class st.zwave.CommandClass.MultiChannel.EndPointFindV2:st.zwave.Command
--- @alias EndPointFindV2 st.zwave.CommandClass.MultiChannel.EndPointFindV2
---
--- v2 and forward-compatible v3,v4 MULTI_CHANNEL_END_POINT_FIND
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x0B
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannel.EndPointFindV2Args command-specific arguments
local EndPointFindV2 = {}
setmetatable(EndPointFindV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 MULTI_CHANNEL_END_POINT_FIND object.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.EndPointFindV2Args command-specific arguments
function EndPointFindV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_CHANNEL, MultiChannel.END_POINT_FIND, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 MULTI_CHANNEL_END_POINT_FIND arguments.
---
--- @return string serialized payload
function EndPointFindV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.generic_device_class)
  writer:write_u8(args.specific_device_class)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 MULTI_CHANNEL_END_POINT_FIND payload.
---
--- @return st.zwave.CommandClass.MultiChannel.EndPointFindV2Args deserialized arguments
function EndPointFindV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("generic_device_class")
  reader:read_u8("specific_device_class")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointFindV2
--- @return st.zwave.CommandClass.MultiChannel.EndPointFindV2Args
function EndPointFindV2._defaults(self)
  local args = {}
  args.generic_device_class = self.args.generic_device_class or 0
  args.specific_device_class = self.args.specific_device_class or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointFindV2
--- @return st.zwave.CommandClass.MultiChannel.EndPointFindV2Args
function EndPointFindV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointFindV2
function EndPointFindV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointFindV2
function EndPointFindV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiChannel.EndPointFindReportV2ArgsVg
--- @alias EndPointFindReportV2ArgsVg st.zwave.CommandClass.MultiChannel.EndPointFindReportV2ArgsVg
--- @field public end_point integer [0,127]
--- @field public res boolean
local EndPointFindReportV2ArgsVg = {}

--- @class st.zwave.CommandClass.MultiChannel.EndPointFindReportV2Args
--- @alias EndPointFindReportV2Args st.zwave.CommandClass.MultiChannel.EndPointFindReportV2Args
--- @field public reports_to_follow integer [0,255]
--- @field public generic_device_class integer [0,255]
--- @field public specific_device_class integer [0,255]
--- @field public vg st.zwave.CommandClass.MultiChannel.EndPointFindReportV2ArgsVg[]
local EndPointFindReportV2Args = {}

--- @class st.zwave.CommandClass.MultiChannel.EndPointFindReportV2:st.zwave.Command
--- @alias EndPointFindReportV2 st.zwave.CommandClass.MultiChannel.EndPointFindReportV2
---
--- v2 and forward-compatible v3,v4 MULTI_CHANNEL_END_POINT_FIND_REPORT
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x0C
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannel.EndPointFindReportV2Args command-specific arguments
local EndPointFindReportV2 = {}
setmetatable(EndPointFindReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 MULTI_CHANNEL_END_POINT_FIND_REPORT object.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.EndPointFindReportV2Args command-specific arguments
function EndPointFindReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_CHANNEL, MultiChannel.END_POINT_FIND_REPORT, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 MULTI_CHANNEL_END_POINT_FIND_REPORT arguments.
---
--- @return string serialized payload
function EndPointFindReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.reports_to_follow)
  writer:write_u8(args.generic_device_class)
  writer:write_u8(args.specific_device_class)
  for i=1,writer.length(args.vg) do
    writer:write_bits(7, args.vg[i].end_point)
    writer:write_bool(args.vg[i].res)
  end
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 MULTI_CHANNEL_END_POINT_FIND_REPORT payload.
---
--- @return st.zwave.CommandClass.MultiChannel.EndPointFindReportV2Args deserialized arguments
function EndPointFindReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("reports_to_follow")
  reader:read_u8("generic_device_class")
  reader:read_u8("specific_device_class")
  reader.parsed.vg = {}
  while reader:remain() > 0 do
    local i = #reader.parsed.vg + 1
    reader.parsed.vg[i] = {}
    reader:read_bits(7, "end_point", reader.parsed.vg[i])
    reader:read_bool("res", reader.parsed.vg[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointFindReportV2
--- @return st.zwave.CommandClass.MultiChannel.EndPointFindReportV2Args
function EndPointFindReportV2._defaults(self)
  local args = {}
  args.reports_to_follow = self.args.reports_to_follow or 0
  args.generic_device_class = self.args.generic_device_class or 0
  args.specific_device_class = self.args.specific_device_class or 0
  args.vg = self.args.vg or {}
  for i=1,buf.Writer.length(args.vg) do
    args.vg[i] = args.vg[i] or {}
    args.vg[i].end_point = self.args.vg[i].end_point or 0
    args.vg[i].res = self.args.vg[i].res or false
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointFindReportV2
--- @return st.zwave.CommandClass.MultiChannel.EndPointFindReportV2Args
function EndPointFindReportV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.vg) do
    args.vg[i] = args.vg[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointFindReportV2
function EndPointFindReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointFindReportV2
function EndPointFindReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiChannel.CmdEncapV2Args
--- @alias CmdEncapV2Args st.zwave.CommandClass.MultiChannel.CmdEncapV2Args
--- @field public source_end_point integer [0,127]
--- @field public res boolean
--- @field public destination_end_point integer [0,127]
--- @field public bit_address boolean
--- @field public command_class integer
--- @field public command integer [0,255]
--- @field public parameter string
local CmdEncapV2Args = {}

--- @class st.zwave.CommandClass.MultiChannel.CmdEncapV2:st.zwave.Command
--- @alias CmdEncapV2 st.zwave.CommandClass.MultiChannel.CmdEncapV2
---
--- v2 and forward-compatible v3,v4 MULTI_CHANNEL_CMD_ENCAP
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x0D
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannel.CmdEncapV2Args command-specific arguments
local CmdEncapV2 = {}
setmetatable(CmdEncapV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 MULTI_CHANNEL_CMD_ENCAP object.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.CmdEncapV2Args command-specific arguments
function CmdEncapV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_CHANNEL, MultiChannel.CMD_ENCAP, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 MULTI_CHANNEL_CMD_ENCAP arguments.
---
--- @return string serialized payload
function CmdEncapV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(7, args.source_end_point)
  writer:write_bool(args.res)
  writer:write_bits(7, args.destination_end_point)
  writer:write_bool(args.bit_address)
  writer:write_cmd_class(args.command_class)
  writer:write_u8(args.command)
  writer:write_bytes(args.parameter)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 MULTI_CHANNEL_CMD_ENCAP payload.
---
--- @return st.zwave.CommandClass.MultiChannel.CmdEncapV2Args deserialized arguments
function CmdEncapV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(7, "source_end_point")
  reader:read_bool("res")
  reader:read_bits(7, "destination_end_point")
  reader:read_bool("bit_address")
  reader:read_cmd_class("command_class")
  reader:read_u8("command")
  reader:read_bytes(reader:remain(), "parameter")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.CmdEncapV2
--- @return st.zwave.CommandClass.MultiChannel.CmdEncapV2Args
function CmdEncapV2._defaults(self)
  local args = {}
  args.source_end_point = self.args.source_end_point or 0
  args.res = self.args.res or false
  args.destination_end_point = self.args.destination_end_point or 0
  args.bit_address = self.args.bit_address or false
  args.command_class = self.args.command_class or 0
  args.command = self.args.command or 0
  args.parameter = self.args.parameter or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.CmdEncapV2
--- @return st.zwave.CommandClass.MultiChannel.CmdEncapV2Args
function CmdEncapV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiChannel.CmdEncapV2
function CmdEncapV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiChannel.CmdEncapV2
function CmdEncapV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiChannel.EndPointReportV4Args
--- @alias EndPointReportV4Args st.zwave.CommandClass.MultiChannel.EndPointReportV4Args
--- @field public identical boolean
--- @field public dynamic boolean
--- @field public individual_end_points integer [0,127]
--- @field public aggregated_end_points integer [0,127]
local EndPointReportV4Args = {}

--- @class st.zwave.CommandClass.MultiChannel.EndPointReportV4:st.zwave.Command
--- @alias EndPointReportV4 st.zwave.CommandClass.MultiChannel.EndPointReportV4
---
--- v4 MULTI_CHANNEL_END_POINT_REPORT
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x08
--- @field public version number 4
--- @field public args st.zwave.CommandClass.MultiChannel.EndPointReportV4Args command-specific arguments
local EndPointReportV4 = {}
setmetatable(EndPointReportV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 MULTI_CHANNEL_END_POINT_REPORT object.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.EndPointReportV4Args command-specific arguments
function EndPointReportV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_CHANNEL, MultiChannel.END_POINT_REPORT, 4, args, ...)
end

--- Serialize v4 MULTI_CHANNEL_END_POINT_REPORT arguments.
---
--- @return string serialized payload
function EndPointReportV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(6, 0) -- res1
  writer:write_bool(args.identical)
  writer:write_bool(args.dynamic)
  writer:write_bits(7, args.individual_end_points)
  writer:write_bool(false) -- res2
  writer:write_bits(7, args.aggregated_end_points)
  writer:write_bool(false) -- res3
  return writer.buf
end

--- Deserialize a v4 MULTI_CHANNEL_END_POINT_REPORT payload.
---
--- @return st.zwave.CommandClass.MultiChannel.EndPointReportV4Args deserialized arguments
function EndPointReportV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(6) -- res1
  reader:read_bool("identical")
  reader:read_bool("dynamic")
  reader:read_bits(7, "individual_end_points")
  reader:read_bool() -- res2
  reader:read_bits(7, "aggregated_end_points")
  reader:read_bool() -- res3
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointReportV4
--- @return st.zwave.CommandClass.MultiChannel.EndPointReportV4Args
function EndPointReportV4._defaults(self)
  local args = {}
  args.identical = self.args.identical or false
  args.dynamic = self.args.dynamic or false
  args.individual_end_points = self.args.individual_end_points or 0
  args.aggregated_end_points = self.args.aggregated_end_points or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointReportV4
--- @return st.zwave.CommandClass.MultiChannel.EndPointReportV4Args
function EndPointReportV4._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointReportV4
function EndPointReportV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiChannel.EndPointReportV4
function EndPointReportV4._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiChannel.AggregatedMembersGetV4Args
--- @alias AggregatedMembersGetV4Args st.zwave.CommandClass.MultiChannel.AggregatedMembersGetV4Args
--- @field public aggregated_end_point integer [0,127]
--- @field public res boolean
local AggregatedMembersGetV4Args = {}

--- @class st.zwave.CommandClass.MultiChannel.AggregatedMembersGetV4:st.zwave.Command
--- @alias AggregatedMembersGetV4 st.zwave.CommandClass.MultiChannel.AggregatedMembersGetV4
---
--- v4 MULTI_CHANNEL_AGGREGATED_MEMBERS_GET
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x0E
--- @field public version number 4
--- @field public args st.zwave.CommandClass.MultiChannel.AggregatedMembersGetV4Args command-specific arguments
local AggregatedMembersGetV4 = {}
setmetatable(AggregatedMembersGetV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 MULTI_CHANNEL_AGGREGATED_MEMBERS_GET object.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.AggregatedMembersGetV4Args command-specific arguments
function AggregatedMembersGetV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_CHANNEL, MultiChannel.AGGREGATED_MEMBERS_GET, 4, args, ...)
end

--- Serialize v4 MULTI_CHANNEL_AGGREGATED_MEMBERS_GET arguments.
---
--- @return string serialized payload
function AggregatedMembersGetV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(7, args.aggregated_end_point)
  writer:write_bool(args.res)
  return writer.buf
end

--- Deserialize a v4 MULTI_CHANNEL_AGGREGATED_MEMBERS_GET payload.
---
--- @return st.zwave.CommandClass.MultiChannel.AggregatedMembersGetV4Args deserialized arguments
function AggregatedMembersGetV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(7, "aggregated_end_point")
  reader:read_bool("res")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.AggregatedMembersGetV4
--- @return st.zwave.CommandClass.MultiChannel.AggregatedMembersGetV4Args
function AggregatedMembersGetV4._defaults(self)
  local args = {}
  args.aggregated_end_point = self.args.aggregated_end_point or 0
  args.res = self.args.res or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.AggregatedMembersGetV4
--- @return st.zwave.CommandClass.MultiChannel.AggregatedMembersGetV4Args
function AggregatedMembersGetV4._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiChannel.AggregatedMembersGetV4
function AggregatedMembersGetV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiChannel.AggregatedMembersGetV4
function AggregatedMembersGetV4._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiChannel.AggregatedMembersReportV4Args
--- @alias AggregatedMembersReportV4Args st.zwave.CommandClass.MultiChannel.AggregatedMembersReportV4Args
--- @field public aggregated_end_point integer [0,127]
--- @field public res boolean
--- @field public aggregated_members_bit_mask string
local AggregatedMembersReportV4Args = {}

--- @class st.zwave.CommandClass.MultiChannel.AggregatedMembersReportV4:st.zwave.Command
--- @alias AggregatedMembersReportV4 st.zwave.CommandClass.MultiChannel.AggregatedMembersReportV4
---
--- v4 MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x0F
--- @field public version number 4
--- @field public args st.zwave.CommandClass.MultiChannel.AggregatedMembersReportV4Args command-specific arguments
local AggregatedMembersReportV4 = {}
setmetatable(AggregatedMembersReportV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT object.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.AggregatedMembersReportV4Args command-specific arguments
function AggregatedMembersReportV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_CHANNEL, MultiChannel.AGGREGATED_MEMBERS_REPORT, 4, args, ...)
end

--- Serialize v4 MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT arguments.
---
--- @return string serialized payload
function AggregatedMembersReportV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(7, args.aggregated_end_point)
  writer:write_bool(args.res)
  writer:write_u8(writer.length(args.aggregated_members_bit_mask))
  writer:write_bytes(args.aggregated_members_bit_mask)
  return writer.buf
end

--- Deserialize a v4 MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT payload.
---
--- @return st.zwave.CommandClass.MultiChannel.AggregatedMembersReportV4Args deserialized arguments
function AggregatedMembersReportV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(7, "aggregated_end_point")
  reader:read_bool("res")
  reader:read_u8("number_of_bit_masks")
  reader:read_bytes(reader.parsed.number_of_bit_masks, "aggregated_members_bit_mask")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.AggregatedMembersReportV4
--- @return st.zwave.CommandClass.MultiChannel.AggregatedMembersReportV4Args
function AggregatedMembersReportV4._defaults(self)
  local args = {}
  args.aggregated_end_point = self.args.aggregated_end_point or 0
  args.res = self.args.res or false
  args.aggregated_members_bit_mask = self.args.aggregated_members_bit_mask or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiChannel.AggregatedMembersReportV4
--- @return st.zwave.CommandClass.MultiChannel.AggregatedMembersReportV4Args
function AggregatedMembersReportV4._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiChannel.AggregatedMembersReportV4
function AggregatedMembersReportV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiChannel.AggregatedMembersReportV4
function AggregatedMembersReportV4._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiChannel.MultiInstanceGet
--- @alias _MultiInstanceGet st.zwave.CommandClass.MultiChannel.MultiInstanceGet
---
--- Dynamically versioned MULTI_INSTANCE_GET
---
--- Supported versions: 1,2,3,4; unique base versions: 1
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MultiInstance.MultiInstanceGetV1Args
local _MultiInstanceGet = {}
setmetatable(_MultiInstanceGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_INSTANCE_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiInstance.MultiInstanceGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannel.MultiInstanceGet
function _MultiInstanceGet:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannel.MULTI_INSTANCE_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiChannel.MultiInstanceReport
--- @alias _MultiInstanceReport st.zwave.CommandClass.MultiChannel.MultiInstanceReport
---
--- Dynamically versioned MULTI_INSTANCE_REPORT
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x05
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.MultiInstance.MultiInstanceReportV1Args|st.zwave.CommandClass.MultiChannel.MultiInstanceReportV2Args
local _MultiInstanceReport = {}
setmetatable(_MultiInstanceReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_INSTANCE_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiInstance.MultiInstanceReportV1Args|st.zwave.CommandClass.MultiChannel.MultiInstanceReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannel.MultiInstanceReport
function _MultiInstanceReport:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannel.MULTI_INSTANCE_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncap
--- @alias _MultiInstanceCmdEncap st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncap
---
--- Dynamically versioned MULTI_INSTANCE_CMD_ENCAP
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x06
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.MultiInstance.MultiInstanceCmdEncapV1Args|st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncapV2Args
local _MultiInstanceCmdEncap = {}
setmetatable(_MultiInstanceCmdEncap, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_INSTANCE_CMD_ENCAP object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiInstance.MultiInstanceCmdEncapV1Args|st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncapV2Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannel.MultiInstanceCmdEncap
function _MultiInstanceCmdEncap:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannel.MULTI_INSTANCE_CMD_ENCAP, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiChannel.EndPointGet
--- @alias _EndPointGet st.zwave.CommandClass.MultiChannel.EndPointGet
---
--- Dynamically versioned MULTI_CHANNEL_END_POINT_GET
---
--- Supported versions: 2,3,4; unique base versions: 2
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x07
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannel.EndPointGetV2Args
local _EndPointGet = {}
setmetatable(_EndPointGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_CHANNEL_END_POINT_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.EndPointGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannel.EndPointGet
function _EndPointGet:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannel.END_POINT_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiChannel.EndPointReport
--- @alias _EndPointReport st.zwave.CommandClass.MultiChannel.EndPointReport
---
--- Dynamically versioned MULTI_CHANNEL_END_POINT_REPORT
---
--- Supported versions: 2,3,4; unique base versions: 2,4
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x08
--- @field public version number 2,4
--- @field public args st.zwave.CommandClass.MultiChannel.EndPointReportV2Args|st.zwave.CommandClass.MultiChannel.EndPointReportV4Args
local _EndPointReport = {}
setmetatable(_EndPointReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_CHANNEL_END_POINT_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.EndPointReportV2Args|st.zwave.CommandClass.MultiChannel.EndPointReportV4Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannel.EndPointReport
function _EndPointReport:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannel.END_POINT_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiChannel.CapabilityGet
--- @alias _CapabilityGet st.zwave.CommandClass.MultiChannel.CapabilityGet
---
--- Dynamically versioned MULTI_CHANNEL_CAPABILITY_GET
---
--- Supported versions: 2,3,4; unique base versions: 2
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x09
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannel.CapabilityGetV2Args
local _CapabilityGet = {}
setmetatable(_CapabilityGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_CHANNEL_CAPABILITY_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.CapabilityGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannel.CapabilityGet
function _CapabilityGet:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannel.CAPABILITY_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiChannel.CapabilityReport
--- @alias _CapabilityReport st.zwave.CommandClass.MultiChannel.CapabilityReport
---
--- Dynamically versioned MULTI_CHANNEL_CAPABILITY_REPORT
---
--- Supported versions: 2,3,4; unique base versions: 2
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x0A
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannel.CapabilityReportV2Args
local _CapabilityReport = {}
setmetatable(_CapabilityReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_CHANNEL_CAPABILITY_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.CapabilityReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannel.CapabilityReport
function _CapabilityReport:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannel.CAPABILITY_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiChannel.EndPointFind
--- @alias _EndPointFind st.zwave.CommandClass.MultiChannel.EndPointFind
---
--- Dynamically versioned MULTI_CHANNEL_END_POINT_FIND
---
--- Supported versions: 2,3,4; unique base versions: 2
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x0B
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannel.EndPointFindV2Args
local _EndPointFind = {}
setmetatable(_EndPointFind, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_CHANNEL_END_POINT_FIND object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.EndPointFindV2Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannel.EndPointFind
function _EndPointFind:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannel.END_POINT_FIND, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiChannel.EndPointFindReport
--- @alias _EndPointFindReport st.zwave.CommandClass.MultiChannel.EndPointFindReport
---
--- Dynamically versioned MULTI_CHANNEL_END_POINT_FIND_REPORT
---
--- Supported versions: 2,3,4; unique base versions: 2
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x0C
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannel.EndPointFindReportV2Args
local _EndPointFindReport = {}
setmetatable(_EndPointFindReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_CHANNEL_END_POINT_FIND_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.EndPointFindReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannel.EndPointFindReport
function _EndPointFindReport:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannel.END_POINT_FIND_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiChannel.CmdEncap
--- @alias _CmdEncap st.zwave.CommandClass.MultiChannel.CmdEncap
---
--- Dynamically versioned MULTI_CHANNEL_CMD_ENCAP
---
--- Supported versions: 2,3,4; unique base versions: 2
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x0D
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannel.CmdEncapV2Args
local _CmdEncap = {}
setmetatable(_CmdEncap, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_CHANNEL_CMD_ENCAP object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.CmdEncapV2Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannel.CmdEncap
function _CmdEncap:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannel.CMD_ENCAP, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiChannel.AggregatedMembersGet
--- @alias _AggregatedMembersGet st.zwave.CommandClass.MultiChannel.AggregatedMembersGet
---
--- Dynamically versioned MULTI_CHANNEL_AGGREGATED_MEMBERS_GET
---
--- Supported versions: 4; unique base versions: 4
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x0E
--- @field public version number 4
--- @field public args st.zwave.CommandClass.MultiChannel.AggregatedMembersGetV4Args
local _AggregatedMembersGet = {}
setmetatable(_AggregatedMembersGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_CHANNEL_AGGREGATED_MEMBERS_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.AggregatedMembersGetV4Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannel.AggregatedMembersGet
function _AggregatedMembersGet:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannel.AGGREGATED_MEMBERS_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiChannel.AggregatedMembersReport
--- @alias _AggregatedMembersReport st.zwave.CommandClass.MultiChannel.AggregatedMembersReport
---
--- Dynamically versioned MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT
---
--- Supported versions: 4; unique base versions: 4
---
--- @field public cmd_class number 0x60
--- @field public cmd_id number 0x0F
--- @field public version number 4
--- @field public args st.zwave.CommandClass.MultiChannel.AggregatedMembersReportV4Args
local _AggregatedMembersReport = {}
setmetatable(_AggregatedMembersReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_CHANNEL_AGGREGATED_MEMBERS_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannel command class module instance
--- @param args st.zwave.CommandClass.MultiChannel.AggregatedMembersReportV4Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannel.AggregatedMembersReport
function _AggregatedMembersReport:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannel.AGGREGATED_MEMBERS_REPORT, module._serialization_version, args, ...)
end

MultiChannel.MultiInstanceReportV2 = MultiInstanceReportV2
MultiChannel.MultiInstanceCmdEncapV2 = MultiInstanceCmdEncapV2
MultiChannel.EndPointGetV2 = EndPointGetV2
MultiChannel.EndPointReportV2 = EndPointReportV2
MultiChannel.CapabilityGetV2 = CapabilityGetV2
MultiChannel.CapabilityReportV2 = CapabilityReportV2
MultiChannel.EndPointFindV2 = EndPointFindV2
MultiChannel.EndPointFindReportV2 = EndPointFindReportV2
MultiChannel.CmdEncapV2 = CmdEncapV2
MultiChannel.EndPointReportV4 = EndPointReportV4
MultiChannel.AggregatedMembersGetV4 = AggregatedMembersGetV4
MultiChannel.AggregatedMembersReportV4 = AggregatedMembersReportV4
MultiChannel.MultiInstanceGet = _MultiInstanceGet
MultiChannel.MultiInstanceReport = _MultiInstanceReport
MultiChannel.MultiInstanceCmdEncap = _MultiInstanceCmdEncap
MultiChannel.EndPointGet = _EndPointGet
MultiChannel.EndPointReport = _EndPointReport
MultiChannel.CapabilityGet = _CapabilityGet
MultiChannel.CapabilityReport = _CapabilityReport
MultiChannel.EndPointFind = _EndPointFind
MultiChannel.EndPointFindReport = _EndPointFindReport
MultiChannel.CmdEncap = _CmdEncap
MultiChannel.AggregatedMembersGet = _AggregatedMembersGet
MultiChannel.AggregatedMembersReport = _AggregatedMembersReport

MultiChannel._lut = {
  [0] = { -- dynamically versioned constructors
    [MultiChannel.MULTI_INSTANCE_GET] = MultiChannel.MultiInstanceGet,
    [MultiChannel.MULTI_INSTANCE_REPORT] = MultiChannel.MultiInstanceReport,
    [MultiChannel.MULTI_INSTANCE_CMD_ENCAP] = MultiChannel.MultiInstanceCmdEncap,
    [MultiChannel.END_POINT_GET] = MultiChannel.EndPointGet,
    [MultiChannel.END_POINT_REPORT] = MultiChannel.EndPointReport,
    [MultiChannel.CAPABILITY_GET] = MultiChannel.CapabilityGet,
    [MultiChannel.CAPABILITY_REPORT] = MultiChannel.CapabilityReport,
    [MultiChannel.END_POINT_FIND] = MultiChannel.EndPointFind,
    [MultiChannel.END_POINT_FIND_REPORT] = MultiChannel.EndPointFindReport,
    [MultiChannel.CMD_ENCAP] = MultiChannel.CmdEncap,
    [MultiChannel.AGGREGATED_MEMBERS_GET] = MultiChannel.AggregatedMembersGet,
    [MultiChannel.AGGREGATED_MEMBERS_REPORT] = MultiChannel.AggregatedMembersReport
  },
  [2] = { -- version 2
    [MultiChannel.MULTI_INSTANCE_GET] = MultiChannel.MultiInstanceGetV1,
    [MultiChannel.MULTI_INSTANCE_REPORT] = MultiChannel.MultiInstanceReportV2,
    [MultiChannel.MULTI_INSTANCE_CMD_ENCAP] = MultiChannel.MultiInstanceCmdEncapV2,
    [MultiChannel.END_POINT_GET] = MultiChannel.EndPointGetV2,
    [MultiChannel.END_POINT_REPORT] = MultiChannel.EndPointReportV2,
    [MultiChannel.CAPABILITY_GET] = MultiChannel.CapabilityGetV2,
    [MultiChannel.CAPABILITY_REPORT] = MultiChannel.CapabilityReportV2,
    [MultiChannel.END_POINT_FIND] = MultiChannel.EndPointFindV2,
    [MultiChannel.END_POINT_FIND_REPORT] = MultiChannel.EndPointFindReportV2,
    [MultiChannel.CMD_ENCAP] = MultiChannel.CmdEncapV2
  },
  [3] = { -- version 3
    [MultiChannel.MULTI_INSTANCE_GET] = MultiChannel.MultiInstanceGetV1,
    [MultiChannel.MULTI_INSTANCE_REPORT] = MultiChannel.MultiInstanceReportV2,
    [MultiChannel.MULTI_INSTANCE_CMD_ENCAP] = MultiChannel.MultiInstanceCmdEncapV2,
    [MultiChannel.END_POINT_GET] = MultiChannel.EndPointGetV2,
    [MultiChannel.END_POINT_REPORT] = MultiChannel.EndPointReportV2,
    [MultiChannel.CAPABILITY_GET] = MultiChannel.CapabilityGetV2,
    [MultiChannel.CAPABILITY_REPORT] = MultiChannel.CapabilityReportV2,
    [MultiChannel.END_POINT_FIND] = MultiChannel.EndPointFindV2,
    [MultiChannel.END_POINT_FIND_REPORT] = MultiChannel.EndPointFindReportV2,
    [MultiChannel.CMD_ENCAP] = MultiChannel.CmdEncapV2
  },
  [4] = { -- version 4
    [MultiChannel.MULTI_INSTANCE_GET] = MultiChannel.MultiInstanceGetV1,
    [MultiChannel.MULTI_INSTANCE_REPORT] = MultiChannel.MultiInstanceReportV2,
    [MultiChannel.MULTI_INSTANCE_CMD_ENCAP] = MultiChannel.MultiInstanceCmdEncapV2,
    [MultiChannel.END_POINT_GET] = MultiChannel.EndPointGetV2,
    [MultiChannel.END_POINT_REPORT] = MultiChannel.EndPointReportV4,
    [MultiChannel.CAPABILITY_GET] = MultiChannel.CapabilityGetV2,
    [MultiChannel.CAPABILITY_REPORT] = MultiChannel.CapabilityReportV2,
    [MultiChannel.END_POINT_FIND] = MultiChannel.EndPointFindV2,
    [MultiChannel.END_POINT_FIND_REPORT] = MultiChannel.EndPointFindReportV2,
    [MultiChannel.CMD_ENCAP] = MultiChannel.CmdEncapV2,
    [MultiChannel.AGGREGATED_MEMBERS_GET] = MultiChannel.AggregatedMembersGetV4,
    [MultiChannel.AGGREGATED_MEMBERS_REPORT] = MultiChannel.AggregatedMembersReportV4
  }
}
-- inherit parentage
setmetatable(MultiChannel._lut, {
  __index = (require "st.zwave.CommandClass.MultiInstance")._lut
})
setmetatable(MultiChannel._lut[0], {
  __index = (require "st.zwave.CommandClass.MultiInstance")._lut[0]
})

return MultiChannel
