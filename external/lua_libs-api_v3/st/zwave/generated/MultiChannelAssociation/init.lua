-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.MultiChannelAssociation
--- @alias MultiChannelAssociation st.zwave.CommandClass.MultiChannelAssociation
---
--- Supported versions: 2,3,4
---
--- @field public SET number 0x01 - MULTI_CHANNEL_ASSOCIATION_SET command id
--- @field public GET number 0x02 - MULTI_CHANNEL_ASSOCIATION_GET command id
--- @field public REPORT number 0x03 - MULTI_CHANNEL_ASSOCIATION_REPORT command id
--- @field public REMOVE number 0x04 - MULTI_CHANNEL_ASSOCIATION_REMOVE command id
--- @field public GROUPINGS_GET number 0x05 - MULTI_CHANNEL_ASSOCIATION_GROUPINGS_GET command id
--- @field public GROUPINGS_REPORT number 0x06 - MULTI_CHANNEL_ASSOCIATION_GROUPINGS_REPORT command id
--- @field public MARKER number 0x00
local MultiChannelAssociation = {}
MultiChannelAssociation.SET = 0x01
MultiChannelAssociation.GET = 0x02
MultiChannelAssociation.REPORT = 0x03
MultiChannelAssociation.REMOVE = 0x04
MultiChannelAssociation.GROUPINGS_GET = 0x05
MultiChannelAssociation.GROUPINGS_REPORT = 0x06

MultiChannelAssociation._commands = {
  [MultiChannelAssociation.SET] = "SET",
  [MultiChannelAssociation.GET] = "GET",
  [MultiChannelAssociation.REPORT] = "REPORT",
  [MultiChannelAssociation.REMOVE] = "REMOVE",
  [MultiChannelAssociation.GROUPINGS_GET] = "GROUPINGS_GET",
  [MultiChannelAssociation.GROUPINGS_REPORT] = "GROUPINGS_REPORT"
}
setmetatable(MultiChannelAssociation._commands, {
  __index = (require "st.zwave.CommandClass.MultiInstanceAssociation")._commands, -- inherit parentage
})

--- Instantiate a versioned instance of the MultiChannelAssociation Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.MultiChannelAssociation versioned command class instance
function MultiChannelAssociation:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.MULTI_CHANNEL_ASSOCIATION][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(MultiChannelAssociation, {
  __index = require "st.zwave.CommandClass.MultiInstanceAssociation", -- inherit parentage
  __call = MultiChannelAssociation.init
})

MultiChannelAssociation._serialization_version = nil
MultiChannelAssociation._strict = false
zw._versions[zw.MULTI_CHANNEL_ASSOCIATION][2] = true
zw._versions[zw.MULTI_CHANNEL_ASSOCIATION][3] = true
zw._versions[zw.MULTI_CHANNEL_ASSOCIATION][4] = true

--- @class st.zwave.CommandClass.MultiChannelAssociation.SetV2ArgsMultiChannelNodes
--- @alias SetV2ArgsMultiChannelNodes st.zwave.CommandClass.MultiChannelAssociation.SetV2ArgsMultiChannelNodes
--- @field public multi_channel_node_id integer [0,255]
--- @field public end_point integer [0,127]
--- @field public bit_address boolean
local SetV2ArgsMultiChannelNodes = {}

--- @class st.zwave.CommandClass.MultiChannelAssociation.SetV2Args
--- @alias SetV2Args st.zwave.CommandClass.MultiChannelAssociation.SetV2Args
--- @field public grouping_identifier integer [0,255]
--- @field public node_ids integer[] [0,255]
--- @field public multi_channel_nodes st.zwave.CommandClass.MultiChannelAssociation.SetV2ArgsMultiChannelNodes[]
local SetV2Args = {}

--- @class st.zwave.CommandClass.MultiChannelAssociation.SetV2:st.zwave.Command
--- @alias SetV2 st.zwave.CommandClass.MultiChannelAssociation.SetV2
---
--- v2 and forward-compatible v3,v4 MULTI_CHANNEL_ASSOCIATION_SET
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x01
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannelAssociation.SetV2Args command-specific arguments
local SetV2 = {}
setmetatable(SetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 MULTI_CHANNEL_ASSOCIATION_SET object.
---
--- @param module st.zwave.CommandClass.MultiChannelAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiChannelAssociation.SetV2Args command-specific arguments
function SetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_CHANNEL_ASSOCIATION, MultiChannelAssociation.SET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 MULTI_CHANNEL_ASSOCIATION_SET arguments.
---
--- @return string serialized payload
function SetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.grouping_identifier)
  for i=1,writer.length(args.node_ids) do
    writer:write_u8(args.node_ids[i])
  end
  writer:write_u8(MultiChannelAssociation.MARKER)
  for i=1,writer.length(args.multi_channel_nodes) do
    writer:write_u8(args.multi_channel_nodes[i].multi_channel_node_id)
    writer:write_bits(7, args.multi_channel_nodes[i].end_point)
    writer:write_bool(args.multi_channel_nodes[i].bit_address)
  end
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 MULTI_CHANNEL_ASSOCIATION_SET payload.
---
--- @return st.zwave.CommandClass.MultiChannelAssociation.SetV2Args deserialized arguments
function SetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("grouping_identifier")
  reader.parsed.node_ids = {}
  while reader:remain() > 0 and reader:peek_u8() ~= MultiChannelAssociation.MARKER do
    reader.parsed.node_ids[#reader.parsed.node_ids + 1] = reader:read_u8()
  end
  reader:seek(1)
  reader.parsed.multi_channel_nodes = {}
  while reader:remain() > 0 do
    local i = #reader.parsed.multi_channel_nodes + 1
    reader.parsed.multi_channel_nodes[i] = {}
    reader:read_u8("multi_channel_node_id", reader.parsed.multi_channel_nodes[i])
    reader:read_bits(7, "end_point", reader.parsed.multi_channel_nodes[i])
    reader:read_bool("bit_address", reader.parsed.multi_channel_nodes[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiChannelAssociation.SetV2
--- @return st.zwave.CommandClass.MultiChannelAssociation.SetV2Args
function SetV2._defaults(self)
  local args = {}
  args.grouping_identifier = self.args.grouping_identifier or 0
  args.node_ids = self.args.node_ids or {}
  args.multi_channel_nodes = self.args.multi_channel_nodes or {}
  for i=1,buf.Writer.length(args.multi_channel_nodes) do
    args.multi_channel_nodes[i] = args.multi_channel_nodes[i] or {}
    args.multi_channel_nodes[i].multi_channel_node_id = self.args.multi_channel_nodes[i].multi_channel_node_id or 0
    args.multi_channel_nodes[i].end_point = self.args.multi_channel_nodes[i].end_point or 0
    args.multi_channel_nodes[i].bit_address = self.args.multi_channel_nodes[i].bit_address or false
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiChannelAssociation.SetV2
--- @return st.zwave.CommandClass.MultiChannelAssociation.SetV2Args
function SetV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.multi_channel_nodes) do
    args.multi_channel_nodes[i] = args.multi_channel_nodes[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiChannelAssociation.SetV2
function SetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiChannelAssociation.SetV2
function SetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiChannelAssociation.ReportV2ArgsMultiChannelNodes
--- @alias ReportV2ArgsMultiChannelNodes st.zwave.CommandClass.MultiChannelAssociation.ReportV2ArgsMultiChannelNodes
--- @field public multi_channel_node_id integer [0,255]
--- @field public end_point integer [0,127]
--- @field public bit_address boolean
local ReportV2ArgsMultiChannelNodes = {}

--- @class st.zwave.CommandClass.MultiChannelAssociation.ReportV2Args
--- @alias ReportV2Args st.zwave.CommandClass.MultiChannelAssociation.ReportV2Args
--- @field public grouping_identifier integer [0,255]
--- @field public max_nodes_supported integer [0,255]
--- @field public reports_to_follow integer [0,255]
--- @field public node_ids integer[] [0,255]
--- @field public multi_channel_nodes st.zwave.CommandClass.MultiChannelAssociation.ReportV2ArgsMultiChannelNodes[]
local ReportV2Args = {}

--- @class st.zwave.CommandClass.MultiChannelAssociation.ReportV2:st.zwave.Command
--- @alias ReportV2 st.zwave.CommandClass.MultiChannelAssociation.ReportV2
---
--- v2 and forward-compatible v3,v4 MULTI_CHANNEL_ASSOCIATION_REPORT
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x03
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannelAssociation.ReportV2Args command-specific arguments
local ReportV2 = {}
setmetatable(ReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 MULTI_CHANNEL_ASSOCIATION_REPORT object.
---
--- @param module st.zwave.CommandClass.MultiChannelAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiChannelAssociation.ReportV2Args command-specific arguments
function ReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_CHANNEL_ASSOCIATION, MultiChannelAssociation.REPORT, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 MULTI_CHANNEL_ASSOCIATION_REPORT arguments.
---
--- @return string serialized payload
function ReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.grouping_identifier)
  writer:write_u8(args.max_nodes_supported)
  writer:write_u8(args.reports_to_follow)
  for i=1,writer.length(args.node_ids) do
    writer:write_u8(args.node_ids[i])
  end
  writer:write_u8(MultiChannelAssociation.MARKER)
  for i=1,writer.length(args.multi_channel_nodes) do
    writer:write_u8(args.multi_channel_nodes[i].multi_channel_node_id)
    writer:write_bits(7, args.multi_channel_nodes[i].end_point)
    writer:write_bool(args.multi_channel_nodes[i].bit_address)
  end
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 MULTI_CHANNEL_ASSOCIATION_REPORT payload.
---
--- @return st.zwave.CommandClass.MultiChannelAssociation.ReportV2Args deserialized arguments
function ReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("grouping_identifier")
  reader:read_u8("max_nodes_supported")
  reader:read_u8("reports_to_follow")
  reader.parsed.node_ids = {}
  while reader:remain() > 0 and reader:peek_u8() ~= MultiChannelAssociation.MARKER do
    reader.parsed.node_ids[#reader.parsed.node_ids + 1] = reader:read_u8()
  end
  reader:seek(1)
  reader.parsed.multi_channel_nodes = {}
  while reader:remain() > 0 do
    local i = #reader.parsed.multi_channel_nodes + 1
    reader.parsed.multi_channel_nodes[i] = {}
    reader:read_u8("multi_channel_node_id", reader.parsed.multi_channel_nodes[i])
    reader:read_bits(7, "end_point", reader.parsed.multi_channel_nodes[i])
    reader:read_bool("bit_address", reader.parsed.multi_channel_nodes[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiChannelAssociation.ReportV2
--- @return st.zwave.CommandClass.MultiChannelAssociation.ReportV2Args
function ReportV2._defaults(self)
  local args = {}
  args.grouping_identifier = self.args.grouping_identifier or 0
  args.max_nodes_supported = self.args.max_nodes_supported or 0
  args.reports_to_follow = self.args.reports_to_follow or 0
  args.node_ids = self.args.node_ids or {}
  args.multi_channel_nodes = self.args.multi_channel_nodes or {}
  for i=1,buf.Writer.length(args.multi_channel_nodes) do
    args.multi_channel_nodes[i] = args.multi_channel_nodes[i] or {}
    args.multi_channel_nodes[i].multi_channel_node_id = self.args.multi_channel_nodes[i].multi_channel_node_id or 0
    args.multi_channel_nodes[i].end_point = self.args.multi_channel_nodes[i].end_point or 0
    args.multi_channel_nodes[i].bit_address = self.args.multi_channel_nodes[i].bit_address or false
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiChannelAssociation.ReportV2
--- @return st.zwave.CommandClass.MultiChannelAssociation.ReportV2Args
function ReportV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.multi_channel_nodes) do
    args.multi_channel_nodes[i] = args.multi_channel_nodes[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiChannelAssociation.ReportV2
function ReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiChannelAssociation.ReportV2
function ReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiChannelAssociation.RemoveV2ArgsMultiChannelNodes
--- @alias RemoveV2ArgsMultiChannelNodes st.zwave.CommandClass.MultiChannelAssociation.RemoveV2ArgsMultiChannelNodes
--- @field public multi_channel_node_id integer [0,255]
--- @field public end_point integer [0,127]
--- @field public bit_address boolean
local RemoveV2ArgsMultiChannelNodes = {}

--- @class st.zwave.CommandClass.MultiChannelAssociation.RemoveV2Args
--- @alias RemoveV2Args st.zwave.CommandClass.MultiChannelAssociation.RemoveV2Args
--- @field public grouping_identifier integer [0,255]
--- @field public node_ids integer[] [0,255]
--- @field public multi_channel_nodes st.zwave.CommandClass.MultiChannelAssociation.RemoveV2ArgsMultiChannelNodes[]
local RemoveV2Args = {}

--- @class st.zwave.CommandClass.MultiChannelAssociation.RemoveV2:st.zwave.Command
--- @alias RemoveV2 st.zwave.CommandClass.MultiChannelAssociation.RemoveV2
---
--- v2 and forward-compatible v3,v4 MULTI_CHANNEL_ASSOCIATION_REMOVE
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x04
--- @field public version number 2
--- @field public args st.zwave.CommandClass.MultiChannelAssociation.RemoveV2Args command-specific arguments
local RemoveV2 = {}
setmetatable(RemoveV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 MULTI_CHANNEL_ASSOCIATION_REMOVE object.
---
--- @param module st.zwave.CommandClass.MultiChannelAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiChannelAssociation.RemoveV2Args command-specific arguments
function RemoveV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_CHANNEL_ASSOCIATION, MultiChannelAssociation.REMOVE, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 MULTI_CHANNEL_ASSOCIATION_REMOVE arguments.
---
--- @return string serialized payload
function RemoveV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.grouping_identifier)
  for i=1,writer.length(args.node_ids) do
    writer:write_u8(args.node_ids[i])
  end
  writer:write_u8(MultiChannelAssociation.MARKER)
  for i=1,writer.length(args.multi_channel_nodes) do
    writer:write_u8(args.multi_channel_nodes[i].multi_channel_node_id)
    writer:write_bits(7, args.multi_channel_nodes[i].end_point)
    writer:write_bool(args.multi_channel_nodes[i].bit_address)
  end
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 MULTI_CHANNEL_ASSOCIATION_REMOVE payload.
---
--- @return st.zwave.CommandClass.MultiChannelAssociation.RemoveV2Args deserialized arguments
function RemoveV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("grouping_identifier")
  reader.parsed.node_ids = {}
  while reader:remain() > 0 and reader:peek_u8() ~= MultiChannelAssociation.MARKER do
    reader.parsed.node_ids[#reader.parsed.node_ids + 1] = reader:read_u8()
  end
  reader:seek(1)
  reader.parsed.multi_channel_nodes = {}
  while reader:remain() > 0 do
    local i = #reader.parsed.multi_channel_nodes + 1
    reader.parsed.multi_channel_nodes[i] = {}
    reader:read_u8("multi_channel_node_id", reader.parsed.multi_channel_nodes[i])
    reader:read_bits(7, "end_point", reader.parsed.multi_channel_nodes[i])
    reader:read_bool("bit_address", reader.parsed.multi_channel_nodes[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiChannelAssociation.RemoveV2
--- @return st.zwave.CommandClass.MultiChannelAssociation.RemoveV2Args
function RemoveV2._defaults(self)
  local args = {}
  args.grouping_identifier = self.args.grouping_identifier or 0
  args.node_ids = self.args.node_ids or {}
  args.multi_channel_nodes = self.args.multi_channel_nodes or {}
  for i=1,buf.Writer.length(args.multi_channel_nodes) do
    args.multi_channel_nodes[i] = args.multi_channel_nodes[i] or {}
    args.multi_channel_nodes[i].multi_channel_node_id = self.args.multi_channel_nodes[i].multi_channel_node_id or 0
    args.multi_channel_nodes[i].end_point = self.args.multi_channel_nodes[i].end_point or 0
    args.multi_channel_nodes[i].bit_address = self.args.multi_channel_nodes[i].bit_address or false
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiChannelAssociation.RemoveV2
--- @return st.zwave.CommandClass.MultiChannelAssociation.RemoveV2Args
function RemoveV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.multi_channel_nodes) do
    args.multi_channel_nodes[i] = args.multi_channel_nodes[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiChannelAssociation.RemoveV2
function RemoveV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiChannelAssociation.RemoveV2
function RemoveV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiChannelAssociation.Set
--- @alias _Set st.zwave.CommandClass.MultiChannelAssociation.Set
---
--- Dynamically versioned MULTI_CHANNEL_ASSOCIATION_SET
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x01
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.SetV1Args|st.zwave.CommandClass.MultiChannelAssociation.SetV2Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_CHANNEL_ASSOCIATION_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannelAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.SetV1Args|st.zwave.CommandClass.MultiChannelAssociation.SetV2Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannelAssociation.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannelAssociation.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiChannelAssociation.Get
--- @alias _Get st.zwave.CommandClass.MultiChannelAssociation.Get
---
--- Dynamically versioned MULTI_CHANNEL_ASSOCIATION_GET
---
--- Supported versions: 1,2,3,4; unique base versions: 1
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_CHANNEL_ASSOCIATION_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannelAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannelAssociation.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannelAssociation.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiChannelAssociation.Report
--- @alias _Report st.zwave.CommandClass.MultiChannelAssociation.Report
---
--- Dynamically versioned MULTI_CHANNEL_ASSOCIATION_REPORT
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x03
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.ReportV1Args|st.zwave.CommandClass.MultiChannelAssociation.ReportV2Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_CHANNEL_ASSOCIATION_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannelAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.ReportV1Args|st.zwave.CommandClass.MultiChannelAssociation.ReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannelAssociation.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannelAssociation.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiChannelAssociation.Remove
--- @alias _Remove st.zwave.CommandClass.MultiChannelAssociation.Remove
---
--- Dynamically versioned MULTI_CHANNEL_ASSOCIATION_REMOVE
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x04
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1Args|st.zwave.CommandClass.MultiChannelAssociation.RemoveV2Args
local _Remove = {}
setmetatable(_Remove, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_CHANNEL_ASSOCIATION_REMOVE object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannelAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1Args|st.zwave.CommandClass.MultiChannelAssociation.RemoveV2Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannelAssociation.Remove
function _Remove:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannelAssociation.REMOVE, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiChannelAssociation.GroupingsGet
--- @alias _GroupingsGet st.zwave.CommandClass.MultiChannelAssociation.GroupingsGet
---
--- Dynamically versioned MULTI_CHANNEL_ASSOCIATION_GROUPINGS_GET
---
--- Supported versions: 1,2,3,4; unique base versions: 1
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1Args
local _GroupingsGet = {}
setmetatable(_GroupingsGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_CHANNEL_ASSOCIATION_GROUPINGS_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannelAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannelAssociation.GroupingsGet
function _GroupingsGet:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannelAssociation.GROUPINGS_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiChannelAssociation.GroupingsReport
--- @alias _GroupingsReport st.zwave.CommandClass.MultiChannelAssociation.GroupingsReport
---
--- Dynamically versioned MULTI_CHANNEL_ASSOCIATION_GROUPINGS_REPORT
---
--- Supported versions: 1,2,3,4; unique base versions: 1
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1Args
local _GroupingsReport = {}
setmetatable(_GroupingsReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_CHANNEL_ASSOCIATION_GROUPINGS_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiChannelAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.MultiChannelAssociation.GroupingsReport
function _GroupingsReport:construct(module, args, ...)
  return zw.Command._construct(module, MultiChannelAssociation.GROUPINGS_REPORT, module._serialization_version, args, ...)
end

MultiChannelAssociation.SetV2 = SetV2
MultiChannelAssociation.ReportV2 = ReportV2
MultiChannelAssociation.RemoveV2 = RemoveV2
MultiChannelAssociation.Set = _Set
MultiChannelAssociation.Get = _Get
MultiChannelAssociation.Report = _Report
MultiChannelAssociation.Remove = _Remove
MultiChannelAssociation.GroupingsGet = _GroupingsGet
MultiChannelAssociation.GroupingsReport = _GroupingsReport

MultiChannelAssociation._lut = {
  [0] = { -- dynamically versioned constructors
    [MultiChannelAssociation.SET] = MultiChannelAssociation.Set,
    [MultiChannelAssociation.GET] = MultiChannelAssociation.Get,
    [MultiChannelAssociation.REPORT] = MultiChannelAssociation.Report,
    [MultiChannelAssociation.REMOVE] = MultiChannelAssociation.Remove,
    [MultiChannelAssociation.GROUPINGS_GET] = MultiChannelAssociation.GroupingsGet,
    [MultiChannelAssociation.GROUPINGS_REPORT] = MultiChannelAssociation.GroupingsReport
  },
  [2] = { -- version 2
    [MultiChannelAssociation.SET] = MultiChannelAssociation.SetV2,
    [MultiChannelAssociation.GET] = MultiChannelAssociation.GetV1,
    [MultiChannelAssociation.REPORT] = MultiChannelAssociation.ReportV2,
    [MultiChannelAssociation.REMOVE] = MultiChannelAssociation.RemoveV2,
    [MultiChannelAssociation.GROUPINGS_GET] = MultiChannelAssociation.GroupingsGetV1,
    [MultiChannelAssociation.GROUPINGS_REPORT] = MultiChannelAssociation.GroupingsReportV1
  },
  [3] = { -- version 3
    [MultiChannelAssociation.SET] = MultiChannelAssociation.SetV2,
    [MultiChannelAssociation.GET] = MultiChannelAssociation.GetV1,
    [MultiChannelAssociation.REPORT] = MultiChannelAssociation.ReportV2,
    [MultiChannelAssociation.REMOVE] = MultiChannelAssociation.RemoveV2,
    [MultiChannelAssociation.GROUPINGS_GET] = MultiChannelAssociation.GroupingsGetV1,
    [MultiChannelAssociation.GROUPINGS_REPORT] = MultiChannelAssociation.GroupingsReportV1
  },
  [4] = { -- version 4
    [MultiChannelAssociation.SET] = MultiChannelAssociation.SetV2,
    [MultiChannelAssociation.GET] = MultiChannelAssociation.GetV1,
    [MultiChannelAssociation.REPORT] = MultiChannelAssociation.ReportV2,
    [MultiChannelAssociation.REMOVE] = MultiChannelAssociation.RemoveV2,
    [MultiChannelAssociation.GROUPINGS_GET] = MultiChannelAssociation.GroupingsGetV1,
    [MultiChannelAssociation.GROUPINGS_REPORT] = MultiChannelAssociation.GroupingsReportV1
  }
}
-- inherit parentage
setmetatable(MultiChannelAssociation._lut, {
  __index = (require "st.zwave.CommandClass.MultiInstanceAssociation")._lut
})
setmetatable(MultiChannelAssociation._lut[0], {
  __index = (require "st.zwave.CommandClass.MultiInstanceAssociation")._lut[0]
})
MultiChannelAssociation.MARKER = 0x00
return MultiChannelAssociation
