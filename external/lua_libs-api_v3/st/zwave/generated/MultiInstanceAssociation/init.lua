-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.MultiInstanceAssociation
--- @alias MultiInstanceAssociation st.zwave.CommandClass.MultiInstanceAssociation
---
--- Supported versions: 1
---
--- @field public SET number 0x01 - MULTI_INSTANCE_ASSOCIATION_SET command id
--- @field public GET number 0x02 - MULTI_INSTANCE_ASSOCIATION_GET command id
--- @field public REPORT number 0x03 - MULTI_INSTANCE_ASSOCIATION_REPORT command id
--- @field public REMOVE number 0x04 - MULTI_INSTANCE_ASSOCIATION_REMOVE command id
--- @field public GROUPINGS_GET number 0x05 - MULTI_INSTANCE_ASSOCIATION_GROUPINGS_GET command id
--- @field public GROUPINGS_REPORT number 0x06 - MULTI_INSTANCE_ASSOCIATION_GROUPINGS_REPORT command id
--- @field public MARKER number 0x00
local MultiInstanceAssociation = {}
MultiInstanceAssociation.SET = 0x01
MultiInstanceAssociation.GET = 0x02
MultiInstanceAssociation.REPORT = 0x03
MultiInstanceAssociation.REMOVE = 0x04
MultiInstanceAssociation.GROUPINGS_GET = 0x05
MultiInstanceAssociation.GROUPINGS_REPORT = 0x06

MultiInstanceAssociation._commands = {
  [MultiInstanceAssociation.SET] = "SET",
  [MultiInstanceAssociation.GET] = "GET",
  [MultiInstanceAssociation.REPORT] = "REPORT",
  [MultiInstanceAssociation.REMOVE] = "REMOVE",
  [MultiInstanceAssociation.GROUPINGS_GET] = "GROUPINGS_GET",
  [MultiInstanceAssociation.GROUPINGS_REPORT] = "GROUPINGS_REPORT"
}

--- Instantiate a versioned instance of the MultiInstanceAssociation Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.MultiInstanceAssociation versioned command class instance
function MultiInstanceAssociation:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.MULTI_INSTANCE_ASSOCIATION][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(MultiInstanceAssociation, {
  __call = MultiInstanceAssociation.init
})

MultiInstanceAssociation._serialization_version = nil
MultiInstanceAssociation._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.MULTI_INSTANCE_ASSOCIATION] = {
  [1] = true
}

--- @class st.zwave.CommandClass.MultiInstanceAssociation.SetV1ArgsMultiChannelNodes
--- @alias SetV1ArgsMultiChannelNodes st.zwave.CommandClass.MultiInstanceAssociation.SetV1ArgsMultiChannelNodes
--- @field public multi_instance_node_id integer [0,255]
--- @field public instance integer [0,255]
local SetV1ArgsMultiChannelNodes = {}

--- @class st.zwave.CommandClass.MultiInstanceAssociation.SetV1Args
--- @alias SetV1Args st.zwave.CommandClass.MultiInstanceAssociation.SetV1Args
--- @field public grouping_identifier integer [0,255]
--- @field public node_ids integer[] [0,255]
--- @field public multi_channel_nodes st.zwave.CommandClass.MultiInstanceAssociation.SetV1ArgsMultiChannelNodes[]
local SetV1Args = {}

--- @class st.zwave.CommandClass.MultiInstanceAssociation.SetV1:st.zwave.Command
--- @alias SetV1 st.zwave.CommandClass.MultiInstanceAssociation.SetV1
---
--- v1 MULTI_INSTANCE_ASSOCIATION_SET
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.SetV1Args command-specific arguments
local SetV1 = {}
setmetatable(SetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 MULTI_INSTANCE_ASSOCIATION_SET object.
---
--- @param module st.zwave.CommandClass.MultiInstanceAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.SetV1Args command-specific arguments
function SetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_INSTANCE_ASSOCIATION, MultiInstanceAssociation.SET, 1, args, ...)
end

--- Serialize v1 MULTI_INSTANCE_ASSOCIATION_SET arguments.
---
--- @return string serialized payload
function SetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.grouping_identifier)
  for i=1,writer.length(args.node_ids) do
    writer:write_u8(args.node_ids[i])
  end
  writer:write_u8(MultiInstanceAssociation.MARKER)
  for i=1,writer.length(args.multi_channel_nodes) do
    writer:write_u8(args.multi_channel_nodes[i].multi_instance_node_id)
    writer:write_u8(args.multi_channel_nodes[i].instance)
  end
  return writer.buf
end

--- Deserialize a v1 MULTI_INSTANCE_ASSOCIATION_SET payload.
---
--- @return st.zwave.CommandClass.MultiInstanceAssociation.SetV1Args deserialized arguments
function SetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("grouping_identifier")
  reader.parsed.node_ids = {}
  while reader:remain() > 0 and reader:peek_u8() ~= MultiInstanceAssociation.MARKER do
    reader.parsed.node_ids[#reader.parsed.node_ids + 1] = reader:read_u8()
  end
  reader:seek(1)
  reader.parsed.multi_channel_nodes = {}
  while reader:remain() > 0 do
    local i = #reader.parsed.multi_channel_nodes + 1
    reader.parsed.multi_channel_nodes[i] = {}
    reader:read_u8("multi_instance_node_id", reader.parsed.multi_channel_nodes[i])
    reader:read_u8("instance", reader.parsed.multi_channel_nodes[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.SetV1
--- @return st.zwave.CommandClass.MultiInstanceAssociation.SetV1Args
function SetV1._defaults(self)
  local args = {}
  args.grouping_identifier = self.args.grouping_identifier or 0
  args.node_ids = self.args.node_ids or {}
  args.multi_channel_nodes = self.args.multi_channel_nodes or {}
  for i=1,buf.Writer.length(args.multi_channel_nodes) do
    args.multi_channel_nodes[i] = args.multi_channel_nodes[i] or {}
    args.multi_channel_nodes[i].multi_instance_node_id = self.args.multi_channel_nodes[i].multi_instance_node_id or 0
    args.multi_channel_nodes[i].instance = self.args.multi_channel_nodes[i].instance or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.SetV1
--- @return st.zwave.CommandClass.MultiInstanceAssociation.SetV1Args
function SetV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.multi_channel_nodes) do
    args.multi_channel_nodes[i] = args.multi_channel_nodes[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.SetV1
function SetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.SetV1
function SetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiInstanceAssociation.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.MultiInstanceAssociation.GetV1Args
--- @field public grouping_identifier integer [0,255]
local GetV1Args = {}

--- @class st.zwave.CommandClass.MultiInstanceAssociation.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.MultiInstanceAssociation.GetV1
---
--- v1 and forward-compatible v2,v3,v4 MULTI_INSTANCE_ASSOCIATION_GET
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3,v4 MULTI_INSTANCE_ASSOCIATION_GET object.
---
--- @param module st.zwave.CommandClass.MultiInstanceAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_INSTANCE_ASSOCIATION, MultiInstanceAssociation.GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3,v4 MULTI_INSTANCE_ASSOCIATION_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.grouping_identifier)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3,v4 MULTI_INSTANCE_ASSOCIATION_GET payload.
---
--- @return st.zwave.CommandClass.MultiInstanceAssociation.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("grouping_identifier")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.GetV1
--- @return st.zwave.CommandClass.MultiInstanceAssociation.GetV1Args
function GetV1._defaults(self)
  local args = {}
  args.grouping_identifier = self.args.grouping_identifier or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.GetV1
--- @return st.zwave.CommandClass.MultiInstanceAssociation.GetV1Args
function GetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiInstanceAssociation.ReportV1ArgsGroupingIdentifiers
--- @alias ReportV1ArgsGroupingIdentifiers st.zwave.CommandClass.MultiInstanceAssociation.ReportV1ArgsGroupingIdentifiers
--- @field public multi_instance_node_id integer [0,255]
--- @field public instance integer [0,255]
local ReportV1ArgsGroupingIdentifiers = {}

--- @class st.zwave.CommandClass.MultiInstanceAssociation.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.MultiInstanceAssociation.ReportV1Args
--- @field public max_nodes_supported integer [0,255]
--- @field public reports_to_follow integer [0,255]
--- @field public node_ids integer[] [0,255]
--- @field public grouping_identifiers st.zwave.CommandClass.MultiInstanceAssociation.ReportV1ArgsGroupingIdentifiers[]
local ReportV1Args = {}

--- @class st.zwave.CommandClass.MultiInstanceAssociation.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.MultiInstanceAssociation.ReportV1
---
--- v1 MULTI_INSTANCE_ASSOCIATION_REPORT
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 MULTI_INSTANCE_ASSOCIATION_REPORT object.
---
--- @param module st.zwave.CommandClass.MultiInstanceAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_INSTANCE_ASSOCIATION, MultiInstanceAssociation.REPORT, 1, args, ...)
end

--- Serialize v1 MULTI_INSTANCE_ASSOCIATION_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(writer.length(args.grouping_identifiers))
  writer:write_u8(args.max_nodes_supported)
  writer:write_u8(args.reports_to_follow)
  for i=1,writer.length(args.node_ids) do
    writer:write_u8(args.node_ids[i])
  end
  writer:write_u8(MultiInstanceAssociation.MARKER)
  for i=1,writer.length(args.grouping_identifiers) do
    writer:write_u8(args.grouping_identifiers[i].multi_instance_node_id)
    writer:write_u8(args.grouping_identifiers[i].instance)
  end
  return writer.buf
end

--- Deserialize a v1 MULTI_INSTANCE_ASSOCIATION_REPORT payload.
---
--- @return st.zwave.CommandClass.MultiInstanceAssociation.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("grouping_identifier")
  reader:read_u8("max_nodes_supported")
  reader:read_u8("reports_to_follow")
  reader.parsed.node_ids = {}
  while reader:remain() > 0 and reader:peek_u8() ~= MultiInstanceAssociation.MARKER do
    reader.parsed.node_ids[#reader.parsed.node_ids + 1] = reader:read_u8()
  end
  reader:seek(1)
  reader.parsed.grouping_identifiers = {}
  for i=1,reader.parsed.grouping_identifier do
    reader.parsed.grouping_identifiers[i] = {}
    reader:read_u8("multi_instance_node_id", reader.parsed.grouping_identifiers[i])
    reader:read_u8("instance", reader.parsed.grouping_identifiers[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.ReportV1
--- @return st.zwave.CommandClass.MultiInstanceAssociation.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.max_nodes_supported = self.args.max_nodes_supported or 0
  args.reports_to_follow = self.args.reports_to_follow or 0
  args.node_ids = self.args.node_ids or {}
  args.grouping_identifiers = self.args.grouping_identifiers or {}
  for i=1,buf.Writer.length(args.grouping_identifiers) do
    args.grouping_identifiers[i] = args.grouping_identifiers[i] or {}
    args.grouping_identifiers[i].multi_instance_node_id = self.args.grouping_identifiers[i].multi_instance_node_id or 0
    args.grouping_identifiers[i].instance = self.args.grouping_identifiers[i].instance or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.ReportV1
--- @return st.zwave.CommandClass.MultiInstanceAssociation.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.grouping_identifiers) do
    args.grouping_identifiers[i] = args.grouping_identifiers[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.ReportV1
function ReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1ArgsGroupingIdentifiers
--- @alias RemoveV1ArgsGroupingIdentifiers st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1ArgsGroupingIdentifiers
--- @field public multi_instance_node_id integer [0,255]
--- @field public instance integer [0,255]
local RemoveV1ArgsGroupingIdentifiers = {}

--- @class st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1Args
--- @alias RemoveV1Args st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1Args
--- @field public node_ids integer[] [0,255]
--- @field public grouping_identifiers st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1ArgsGroupingIdentifiers[]
local RemoveV1Args = {}

--- @class st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1:st.zwave.Command
--- @alias RemoveV1 st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1
---
--- v1 MULTI_INSTANCE_ASSOCIATION_REMOVE
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1Args command-specific arguments
local RemoveV1 = {}
setmetatable(RemoveV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 MULTI_INSTANCE_ASSOCIATION_REMOVE object.
---
--- @param module st.zwave.CommandClass.MultiInstanceAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1Args command-specific arguments
function RemoveV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_INSTANCE_ASSOCIATION, MultiInstanceAssociation.REMOVE, 1, args, ...)
end

--- Serialize v1 MULTI_INSTANCE_ASSOCIATION_REMOVE arguments.
---
--- @return string serialized payload
function RemoveV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(writer.length(args.grouping_identifiers))
  for i=1,writer.length(args.node_ids) do
    writer:write_u8(args.node_ids[i])
  end
  writer:write_u8(MultiInstanceAssociation.MARKER)
  for i=1,writer.length(args.grouping_identifiers) do
    writer:write_u8(args.grouping_identifiers[i].multi_instance_node_id)
    writer:write_u8(args.grouping_identifiers[i].instance)
  end
  return writer.buf
end

--- Deserialize a v1 MULTI_INSTANCE_ASSOCIATION_REMOVE payload.
---
--- @return st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1Args deserialized arguments
function RemoveV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("grouping_identifier")
  reader.parsed.node_ids = {}
  while reader:remain() > 0 and reader:peek_u8() ~= MultiInstanceAssociation.MARKER do
    reader.parsed.node_ids[#reader.parsed.node_ids + 1] = reader:read_u8()
  end
  reader:seek(1)
  reader.parsed.grouping_identifiers = {}
  for i=1,reader.parsed.grouping_identifier do
    reader.parsed.grouping_identifiers[i] = {}
    reader:read_u8("multi_instance_node_id", reader.parsed.grouping_identifiers[i])
    reader:read_u8("instance", reader.parsed.grouping_identifiers[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1
--- @return st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1Args
function RemoveV1._defaults(self)
  local args = {}
  args.node_ids = self.args.node_ids or {}
  args.grouping_identifiers = self.args.grouping_identifiers or {}
  for i=1,buf.Writer.length(args.grouping_identifiers) do
    args.grouping_identifiers[i] = args.grouping_identifiers[i] or {}
    args.grouping_identifiers[i].multi_instance_node_id = self.args.grouping_identifiers[i].multi_instance_node_id or 0
    args.grouping_identifiers[i].instance = self.args.grouping_identifiers[i].instance or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1
--- @return st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1Args
function RemoveV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.grouping_identifiers) do
    args.grouping_identifiers[i] = args.grouping_identifiers[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1
function RemoveV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1
function RemoveV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1Args
--- @alias GroupingsGetV1Args st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1Args
local GroupingsGetV1Args = {}

--- @class st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1:st.zwave.Command
--- @alias GroupingsGetV1 st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1
---
--- v1 and forward-compatible v2,v3,v4 MULTI_INSTANCE_ASSOCIATION_GROUPINGS_GET
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1Args command-specific arguments
local GroupingsGetV1 = {}
setmetatable(GroupingsGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3,v4 MULTI_INSTANCE_ASSOCIATION_GROUPINGS_GET object.
---
--- @param module st.zwave.CommandClass.MultiInstanceAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1Args command-specific arguments
function GroupingsGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_INSTANCE_ASSOCIATION, MultiInstanceAssociation.GROUPINGS_GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3,v4 MULTI_INSTANCE_ASSOCIATION_GROUPINGS_GET arguments.
---
--- @return string serialized payload
function GroupingsGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3,v4 MULTI_INSTANCE_ASSOCIATION_GROUPINGS_GET payload.
---
--- @return st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1Args deserialized arguments
function GroupingsGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1
--- @return st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1Args
function GroupingsGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1
--- @return st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1Args
function GroupingsGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1
function GroupingsGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1
function GroupingsGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1Args
--- @alias GroupingsReportV1Args st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1Args
--- @field public supported_groupings integer [0,255]
local GroupingsReportV1Args = {}

--- @class st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1:st.zwave.Command
--- @alias GroupingsReportV1 st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1
---
--- v1 and forward-compatible v2,v3,v4 MULTI_INSTANCE_ASSOCIATION_GROUPINGS_REPORT
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1Args command-specific arguments
local GroupingsReportV1 = {}
setmetatable(GroupingsReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3,v4 MULTI_INSTANCE_ASSOCIATION_GROUPINGS_REPORT object.
---
--- @param module st.zwave.CommandClass.MultiInstanceAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1Args command-specific arguments
function GroupingsReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.MULTI_INSTANCE_ASSOCIATION, MultiInstanceAssociation.GROUPINGS_REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3,v4 MULTI_INSTANCE_ASSOCIATION_GROUPINGS_REPORT arguments.
---
--- @return string serialized payload
function GroupingsReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.supported_groupings)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3,v4 MULTI_INSTANCE_ASSOCIATION_GROUPINGS_REPORT payload.
---
--- @return st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1Args deserialized arguments
function GroupingsReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("supported_groupings")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1
--- @return st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1Args
function GroupingsReportV1._defaults(self)
  local args = {}
  args.supported_groupings = self.args.supported_groupings or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1
--- @return st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1Args
function GroupingsReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1
function GroupingsReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1
function GroupingsReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.MultiInstanceAssociation.Set
--- @alias _Set st.zwave.CommandClass.MultiInstanceAssociation.Set
---
--- Dynamically versioned MULTI_INSTANCE_ASSOCIATION_SET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.SetV1Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_INSTANCE_ASSOCIATION_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiInstanceAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.SetV1Args command-specific arguments
--- @return st.zwave.CommandClass.MultiInstanceAssociation.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, MultiInstanceAssociation.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiInstanceAssociation.Get
--- @alias _Get st.zwave.CommandClass.MultiInstanceAssociation.Get
---
--- Dynamically versioned MULTI_INSTANCE_ASSOCIATION_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_INSTANCE_ASSOCIATION_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiInstanceAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.MultiInstanceAssociation.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, MultiInstanceAssociation.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiInstanceAssociation.Report
--- @alias _Report st.zwave.CommandClass.MultiInstanceAssociation.Report
---
--- Dynamically versioned MULTI_INSTANCE_ASSOCIATION_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.ReportV1Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_INSTANCE_ASSOCIATION_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiInstanceAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.ReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.MultiInstanceAssociation.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, MultiInstanceAssociation.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiInstanceAssociation.Remove
--- @alias _Remove st.zwave.CommandClass.MultiInstanceAssociation.Remove
---
--- Dynamically versioned MULTI_INSTANCE_ASSOCIATION_REMOVE
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1Args
local _Remove = {}
setmetatable(_Remove, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_INSTANCE_ASSOCIATION_REMOVE object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiInstanceAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.RemoveV1Args command-specific arguments
--- @return st.zwave.CommandClass.MultiInstanceAssociation.Remove
function _Remove:construct(module, args, ...)
  return zw.Command._construct(module, MultiInstanceAssociation.REMOVE, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGet
--- @alias _GroupingsGet st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGet
---
--- Dynamically versioned MULTI_INSTANCE_ASSOCIATION_GROUPINGS_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1Args
local _GroupingsGet = {}
setmetatable(_GroupingsGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_INSTANCE_ASSOCIATION_GROUPINGS_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiInstanceAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.MultiInstanceAssociation.GroupingsGet
function _GroupingsGet:construct(module, args, ...)
  return zw.Command._construct(module, MultiInstanceAssociation.GROUPINGS_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReport
--- @alias _GroupingsReport st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReport
---
--- Dynamically versioned MULTI_INSTANCE_ASSOCIATION_GROUPINGS_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x8E
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1Args
local _GroupingsReport = {}
setmetatable(_GroupingsReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MULTI_INSTANCE_ASSOCIATION_GROUPINGS_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.MultiInstanceAssociation command class module instance
--- @param args st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.MultiInstanceAssociation.GroupingsReport
function _GroupingsReport:construct(module, args, ...)
  return zw.Command._construct(module, MultiInstanceAssociation.GROUPINGS_REPORT, module._serialization_version, args, ...)
end

MultiInstanceAssociation.SetV1 = SetV1
MultiInstanceAssociation.GetV1 = GetV1
MultiInstanceAssociation.ReportV1 = ReportV1
MultiInstanceAssociation.RemoveV1 = RemoveV1
MultiInstanceAssociation.GroupingsGetV1 = GroupingsGetV1
MultiInstanceAssociation.GroupingsReportV1 = GroupingsReportV1
MultiInstanceAssociation.Set = _Set
MultiInstanceAssociation.Get = _Get
MultiInstanceAssociation.Report = _Report
MultiInstanceAssociation.Remove = _Remove
MultiInstanceAssociation.GroupingsGet = _GroupingsGet
MultiInstanceAssociation.GroupingsReport = _GroupingsReport

MultiInstanceAssociation._lut = {
  [0] = { -- dynamically versioned constructors
    [MultiInstanceAssociation.SET] = MultiInstanceAssociation.Set,
    [MultiInstanceAssociation.GET] = MultiInstanceAssociation.Get,
    [MultiInstanceAssociation.REPORT] = MultiInstanceAssociation.Report,
    [MultiInstanceAssociation.REMOVE] = MultiInstanceAssociation.Remove,
    [MultiInstanceAssociation.GROUPINGS_GET] = MultiInstanceAssociation.GroupingsGet,
    [MultiInstanceAssociation.GROUPINGS_REPORT] = MultiInstanceAssociation.GroupingsReport
  },
  [1] = { -- version 1
    [MultiInstanceAssociation.SET] = MultiInstanceAssociation.SetV1,
    [MultiInstanceAssociation.GET] = MultiInstanceAssociation.GetV1,
    [MultiInstanceAssociation.REPORT] = MultiInstanceAssociation.ReportV1,
    [MultiInstanceAssociation.REMOVE] = MultiInstanceAssociation.RemoveV1,
    [MultiInstanceAssociation.GROUPINGS_GET] = MultiInstanceAssociation.GroupingsGetV1,
    [MultiInstanceAssociation.GROUPINGS_REPORT] = MultiInstanceAssociation.GroupingsReportV1
  }
}
MultiInstanceAssociation.MARKER = 0x00
return MultiInstanceAssociation
