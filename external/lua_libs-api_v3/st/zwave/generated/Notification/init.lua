-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.Notification
--- @alias Notification st.zwave.CommandClass.Notification
---
--- Supported versions: 3,4,5,6,7,8,9
---
--- @field public EVENT_SUPPORTED_GET number 0x01 - EVENT_SUPPORTED_GET command id
--- @field public EVENT_SUPPORTED_REPORT number 0x02 - EVENT_SUPPORTED_REPORT command id
--- @field public GET number 0x04 - NOTIFICATION_GET command id
--- @field public REPORT number 0x05 - NOTIFICATION_REPORT command id
--- @field public SET number 0x06 - NOTIFICATION_SET command id
--- @field public SUPPORTED_GET number 0x07 - NOTIFICATION_SUPPORTED_GET command id
--- @field public SUPPORTED_REPORT number 0x08 - NOTIFICATION_SUPPORTED_REPORT command id
local Notification = {}
Notification.EVENT_SUPPORTED_GET = 0x01
Notification.EVENT_SUPPORTED_REPORT = 0x02
Notification.GET = 0x04
Notification.REPORT = 0x05
Notification.SET = 0x06
Notification.SUPPORTED_GET = 0x07
Notification.SUPPORTED_REPORT = 0x08

Notification._commands = {
  [Notification.EVENT_SUPPORTED_GET] = "EVENT_SUPPORTED_GET",
  [Notification.EVENT_SUPPORTED_REPORT] = "EVENT_SUPPORTED_REPORT",
  [Notification.GET] = "GET",
  [Notification.REPORT] = "REPORT",
  [Notification.SET] = "SET",
  [Notification.SUPPORTED_GET] = "SUPPORTED_GET",
  [Notification.SUPPORTED_REPORT] = "SUPPORTED_REPORT"
}
setmetatable(Notification._commands, {
  __index = (require "st.zwave.CommandClass.Alarm")._commands, -- inherit parentage
})

--- Instantiate a versioned instance of the Notification Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.Notification versioned command class instance
function Notification:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.NOTIFICATION][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(Notification, {
  __index = require "st.zwave.CommandClass.Alarm", -- inherit parentage
  __call = Notification.init
})

Notification._serialization_version = nil
Notification._strict = false
zw._versions[zw.NOTIFICATION][3] = true
zw._versions[zw.NOTIFICATION][4] = true
zw._versions[zw.NOTIFICATION][5] = true
zw._versions[zw.NOTIFICATION][6] = true
zw._versions[zw.NOTIFICATION][7] = true
zw._versions[zw.NOTIFICATION][8] = true
zw._versions[zw.NOTIFICATION][9] = true

--- @class st.zwave.CommandClass.Notification.EventSupportedGetV3Args
--- @alias EventSupportedGetV3Args st.zwave.CommandClass.Notification.EventSupportedGetV3Args
--- @field public notification_type integer see :lua:class:`Notification.notification_type <st.zwave.CommandClass.Notification.notification_type>`
local EventSupportedGetV3Args = {}

--- @class st.zwave.CommandClass.Notification.EventSupportedGetV3:st.zwave.Command
--- @alias EventSupportedGetV3 st.zwave.CommandClass.Notification.EventSupportedGetV3
---
--- v3 and forward-compatible v4,v5,v6,v7,v8,v9 EVENT_SUPPORTED_GET
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x01
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Notification.EventSupportedGetV3Args command-specific arguments
local EventSupportedGetV3 = {}
setmetatable(EventSupportedGetV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4,v5,v6,v7,v8,v9 EVENT_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.Notification command class module instance
--- @param args st.zwave.CommandClass.Notification.EventSupportedGetV3Args command-specific arguments
function EventSupportedGetV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.NOTIFICATION, Notification.EVENT_SUPPORTED_GET, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4,v5,v6,v7,v8,v9 EVENT_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function EventSupportedGetV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.notification_type)
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4,v5,v6,v7,v8,v9 EVENT_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.Notification.EventSupportedGetV3Args deserialized arguments
function EventSupportedGetV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("notification_type")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Notification.EventSupportedGetV3
--- @return st.zwave.CommandClass.Notification.EventSupportedGetV3Args
function EventSupportedGetV3._defaults(self)
  local args = {}
  args.notification_type = self.args.notification_type or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Notification.EventSupportedGetV3
--- @return st.zwave.CommandClass.Notification.EventSupportedGetV3Args
function EventSupportedGetV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Notification.EventSupportedGetV3
function EventSupportedGetV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Notification.EventSupportedGetV3
function EventSupportedGetV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.notification_type = function()
    return zw._reflect(
      Notification._reflect_notification_type,
      args.notification_type
    )
  end
end

--- @class st.zwave.CommandClass.Notification.EventSupportedReportV3Args
--- @alias EventSupportedReportV3Args st.zwave.CommandClass.Notification.EventSupportedReportV3Args
--- @field public notification_type integer see :lua:class:`Notification.notification_type <st.zwave.CommandClass.Notification.notification_type>`
--- @field public bit_mask string
local EventSupportedReportV3Args = {}

--- @class st.zwave.CommandClass.Notification.EventSupportedReportV3:st.zwave.Command
--- @alias EventSupportedReportV3 st.zwave.CommandClass.Notification.EventSupportedReportV3
---
--- v3 and forward-compatible v4,v5,v6,v7,v8,v9 EVENT_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x02
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Notification.EventSupportedReportV3Args command-specific arguments
local EventSupportedReportV3 = {}
setmetatable(EventSupportedReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4,v5,v6,v7,v8,v9 EVENT_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.Notification command class module instance
--- @param args st.zwave.CommandClass.Notification.EventSupportedReportV3Args command-specific arguments
function EventSupportedReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.NOTIFICATION, Notification.EVENT_SUPPORTED_REPORT, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4,v5,v6,v7,v8,v9 EVENT_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function EventSupportedReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.notification_type)
  writer:write_bits(5, writer.length(args.bit_mask))
  writer:write_bits(3, 0) -- reserved
  writer:write_bytes(args.bit_mask)
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4,v5,v6,v7,v8,v9 EVENT_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.Notification.EventSupportedReportV3Args deserialized arguments
function EventSupportedReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("notification_type")
  reader:read_bits(5, "number_of_bit_masks")
  reader:read_bits(3) -- reserved
  reader:read_bytes(reader.parsed.number_of_bit_masks, "bit_mask")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Notification.EventSupportedReportV3
--- @return st.zwave.CommandClass.Notification.EventSupportedReportV3Args
function EventSupportedReportV3._defaults(self)
  local args = {}
  args.notification_type = self.args.notification_type or 0
  args.bit_mask = self.args.bit_mask or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Notification.EventSupportedReportV3
--- @return st.zwave.CommandClass.Notification.EventSupportedReportV3Args
function EventSupportedReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Notification.EventSupportedReportV3
function EventSupportedReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Notification.EventSupportedReportV3
function EventSupportedReportV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.notification_type = function()
    return zw._reflect(
      Notification._reflect_notification_type,
      args.notification_type
    )
  end
end

--- @class st.zwave.CommandClass.Notification.GetV3Args
--- @alias GetV3Args st.zwave.CommandClass.Notification.GetV3Args
--- @field public v1_alarm_type integer [0,255]
--- @field public notification_type integer see :lua:class:`Notification.notification_type <st.zwave.CommandClass.Notification.notification_type>`
--- @field public event integer see :lua:class:`Notification.event <st.zwave.CommandClass.Notification.event>`
local GetV3Args = {}

--- @class st.zwave.CommandClass.Notification.GetV3:st.zwave.Command
--- @alias GetV3 st.zwave.CommandClass.Notification.GetV3
---
--- v3 and forward-compatible v4,v5,v6,v7,v8,v9 NOTIFICATION_GET
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x04
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Notification.GetV3Args command-specific arguments
local GetV3 = {}
setmetatable(GetV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4,v5,v6,v7,v8,v9 NOTIFICATION_GET object.
---
--- @param module st.zwave.CommandClass.Notification command class module instance
--- @param args st.zwave.CommandClass.Notification.GetV3Args command-specific arguments
function GetV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.NOTIFICATION, Notification.GET, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4,v5,v6,v7,v8,v9 NOTIFICATION_GET arguments.
---
--- @return string serialized payload
function GetV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.v1_alarm_type)
  writer:write_u8(args.notification_type)
  writer:write_u8(args.event)
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4,v5,v6,v7,v8,v9 NOTIFICATION_GET payload.
---
--- @return st.zwave.CommandClass.Notification.GetV3Args deserialized arguments
function GetV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("v1_alarm_type")
  reader:read_u8("notification_type")
  reader:read_u8("event")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Notification.GetV3
--- @return st.zwave.CommandClass.Notification.GetV3Args
function GetV3._defaults(self)
  local args = {}
  args.v1_alarm_type = self.args.v1_alarm_type or 0
  args.notification_type = self.args.notification_type or 0
  args.event = self.args.event or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Notification.GetV3
--- @return st.zwave.CommandClass.Notification.GetV3Args
function GetV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Notification.GetV3
function GetV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Notification.GetV3
function GetV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.notification_type = function()
    return zw._reflect(
      Notification._reflect_notification_type,
      args.notification_type
    )
  end
end

--- @class st.zwave.CommandClass.Notification.ReportV3Args
--- @alias ReportV3Args st.zwave.CommandClass.Notification.ReportV3Args
--- @field public v1_alarm_type integer [0,255]
--- @field public v1_alarm_level integer [0,255]
--- @field public notification_status integer see :lua:class:`Notification.notification_status <st.zwave.CommandClass.Notification.notification_status>`
--- @field public notification_type integer see :lua:class:`Notification.notification_type <st.zwave.CommandClass.Notification.notification_type>`
--- @field public event integer see :lua:class:`Notification.event <st.zwave.CommandClass.Notification.event>`
--- @field public event_parameter string
--- @field public sequence_number integer [0,255]
local ReportV3Args = {}

--- @class st.zwave.CommandClass.Notification.ReportV3:st.zwave.Command
--- @alias ReportV3 st.zwave.CommandClass.Notification.ReportV3
---
--- v3 and forward-compatible v4,v5,v6,v7,v8,v9 NOTIFICATION_REPORT
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x05
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Notification.ReportV3Args command-specific arguments
local ReportV3 = {}
setmetatable(ReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4,v5,v6,v7,v8,v9 NOTIFICATION_REPORT object.
---
--- @param module st.zwave.CommandClass.Notification command class module instance
--- @param args st.zwave.CommandClass.Notification.ReportV3Args command-specific arguments
function ReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.NOTIFICATION, Notification.REPORT, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4,v5,v6,v7,v8,v9 NOTIFICATION_REPORT arguments.
---
--- @return string serialized payload
function ReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.v1_alarm_type)
  writer:write_u8(args.v1_alarm_level)
  writer:write_u8(0) -- reserved
  writer:write_u8(args.notification_status)
  writer:write_u8(args.notification_type)
  writer:write_u8(args.event)
  writer:write_bits(5, writer.length(args.event_parameter))
  writer:write_bits(2, 0) -- reserved2
  writer:write_bool(args.sequence_number and true or false) -- sequence
  writer:write_bytes(args.event_parameter)
  if args.sequence_number then
    writer:write_u8(args.sequence_number)
  end
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4,v5,v6,v7,v8,v9 NOTIFICATION_REPORT payload.
---
--- @return st.zwave.CommandClass.Notification.ReportV3Args deserialized arguments
function ReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("v1_alarm_type")
  reader:read_u8("v1_alarm_level")
  reader:read_u8() -- reserved
  reader:read_u8("notification_status")
  reader:read_u8("notification_type")
  reader:read_u8("event")
  reader:read_bits(5, "event_parameters_length")
  reader:read_bits(2) -- reserved2
  reader:read_bool("sequence")
  reader:read_bytes(reader.parsed.event_parameters_length, "event_parameter")
  if reader.parsed.sequence then
    reader:read_u8("sequence_number")
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Notification.ReportV3
--- @return st.zwave.CommandClass.Notification.ReportV3Args
function ReportV3._defaults(self)
  local args = {}
  args.v1_alarm_type = self.args.v1_alarm_type or 0
  args.v1_alarm_level = self.args.v1_alarm_level or 0
  args.notification_status = self.args.notification_status or 0
  args.notification_type = self.args.notification_type or 0
  args.event = self.args.event or 0
  args.event_parameter = self.args.event_parameter or ""
  if self.args.sequence then
    args.sequence_number = self.args.sequence_number or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Notification.ReportV3
--- @return st.zwave.CommandClass.Notification.ReportV3Args
function ReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Notification.ReportV3
function ReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Notification.ReportV3
function ReportV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.notification_status = function()
    return zw._reflect(
      Notification._reflect_notification_status,
      args.notification_status
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.notification_type = function()
    return zw._reflect(
      Notification._reflect_notification_type,
      args.notification_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.event = function()
    return zw._reflect(
      Notification._reflect_event,
      args.notification_type,
      args.event
    )
  end
end

--- @class st.zwave.CommandClass.Notification.SetV3Args
--- @alias SetV3Args st.zwave.CommandClass.Notification.SetV3Args
--- @field public notification_type integer see :lua:class:`Notification.notification_type <st.zwave.CommandClass.Notification.notification_type>`
--- @field public notification_status integer see :lua:class:`Notification.notification_status <st.zwave.CommandClass.Notification.notification_status>`
local SetV3Args = {}

--- @class st.zwave.CommandClass.Notification.SetV3:st.zwave.Command
--- @alias SetV3 st.zwave.CommandClass.Notification.SetV3
---
--- v3 and forward-compatible v4,v5,v6,v7,v8,v9 NOTIFICATION_SET
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x06
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Notification.SetV3Args command-specific arguments
local SetV3 = {}
setmetatable(SetV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4,v5,v6,v7,v8,v9 NOTIFICATION_SET object.
---
--- @param module st.zwave.CommandClass.Notification command class module instance
--- @param args st.zwave.CommandClass.Notification.SetV3Args command-specific arguments
function SetV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.NOTIFICATION, Notification.SET, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4,v5,v6,v7,v8,v9 NOTIFICATION_SET arguments.
---
--- @return string serialized payload
function SetV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.notification_type)
  writer:write_u8(args.notification_status)
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4,v5,v6,v7,v8,v9 NOTIFICATION_SET payload.
---
--- @return st.zwave.CommandClass.Notification.SetV3Args deserialized arguments
function SetV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("notification_type")
  reader:read_u8("notification_status")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Notification.SetV3
--- @return st.zwave.CommandClass.Notification.SetV3Args
function SetV3._defaults(self)
  local args = {}
  args.notification_type = self.args.notification_type or 0
  args.notification_status = self.args.notification_status or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Notification.SetV3
--- @return st.zwave.CommandClass.Notification.SetV3Args
function SetV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Notification.SetV3
function SetV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Notification.SetV3
function SetV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.notification_type = function()
    return zw._reflect(
      Notification._reflect_notification_type,
      args.notification_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.notification_status = function()
    return zw._reflect(
      Notification._reflect_notification_status,
      args.notification_status
    )
  end
end

--- @class st.zwave.CommandClass.Notification.SupportedReportV4Args
--- @alias SupportedReportV4Args st.zwave.CommandClass.Notification.SupportedReportV4Args
--- @field public v1_alarm boolean
--- @field public smoke boolean
--- @field public co boolean
--- @field public co2 boolean
--- @field public heat boolean
--- @field public water boolean
--- @field public access_control boolean
--- @field public home_security boolean
--- @field public power_management boolean
--- @field public system boolean
--- @field public emergency boolean
--- @field public clock boolean
--- @field public appliance boolean
--- @field public home_health boolean
local SupportedReportV4Args = {}

--- @class st.zwave.CommandClass.Notification.SupportedReportV4:st.zwave.Command
--- @alias SupportedReportV4 st.zwave.CommandClass.Notification.SupportedReportV4
---
--- v4 and forward-compatible v5 NOTIFICATION_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x08
--- @field public version number 4
--- @field public args st.zwave.CommandClass.Notification.SupportedReportV4Args command-specific arguments
local SupportedReportV4 = {}
setmetatable(SupportedReportV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 and forward-compatible v5 NOTIFICATION_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.Notification command class module instance
--- @param args st.zwave.CommandClass.Notification.SupportedReportV4Args command-specific arguments
function SupportedReportV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.NOTIFICATION, Notification.SUPPORTED_REPORT, 4, args, ...)
end

--- Serialize v4 or forward-compatible v5 NOTIFICATION_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, 2)
  writer:write_bits(2, 0) -- reserved
  writer:write_bool(args.v1_alarm)
  writer:write_bool(false) -- reserved
  writer:write_bool(args.smoke)
  writer:write_bool(args.co)
  writer:write_bool(args.co2)
  writer:write_bool(args.heat)
  writer:write_bool(args.water)
  writer:write_bool(args.access_control)
  writer:write_bool(args.home_security)
  writer:write_bool(args.power_management)
  writer:write_bool(args.system)
  writer:write_bool(args.emergency)
  writer:write_bool(args.clock)
  writer:write_bool(args.appliance)
  writer:write_bool(args.home_health)
  return writer.buf
end

--- Deserialize a v4 or forward-compatible v5 NOTIFICATION_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.Notification.SupportedReportV4Args deserialized arguments
function SupportedReportV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "number_of_bit_masks")
  reader:read_bits(2) -- reserved
  reader:read_bool("v1_alarm")
  if reader.parsed.number_of_bit_masks > 0 then
    reader:read_bool() -- reserved
    reader:read_bool("smoke")
    reader:read_bool("co")
    reader:read_bool("co2")
    reader:read_bool("heat")
    reader:read_bool("water")
    reader:read_bool("access_control")
    reader:read_bool("home_security")
  end
  if reader.parsed.number_of_bit_masks > 1 then
    reader:read_bool("power_management")
    reader:read_bool("system")
    reader:read_bool("emergency")
    reader:read_bool("clock")
    reader:read_bool("appliance")
    reader:read_bool("home_health")
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Notification.SupportedReportV4
--- @return st.zwave.CommandClass.Notification.SupportedReportV4Args
function SupportedReportV4._defaults(self)
  local args = {}
  args.v1_alarm = self.args.v1_alarm or false
  args.smoke = self.args.smoke or false
  args.co = self.args.co or false
  args.co2 = self.args.co2 or false
  args.heat = self.args.heat or false
  args.water = self.args.water or false
  args.access_control = self.args.access_control or false
  args.home_security = self.args.home_security or false
  args.power_management = self.args.power_management or false
  args.system = self.args.system or false
  args.emergency = self.args.emergency or false
  args.clock = self.args.clock or false
  args.appliance = self.args.appliance or false
  args.home_health = self.args.home_health or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Notification.SupportedReportV4
--- @return st.zwave.CommandClass.Notification.SupportedReportV4Args
function SupportedReportV4._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Notification.SupportedReportV4
function SupportedReportV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Notification.SupportedReportV4
function SupportedReportV4._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Notification.SupportedReportV6Args
--- @alias SupportedReportV6Args st.zwave.CommandClass.Notification.SupportedReportV6Args
--- @field public v1_alarm boolean
--- @field public smoke boolean
--- @field public co boolean
--- @field public co2 boolean
--- @field public heat boolean
--- @field public water boolean
--- @field public access_control boolean
--- @field public home_security boolean
--- @field public power_management boolean
--- @field public system boolean
--- @field public emergency boolean
--- @field public clock boolean
--- @field public appliance boolean
--- @field public home_health boolean
--- @field public siren boolean
local SupportedReportV6Args = {}

--- @class st.zwave.CommandClass.Notification.SupportedReportV6:st.zwave.Command
--- @alias SupportedReportV6 st.zwave.CommandClass.Notification.SupportedReportV6
---
--- v6 NOTIFICATION_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x08
--- @field public version number 6
--- @field public args st.zwave.CommandClass.Notification.SupportedReportV6Args command-specific arguments
local SupportedReportV6 = {}
setmetatable(SupportedReportV6, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v6 NOTIFICATION_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.Notification command class module instance
--- @param args st.zwave.CommandClass.Notification.SupportedReportV6Args command-specific arguments
function SupportedReportV6:init(module, args, ...)
  zw.Command._parse(self, module, zw.NOTIFICATION, Notification.SUPPORTED_REPORT, 6, args, ...)
end

--- Serialize v6 NOTIFICATION_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV6:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, 2)
  writer:write_bits(2, 0) -- reserved
  writer:write_bool(args.v1_alarm)
  writer:write_bool(false) -- reserved
  writer:write_bool(args.smoke)
  writer:write_bool(args.co)
  writer:write_bool(args.co2)
  writer:write_bool(args.heat)
  writer:write_bool(args.water)
  writer:write_bool(args.access_control)
  writer:write_bool(args.home_security)
  writer:write_bool(args.power_management)
  writer:write_bool(args.system)
  writer:write_bool(args.emergency)
  writer:write_bool(args.clock)
  writer:write_bool(args.appliance)
  writer:write_bool(args.home_health)
  writer:write_bool(args.siren)
  return writer.buf
end

--- Deserialize a v6 NOTIFICATION_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.Notification.SupportedReportV6Args deserialized arguments
function SupportedReportV6:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "number_of_bit_masks")
  reader:read_bits(2) -- reserved
  reader:read_bool("v1_alarm")
  if reader.parsed.number_of_bit_masks > 0 then
    reader:read_bool() -- reserved
    reader:read_bool("smoke")
    reader:read_bool("co")
    reader:read_bool("co2")
    reader:read_bool("heat")
    reader:read_bool("water")
    reader:read_bool("access_control")
    reader:read_bool("home_security")
  end
  if reader.parsed.number_of_bit_masks > 1 then
    reader:read_bool("power_management")
    reader:read_bool("system")
    reader:read_bool("emergency")
    reader:read_bool("clock")
    reader:read_bool("appliance")
    reader:read_bool("home_health")
    reader:read_bool("siren")
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Notification.SupportedReportV6
--- @return st.zwave.CommandClass.Notification.SupportedReportV6Args
function SupportedReportV6._defaults(self)
  local args = {}
  args.v1_alarm = self.args.v1_alarm or false
  args.smoke = self.args.smoke or false
  args.co = self.args.co or false
  args.co2 = self.args.co2 or false
  args.heat = self.args.heat or false
  args.water = self.args.water or false
  args.access_control = self.args.access_control or false
  args.home_security = self.args.home_security or false
  args.power_management = self.args.power_management or false
  args.system = self.args.system or false
  args.emergency = self.args.emergency or false
  args.clock = self.args.clock or false
  args.appliance = self.args.appliance or false
  args.home_health = self.args.home_health or false
  args.siren = self.args.siren or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Notification.SupportedReportV6
--- @return st.zwave.CommandClass.Notification.SupportedReportV6Args
function SupportedReportV6._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Notification.SupportedReportV6
function SupportedReportV6._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Notification.SupportedReportV6
function SupportedReportV6._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Notification.SupportedReportV7Args
--- @alias SupportedReportV7Args st.zwave.CommandClass.Notification.SupportedReportV7Args
--- @field public v1_alarm boolean
--- @field public smoke boolean
--- @field public co boolean
--- @field public co2 boolean
--- @field public heat boolean
--- @field public water boolean
--- @field public access_control boolean
--- @field public home_security boolean
--- @field public power_management boolean
--- @field public system boolean
--- @field public emergency boolean
--- @field public clock boolean
--- @field public appliance boolean
--- @field public home_health boolean
--- @field public siren boolean
--- @field public water_valve boolean
--- @field public weather_alarm boolean
--- @field public irrigation boolean
--- @field public gas_alarm boolean
local SupportedReportV7Args = {}

--- @class st.zwave.CommandClass.Notification.SupportedReportV7:st.zwave.Command
--- @alias SupportedReportV7 st.zwave.CommandClass.Notification.SupportedReportV7
---
--- v7 NOTIFICATION_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x08
--- @field public version number 7
--- @field public args st.zwave.CommandClass.Notification.SupportedReportV7Args command-specific arguments
local SupportedReportV7 = {}
setmetatable(SupportedReportV7, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v7 NOTIFICATION_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.Notification command class module instance
--- @param args st.zwave.CommandClass.Notification.SupportedReportV7Args command-specific arguments
function SupportedReportV7:init(module, args, ...)
  zw.Command._parse(self, module, zw.NOTIFICATION, Notification.SUPPORTED_REPORT, 7, args, ...)
end

--- Serialize v7 NOTIFICATION_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV7:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, 3)
  writer:write_bits(2, 0) -- reserved
  writer:write_bool(args.v1_alarm)
  writer:write_bool(false) -- reserved
  writer:write_bool(args.smoke)
  writer:write_bool(args.co)
  writer:write_bool(args.co2)
  writer:write_bool(args.heat)
  writer:write_bool(args.water)
  writer:write_bool(args.access_control)
  writer:write_bool(args.home_security)
  writer:write_bool(args.power_management)
  writer:write_bool(args.system)
  writer:write_bool(args.emergency)
  writer:write_bool(args.clock)
  writer:write_bool(args.appliance)
  writer:write_bool(args.home_health)
  writer:write_bool(args.siren)
  writer:write_bool(args.water_valve)
  writer:write_bool(args.weather_alarm)
  writer:write_bool(args.irrigation)
  writer:write_bool(args.gas_alarm)
  return writer.buf
end

--- Deserialize a v7 NOTIFICATION_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.Notification.SupportedReportV7Args deserialized arguments
function SupportedReportV7:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "number_of_bit_masks")
  reader:read_bits(2) -- reserved
  reader:read_bool("v1_alarm")
  if reader.parsed.number_of_bit_masks > 0 then
    reader:read_bool() -- reserved
    reader:read_bool("smoke")
    reader:read_bool("co")
    reader:read_bool("co2")
    reader:read_bool("heat")
    reader:read_bool("water")
    reader:read_bool("access_control")
    reader:read_bool("home_security")
  end
  if reader.parsed.number_of_bit_masks > 1 then
    reader:read_bool("power_management")
    reader:read_bool("system")
    reader:read_bool("emergency")
    reader:read_bool("clock")
    reader:read_bool("appliance")
    reader:read_bool("home_health")
    reader:read_bool("siren")
    reader:read_bool("water_valve")
  end
  if reader.parsed.number_of_bit_masks > 2 then
    reader:read_bool("weather_alarm")
    reader:read_bool("irrigation")
    reader:read_bool("gas_alarm")
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Notification.SupportedReportV7
--- @return st.zwave.CommandClass.Notification.SupportedReportV7Args
function SupportedReportV7._defaults(self)
  local args = {}
  args.v1_alarm = self.args.v1_alarm or false
  args.smoke = self.args.smoke or false
  args.co = self.args.co or false
  args.co2 = self.args.co2 or false
  args.heat = self.args.heat or false
  args.water = self.args.water or false
  args.access_control = self.args.access_control or false
  args.home_security = self.args.home_security or false
  args.power_management = self.args.power_management or false
  args.system = self.args.system or false
  args.emergency = self.args.emergency or false
  args.clock = self.args.clock or false
  args.appliance = self.args.appliance or false
  args.home_health = self.args.home_health or false
  args.siren = self.args.siren or false
  args.water_valve = self.args.water_valve or false
  args.weather_alarm = self.args.weather_alarm or false
  args.irrigation = self.args.irrigation or false
  args.gas_alarm = self.args.gas_alarm or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Notification.SupportedReportV7
--- @return st.zwave.CommandClass.Notification.SupportedReportV7Args
function SupportedReportV7._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Notification.SupportedReportV7
function SupportedReportV7._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Notification.SupportedReportV7
function SupportedReportV7._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Notification.SupportedReportV8Args
--- @alias SupportedReportV8Args st.zwave.CommandClass.Notification.SupportedReportV8Args
--- @field public v1_alarm boolean
--- @field public smoke boolean
--- @field public co boolean
--- @field public co2 boolean
--- @field public heat boolean
--- @field public water boolean
--- @field public access_control boolean
--- @field public home_security boolean
--- @field public power_management boolean
--- @field public system boolean
--- @field public emergency boolean
--- @field public clock boolean
--- @field public appliance boolean
--- @field public home_health boolean
--- @field public siren boolean
--- @field public water_valve boolean
--- @field public weather_alarm boolean
--- @field public irrigation boolean
--- @field public gas_alarm boolean
--- @field public pest_control boolean
--- @field public light_sensor boolean
--- @field public water_quality_monitoring boolean
--- @field public home_monitoring boolean
local SupportedReportV8Args = {}

--- @class st.zwave.CommandClass.Notification.SupportedReportV8:st.zwave.Command
--- @alias SupportedReportV8 st.zwave.CommandClass.Notification.SupportedReportV8
---
--- v8 and forward-compatible v9 NOTIFICATION_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x08
--- @field public version number 8
--- @field public args st.zwave.CommandClass.Notification.SupportedReportV8Args command-specific arguments
local SupportedReportV8 = {}
setmetatable(SupportedReportV8, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v8 and forward-compatible v9 NOTIFICATION_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.Notification command class module instance
--- @param args st.zwave.CommandClass.Notification.SupportedReportV8Args command-specific arguments
function SupportedReportV8:init(module, args, ...)
  zw.Command._parse(self, module, zw.NOTIFICATION, Notification.SUPPORTED_REPORT, 8, args, ...)
end

--- Serialize v8 or forward-compatible v9 NOTIFICATION_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV8:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, 3)
  writer:write_bits(2, 0) -- reserved
  writer:write_bool(args.v1_alarm)
  writer:write_bool(false) -- reserved
  writer:write_bool(args.smoke)
  writer:write_bool(args.co)
  writer:write_bool(args.co2)
  writer:write_bool(args.heat)
  writer:write_bool(args.water)
  writer:write_bool(args.access_control)
  writer:write_bool(args.home_security)
  writer:write_bool(args.power_management)
  writer:write_bool(args.system)
  writer:write_bool(args.emergency)
  writer:write_bool(args.clock)
  writer:write_bool(args.appliance)
  writer:write_bool(args.home_health)
  writer:write_bool(args.siren)
  writer:write_bool(args.water_valve)
  writer:write_bool(args.weather_alarm)
  writer:write_bool(args.irrigation)
  writer:write_bool(args.gas_alarm)
  writer:write_bool(args.pest_control)
  writer:write_bool(args.light_sensor)
  writer:write_bool(args.water_quality_monitoring)
  writer:write_bool(args.home_monitoring)
  return writer.buf
end

--- Deserialize a v8 or forward-compatible v9 NOTIFICATION_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.Notification.SupportedReportV8Args deserialized arguments
function SupportedReportV8:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "number_of_bit_masks")
  reader:read_bits(2) -- reserved
  reader:read_bool("v1_alarm")
  if reader.parsed.number_of_bit_masks > 0 then
    reader:read_bool() -- reserved
    reader:read_bool("smoke")
    reader:read_bool("co")
    reader:read_bool("co2")
    reader:read_bool("heat")
    reader:read_bool("water")
    reader:read_bool("access_control")
    reader:read_bool("home_security")
  end
  if reader.parsed.number_of_bit_masks > 1 then
    reader:read_bool("power_management")
    reader:read_bool("system")
    reader:read_bool("emergency")
    reader:read_bool("clock")
    reader:read_bool("appliance")
    reader:read_bool("home_health")
    reader:read_bool("siren")
    reader:read_bool("water_valve")
  end
  if reader.parsed.number_of_bit_masks > 2 then
    reader:read_bool("weather_alarm")
    reader:read_bool("irrigation")
    reader:read_bool("gas_alarm")
    reader:read_bool("pest_control")
    reader:read_bool("light_sensor")
    reader:read_bool("water_quality_monitoring")
    reader:read_bool("home_monitoring")
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Notification.SupportedReportV8
--- @return st.zwave.CommandClass.Notification.SupportedReportV8Args
function SupportedReportV8._defaults(self)
  local args = {}
  args.v1_alarm = self.args.v1_alarm or false
  args.smoke = self.args.smoke or false
  args.co = self.args.co or false
  args.co2 = self.args.co2 or false
  args.heat = self.args.heat or false
  args.water = self.args.water or false
  args.access_control = self.args.access_control or false
  args.home_security = self.args.home_security or false
  args.power_management = self.args.power_management or false
  args.system = self.args.system or false
  args.emergency = self.args.emergency or false
  args.clock = self.args.clock or false
  args.appliance = self.args.appliance or false
  args.home_health = self.args.home_health or false
  args.siren = self.args.siren or false
  args.water_valve = self.args.water_valve or false
  args.weather_alarm = self.args.weather_alarm or false
  args.irrigation = self.args.irrigation or false
  args.gas_alarm = self.args.gas_alarm or false
  args.pest_control = self.args.pest_control or false
  args.light_sensor = self.args.light_sensor or false
  args.water_quality_monitoring = self.args.water_quality_monitoring or false
  args.home_monitoring = self.args.home_monitoring or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Notification.SupportedReportV8
--- @return st.zwave.CommandClass.Notification.SupportedReportV8Args
function SupportedReportV8._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Notification.SupportedReportV8
function SupportedReportV8._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Notification.SupportedReportV8
function SupportedReportV8._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Notification.EventSupportedGet
--- @alias _EventSupportedGet st.zwave.CommandClass.Notification.EventSupportedGet
---
--- Dynamically versioned EVENT_SUPPORTED_GET
---
--- Supported versions: 3,4,5,6,7,8,9; unique base versions: 3
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x01
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Notification.EventSupportedGetV3Args
local _EventSupportedGet = {}
setmetatable(_EventSupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an EVENT_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Notification command class module instance
--- @param args st.zwave.CommandClass.Notification.EventSupportedGetV3Args command-specific arguments
--- @return st.zwave.CommandClass.Notification.EventSupportedGet
function _EventSupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, Notification.EVENT_SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Notification.EventSupportedReport
--- @alias _EventSupportedReport st.zwave.CommandClass.Notification.EventSupportedReport
---
--- Dynamically versioned EVENT_SUPPORTED_REPORT
---
--- Supported versions: 3,4,5,6,7,8,9; unique base versions: 3
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x02
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Notification.EventSupportedReportV3Args
local _EventSupportedReport = {}
setmetatable(_EventSupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an EVENT_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Notification command class module instance
--- @param args st.zwave.CommandClass.Notification.EventSupportedReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.Notification.EventSupportedReport
function _EventSupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, Notification.EVENT_SUPPORTED_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Notification.Get
--- @alias _Get st.zwave.CommandClass.Notification.Get
---
--- Dynamically versioned NOTIFICATION_GET
---
--- Supported versions: 1,2,3,4,5,6,7,8,9; unique base versions: 1,2,3
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x04
--- @field public version number 1,2,3
--- @field public args st.zwave.CommandClass.Alarm.GetV1Args|st.zwave.CommandClass.Alarm.GetV2Args|st.zwave.CommandClass.Notification.GetV3Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a NOTIFICATION_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Notification command class module instance
--- @param args st.zwave.CommandClass.Alarm.GetV1Args|st.zwave.CommandClass.Alarm.GetV2Args|st.zwave.CommandClass.Notification.GetV3Args command-specific arguments
--- @return st.zwave.CommandClass.Notification.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, Notification.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Notification.Report
--- @alias _Report st.zwave.CommandClass.Notification.Report
---
--- Dynamically versioned NOTIFICATION_REPORT
---
--- Supported versions: 1,2,3,4,5,6,7,8,9; unique base versions: 1,2,3
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x05
--- @field public version number 1,2,3
--- @field public args st.zwave.CommandClass.Alarm.ReportV1Args|st.zwave.CommandClass.Alarm.ReportV2Args|st.zwave.CommandClass.Notification.ReportV3Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a NOTIFICATION_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Notification command class module instance
--- @param args st.zwave.CommandClass.Alarm.ReportV1Args|st.zwave.CommandClass.Alarm.ReportV2Args|st.zwave.CommandClass.Notification.ReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.Notification.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, Notification.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Notification.Set
--- @alias _Set st.zwave.CommandClass.Notification.Set
---
--- Dynamically versioned NOTIFICATION_SET
---
--- Supported versions: 2,3,4,5,6,7,8,9; unique base versions: 2,3
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x06
--- @field public version number 2,3
--- @field public args st.zwave.CommandClass.Alarm.SetV2Args|st.zwave.CommandClass.Notification.SetV3Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a NOTIFICATION_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Notification command class module instance
--- @param args st.zwave.CommandClass.Alarm.SetV2Args|st.zwave.CommandClass.Notification.SetV3Args command-specific arguments
--- @return st.zwave.CommandClass.Notification.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, Notification.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Notification.SupportedGet
--- @alias _SupportedGet st.zwave.CommandClass.Notification.SupportedGet
---
--- Dynamically versioned NOTIFICATION_SUPPORTED_GET
---
--- Supported versions: 2,3,4,5,6,7,8,9; unique base versions: 2
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x07
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Alarm.TypeSupportedGetV2Args
local _SupportedGet = {}
setmetatable(_SupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a NOTIFICATION_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Notification command class module instance
--- @param args st.zwave.CommandClass.Alarm.TypeSupportedGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Notification.SupportedGet
function _SupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, Notification.SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Notification.SupportedReport
--- @alias _SupportedReport st.zwave.CommandClass.Notification.SupportedReport
---
--- Dynamically versioned NOTIFICATION_SUPPORTED_REPORT
---
--- Supported versions: 2,3,4,5,6,7,8,9; unique base versions: 2,4,6,7,8
---
--- @field public cmd_class number 0x71
--- @field public cmd_id number 0x08
--- @field public version number 2,4,6,7,8
--- @field public args st.zwave.CommandClass.Alarm.TypeSupportedReportV2Args|st.zwave.CommandClass.Notification.SupportedReportV4Args|st.zwave.CommandClass.Notification.SupportedReportV6Args|st.zwave.CommandClass.Notification.SupportedReportV7Args|st.zwave.CommandClass.Notification.SupportedReportV8Args
local _SupportedReport = {}
setmetatable(_SupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a NOTIFICATION_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Notification command class module instance
--- @param args st.zwave.CommandClass.Alarm.TypeSupportedReportV2Args|st.zwave.CommandClass.Notification.SupportedReportV4Args|st.zwave.CommandClass.Notification.SupportedReportV6Args|st.zwave.CommandClass.Notification.SupportedReportV7Args|st.zwave.CommandClass.Notification.SupportedReportV8Args command-specific arguments
--- @return st.zwave.CommandClass.Notification.SupportedReport
function _SupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, Notification.SUPPORTED_REPORT, module._serialization_version, args, ...)
end

Notification.EventSupportedGetV3 = EventSupportedGetV3
Notification.EventSupportedReportV3 = EventSupportedReportV3
Notification.GetV3 = GetV3
Notification.ReportV3 = ReportV3
Notification.SetV3 = SetV3
Notification.SupportedReportV4 = SupportedReportV4
Notification.SupportedReportV6 = SupportedReportV6
Notification.SupportedReportV7 = SupportedReportV7
Notification.SupportedReportV8 = SupportedReportV8
Notification.EventSupportedGet = _EventSupportedGet
Notification.EventSupportedReport = _EventSupportedReport
Notification.Get = _Get
Notification.Report = _Report
Notification.Set = _Set
Notification.SupportedGet = _SupportedGet
Notification.SupportedReport = _SupportedReport

Notification._lut = {
  [0] = { -- dynamically versioned constructors
    [Notification.EVENT_SUPPORTED_GET] = Notification.EventSupportedGet,
    [Notification.EVENT_SUPPORTED_REPORT] = Notification.EventSupportedReport,
    [Notification.GET] = Notification.Get,
    [Notification.REPORT] = Notification.Report,
    [Notification.SET] = Notification.Set,
    [Notification.SUPPORTED_GET] = Notification.SupportedGet,
    [Notification.SUPPORTED_REPORT] = Notification.SupportedReport
  },
  [3] = { -- version 3
    [Notification.EVENT_SUPPORTED_GET] = Notification.EventSupportedGetV3,
    [Notification.EVENT_SUPPORTED_REPORT] = Notification.EventSupportedReportV3,
    [Notification.GET] = Notification.GetV3,
    [Notification.REPORT] = Notification.ReportV3,
    [Notification.SET] = Notification.SetV3,
    [Notification.SUPPORTED_GET] = Notification.TypeSupportedGetV2,
    [Notification.SUPPORTED_REPORT] = Notification.TypeSupportedReportV2
  },
  [4] = { -- version 4
    [Notification.EVENT_SUPPORTED_GET] = Notification.EventSupportedGetV3,
    [Notification.EVENT_SUPPORTED_REPORT] = Notification.EventSupportedReportV3,
    [Notification.GET] = Notification.GetV3,
    [Notification.REPORT] = Notification.ReportV3,
    [Notification.SET] = Notification.SetV3,
    [Notification.SUPPORTED_GET] = Notification.TypeSupportedGetV2,
    [Notification.SUPPORTED_REPORT] = Notification.SupportedReportV4
  },
  [5] = { -- version 5
    [Notification.EVENT_SUPPORTED_GET] = Notification.EventSupportedGetV3,
    [Notification.EVENT_SUPPORTED_REPORT] = Notification.EventSupportedReportV3,
    [Notification.GET] = Notification.GetV3,
    [Notification.REPORT] = Notification.ReportV3,
    [Notification.SET] = Notification.SetV3,
    [Notification.SUPPORTED_GET] = Notification.TypeSupportedGetV2,
    [Notification.SUPPORTED_REPORT] = Notification.SupportedReportV4
  },
  [6] = { -- version 6
    [Notification.EVENT_SUPPORTED_GET] = Notification.EventSupportedGetV3,
    [Notification.EVENT_SUPPORTED_REPORT] = Notification.EventSupportedReportV3,
    [Notification.GET] = Notification.GetV3,
    [Notification.REPORT] = Notification.ReportV3,
    [Notification.SET] = Notification.SetV3,
    [Notification.SUPPORTED_GET] = Notification.TypeSupportedGetV2,
    [Notification.SUPPORTED_REPORT] = Notification.SupportedReportV6
  },
  [7] = { -- version 7
    [Notification.EVENT_SUPPORTED_GET] = Notification.EventSupportedGetV3,
    [Notification.EVENT_SUPPORTED_REPORT] = Notification.EventSupportedReportV3,
    [Notification.GET] = Notification.GetV3,
    [Notification.REPORT] = Notification.ReportV3,
    [Notification.SET] = Notification.SetV3,
    [Notification.SUPPORTED_GET] = Notification.TypeSupportedGetV2,
    [Notification.SUPPORTED_REPORT] = Notification.SupportedReportV7
  },
  [8] = { -- version 8
    [Notification.EVENT_SUPPORTED_GET] = Notification.EventSupportedGetV3,
    [Notification.EVENT_SUPPORTED_REPORT] = Notification.EventSupportedReportV3,
    [Notification.GET] = Notification.GetV3,
    [Notification.REPORT] = Notification.ReportV3,
    [Notification.SET] = Notification.SetV3,
    [Notification.SUPPORTED_GET] = Notification.TypeSupportedGetV2,
    [Notification.SUPPORTED_REPORT] = Notification.SupportedReportV8
  },
  [9] = { -- version 9
    [Notification.EVENT_SUPPORTED_GET] = Notification.EventSupportedGetV3,
    [Notification.EVENT_SUPPORTED_REPORT] = Notification.EventSupportedReportV3,
    [Notification.GET] = Notification.GetV3,
    [Notification.REPORT] = Notification.ReportV3,
    [Notification.SET] = Notification.SetV3,
    [Notification.SUPPORTED_GET] = Notification.TypeSupportedGetV2,
    [Notification.SUPPORTED_REPORT] = Notification.SupportedReportV8
  }
}
-- inherit parentage
setmetatable(Notification._lut, {
  __index = (require "st.zwave.CommandClass.Alarm")._lut
})
setmetatable(Notification._lut[0], {
  __index = (require "st.zwave.CommandClass.Alarm")._lut[0]
})
--- @class st.zwave.CommandClass.Notification.notification_status
--- @alias notification_status st.zwave.CommandClass.Notification.notification_status
--- @field public OFF number 0x00
--- @field public NO_PENDING_NOTIFICATIONS number 0xFE
--- @field public ON number 0xFF
local notification_status = {
  OFF = 0x00,
  NO_PENDING_NOTIFICATIONS = 0xFE,
  ON = 0xFF
}
Notification.notification_status = notification_status
Notification._reflect_notification_status = zw._reflection_builder(Notification.notification_status)

--- @class st.zwave.CommandClass.Notification.notification_type
--- @alias notification_type st.zwave.CommandClass.Notification.notification_type
--- @field public SMOKE number 0x01
--- @field public CO number 0x02
--- @field public CO2 number 0x03
--- @field public HEAT number 0x04
--- @field public WATER number 0x05
--- @field public ACCESS_CONTROL number 0x06
--- @field public HOME_SECURITY number 0x07
--- @field public POWER_MANAGEMENT number 0x08
--- @field public SYSTEM number 0x09
--- @field public EMERGENCY number 0x0A
--- @field public CLOCK number 0x0B
--- @field public APPLIANCE number 0x0C
--- @field public HOME_HEALTH number 0x0D
--- @field public SIREN number 0x0E
--- @field public WATER_VALVE number 0x0F
--- @field public WEATHER_ALARM number 0x10
--- @field public IRRIGATION number 0x11
--- @field public GAS_ALARM number 0x12
--- @field public PEST_CONTROL number 0x13
--- @field public LIGHT_SENSOR number 0x14
--- @field public WATER_QUALITY_MONITORING number 0x15
--- @field public HOME_MONITORING number 0x16
--- @field public FIRST number 0xFF
local notification_type = {
  SMOKE = 0x01,
  CO = 0x02,
  CO2 = 0x03,
  HEAT = 0x04,
  WATER = 0x05,
  ACCESS_CONTROL = 0x06,
  HOME_SECURITY = 0x07,
  POWER_MANAGEMENT = 0x08,
  SYSTEM = 0x09,
  EMERGENCY = 0x0A,
  CLOCK = 0x0B,
  APPLIANCE = 0x0C,
  HOME_HEALTH = 0x0D,
  SIREN = 0x0E,
  WATER_VALVE = 0x0F,
  WEATHER_ALARM = 0x10,
  IRRIGATION = 0x11,
  GAS_ALARM = 0x12,
  PEST_CONTROL = 0x13,
  LIGHT_SENSOR = 0x14,
  WATER_QUALITY_MONITORING = 0x15,
  HOME_MONITORING = 0x16,
  FIRST = 0xFF
}
Notification.notification_type = notification_type
Notification._reflect_notification_type = zw._reflection_builder(Notification.notification_type)

--- @class st.zwave.CommandClass.Notification.event_access_control
--- @alias event_access_control st.zwave.CommandClass.Notification.event_access_control
--- @field public STATE_IDLE number 0x00
--- @field public MANUAL_LOCK_OPERATION number 0x01
--- @field public MANUAL_UNLOCK_OPERATION number 0x02
--- @field public RF_LOCK_OPERATION number 0x03
--- @field public RF_UNLOCK_OPERATION number 0x04
--- @field public KEYPAD_LOCK_OPERATION number 0x05
--- @field public KEYPAD_UNLOCK_OPERATION number 0x06
--- @field public MANUAL_NOT_FULLY_LOCKED_OPERATION number 0x07
--- @field public RF_NOT_FULLY_LOCKED_OPERATION number 0x08
--- @field public AUTO_LOCK_LOCKED_OPERATION number 0x09
--- @field public AUTO_LOCK_NOT_FULLY_LOCKED_OPERATION number 0x0A
--- @field public LOCK_JAMMED number 0x0B
--- @field public ALL_USER_CODES_DELETED number 0x0C
--- @field public SINGLE_USER_CODE_DELETED number 0x0D
--- @field public NEW_USER_CODE_ADDED number 0x0E
--- @field public NEW_USER_CODE_NOT_ADDED_DUE_TO_DUPLICATE_CODE number 0x0F
--- @field public KEYPAD_TEMPORARY_DISABLED number 0x10
--- @field public KEYPAD_BUSY number 0x11
--- @field public NEW_PROGRAM_CODE_ENTERED_UNIQUE_CODE_FOR_LOCK_CONFIGURATION number 0x12
--- @field public MANUALLY_ENTER_USER_ACCESS_CODE_EXCEEDS_CODE_LIMIT number 0x13
--- @field public UNLOCK_BY_RF_WITH_INVALID_USER_CODE number 0x14
--- @field public LOCKED_BY_RF_WITH_INVALID_USER_CODE number 0x15
--- @field public WINDOW_DOOR_IS_OPEN number 0x16
--- @field public WINDOW_DOOR_IS_CLOSED number 0x17
--- @field public WINDOW_DOOR_HANDLE_IS_OPEN number 0x18
--- @field public WINDOW_DOOR_HANDLE_IS_CLOSED number 0x19
--- @field public MESSAGING_USER_CODE_ENTERED_VIA_KEYPAD number 0x20
--- @field public BARRIER_PERFORMING_INITIALIZATION_PROCESS number 0x40
--- @field public BARRIER_OPERATION_OPEN_CLOSE_FORCE_HAS_BEEN_EXCEEDED number 0x41
--- @field public BARRIER_MOTOR_HAS_EXCEEDED_MANUFACTURERS_OPERATIONAL_TIME_LIMIT number 0x42
--- @field public BARRIER_OPERATION_HAS_EXCEEDED_PHYSICAL_MECHANICAL_LIMITS number 0x43
--- @field public BARRIER_UNABLE_TO_PERFORM_REQUESTED_OPERATION_DUE_TO_UL_REQUIREMENTS number 0x44
--- @field public BARRIER_UNATTENDED_OPERATION_HAS_BEEN_DISABLED_PER_UL_REQUIREMENTS number 0x45
--- @field public BARRIER_FAILED_TO_PERFORM_REQUESTED_OPERATION_DEVICE_MALFUNCTION number 0x46
--- @field public BARRIER_VACATION_MODE number 0x47
--- @field public BARRIER_SAFETY_BEAM_OBSTACLE number 0x48
--- @field public BARRIER_SENSOR_NOT_DETECTED_SUPERVISORY_ERROR number 0x49
--- @field public BARRIER_SENSOR_LOW_BATTERY_WARNING number 0x4A
--- @field public BARRIER_DETECTED_SHORT_IN_WALL_STATION_WIRES number 0x4B
--- @field public BARRIER_ASSOCIATED_WITH_NON_Z_WAVE_REMOTE_CONTROL number 0x4C
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_access_control = {}

--- @class st.zwave.CommandClass.Notification.event_appliance
--- @alias event_appliance st.zwave.CommandClass.Notification.event_appliance
--- @field public STATE_IDLE number 0x00
--- @field public PROGRAM_STARTED number 0x01
--- @field public PROGRAM_IN_PROGRESS number 0x02
--- @field public PROGRAM_COMPLETED number 0x03
--- @field public REPLACE_MAIN_FILTER number 0x04
--- @field public FAILURE_TO_SET_TARGET_TEMPERATURE number 0x05
--- @field public SUPPLYING_WATER number 0x06
--- @field public WATER_SUPPLY_FAILURE number 0x07
--- @field public BOILING number 0x08
--- @field public BOILING_FAILURE number 0x09
--- @field public WASHING number 0x0A
--- @field public WASHING_FAILURE number 0x0B
--- @field public RINSING number 0x0C
--- @field public RINSING_FAILURE number 0x0D
--- @field public DRAINING number 0x0E
--- @field public DRAINING_FAILURE number 0x0F
--- @field public SPINNING number 0x10
--- @field public SPINNING_FAILURE number 0x11
--- @field public DRYING number 0x12
--- @field public DRYING_FAILURE number 0x13
--- @field public FAN_FAILURE number 0x14
--- @field public COMPRESSOR_FAILURE number 0x15
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_appliance = {}

--- @class st.zwave.CommandClass.Notification.event_clock
--- @alias event_clock st.zwave.CommandClass.Notification.event_clock
--- @field public STATE_IDLE number 0x00
--- @field public WAKE_UP_ALERT number 0x01
--- @field public TIMER_ENDED number 0x02
--- @field public TIME_REMAINING number 0x03
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_clock = {}

--- @class st.zwave.CommandClass.Notification.event_co
--- @alias event_co st.zwave.CommandClass.Notification.event_co
--- @field public STATE_IDLE number 0x00
--- @field public CARBON_MONOXIDE_DETECTED_LOCATION_PROVIDED number 0x01
--- @field public CARBON_MONOXIDE_DETECTED number 0x02
--- @field public CARBON_MONOXIDE_TEST number 0x03
--- @field public REPLACEMENT_REQUIRED number 0x04
--- @field public REPLACEMENT_REQUIRED_END_OF_LIFE number 0x05
--- @field public ALARM_SILENCED number 0x06
--- @field public MAINTENANCE_REQUIRED_PLANNED_PERIODIC_INSPECTION number 0x07
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_co = {}

--- @class st.zwave.CommandClass.Notification.event_co2
--- @alias event_co2 st.zwave.CommandClass.Notification.event_co2
--- @field public STATE_IDLE number 0x00
--- @field public CARBON_DIOXIDE_DETECTED_LOCATION_PROVIDED number 0x01
--- @field public CARBON_DIOXIDE_DETECTED number 0x02
--- @field public CARBON_DIOXIDE_TEST number 0x03
--- @field public REPLACEMENT_REQUIRED number 0x04
--- @field public REPLACEMENT_REQUIRED_END_OF_LIFE number 0x05
--- @field public ALARM_SILENCED number 0x06
--- @field public MAINTENANCE_REQUIRED_PLANNED_PERIODIC_INSPECTION number 0x07
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_co2 = {}

--- @class st.zwave.CommandClass.Notification.event_emergency
--- @alias event_emergency st.zwave.CommandClass.Notification.event_emergency
--- @field public STATE_IDLE number 0x00
--- @field public CONTACT_POLICE number 0x01
--- @field public CONTACT_FIRE_SERVICE number 0x02
--- @field public CONTACT_MEDICAL_SERVICE number 0x03
--- @field public PANIC_ALERT number 0x04
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_emergency = {}

--- @class st.zwave.CommandClass.Notification.event_gas_alarm
--- @alias event_gas_alarm st.zwave.CommandClass.Notification.event_gas_alarm
--- @field public STATE_IDLE number 0x00
--- @field public COMBUSTIBLE_GAS_DETECTED_LOCATION_PROVIDED number 0x01
--- @field public COMBUSTIBLE_GAS_DETECTED number 0x02
--- @field public TOXIC_GAS_DETECTED_LOCATION_PROVIDED number 0x03
--- @field public TOXIC_GAS_DETECTED number 0x04
--- @field public TEST number 0x05
--- @field public REPLACEMENT_REQUIRED number 0x06
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_gas_alarm = {}

--- @class st.zwave.CommandClass.Notification.event_heat
--- @alias event_heat st.zwave.CommandClass.Notification.event_heat
--- @field public STATE_IDLE number 0x00
--- @field public OVERDETECTED_LOCATION_PROVIDED number 0x01
--- @field public OVERDETECTED number 0x02
--- @field public RAPID_TEMPERATURE_RISE_LOCATION_PROVIDED number 0x03
--- @field public RAPID_TEMPERATURE_RISE number 0x04
--- @field public UNDER_DETECTED_LOCATION_PROVIDED number 0x05
--- @field public UNDER_DETECTED number 0x06
--- @field public ALARM_TEST number 0x07
--- @field public REPLACEMENT_REQUIRED_END_OF_LIFE number 0x08
--- @field public ALARM_SILENCED number 0x09
--- @field public MAINTENANCE_REQUIRED_DUST_IN_DEVICE number 0x0A
--- @field public MAINTENANCE_REQUIRED_PLANNED_PERIODIC_INSPECTION number 0x0B
--- @field public RAPID_TEMPERATURE_FALL_LOCATION_PROVIDED number 0x0C
--- @field public RAPID_TEMPERATURE_FALL number 0x0D
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_heat = {}

--- @class st.zwave.CommandClass.Notification.event_home_health
--- @alias event_home_health st.zwave.CommandClass.Notification.event_home_health
--- @field public STATE_IDLE number 0x00
--- @field public LEAVING_BED number 0x01
--- @field public SITTING_ON_BED number 0x02
--- @field public LYING_ON_BED number 0x03
--- @field public POSTURE_CHANGED number 0x04
--- @field public SITTING_ON_BED_EDGE number 0x05
--- @field public VOLATILE_ORGANIC_COMPOUND_LEVEL number 0x06
--- @field public SLEEP_APNEA_DETECTED number 0x07
--- @field public SLEEP_STAGE_0_DETECTED_DREAMING_REM number 0x08
--- @field public SLEEP_STAGE_1_DETECTED_LIGHT_SLEEP_NON_REM_1 number 0x09
--- @field public SLEEP_STAGE_2_DETECTED_MEDIUM_SLEEP_NON_REM_2 number 0x0A
--- @field public SLEEP_STAGE_3_DETECTED_DEEP_SLEEP_NON_REM_3 number 0x0B
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_home_health = {}

--- @class st.zwave.CommandClass.Notification.event_home_monitoring
--- @alias event_home_monitoring st.zwave.CommandClass.Notification.event_home_monitoring
--- @field public STATE_IDLE number 0x00
--- @field public HOME_OCCUPIED_LOCATION_PROVIDED number 0x01
--- @field public HOME_OCCUPIED number 0x02
local event_home_monitoring = {}

--- @class st.zwave.CommandClass.Notification.event_home_security
--- @alias event_home_security st.zwave.CommandClass.Notification.event_home_security
--- @field public STATE_IDLE number 0x00
--- @field public INTRUSION_LOCATION_PROVIDED number 0x01
--- @field public INTRUSION number 0x02
--- @field public TAMPERING_PRODUCT_COVER_REMOVED number 0x03
--- @field public TAMPERING_INVALID_CODE number 0x04
--- @field public GLASS_BREAKAGE_LOCATION_PROVIDED number 0x05
--- @field public GLASS_BREAKAGE number 0x06
--- @field public MOTION_DETECTION_LOCATION_PROVIDED number 0x07
--- @field public MOTION_DETECTION number 0x08
--- @field public TAMPERING_PRODUCT_MOVED number 0x09
--- @field public IMPACT_DETECTED number 0x0A
--- @field public MAGNETIC_FIELD_INTERFERENCE_DETECTED number 0x0B
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_home_security = {}

--- @class st.zwave.CommandClass.Notification.event_irrigation
--- @alias event_irrigation st.zwave.CommandClass.Notification.event_irrigation
--- @field public STATE_IDLE number 0x00
--- @field public SCHEDULE_STARTED number 0x01
--- @field public SCHEDULE_FINISHED number 0x02
--- @field public VALVE_TABLE_RUN_STARTED number 0x03
--- @field public VALVE_TABLE_RUN_FINISHED number 0x04
--- @field public DEVICE_IS_NOT_CONFIGURED number 0x05
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_irrigation = {}

--- @class st.zwave.CommandClass.Notification.event_light_sensor
--- @alias event_light_sensor st.zwave.CommandClass.Notification.event_light_sensor
--- @field public STATE_IDLE number 0x00
--- @field public LIGHT_DETECTED number 0x01
--- @field public LIGHT_COLOR_TRANSITION_DETECTED number 0x02
local event_light_sensor = {}

--- @class st.zwave.CommandClass.Notification.event_pest_control
--- @alias event_pest_control st.zwave.CommandClass.Notification.event_pest_control
--- @field public STATE_IDLE number 0x00
--- @field public TRAP_ARMED_LOCATION_PROVIDED number 0x01
--- @field public TRAP_ARMED number 0x02
--- @field public TRAP_RE_ARM_REQUIRED_LOCATION_PROVIDED number 0x03
--- @field public TRAP_RE_ARM_REQUIRED number 0x04
--- @field public PEST_DETECTED_LOCATION_PROVIDED number 0x05
--- @field public PEST_DETECTED number 0x06
--- @field public PEST_EXTERMINATED_LOCATION_PROVIDED number 0x07
--- @field public PEST_EXTERMINATED number 0x08
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_pest_control = {}

--- @class st.zwave.CommandClass.Notification.event_power_management
--- @alias event_power_management st.zwave.CommandClass.Notification.event_power_management
--- @field public STATE_IDLE number 0x00
--- @field public POWER_HAS_BEEN_APPLIED number 0x01
--- @field public AC_MAINS_DISCONNECTED number 0x02
--- @field public AC_MAINS_RE_CONNECTED number 0x03
--- @field public SURGE_DETECTED number 0x04
--- @field public VOLTAGE_DROP_DRIFT number 0x05
--- @field public OVER_CURRENT_DETECTED number 0x06
--- @field public OVER_VOLTAGE_DETECTED number 0x07
--- @field public OVER_LOAD_DETECTED number 0x08
--- @field public LOAD_ERROR number 0x09
--- @field public REPLACE_BATTERY_SOON number 0x0A
--- @field public REPLACE_BATTERY_NOW number 0x0B
--- @field public BATTERY_IS_CHARGING number 0x0C
--- @field public BATTERY_IS_FULLY_CHARGED number 0x0D
--- @field public CHARGE_BATTERY_SOON number 0x0E
--- @field public CHARGE_BATTERY_NOW number 0x0F
--- @field public BACK_UP_BATTERY_IS_LOW number 0x10
--- @field public BATTERY_FLUID_IS_LOW number 0x11
--- @field public BACK_UP_BATTERY_DISCONNECTED number 0x12
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_power_management = {}

--- @class st.zwave.CommandClass.Notification.event_siren
--- @alias event_siren st.zwave.CommandClass.Notification.event_siren
--- @field public STATE_IDLE number 0x00
--- @field public ACTIVE number 0x01
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_siren = {}

--- @class st.zwave.CommandClass.Notification.event_smoke
--- @alias event_smoke st.zwave.CommandClass.Notification.event_smoke
--- @field public STATE_IDLE number 0x00
--- @field public DETECTED_LOCATION_PROVIDED number 0x01
--- @field public DETECTED number 0x02
--- @field public ALARM_TEST number 0x03
--- @field public REPLACEMENT_REQUIRED number 0x04
--- @field public REPLACEMENT_REQUIRED_END_OF_LIFE number 0x05
--- @field public ALARM_SILENCED number 0x06
--- @field public MAINTENANCE_REQUIRED_PLANNED_PERIODIC_INSPECTION number 0x07
--- @field public MAINTENANCE_REQUIRED_DUST_IN_DEVICE number 0x08
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_smoke = {}

--- @class st.zwave.CommandClass.Notification.event_system
--- @alias event_system st.zwave.CommandClass.Notification.event_system
--- @field public STATE_IDLE number 0x00
--- @field public HARDWARE_FAILURE number 0x01
--- @field public SOFTWARE_FAILURE number 0x02
--- @field public HARDWARE_FAILURE_MANUFACTURER_PROPRIETARY_FAILURE_CODE_PROVIDED number 0x03
--- @field public SOFTWARE_FAILURE_MANUFACTURER_PROPRIETARY_FAILURE_CODE_PROVIDED number 0x04
--- @field public HEARTBEAT number 0x05
--- @field public TAMPERING_PRODUCT_COVER_REMOVED number 0x06
--- @field public EMERGENCY_SHUTOFF number 0x07
--- @field public DIGITAL_INPUT_HIGH_STATE number 0x09
--- @field public DIGITAL_INPUT_LOW_STATE number 0x0A
--- @field public DIGITAL_INPUT_OPEN number 0x0B
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_system = {}

--- @class st.zwave.CommandClass.Notification.event_water
--- @alias event_water st.zwave.CommandClass.Notification.event_water
--- @field public STATE_IDLE number 0x00
--- @field public LEAK_DETECTED_LOCATION_PROVIDED number 0x01
--- @field public LEAK_DETECTED number 0x02
--- @field public LEVEL_DROPPED_LOCATION_PROVIDED number 0x03
--- @field public LEVEL_DROPPED number 0x04
--- @field public REPLACE_FILTER number 0x05
--- @field public FLOW_ALARM number 0x06
--- @field public PRESSURE_ALARM number 0x07
--- @field public TEMPERATURE_ALARM number 0x08
--- @field public LEVEL_ALARM number 0x09
--- @field public SUMP_PUMP_ACTIVE number 0x0A
--- @field public SUMP_PUMP_FAILURE number 0x0B
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_water = {}

--- @class st.zwave.CommandClass.Notification.event_water_quality_monitoring
--- @alias event_water_quality_monitoring st.zwave.CommandClass.Notification.event_water_quality_monitoring
--- @field public STATE_IDLE number 0x00
--- @field public CHLORINE_ALARM number 0x01
--- @field public ACIDITY_PH_ALARM number 0x02
--- @field public WATER_OXIDATION_ALARM number 0x03
--- @field public CHLORINE_EMPTY number 0x04
--- @field public ACIDITY_PH_EMPTY number 0x05
--- @field public WATERFLOW_MEASURING_STATION_SHORTAGE_DETECTED number 0x06
--- @field public WATERFLOW_CLEAR_WATER_SHORTAGE_DETECTED number 0x07
--- @field public DISINFECTION_SYSTEM_ERROR_DETECTED number 0x08
--- @field public FILTER_CLEANING_ONGOING number 0x09
--- @field public HEATING_OPERATION_ONGOING number 0x0A
--- @field public FILTER_PUMP_OPERATION_ONGOING number 0x0B
--- @field public FRESHWATER_OPERATION_ONGOING number 0x0C
--- @field public DRY_PROTECTION_OPERATION_ACTIVE number 0x0D
--- @field public WATER_TANK_IS_EMPTY number 0x0E
--- @field public WATER_TANK_LEVEL_IS_UNKNOWN number 0x0F
--- @field public WATER_TANK_IS_FULL number 0x10
--- @field public COLLECTIVE_DISORDER number 0x11
local event_water_quality_monitoring = {}

--- @class st.zwave.CommandClass.Notification.event_water_valve
--- @alias event_water_valve st.zwave.CommandClass.Notification.event_water_valve
--- @field public STATE_IDLE number 0x00
--- @field public VALVE_OPERATION number 0x01
--- @field public MASTER_VALVE_OPERATION number 0x02
--- @field public VALVE_SHORT_CIRCUIT number 0x03
--- @field public MASTER_VALVE_SHORT_CIRCUIT number 0x04
--- @field public VALVE_CURRENT_ALARM number 0x05
--- @field public MASTER_VALVE_CURRENT_ALARM number 0x06
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_water_valve = {}

--- @class st.zwave.CommandClass.Notification.event_weather_alarm
--- @alias event_weather_alarm st.zwave.CommandClass.Notification.event_weather_alarm
--- @field public STATE_IDLE number 0x00
--- @field public RAIN_ALARM number 0x01
--- @field public MOISTURE_ALARM number 0x02
--- @field public FREEZE_ALARM number 0x03
--- @field public UNKNOWN_EVENT_STATE number 0xFE
local event_weather_alarm = {}

--- @class st.zwave.CommandClass.Notification.event
--- @alias event st.zwave.CommandClass.Notification.event
--- @field public access_control st.zwave.CommandClass.event_access_control
--- @field public appliance st.zwave.CommandClass.event_appliance
--- @field public clock st.zwave.CommandClass.event_clock
--- @field public co st.zwave.CommandClass.event_co
--- @field public co2 st.zwave.CommandClass.event_co2
--- @field public emergency st.zwave.CommandClass.event_emergency
--- @field public gas_alarm st.zwave.CommandClass.event_gas_alarm
--- @field public heat st.zwave.CommandClass.event_heat
--- @field public home_health st.zwave.CommandClass.event_home_health
--- @field public home_monitoring st.zwave.CommandClass.event_home_monitoring
--- @field public home_security st.zwave.CommandClass.event_home_security
--- @field public irrigation st.zwave.CommandClass.event_irrigation
--- @field public light_sensor st.zwave.CommandClass.event_light_sensor
--- @field public pest_control st.zwave.CommandClass.event_pest_control
--- @field public power_management st.zwave.CommandClass.event_power_management
--- @field public siren st.zwave.CommandClass.event_siren
--- @field public smoke st.zwave.CommandClass.event_smoke
--- @field public system st.zwave.CommandClass.event_system
--- @field public water st.zwave.CommandClass.event_water
--- @field public water_quality_monitoring st.zwave.CommandClass.event_water_quality_monitoring
--- @field public water_valve st.zwave.CommandClass.event_water_valve
--- @field public weather_alarm st.zwave.CommandClass.event_weather_alarm
local event = {
  access_control = {
    STATE_IDLE = 0x00,
    MANUAL_LOCK_OPERATION = 0x01,
    MANUAL_UNLOCK_OPERATION = 0x02,
    RF_LOCK_OPERATION = 0x03,
    RF_UNLOCK_OPERATION = 0x04,
    KEYPAD_LOCK_OPERATION = 0x05,
    KEYPAD_UNLOCK_OPERATION = 0x06,
    MANUAL_NOT_FULLY_LOCKED_OPERATION = 0x07,
    RF_NOT_FULLY_LOCKED_OPERATION = 0x08,
    AUTO_LOCK_LOCKED_OPERATION = 0x09,
    AUTO_LOCK_NOT_FULLY_LOCKED_OPERATION = 0x0A,
    LOCK_JAMMED = 0x0B,
    ALL_USER_CODES_DELETED = 0x0C,
    SINGLE_USER_CODE_DELETED = 0x0D,
    NEW_USER_CODE_ADDED = 0x0E,
    NEW_USER_CODE_NOT_ADDED_DUE_TO_DUPLICATE_CODE = 0x0F,
    KEYPAD_TEMPORARY_DISABLED = 0x10,
    KEYPAD_BUSY = 0x11,
    NEW_PROGRAM_CODE_ENTERED_UNIQUE_CODE_FOR_LOCK_CONFIGURATION = 0x12,
    MANUALLY_ENTER_USER_ACCESS_CODE_EXCEEDS_CODE_LIMIT = 0x13,
    UNLOCK_BY_RF_WITH_INVALID_USER_CODE = 0x14,
    LOCKED_BY_RF_WITH_INVALID_USER_CODE = 0x15,
    WINDOW_DOOR_IS_OPEN = 0x16,
    WINDOW_DOOR_IS_CLOSED = 0x17,
    WINDOW_DOOR_HANDLE_IS_OPEN = 0x18,
    WINDOW_DOOR_HANDLE_IS_CLOSED = 0x19,
    MESSAGING_USER_CODE_ENTERED_VIA_KEYPAD = 0x20,
    BARRIER_PERFORMING_INITIALIZATION_PROCESS = 0x40,
    BARRIER_OPERATION_OPEN_CLOSE_FORCE_HAS_BEEN_EXCEEDED = 0x41,
    BARRIER_MOTOR_HAS_EXCEEDED_MANUFACTURERS_OPERATIONAL_TIME_LIMIT = 0x42,
    BARRIER_OPERATION_HAS_EXCEEDED_PHYSICAL_MECHANICAL_LIMITS = 0x43,
    BARRIER_UNABLE_TO_PERFORM_REQUESTED_OPERATION_DUE_TO_UL_REQUIREMENTS = 0x44,
    BARRIER_UNATTENDED_OPERATION_HAS_BEEN_DISABLED_PER_UL_REQUIREMENTS = 0x45,
    BARRIER_FAILED_TO_PERFORM_REQUESTED_OPERATION_DEVICE_MALFUNCTION = 0x46,
    BARRIER_VACATION_MODE = 0x47,
    BARRIER_SAFETY_BEAM_OBSTACLE = 0x48,
    BARRIER_SENSOR_NOT_DETECTED_SUPERVISORY_ERROR = 0x49,
    BARRIER_SENSOR_LOW_BATTERY_WARNING = 0x4A,
    BARRIER_DETECTED_SHORT_IN_WALL_STATION_WIRES = 0x4B,
    BARRIER_ASSOCIATED_WITH_NON_Z_WAVE_REMOTE_CONTROL = 0x4C,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  appliance = {
    STATE_IDLE = 0x00,
    PROGRAM_STARTED = 0x01,
    PROGRAM_IN_PROGRESS = 0x02,
    PROGRAM_COMPLETED = 0x03,
    REPLACE_MAIN_FILTER = 0x04,
    FAILURE_TO_SET_TARGET_TEMPERATURE = 0x05,
    SUPPLYING_WATER = 0x06,
    WATER_SUPPLY_FAILURE = 0x07,
    BOILING = 0x08,
    BOILING_FAILURE = 0x09,
    WASHING = 0x0A,
    WASHING_FAILURE = 0x0B,
    RINSING = 0x0C,
    RINSING_FAILURE = 0x0D,
    DRAINING = 0x0E,
    DRAINING_FAILURE = 0x0F,
    SPINNING = 0x10,
    SPINNING_FAILURE = 0x11,
    DRYING = 0x12,
    DRYING_FAILURE = 0x13,
    FAN_FAILURE = 0x14,
    COMPRESSOR_FAILURE = 0x15,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  clock = {
    STATE_IDLE = 0x00,
    WAKE_UP_ALERT = 0x01,
    TIMER_ENDED = 0x02,
    TIME_REMAINING = 0x03,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  co = {
    STATE_IDLE = 0x00,
    CARBON_MONOXIDE_DETECTED_LOCATION_PROVIDED = 0x01,
    CARBON_MONOXIDE_DETECTED = 0x02,
    CARBON_MONOXIDE_TEST = 0x03,
    REPLACEMENT_REQUIRED = 0x04,
    REPLACEMENT_REQUIRED_END_OF_LIFE = 0x05,
    ALARM_SILENCED = 0x06,
    MAINTENANCE_REQUIRED_PLANNED_PERIODIC_INSPECTION = 0x07,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  co2 = {
    STATE_IDLE = 0x00,
    CARBON_DIOXIDE_DETECTED_LOCATION_PROVIDED = 0x01,
    CARBON_DIOXIDE_DETECTED = 0x02,
    CARBON_DIOXIDE_TEST = 0x03,
    REPLACEMENT_REQUIRED = 0x04,
    REPLACEMENT_REQUIRED_END_OF_LIFE = 0x05,
    ALARM_SILENCED = 0x06,
    MAINTENANCE_REQUIRED_PLANNED_PERIODIC_INSPECTION = 0x07,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  emergency = {
    STATE_IDLE = 0x00,
    CONTACT_POLICE = 0x01,
    CONTACT_FIRE_SERVICE = 0x02,
    CONTACT_MEDICAL_SERVICE = 0x03,
    PANIC_ALERT = 0x04,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  gas_alarm = {
    STATE_IDLE = 0x00,
    COMBUSTIBLE_GAS_DETECTED_LOCATION_PROVIDED = 0x01,
    COMBUSTIBLE_GAS_DETECTED = 0x02,
    TOXIC_GAS_DETECTED_LOCATION_PROVIDED = 0x03,
    TOXIC_GAS_DETECTED = 0x04,
    TEST = 0x05,
    REPLACEMENT_REQUIRED = 0x06,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  heat = {
    STATE_IDLE = 0x00,
    OVERDETECTED_LOCATION_PROVIDED = 0x01,
    OVERDETECTED = 0x02,
    RAPID_TEMPERATURE_RISE_LOCATION_PROVIDED = 0x03,
    RAPID_TEMPERATURE_RISE = 0x04,
    UNDER_DETECTED_LOCATION_PROVIDED = 0x05,
    UNDER_DETECTED = 0x06,
    ALARM_TEST = 0x07,
    REPLACEMENT_REQUIRED_END_OF_LIFE = 0x08,
    ALARM_SILENCED = 0x09,
    MAINTENANCE_REQUIRED_DUST_IN_DEVICE = 0x0A,
    MAINTENANCE_REQUIRED_PLANNED_PERIODIC_INSPECTION = 0x0B,
    RAPID_TEMPERATURE_FALL_LOCATION_PROVIDED = 0x0C,
    RAPID_TEMPERATURE_FALL = 0x0D,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  home_health = {
    STATE_IDLE = 0x00,
    LEAVING_BED = 0x01,
    SITTING_ON_BED = 0x02,
    LYING_ON_BED = 0x03,
    POSTURE_CHANGED = 0x04,
    SITTING_ON_BED_EDGE = 0x05,
    VOLATILE_ORGANIC_COMPOUND_LEVEL = 0x06,
    SLEEP_APNEA_DETECTED = 0x07,
    SLEEP_STAGE_0_DETECTED_DREAMING_REM = 0x08,
    SLEEP_STAGE_1_DETECTED_LIGHT_SLEEP_NON_REM_1 = 0x09,
    SLEEP_STAGE_2_DETECTED_MEDIUM_SLEEP_NON_REM_2 = 0x0A,
    SLEEP_STAGE_3_DETECTED_DEEP_SLEEP_NON_REM_3 = 0x0B,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  home_monitoring = {
    STATE_IDLE = 0x00,
    HOME_OCCUPIED_LOCATION_PROVIDED = 0x01,
    HOME_OCCUPIED = 0x02
  },
  home_security = {
    STATE_IDLE = 0x00,
    INTRUSION_LOCATION_PROVIDED = 0x01,
    INTRUSION = 0x02,
    TAMPERING_PRODUCT_COVER_REMOVED = 0x03,
    TAMPERING_INVALID_CODE = 0x04,
    GLASS_BREAKAGE_LOCATION_PROVIDED = 0x05,
    GLASS_BREAKAGE = 0x06,
    MOTION_DETECTION_LOCATION_PROVIDED = 0x07,
    MOTION_DETECTION = 0x08,
    TAMPERING_PRODUCT_MOVED = 0x09,
    IMPACT_DETECTED = 0x0A,
    MAGNETIC_FIELD_INTERFERENCE_DETECTED = 0x0B,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  irrigation = {
    STATE_IDLE = 0x00,
    SCHEDULE_STARTED = 0x01,
    SCHEDULE_FINISHED = 0x02,
    VALVE_TABLE_RUN_STARTED = 0x03,
    VALVE_TABLE_RUN_FINISHED = 0x04,
    DEVICE_IS_NOT_CONFIGURED = 0x05,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  light_sensor = {
    STATE_IDLE = 0x00,
    LIGHT_DETECTED = 0x01,
    LIGHT_COLOR_TRANSITION_DETECTED = 0x02
  },
  pest_control = {
    STATE_IDLE = 0x00,
    TRAP_ARMED_LOCATION_PROVIDED = 0x01,
    TRAP_ARMED = 0x02,
    TRAP_RE_ARM_REQUIRED_LOCATION_PROVIDED = 0x03,
    TRAP_RE_ARM_REQUIRED = 0x04,
    PEST_DETECTED_LOCATION_PROVIDED = 0x05,
    PEST_DETECTED = 0x06,
    PEST_EXTERMINATED_LOCATION_PROVIDED = 0x07,
    PEST_EXTERMINATED = 0x08,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  power_management = {
    STATE_IDLE = 0x00,
    POWER_HAS_BEEN_APPLIED = 0x01,
    AC_MAINS_DISCONNECTED = 0x02,
    AC_MAINS_RE_CONNECTED = 0x03,
    SURGE_DETECTED = 0x04,
    VOLTAGE_DROP_DRIFT = 0x05,
    OVER_CURRENT_DETECTED = 0x06,
    OVER_VOLTAGE_DETECTED = 0x07,
    OVER_LOAD_DETECTED = 0x08,
    LOAD_ERROR = 0x09,
    REPLACE_BATTERY_SOON = 0x0A,
    REPLACE_BATTERY_NOW = 0x0B,
    BATTERY_IS_CHARGING = 0x0C,
    BATTERY_IS_FULLY_CHARGED = 0x0D,
    CHARGE_BATTERY_SOON = 0x0E,
    CHARGE_BATTERY_NOW = 0x0F,
    BACK_UP_BATTERY_IS_LOW = 0x10,
    BATTERY_FLUID_IS_LOW = 0x11,
    BACK_UP_BATTERY_DISCONNECTED = 0x12,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  siren = {
    STATE_IDLE = 0x00,
    ACTIVE = 0x01,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  smoke = {
    STATE_IDLE = 0x00,
    DETECTED_LOCATION_PROVIDED = 0x01,
    DETECTED = 0x02,
    ALARM_TEST = 0x03,
    REPLACEMENT_REQUIRED = 0x04,
    REPLACEMENT_REQUIRED_END_OF_LIFE = 0x05,
    ALARM_SILENCED = 0x06,
    MAINTENANCE_REQUIRED_PLANNED_PERIODIC_INSPECTION = 0x07,
    MAINTENANCE_REQUIRED_DUST_IN_DEVICE = 0x08,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  system = {
    STATE_IDLE = 0x00,
    HARDWARE_FAILURE = 0x01,
    SOFTWARE_FAILURE = 0x02,
    HARDWARE_FAILURE_MANUFACTURER_PROPRIETARY_FAILURE_CODE_PROVIDED = 0x03,
    SOFTWARE_FAILURE_MANUFACTURER_PROPRIETARY_FAILURE_CODE_PROVIDED = 0x04,
    HEARTBEAT = 0x05,
    TAMPERING_PRODUCT_COVER_REMOVED = 0x06,
    EMERGENCY_SHUTOFF = 0x07,
    DIGITAL_INPUT_HIGH_STATE = 0x09,
    DIGITAL_INPUT_LOW_STATE = 0x0A,
    DIGITAL_INPUT_OPEN = 0x0B,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  water = {
    STATE_IDLE = 0x00,
    LEAK_DETECTED_LOCATION_PROVIDED = 0x01,
    LEAK_DETECTED = 0x02,
    LEVEL_DROPPED_LOCATION_PROVIDED = 0x03,
    LEVEL_DROPPED = 0x04,
    REPLACE_FILTER = 0x05,
    FLOW_ALARM = 0x06,
    PRESSURE_ALARM = 0x07,
    TEMPERATURE_ALARM = 0x08,
    LEVEL_ALARM = 0x09,
    SUMP_PUMP_ACTIVE = 0x0A,
    SUMP_PUMP_FAILURE = 0x0B,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  water_quality_monitoring = {
    STATE_IDLE = 0x00,
    CHLORINE_ALARM = 0x01,
    ACIDITY_PH_ALARM = 0x02,
    WATER_OXIDATION_ALARM = 0x03,
    CHLORINE_EMPTY = 0x04,
    ACIDITY_PH_EMPTY = 0x05,
    WATERFLOW_MEASURING_STATION_SHORTAGE_DETECTED = 0x06,
    WATERFLOW_CLEAR_WATER_SHORTAGE_DETECTED = 0x07,
    DISINFECTION_SYSTEM_ERROR_DETECTED = 0x08,
    FILTER_CLEANING_ONGOING = 0x09,
    HEATING_OPERATION_ONGOING = 0x0A,
    FILTER_PUMP_OPERATION_ONGOING = 0x0B,
    FRESHWATER_OPERATION_ONGOING = 0x0C,
    DRY_PROTECTION_OPERATION_ACTIVE = 0x0D,
    WATER_TANK_IS_EMPTY = 0x0E,
    WATER_TANK_LEVEL_IS_UNKNOWN = 0x0F,
    WATER_TANK_IS_FULL = 0x10,
    COLLECTIVE_DISORDER = 0x11
  },
  water_valve = {
    STATE_IDLE = 0x00,
    VALVE_OPERATION = 0x01,
    MASTER_VALVE_OPERATION = 0x02,
    VALVE_SHORT_CIRCUIT = 0x03,
    MASTER_VALVE_SHORT_CIRCUIT = 0x04,
    VALVE_CURRENT_ALARM = 0x05,
    MASTER_VALVE_CURRENT_ALARM = 0x06,
    UNKNOWN_EVENT_STATE = 0xFE
  },
  weather_alarm = {
    STATE_IDLE = 0x00,
    RAIN_ALARM = 0x01,
    MOISTURE_ALARM = 0x02,
    FREEZE_ALARM = 0x03,
    UNKNOWN_EVENT_STATE = 0xFE
  }
}
Notification.event = event
Notification._reflect_event = zw._reflection_builder(Notification.event, Notification.notification_type)


return Notification
