-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.Protection
--- @alias Protection st.zwave.CommandClass.Protection
---
--- Supported versions: 1,2
---
--- @field public SET number 0x01 - PROTECTION_SET command id
--- @field public GET number 0x02 - PROTECTION_GET command id
--- @field public REPORT number 0x03 - PROTECTION_REPORT command id
--- @field public SUPPORTED_GET number 0x04 - PROTECTION_SUPPORTED_GET command id
--- @field public SUPPORTED_REPORT number 0x05 - PROTECTION_SUPPORTED_REPORT command id
--- @field public EC_SET number 0x06 - PROTECTION_EC_SET command id
--- @field public EC_GET number 0x07 - PROTECTION_EC_GET command id
--- @field public EC_REPORT number 0x08 - PROTECTION_EC_REPORT command id
--- @field public TIMEOUT_SET number 0x09 - PROTECTION_TIMEOUT_SET command id
--- @field public TIMEOUT_GET number 0x0A - PROTECTION_TIMEOUT_GET command id
--- @field public TIMEOUT_REPORT number 0x0B - PROTECTION_TIMEOUT_REPORT command id
local Protection = {}
Protection.SET = 0x01
Protection.GET = 0x02
Protection.REPORT = 0x03
Protection.SUPPORTED_GET = 0x04
Protection.SUPPORTED_REPORT = 0x05
Protection.EC_SET = 0x06
Protection.EC_GET = 0x07
Protection.EC_REPORT = 0x08
Protection.TIMEOUT_SET = 0x09
Protection.TIMEOUT_GET = 0x0A
Protection.TIMEOUT_REPORT = 0x0B

Protection._commands = {
  [Protection.SET] = "SET",
  [Protection.GET] = "GET",
  [Protection.REPORT] = "REPORT",
  [Protection.SUPPORTED_GET] = "SUPPORTED_GET",
  [Protection.SUPPORTED_REPORT] = "SUPPORTED_REPORT",
  [Protection.EC_SET] = "EC_SET",
  [Protection.EC_GET] = "EC_GET",
  [Protection.EC_REPORT] = "EC_REPORT",
  [Protection.TIMEOUT_SET] = "TIMEOUT_SET",
  [Protection.TIMEOUT_GET] = "TIMEOUT_GET",
  [Protection.TIMEOUT_REPORT] = "TIMEOUT_REPORT"
}

--- Instantiate a versioned instance of the Protection Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.Protection versioned command class instance
function Protection:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.PROTECTION][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(Protection, {
  __call = Protection.init
})

Protection._serialization_version = nil
Protection._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.PROTECTION] = {
  [1] = true,
  [2] = true
}

--- @class st.zwave.CommandClass.Protection.SetV1Args
--- @alias SetV1Args st.zwave.CommandClass.Protection.SetV1Args
--- @field public protection_state integer see :lua:class:`Protection.protection_state <st.zwave.CommandClass.Protection.protection_state>`
local SetV1Args = {}

--- @class st.zwave.CommandClass.Protection.SetV1:st.zwave.Command
--- @alias SetV1 st.zwave.CommandClass.Protection.SetV1
---
--- v1 PROTECTION_SET
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Protection.SetV1Args command-specific arguments
local SetV1 = {}
setmetatable(SetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 PROTECTION_SET object.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.SetV1Args command-specific arguments
function SetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.PROTECTION, Protection.SET, 1, args, ...)
end

--- Serialize v1 PROTECTION_SET arguments.
---
--- @return string serialized payload
function SetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.protection_state)
  return writer.buf
end

--- Deserialize a v1 PROTECTION_SET payload.
---
--- @return st.zwave.CommandClass.Protection.SetV1Args deserialized arguments
function SetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("protection_state")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Protection.SetV1
--- @return st.zwave.CommandClass.Protection.SetV1Args
function SetV1._defaults(self)
  local args = {}
  args.protection_state = self.args.protection_state or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Protection.SetV1
--- @return st.zwave.CommandClass.Protection.SetV1Args
function SetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Protection.SetV1
function SetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Protection.SetV1
function SetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.protection_state = function()
    return zw._reflect(
      Protection._reflect_protection_state,
      args.protection_state
    )
  end
end

--- @class st.zwave.CommandClass.Protection.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.Protection.GetV1Args
local GetV1Args = {}

--- @class st.zwave.CommandClass.Protection.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.Protection.GetV1
---
--- v1 and forward-compatible v2 PROTECTION_GET
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Protection.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 PROTECTION_GET object.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.PROTECTION, Protection.GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 PROTECTION_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 PROTECTION_GET payload.
---
--- @return st.zwave.CommandClass.Protection.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Protection.GetV1
--- @return st.zwave.CommandClass.Protection.GetV1Args
function GetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Protection.GetV1
--- @return st.zwave.CommandClass.Protection.GetV1Args
function GetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Protection.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Protection.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Protection.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.Protection.ReportV1Args
--- @field public protection_state integer see :lua:class:`Protection.protection_state <st.zwave.CommandClass.Protection.protection_state>`
local ReportV1Args = {}

--- @class st.zwave.CommandClass.Protection.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.Protection.ReportV1
---
--- v1 PROTECTION_REPORT
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Protection.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 PROTECTION_REPORT object.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.PROTECTION, Protection.REPORT, 1, args, ...)
end

--- Serialize v1 PROTECTION_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.protection_state)
  return writer.buf
end

--- Deserialize a v1 PROTECTION_REPORT payload.
---
--- @return st.zwave.CommandClass.Protection.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("protection_state")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Protection.ReportV1
--- @return st.zwave.CommandClass.Protection.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.protection_state = self.args.protection_state or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Protection.ReportV1
--- @return st.zwave.CommandClass.Protection.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Protection.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Protection.ReportV1
function ReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.protection_state = function()
    return zw._reflect(
      Protection._reflect_protection_state,
      args.protection_state
    )
  end
end

--- @class st.zwave.CommandClass.Protection.SetV2Args
--- @alias SetV2Args st.zwave.CommandClass.Protection.SetV2Args
--- @field public local_protection_state integer [0,15]
--- @field public rf_protection_state integer [0,15]
local SetV2Args = {}

--- @class st.zwave.CommandClass.Protection.SetV2:st.zwave.Command
--- @alias SetV2 st.zwave.CommandClass.Protection.SetV2
---
--- v2 PROTECTION_SET
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x01
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.SetV2Args command-specific arguments
local SetV2 = {}
setmetatable(SetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 PROTECTION_SET object.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.SetV2Args command-specific arguments
function SetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.PROTECTION, Protection.SET, 2, args, ...)
end

--- Serialize v2 PROTECTION_SET arguments.
---
--- @return string serialized payload
function SetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(4, args.local_protection_state)
  writer:write_bits(4, 0) -- reserved1
  writer:write_bits(4, args.rf_protection_state)
  writer:write_bits(4, 0) -- reserved2
  return writer.buf
end

--- Deserialize a v2 PROTECTION_SET payload.
---
--- @return st.zwave.CommandClass.Protection.SetV2Args deserialized arguments
function SetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(4, "local_protection_state")
  reader:read_bits(4) -- reserved1
  reader:read_bits(4, "rf_protection_state")
  reader:read_bits(4) -- reserved2
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Protection.SetV2
--- @return st.zwave.CommandClass.Protection.SetV2Args
function SetV2._defaults(self)
  local args = {}
  args.local_protection_state = self.args.local_protection_state or 0
  args.rf_protection_state = self.args.rf_protection_state or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Protection.SetV2
--- @return st.zwave.CommandClass.Protection.SetV2Args
function SetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Protection.SetV2
function SetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Protection.SetV2
function SetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Protection.ReportV2Args
--- @alias ReportV2Args st.zwave.CommandClass.Protection.ReportV2Args
--- @field public local_protection_state integer [0,15]
--- @field public rf_protection_state integer [0,15]
local ReportV2Args = {}

--- @class st.zwave.CommandClass.Protection.ReportV2:st.zwave.Command
--- @alias ReportV2 st.zwave.CommandClass.Protection.ReportV2
---
--- v2 PROTECTION_REPORT
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x03
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.ReportV2Args command-specific arguments
local ReportV2 = {}
setmetatable(ReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 PROTECTION_REPORT object.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.ReportV2Args command-specific arguments
function ReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.PROTECTION, Protection.REPORT, 2, args, ...)
end

--- Serialize v2 PROTECTION_REPORT arguments.
---
--- @return string serialized payload
function ReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(4, args.local_protection_state)
  writer:write_bits(4, 0) -- reserved1
  writer:write_bits(4, args.rf_protection_state)
  writer:write_bits(4, 0) -- reserved2
  return writer.buf
end

--- Deserialize a v2 PROTECTION_REPORT payload.
---
--- @return st.zwave.CommandClass.Protection.ReportV2Args deserialized arguments
function ReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(4, "local_protection_state")
  reader:read_bits(4) -- reserved1
  reader:read_bits(4, "rf_protection_state")
  reader:read_bits(4) -- reserved2
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Protection.ReportV2
--- @return st.zwave.CommandClass.Protection.ReportV2Args
function ReportV2._defaults(self)
  local args = {}
  args.local_protection_state = self.args.local_protection_state or 0
  args.rf_protection_state = self.args.rf_protection_state or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Protection.ReportV2
--- @return st.zwave.CommandClass.Protection.ReportV2Args
function ReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Protection.ReportV2
function ReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Protection.ReportV2
function ReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Protection.SupportedGetV2Args
--- @alias SupportedGetV2Args st.zwave.CommandClass.Protection.SupportedGetV2Args
local SupportedGetV2Args = {}

--- @class st.zwave.CommandClass.Protection.SupportedGetV2:st.zwave.Command
--- @alias SupportedGetV2 st.zwave.CommandClass.Protection.SupportedGetV2
---
--- v2 PROTECTION_SUPPORTED_GET
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x04
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.SupportedGetV2Args command-specific arguments
local SupportedGetV2 = {}
setmetatable(SupportedGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 PROTECTION_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.SupportedGetV2Args command-specific arguments
function SupportedGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.PROTECTION, Protection.SUPPORTED_GET, 2, args, ...)
end

--- Serialize v2 PROTECTION_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function SupportedGetV2:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v2 PROTECTION_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.Protection.SupportedGetV2Args deserialized arguments
function SupportedGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Protection.SupportedGetV2
--- @return st.zwave.CommandClass.Protection.SupportedGetV2Args
function SupportedGetV2._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Protection.SupportedGetV2
--- @return st.zwave.CommandClass.Protection.SupportedGetV2Args
function SupportedGetV2._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Protection.SupportedGetV2
function SupportedGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Protection.SupportedGetV2
function SupportedGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Protection.SupportedReportV2Args
--- @alias SupportedReportV2Args st.zwave.CommandClass.Protection.SupportedReportV2Args
--- @field public timeout boolean
--- @field public exclusive_control boolean
--- @field public local_protection_state integer [0,65535]
--- @field public rf_protection_state integer [0,65535]
local SupportedReportV2Args = {}

--- @class st.zwave.CommandClass.Protection.SupportedReportV2:st.zwave.Command
--- @alias SupportedReportV2 st.zwave.CommandClass.Protection.SupportedReportV2
---
--- v2 PROTECTION_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x05
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.SupportedReportV2Args command-specific arguments
local SupportedReportV2 = {}
setmetatable(SupportedReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 PROTECTION_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.SupportedReportV2Args command-specific arguments
function SupportedReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.PROTECTION, Protection.SUPPORTED_REPORT, 2, args, ...)
end

--- Serialize v2 PROTECTION_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.timeout)
  writer:write_bool(args.exclusive_control)
  writer:write_bits(6, 0) -- reserved
  writer:write_be_u16(args.local_protection_state)
  writer:write_be_u16(args.rf_protection_state)
  return writer.buf
end

--- Deserialize a v2 PROTECTION_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.Protection.SupportedReportV2Args deserialized arguments
function SupportedReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("timeout")
  reader:read_bool("exclusive_control")
  reader:read_bits(6) -- reserved
  reader:read_be_u16("local_protection_state")
  reader:read_be_u16("rf_protection_state")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Protection.SupportedReportV2
--- @return st.zwave.CommandClass.Protection.SupportedReportV2Args
function SupportedReportV2._defaults(self)
  local args = {}
  args.timeout = self.args.timeout or false
  args.exclusive_control = self.args.exclusive_control or false
  args.local_protection_state = self.args.local_protection_state or 0
  args.rf_protection_state = self.args.rf_protection_state or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Protection.SupportedReportV2
--- @return st.zwave.CommandClass.Protection.SupportedReportV2Args
function SupportedReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Protection.SupportedReportV2
function SupportedReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Protection.SupportedReportV2
function SupportedReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Protection.EcSetV2Args
--- @alias EcSetV2Args st.zwave.CommandClass.Protection.EcSetV2Args
--- @field public node_id integer [0,255]
local EcSetV2Args = {}

--- @class st.zwave.CommandClass.Protection.EcSetV2:st.zwave.Command
--- @alias EcSetV2 st.zwave.CommandClass.Protection.EcSetV2
---
--- v2 PROTECTION_EC_SET
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x06
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.EcSetV2Args command-specific arguments
local EcSetV2 = {}
setmetatable(EcSetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 PROTECTION_EC_SET object.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.EcSetV2Args command-specific arguments
function EcSetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.PROTECTION, Protection.EC_SET, 2, args, ...)
end

--- Serialize v2 PROTECTION_EC_SET arguments.
---
--- @return string serialized payload
function EcSetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.node_id)
  return writer.buf
end

--- Deserialize a v2 PROTECTION_EC_SET payload.
---
--- @return st.zwave.CommandClass.Protection.EcSetV2Args deserialized arguments
function EcSetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("node_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Protection.EcSetV2
--- @return st.zwave.CommandClass.Protection.EcSetV2Args
function EcSetV2._defaults(self)
  local args = {}
  args.node_id = self.args.node_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Protection.EcSetV2
--- @return st.zwave.CommandClass.Protection.EcSetV2Args
function EcSetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Protection.EcSetV2
function EcSetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Protection.EcSetV2
function EcSetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Protection.EcGetV2Args
--- @alias EcGetV2Args st.zwave.CommandClass.Protection.EcGetV2Args
local EcGetV2Args = {}

--- @class st.zwave.CommandClass.Protection.EcGetV2:st.zwave.Command
--- @alias EcGetV2 st.zwave.CommandClass.Protection.EcGetV2
---
--- v2 PROTECTION_EC_GET
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x07
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.EcGetV2Args command-specific arguments
local EcGetV2 = {}
setmetatable(EcGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 PROTECTION_EC_GET object.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.EcGetV2Args command-specific arguments
function EcGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.PROTECTION, Protection.EC_GET, 2, args, ...)
end

--- Serialize v2 PROTECTION_EC_GET arguments.
---
--- @return string serialized payload
function EcGetV2:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v2 PROTECTION_EC_GET payload.
---
--- @return st.zwave.CommandClass.Protection.EcGetV2Args deserialized arguments
function EcGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Protection.EcGetV2
--- @return st.zwave.CommandClass.Protection.EcGetV2Args
function EcGetV2._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Protection.EcGetV2
--- @return st.zwave.CommandClass.Protection.EcGetV2Args
function EcGetV2._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Protection.EcGetV2
function EcGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Protection.EcGetV2
function EcGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Protection.EcReportV2Args
--- @alias EcReportV2Args st.zwave.CommandClass.Protection.EcReportV2Args
--- @field public node_id integer [0,255]
local EcReportV2Args = {}

--- @class st.zwave.CommandClass.Protection.EcReportV2:st.zwave.Command
--- @alias EcReportV2 st.zwave.CommandClass.Protection.EcReportV2
---
--- v2 PROTECTION_EC_REPORT
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x08
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.EcReportV2Args command-specific arguments
local EcReportV2 = {}
setmetatable(EcReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 PROTECTION_EC_REPORT object.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.EcReportV2Args command-specific arguments
function EcReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.PROTECTION, Protection.EC_REPORT, 2, args, ...)
end

--- Serialize v2 PROTECTION_EC_REPORT arguments.
---
--- @return string serialized payload
function EcReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.node_id)
  return writer.buf
end

--- Deserialize a v2 PROTECTION_EC_REPORT payload.
---
--- @return st.zwave.CommandClass.Protection.EcReportV2Args deserialized arguments
function EcReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("node_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Protection.EcReportV2
--- @return st.zwave.CommandClass.Protection.EcReportV2Args
function EcReportV2._defaults(self)
  local args = {}
  args.node_id = self.args.node_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Protection.EcReportV2
--- @return st.zwave.CommandClass.Protection.EcReportV2Args
function EcReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Protection.EcReportV2
function EcReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Protection.EcReportV2
function EcReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Protection.TimeoutSetV2Args
--- @alias TimeoutSetV2Args st.zwave.CommandClass.Protection.TimeoutSetV2Args
--- @field public timeout integer see :lua:class:`Protection.timeout <st.zwave.CommandClass.Protection.timeout>`
local TimeoutSetV2Args = {}

--- @class st.zwave.CommandClass.Protection.TimeoutSetV2:st.zwave.Command
--- @alias TimeoutSetV2 st.zwave.CommandClass.Protection.TimeoutSetV2
---
--- v2 PROTECTION_TIMEOUT_SET
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x09
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.TimeoutSetV2Args command-specific arguments
local TimeoutSetV2 = {}
setmetatable(TimeoutSetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 PROTECTION_TIMEOUT_SET object.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.TimeoutSetV2Args command-specific arguments
function TimeoutSetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.PROTECTION, Protection.TIMEOUT_SET, 2, args, ...)
end

--- Serialize v2 PROTECTION_TIMEOUT_SET arguments.
---
--- @return string serialized payload
function TimeoutSetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.timeout)
  return writer.buf
end

--- Deserialize a v2 PROTECTION_TIMEOUT_SET payload.
---
--- @return st.zwave.CommandClass.Protection.TimeoutSetV2Args deserialized arguments
function TimeoutSetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("timeout")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Protection.TimeoutSetV2
--- @return st.zwave.CommandClass.Protection.TimeoutSetV2Args
function TimeoutSetV2._defaults(self)
  local args = {}
  args.timeout = self.args.timeout or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Protection.TimeoutSetV2
--- @return st.zwave.CommandClass.Protection.TimeoutSetV2Args
function TimeoutSetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Protection.TimeoutSetV2
function TimeoutSetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Protection.TimeoutSetV2
function TimeoutSetV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.timeout = function()
    return zw._reflect(
      Protection._reflect_timeout,
      args.timeout
    )
  end
end

--- @class st.zwave.CommandClass.Protection.TimeoutGetV2Args
--- @alias TimeoutGetV2Args st.zwave.CommandClass.Protection.TimeoutGetV2Args
local TimeoutGetV2Args = {}

--- @class st.zwave.CommandClass.Protection.TimeoutGetV2:st.zwave.Command
--- @alias TimeoutGetV2 st.zwave.CommandClass.Protection.TimeoutGetV2
---
--- v2 PROTECTION_TIMEOUT_GET
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x0A
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.TimeoutGetV2Args command-specific arguments
local TimeoutGetV2 = {}
setmetatable(TimeoutGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 PROTECTION_TIMEOUT_GET object.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.TimeoutGetV2Args command-specific arguments
function TimeoutGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.PROTECTION, Protection.TIMEOUT_GET, 2, args, ...)
end

--- Serialize v2 PROTECTION_TIMEOUT_GET arguments.
---
--- @return string serialized payload
function TimeoutGetV2:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v2 PROTECTION_TIMEOUT_GET payload.
---
--- @return st.zwave.CommandClass.Protection.TimeoutGetV2Args deserialized arguments
function TimeoutGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Protection.TimeoutGetV2
--- @return st.zwave.CommandClass.Protection.TimeoutGetV2Args
function TimeoutGetV2._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Protection.TimeoutGetV2
--- @return st.zwave.CommandClass.Protection.TimeoutGetV2Args
function TimeoutGetV2._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Protection.TimeoutGetV2
function TimeoutGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Protection.TimeoutGetV2
function TimeoutGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Protection.TimeoutReportV2Args
--- @alias TimeoutReportV2Args st.zwave.CommandClass.Protection.TimeoutReportV2Args
--- @field public timeout integer see :lua:class:`Protection.timeout <st.zwave.CommandClass.Protection.timeout>`
local TimeoutReportV2Args = {}

--- @class st.zwave.CommandClass.Protection.TimeoutReportV2:st.zwave.Command
--- @alias TimeoutReportV2 st.zwave.CommandClass.Protection.TimeoutReportV2
---
--- v2 PROTECTION_TIMEOUT_REPORT
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x0B
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.TimeoutReportV2Args command-specific arguments
local TimeoutReportV2 = {}
setmetatable(TimeoutReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 PROTECTION_TIMEOUT_REPORT object.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.TimeoutReportV2Args command-specific arguments
function TimeoutReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.PROTECTION, Protection.TIMEOUT_REPORT, 2, args, ...)
end

--- Serialize v2 PROTECTION_TIMEOUT_REPORT arguments.
---
--- @return string serialized payload
function TimeoutReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.timeout)
  return writer.buf
end

--- Deserialize a v2 PROTECTION_TIMEOUT_REPORT payload.
---
--- @return st.zwave.CommandClass.Protection.TimeoutReportV2Args deserialized arguments
function TimeoutReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("timeout")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Protection.TimeoutReportV2
--- @return st.zwave.CommandClass.Protection.TimeoutReportV2Args
function TimeoutReportV2._defaults(self)
  local args = {}
  args.timeout = self.args.timeout or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Protection.TimeoutReportV2
--- @return st.zwave.CommandClass.Protection.TimeoutReportV2Args
function TimeoutReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Protection.TimeoutReportV2
function TimeoutReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Protection.TimeoutReportV2
function TimeoutReportV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.timeout = function()
    return zw._reflect(
      Protection._reflect_timeout,
      args.timeout
    )
  end
end

--- @class st.zwave.CommandClass.Protection.Set
--- @alias _Set st.zwave.CommandClass.Protection.Set
---
--- Dynamically versioned PROTECTION_SET
---
--- Supported versions: 1,2; unique base versions: 1,2
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x01
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.Protection.SetV1Args|st.zwave.CommandClass.Protection.SetV2Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a PROTECTION_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.SetV1Args|st.zwave.CommandClass.Protection.SetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Protection.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, Protection.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Protection.Get
--- @alias _Get st.zwave.CommandClass.Protection.Get
---
--- Dynamically versioned PROTECTION_GET
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Protection.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a PROTECTION_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Protection.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, Protection.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Protection.Report
--- @alias _Report st.zwave.CommandClass.Protection.Report
---
--- Dynamically versioned PROTECTION_REPORT
---
--- Supported versions: 1,2; unique base versions: 1,2
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x03
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.Protection.ReportV1Args|st.zwave.CommandClass.Protection.ReportV2Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a PROTECTION_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.ReportV1Args|st.zwave.CommandClass.Protection.ReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.Protection.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, Protection.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Protection.SupportedGet
--- @alias _SupportedGet st.zwave.CommandClass.Protection.SupportedGet
---
--- Dynamically versioned PROTECTION_SUPPORTED_GET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x04
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.SupportedGetV2Args
local _SupportedGet = {}
setmetatable(_SupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a PROTECTION_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.SupportedGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Protection.SupportedGet
function _SupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, Protection.SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Protection.SupportedReport
--- @alias _SupportedReport st.zwave.CommandClass.Protection.SupportedReport
---
--- Dynamically versioned PROTECTION_SUPPORTED_REPORT
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x05
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.SupportedReportV2Args
local _SupportedReport = {}
setmetatable(_SupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a PROTECTION_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.SupportedReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.Protection.SupportedReport
function _SupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, Protection.SUPPORTED_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Protection.EcSet
--- @alias _EcSet st.zwave.CommandClass.Protection.EcSet
---
--- Dynamically versioned PROTECTION_EC_SET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x06
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.EcSetV2Args
local _EcSet = {}
setmetatable(_EcSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a PROTECTION_EC_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.EcSetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Protection.EcSet
function _EcSet:construct(module, args, ...)
  return zw.Command._construct(module, Protection.EC_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Protection.EcGet
--- @alias _EcGet st.zwave.CommandClass.Protection.EcGet
---
--- Dynamically versioned PROTECTION_EC_GET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x07
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.EcGetV2Args
local _EcGet = {}
setmetatable(_EcGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a PROTECTION_EC_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.EcGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Protection.EcGet
function _EcGet:construct(module, args, ...)
  return zw.Command._construct(module, Protection.EC_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Protection.EcReport
--- @alias _EcReport st.zwave.CommandClass.Protection.EcReport
---
--- Dynamically versioned PROTECTION_EC_REPORT
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x08
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.EcReportV2Args
local _EcReport = {}
setmetatable(_EcReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a PROTECTION_EC_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.EcReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.Protection.EcReport
function _EcReport:construct(module, args, ...)
  return zw.Command._construct(module, Protection.EC_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Protection.TimeoutSet
--- @alias _TimeoutSet st.zwave.CommandClass.Protection.TimeoutSet
---
--- Dynamically versioned PROTECTION_TIMEOUT_SET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x09
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.TimeoutSetV2Args
local _TimeoutSet = {}
setmetatable(_TimeoutSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a PROTECTION_TIMEOUT_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.TimeoutSetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Protection.TimeoutSet
function _TimeoutSet:construct(module, args, ...)
  return zw.Command._construct(module, Protection.TIMEOUT_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Protection.TimeoutGet
--- @alias _TimeoutGet st.zwave.CommandClass.Protection.TimeoutGet
---
--- Dynamically versioned PROTECTION_TIMEOUT_GET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x0A
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.TimeoutGetV2Args
local _TimeoutGet = {}
setmetatable(_TimeoutGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a PROTECTION_TIMEOUT_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.TimeoutGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Protection.TimeoutGet
function _TimeoutGet:construct(module, args, ...)
  return zw.Command._construct(module, Protection.TIMEOUT_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Protection.TimeoutReport
--- @alias _TimeoutReport st.zwave.CommandClass.Protection.TimeoutReport
---
--- Dynamically versioned PROTECTION_TIMEOUT_REPORT
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x75
--- @field public cmd_id number 0x0B
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Protection.TimeoutReportV2Args
local _TimeoutReport = {}
setmetatable(_TimeoutReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a PROTECTION_TIMEOUT_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Protection command class module instance
--- @param args st.zwave.CommandClass.Protection.TimeoutReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.Protection.TimeoutReport
function _TimeoutReport:construct(module, args, ...)
  return zw.Command._construct(module, Protection.TIMEOUT_REPORT, module._serialization_version, args, ...)
end

Protection.SetV1 = SetV1
Protection.GetV1 = GetV1
Protection.ReportV1 = ReportV1
Protection.SetV2 = SetV2
Protection.ReportV2 = ReportV2
Protection.SupportedGetV2 = SupportedGetV2
Protection.SupportedReportV2 = SupportedReportV2
Protection.EcSetV2 = EcSetV2
Protection.EcGetV2 = EcGetV2
Protection.EcReportV2 = EcReportV2
Protection.TimeoutSetV2 = TimeoutSetV2
Protection.TimeoutGetV2 = TimeoutGetV2
Protection.TimeoutReportV2 = TimeoutReportV2
Protection.Set = _Set
Protection.Get = _Get
Protection.Report = _Report
Protection.SupportedGet = _SupportedGet
Protection.SupportedReport = _SupportedReport
Protection.EcSet = _EcSet
Protection.EcGet = _EcGet
Protection.EcReport = _EcReport
Protection.TimeoutSet = _TimeoutSet
Protection.TimeoutGet = _TimeoutGet
Protection.TimeoutReport = _TimeoutReport

Protection._lut = {
  [0] = { -- dynamically versioned constructors
    [Protection.SET] = Protection.Set,
    [Protection.GET] = Protection.Get,
    [Protection.REPORT] = Protection.Report,
    [Protection.SUPPORTED_GET] = Protection.SupportedGet,
    [Protection.SUPPORTED_REPORT] = Protection.SupportedReport,
    [Protection.EC_SET] = Protection.EcSet,
    [Protection.EC_GET] = Protection.EcGet,
    [Protection.EC_REPORT] = Protection.EcReport,
    [Protection.TIMEOUT_SET] = Protection.TimeoutSet,
    [Protection.TIMEOUT_GET] = Protection.TimeoutGet,
    [Protection.TIMEOUT_REPORT] = Protection.TimeoutReport
  },
  [1] = { -- version 1
    [Protection.SET] = Protection.SetV1,
    [Protection.GET] = Protection.GetV1,
    [Protection.REPORT] = Protection.ReportV1
  },
  [2] = { -- version 2
    [Protection.SET] = Protection.SetV2,
    [Protection.GET] = Protection.GetV1,
    [Protection.REPORT] = Protection.ReportV2,
    [Protection.SUPPORTED_GET] = Protection.SupportedGetV2,
    [Protection.SUPPORTED_REPORT] = Protection.SupportedReportV2,
    [Protection.EC_SET] = Protection.EcSetV2,
    [Protection.EC_GET] = Protection.EcGetV2,
    [Protection.EC_REPORT] = Protection.EcReportV2,
    [Protection.TIMEOUT_SET] = Protection.TimeoutSetV2,
    [Protection.TIMEOUT_GET] = Protection.TimeoutGetV2,
    [Protection.TIMEOUT_REPORT] = Protection.TimeoutReportV2
  }
}
--- @class st.zwave.CommandClass.Protection.protection_state
--- @alias protection_state st.zwave.CommandClass.Protection.protection_state
--- @field public UNPROTECTED number 0x00
--- @field public PROTECTION_BY_SEQUENCE number 0x01
--- @field public NO_OPERATION_POSSIBLE number 0x02
local protection_state = {
  UNPROTECTED = 0x00,
  PROTECTION_BY_SEQUENCE = 0x01,
  NO_OPERATION_POSSIBLE = 0x02
}
Protection.protection_state = protection_state
Protection._reflect_protection_state = zw._reflection_builder(Protection.protection_state)

--- @class st.zwave.CommandClass.Protection.timeout
--- @alias timeout st.zwave.CommandClass.Protection.timeout
--- @field public NO_TIMER_IS_SET number 0x00
--- @field public NO_TIMEOUT_IS_SET number 0xFF
local timeout = {
  NO_TIMER_IS_SET = 0x00,
  NO_TIMEOUT_IS_SET = 0xFF
}
Protection.timeout = timeout
Protection._reflect_timeout = zw._reflection_builder(Protection.timeout)


return Protection
