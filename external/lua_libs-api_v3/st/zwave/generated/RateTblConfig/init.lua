-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.RateTblConfig
--- @alias RateTblConfig st.zwave.CommandClass.RateTblConfig
---
--- Supported versions: 1
---
--- @field public RATE_TBL_SET number 0x01 - RATE_TBL_SET command id
--- @field public RATE_TBL_REMOVE number 0x02 - RATE_TBL_REMOVE command id
local RateTblConfig = {}
RateTblConfig.RATE_TBL_SET = 0x01
RateTblConfig.RATE_TBL_REMOVE = 0x02

RateTblConfig._commands = {
  [RateTblConfig.RATE_TBL_SET] = "RATE_TBL_SET",
  [RateTblConfig.RATE_TBL_REMOVE] = "RATE_TBL_REMOVE"
}

--- Instantiate a versioned instance of the RateTblConfig Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.RateTblConfig versioned command class instance
function RateTblConfig:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.RATE_TBL_CONFIG][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(RateTblConfig, {
  __call = RateTblConfig.init
})

RateTblConfig._serialization_version = nil
RateTblConfig._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.RATE_TBL_CONFIG] = {
  [1] = true
}

--- @class st.zwave.CommandClass.RateTblConfig.RateTblSetV1Args
--- @alias RateTblSetV1Args st.zwave.CommandClass.RateTblConfig.RateTblSetV1Args
--- @field public rate_parameter_set_id integer [0,255]
--- @field public rate_type integer [0,3]
--- @field public rate_character string
--- @field public start_hour_local_time integer [0,255]
--- @field public start_minute_local_time integer [0,255]
--- @field public duration_minute integer [0,65535]
--- @field public consumption_scale integer [0,31]
--- @field public consumption_precision integer [0,7]
--- @field public min_consumption_value number [-2147483648,2147483647]
--- @field public max_consumption_value number [-2147483648,2147483647]
--- @field public max_demand_scale integer [0,31]
--- @field public max_demand_precision integer [0,7]
--- @field public max_demand_value number [-2147483648,2147483647]
--- @field public dcp_rate_id integer [0,255]
local RateTblSetV1Args = {}

--- @class st.zwave.CommandClass.RateTblConfig.RateTblSetV1:st.zwave.Command
--- @alias RateTblSetV1 st.zwave.CommandClass.RateTblConfig.RateTblSetV1
---
--- v1 RATE_TBL_SET
---
--- @field public cmd_class number 0x48
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblConfig.RateTblSetV1Args command-specific arguments
local RateTblSetV1 = {}
setmetatable(RateTblSetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 RATE_TBL_SET object.
---
--- @param module st.zwave.CommandClass.RateTblConfig command class module instance
--- @param args st.zwave.CommandClass.RateTblConfig.RateTblSetV1Args command-specific arguments
function RateTblSetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.RATE_TBL_CONFIG, RateTblConfig.RATE_TBL_SET, 1, args, ...)
end

--- Serialize v1 RATE_TBL_SET arguments.
---
--- @return string serialized payload
function RateTblSetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.rate_parameter_set_id)
  writer:write_bits(5, writer.length(args.rate_character))
  writer:write_bits(2, args.rate_type)
  writer:write_bool(false) -- reserved
  writer:write_bytes(args.rate_character)
  writer:write_u8(args.start_hour_local_time)
  writer:write_u8(args.start_minute_local_time)
  writer:write_be_u16(args.duration_minute)
  writer:write_bits(5, args.consumption_scale)
  writer:write_bits(3, args.consumption_precision or writer.consensus_precision({ args.max_consumption_value }, { args.min_consumption_value }))
  writer:write_float(args.consumption_precision, args.min_consumption_value)
  writer:write_float(args.consumption_precision, args.max_consumption_value)
  writer:write_bits(5, args.max_demand_scale)
  writer:write_bits(3, args.max_demand_precision or writer.precision(args.max_demand_value))
  writer:write_float(args.max_demand_precision, args.max_demand_value)
  writer:write_u8(args.dcp_rate_id)
  return writer.buf
end

--- Deserialize a v1 RATE_TBL_SET payload.
---
--- @return st.zwave.CommandClass.RateTblConfig.RateTblSetV1Args deserialized arguments
function RateTblSetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("rate_parameter_set_id")
  reader:read_bits(5, "number_of_rate_char")
  reader:read_bits(2, "rate_type")
  reader:read_bool() -- reserved
  reader:read_bytes(reader.parsed.number_of_rate_char, "rate_character")
  reader:read_u8("start_hour_local_time")
  reader:read_u8("start_minute_local_time")
  reader:read_be_u16("duration_minute")
  reader:read_bits(5, "consumption_scale")
  reader:read_bits(3, "consumption_precision")
  reader:read_float(reader.parsed.consumption_precision, "min_consumption_value")
  reader:read_float(reader.parsed.consumption_precision, "max_consumption_value")
  reader:read_bits(5, "max_demand_scale")
  reader:read_bits(3, "max_demand_precision")
  reader:read_float(reader.parsed.max_demand_precision, "max_demand_value")
  reader:read_u8("dcp_rate_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.RateTblConfig.RateTblSetV1
--- @return st.zwave.CommandClass.RateTblConfig.RateTblSetV1Args
function RateTblSetV1._defaults(self)
  local args = {}
  args.rate_parameter_set_id = self.args.rate_parameter_set_id or 0
  args.rate_type = self.args.rate_type or 0
  args.rate_character = self.args.rate_character or ""
  args.start_hour_local_time = self.args.start_hour_local_time or 0
  args.start_minute_local_time = self.args.start_minute_local_time or 0
  args.duration_minute = self.args.duration_minute or 0
  args.consumption_scale = self.args.consumption_scale or 0
  args.min_consumption_value = self.args.min_consumption_value or 0
  args.max_consumption_value = self.args.max_consumption_value or 0
  args.max_demand_scale = self.args.max_demand_scale or 0
  args.max_demand_value = self.args.max_demand_value or 0
  args.dcp_rate_id = self.args.dcp_rate_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.RateTblConfig.RateTblSetV1
--- @return st.zwave.CommandClass.RateTblConfig.RateTblSetV1Args
function RateTblSetV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.consumption_precision = args.consumption_precision or writer.consensus_precision({ args.max_consumption_value }, { args.min_consumption_value })
  args.max_demand_precision = args.max_demand_precision or writer.precision(args.max_demand_value)
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.RateTblConfig.RateTblSetV1
function RateTblSetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.RateTblConfig.RateTblSetV1
function RateTblSetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.RateTblConfig.RateTblRemoveV1Args
--- @alias RateTblRemoveV1Args st.zwave.CommandClass.RateTblConfig.RateTblRemoveV1Args
--- @field public rate_parameter_set_id string
local RateTblRemoveV1Args = {}

--- @class st.zwave.CommandClass.RateTblConfig.RateTblRemoveV1:st.zwave.Command
--- @alias RateTblRemoveV1 st.zwave.CommandClass.RateTblConfig.RateTblRemoveV1
---
--- v1 RATE_TBL_REMOVE
---
--- @field public cmd_class number 0x48
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblConfig.RateTblRemoveV1Args command-specific arguments
local RateTblRemoveV1 = {}
setmetatable(RateTblRemoveV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 RATE_TBL_REMOVE object.
---
--- @param module st.zwave.CommandClass.RateTblConfig command class module instance
--- @param args st.zwave.CommandClass.RateTblConfig.RateTblRemoveV1Args command-specific arguments
function RateTblRemoveV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.RATE_TBL_CONFIG, RateTblConfig.RATE_TBL_REMOVE, 1, args, ...)
end

--- Serialize v1 RATE_TBL_REMOVE arguments.
---
--- @return string serialized payload
function RateTblRemoveV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(6, writer.length(args.rate_parameter_set_id))
  writer:write_bits(2, 0) -- reserved
  writer:write_bytes(args.rate_parameter_set_id)
  return writer.buf
end

--- Deserialize a v1 RATE_TBL_REMOVE payload.
---
--- @return st.zwave.CommandClass.RateTblConfig.RateTblRemoveV1Args deserialized arguments
function RateTblRemoveV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(6, "rate_parameter_set_i_ds")
  reader:read_bits(2) -- reserved
  reader:read_bytes(reader.parsed.rate_parameter_set_i_ds, "rate_parameter_set_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.RateTblConfig.RateTblRemoveV1
--- @return st.zwave.CommandClass.RateTblConfig.RateTblRemoveV1Args
function RateTblRemoveV1._defaults(self)
  local args = {}
  args.rate_parameter_set_id = self.args.rate_parameter_set_id or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.RateTblConfig.RateTblRemoveV1
--- @return st.zwave.CommandClass.RateTblConfig.RateTblRemoveV1Args
function RateTblRemoveV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.RateTblConfig.RateTblRemoveV1
function RateTblRemoveV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.RateTblConfig.RateTblRemoveV1
function RateTblRemoveV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.RateTblConfig.RateTblSet
--- @alias _RateTblSet st.zwave.CommandClass.RateTblConfig.RateTblSet
---
--- Dynamically versioned RATE_TBL_SET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x48
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblConfig.RateTblSetV1Args
local _RateTblSet = {}
setmetatable(_RateTblSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a RATE_TBL_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.RateTblConfig command class module instance
--- @param args st.zwave.CommandClass.RateTblConfig.RateTblSetV1Args command-specific arguments
--- @return st.zwave.CommandClass.RateTblConfig.RateTblSet
function _RateTblSet:construct(module, args, ...)
  return zw.Command._construct(module, RateTblConfig.RATE_TBL_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.RateTblConfig.RateTblRemove
--- @alias _RateTblRemove st.zwave.CommandClass.RateTblConfig.RateTblRemove
---
--- Dynamically versioned RATE_TBL_REMOVE
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x48
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblConfig.RateTblRemoveV1Args
local _RateTblRemove = {}
setmetatable(_RateTblRemove, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a RATE_TBL_REMOVE object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.RateTblConfig command class module instance
--- @param args st.zwave.CommandClass.RateTblConfig.RateTblRemoveV1Args command-specific arguments
--- @return st.zwave.CommandClass.RateTblConfig.RateTblRemove
function _RateTblRemove:construct(module, args, ...)
  return zw.Command._construct(module, RateTblConfig.RATE_TBL_REMOVE, module._serialization_version, args, ...)
end

RateTblConfig.RateTblSetV1 = RateTblSetV1
RateTblConfig.RateTblRemoveV1 = RateTblRemoveV1
RateTblConfig.RateTblSet = _RateTblSet
RateTblConfig.RateTblRemove = _RateTblRemove

RateTblConfig._lut = {
  [0] = { -- dynamically versioned constructors
    [RateTblConfig.RATE_TBL_SET] = RateTblConfig.RateTblSet,
    [RateTblConfig.RATE_TBL_REMOVE] = RateTblConfig.RateTblRemove
  },
  [1] = { -- version 1
    [RateTblConfig.RATE_TBL_SET] = RateTblConfig.RateTblSetV1,
    [RateTblConfig.RATE_TBL_REMOVE] = RateTblConfig.RateTblRemoveV1
  }
}

return RateTblConfig
