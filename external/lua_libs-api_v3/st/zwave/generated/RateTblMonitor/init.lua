-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.RateTblMonitor
--- @alias RateTblMonitor st.zwave.CommandClass.RateTblMonitor
---
--- Supported versions: 1
---
--- @field public RATE_TBL_SUPPORTED_GET number 0x01 - RATE_TBL_SUPPORTED_GET command id
--- @field public RATE_TBL_SUPPORTED_REPORT number 0x02 - RATE_TBL_SUPPORTED_REPORT command id
--- @field public RATE_TBL_GET number 0x03 - RATE_TBL_GET command id
--- @field public RATE_TBL_REPORT number 0x04 - RATE_TBL_REPORT command id
--- @field public RATE_TBL_ACTIVE_RATE_GET number 0x05 - RATE_TBL_ACTIVE_RATE_GET command id
--- @field public RATE_TBL_ACTIVE_RATE_REPORT number 0x06 - RATE_TBL_ACTIVE_RATE_REPORT command id
--- @field public RATE_TBL_CURRENT_DATA_GET number 0x07 - RATE_TBL_CURRENT_DATA_GET command id
--- @field public RATE_TBL_CURRENT_DATA_REPORT number 0x08 - RATE_TBL_CURRENT_DATA_REPORT command id
--- @field public RATE_TBL_HISTORICAL_DATA_GET number 0x09 - RATE_TBL_HISTORICAL_DATA_GET command id
--- @field public RATE_TBL_HISTORICAL_DATA_REPORT number 0x0A - RATE_TBL_HISTORICAL_DATA_REPORT command id
local RateTblMonitor = {}
RateTblMonitor.RATE_TBL_SUPPORTED_GET = 0x01
RateTblMonitor.RATE_TBL_SUPPORTED_REPORT = 0x02
RateTblMonitor.RATE_TBL_GET = 0x03
RateTblMonitor.RATE_TBL_REPORT = 0x04
RateTblMonitor.RATE_TBL_ACTIVE_RATE_GET = 0x05
RateTblMonitor.RATE_TBL_ACTIVE_RATE_REPORT = 0x06
RateTblMonitor.RATE_TBL_CURRENT_DATA_GET = 0x07
RateTblMonitor.RATE_TBL_CURRENT_DATA_REPORT = 0x08
RateTblMonitor.RATE_TBL_HISTORICAL_DATA_GET = 0x09
RateTblMonitor.RATE_TBL_HISTORICAL_DATA_REPORT = 0x0A

RateTblMonitor._commands = {
  [RateTblMonitor.RATE_TBL_SUPPORTED_GET] = "RATE_TBL_SUPPORTED_GET",
  [RateTblMonitor.RATE_TBL_SUPPORTED_REPORT] = "RATE_TBL_SUPPORTED_REPORT",
  [RateTblMonitor.RATE_TBL_GET] = "RATE_TBL_GET",
  [RateTblMonitor.RATE_TBL_REPORT] = "RATE_TBL_REPORT",
  [RateTblMonitor.RATE_TBL_ACTIVE_RATE_GET] = "RATE_TBL_ACTIVE_RATE_GET",
  [RateTblMonitor.RATE_TBL_ACTIVE_RATE_REPORT] = "RATE_TBL_ACTIVE_RATE_REPORT",
  [RateTblMonitor.RATE_TBL_CURRENT_DATA_GET] = "RATE_TBL_CURRENT_DATA_GET",
  [RateTblMonitor.RATE_TBL_CURRENT_DATA_REPORT] = "RATE_TBL_CURRENT_DATA_REPORT",
  [RateTblMonitor.RATE_TBL_HISTORICAL_DATA_GET] = "RATE_TBL_HISTORICAL_DATA_GET",
  [RateTblMonitor.RATE_TBL_HISTORICAL_DATA_REPORT] = "RATE_TBL_HISTORICAL_DATA_REPORT"
}

--- Instantiate a versioned instance of the RateTblMonitor Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.RateTblMonitor versioned command class instance
function RateTblMonitor:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.RATE_TBL_MONITOR][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(RateTblMonitor, {
  __call = RateTblMonitor.init
})

RateTblMonitor._serialization_version = nil
RateTblMonitor._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.RATE_TBL_MONITOR] = {
  [1] = true
}

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGetV1Args
--- @alias RateTblSupportedGetV1Args st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGetV1Args
local RateTblSupportedGetV1Args = {}

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGetV1:st.zwave.Command
--- @alias RateTblSupportedGetV1 st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGetV1
---
--- v1 RATE_TBL_SUPPORTED_GET
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGetV1Args command-specific arguments
local RateTblSupportedGetV1 = {}
setmetatable(RateTblSupportedGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 RATE_TBL_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGetV1Args command-specific arguments
function RateTblSupportedGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.RATE_TBL_MONITOR, RateTblMonitor.RATE_TBL_SUPPORTED_GET, 1, args, ...)
end

--- Serialize v1 RATE_TBL_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function RateTblSupportedGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 RATE_TBL_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGetV1Args deserialized arguments
function RateTblSupportedGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGetV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGetV1Args
function RateTblSupportedGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGetV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGetV1Args
function RateTblSupportedGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGetV1
function RateTblSupportedGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGetV1
function RateTblSupportedGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReportV1Args
--- @alias RateTblSupportedReportV1Args st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReportV1Args
--- @field public rates_supported integer [0,255]
--- @field public parameter_set_supported_bit_mask integer [0,65535]
local RateTblSupportedReportV1Args = {}

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReportV1:st.zwave.Command
--- @alias RateTblSupportedReportV1 st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReportV1
---
--- v1 RATE_TBL_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReportV1Args command-specific arguments
local RateTblSupportedReportV1 = {}
setmetatable(RateTblSupportedReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 RATE_TBL_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReportV1Args command-specific arguments
function RateTblSupportedReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.RATE_TBL_MONITOR, RateTblMonitor.RATE_TBL_SUPPORTED_REPORT, 1, args, ...)
end

--- Serialize v1 RATE_TBL_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function RateTblSupportedReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.rates_supported)
  writer:write_be_u16(args.parameter_set_supported_bit_mask)
  return writer.buf
end

--- Deserialize a v1 RATE_TBL_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReportV1Args deserialized arguments
function RateTblSupportedReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("rates_supported")
  reader:read_be_u16("parameter_set_supported_bit_mask")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReportV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReportV1Args
function RateTblSupportedReportV1._defaults(self)
  local args = {}
  args.rates_supported = self.args.rates_supported or 0
  args.parameter_set_supported_bit_mask = self.args.parameter_set_supported_bit_mask or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReportV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReportV1Args
function RateTblSupportedReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReportV1
function RateTblSupportedReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReportV1
function RateTblSupportedReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblGetV1Args
--- @alias RateTblGetV1Args st.zwave.CommandClass.RateTblMonitor.RateTblGetV1Args
--- @field public rate_parameter_set_id integer [0,255]
local RateTblGetV1Args = {}

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblGetV1:st.zwave.Command
--- @alias RateTblGetV1 st.zwave.CommandClass.RateTblMonitor.RateTblGetV1
---
--- v1 RATE_TBL_GET
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblGetV1Args command-specific arguments
local RateTblGetV1 = {}
setmetatable(RateTblGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 RATE_TBL_GET object.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblGetV1Args command-specific arguments
function RateTblGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.RATE_TBL_MONITOR, RateTblMonitor.RATE_TBL_GET, 1, args, ...)
end

--- Serialize v1 RATE_TBL_GET arguments.
---
--- @return string serialized payload
function RateTblGetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.rate_parameter_set_id)
  return writer.buf
end

--- Deserialize a v1 RATE_TBL_GET payload.
---
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblGetV1Args deserialized arguments
function RateTblGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("rate_parameter_set_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblGetV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblGetV1Args
function RateTblGetV1._defaults(self)
  local args = {}
  args.rate_parameter_set_id = self.args.rate_parameter_set_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblGetV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblGetV1Args
function RateTblGetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblGetV1
function RateTblGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblGetV1
function RateTblGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblReportV1Args
--- @alias RateTblReportV1Args st.zwave.CommandClass.RateTblMonitor.RateTblReportV1Args
--- @field public rate_parameter_set_id integer [0,255]
--- @field public rate_type integer [0,3]
--- @field public rate_character string
--- @field public start_hour_local_time integer [0,255]
--- @field public start_minute_local_time integer [0,255]
--- @field public duration_minute integer [0,65535]
--- @field public consumption_scale integer [0,31]
--- @field public consumption_precision integer [0,7]
--- @field public min_consumption_value number [-2147483648,2147483647]
--- @field public max_consumption_value number [-2147483648,2147483647]
--- @field public max_demand_scale integer [0,31]
--- @field public max_demand_precision integer [0,7]
--- @field public max_demand_value number [-2147483648,2147483647]
--- @field public dcp_rate_id integer [0,255]
local RateTblReportV1Args = {}

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblReportV1:st.zwave.Command
--- @alias RateTblReportV1 st.zwave.CommandClass.RateTblMonitor.RateTblReportV1
---
--- v1 RATE_TBL_REPORT
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblReportV1Args command-specific arguments
local RateTblReportV1 = {}
setmetatable(RateTblReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 RATE_TBL_REPORT object.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblReportV1Args command-specific arguments
function RateTblReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.RATE_TBL_MONITOR, RateTblMonitor.RATE_TBL_REPORT, 1, args, ...)
end

--- Serialize v1 RATE_TBL_REPORT arguments.
---
--- @return string serialized payload
function RateTblReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.rate_parameter_set_id)
  writer:write_bits(5, writer.length(args.rate_character))
  writer:write_bits(2, args.rate_type)
  writer:write_bool(false) -- reserved
  writer:write_bytes(args.rate_character)
  writer:write_u8(args.start_hour_local_time)
  writer:write_u8(args.start_minute_local_time)
  writer:write_be_u16(args.duration_minute)
  writer:write_bits(5, args.consumption_scale)
  writer:write_bits(3, args.consumption_precision or writer.consensus_precision({ args.max_consumption_value }, { args.min_consumption_value }))
  writer:write_float(args.consumption_precision, args.min_consumption_value)
  writer:write_float(args.consumption_precision, args.max_consumption_value)
  writer:write_bits(5, args.max_demand_scale)
  writer:write_bits(3, args.max_demand_precision or writer.precision(args.max_demand_value))
  writer:write_float(args.max_demand_precision, args.max_demand_value)
  writer:write_u8(args.dcp_rate_id)
  return writer.buf
end

--- Deserialize a v1 RATE_TBL_REPORT payload.
---
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblReportV1Args deserialized arguments
function RateTblReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("rate_parameter_set_id")
  reader:read_bits(5, "number_of_rate_char")
  reader:read_bits(2, "rate_type")
  reader:read_bool() -- reserved
  reader:read_bytes(reader.parsed.number_of_rate_char, "rate_character")
  reader:read_u8("start_hour_local_time")
  reader:read_u8("start_minute_local_time")
  reader:read_be_u16("duration_minute")
  reader:read_bits(5, "consumption_scale")
  reader:read_bits(3, "consumption_precision")
  reader:read_float(reader.parsed.consumption_precision, "min_consumption_value")
  reader:read_float(reader.parsed.consumption_precision, "max_consumption_value")
  reader:read_bits(5, "max_demand_scale")
  reader:read_bits(3, "max_demand_precision")
  reader:read_float(reader.parsed.max_demand_precision, "max_demand_value")
  reader:read_u8("dcp_rate_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblReportV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblReportV1Args
function RateTblReportV1._defaults(self)
  local args = {}
  args.rate_parameter_set_id = self.args.rate_parameter_set_id or 0
  args.rate_type = self.args.rate_type or 0
  args.rate_character = self.args.rate_character or ""
  args.start_hour_local_time = self.args.start_hour_local_time or 0
  args.start_minute_local_time = self.args.start_minute_local_time or 0
  args.duration_minute = self.args.duration_minute or 0
  args.consumption_scale = self.args.consumption_scale or 0
  args.min_consumption_value = self.args.min_consumption_value or 0
  args.max_consumption_value = self.args.max_consumption_value or 0
  args.max_demand_scale = self.args.max_demand_scale or 0
  args.max_demand_value = self.args.max_demand_value or 0
  args.dcp_rate_id = self.args.dcp_rate_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblReportV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblReportV1Args
function RateTblReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.consumption_precision = args.consumption_precision or writer.consensus_precision({ args.max_consumption_value }, { args.min_consumption_value })
  args.max_demand_precision = args.max_demand_precision or writer.precision(args.max_demand_value)
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblReportV1
function RateTblReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblReportV1
function RateTblReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGetV1Args
--- @alias RateTblActiveRateGetV1Args st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGetV1Args
local RateTblActiveRateGetV1Args = {}

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGetV1:st.zwave.Command
--- @alias RateTblActiveRateGetV1 st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGetV1
---
--- v1 RATE_TBL_ACTIVE_RATE_GET
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGetV1Args command-specific arguments
local RateTblActiveRateGetV1 = {}
setmetatable(RateTblActiveRateGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 RATE_TBL_ACTIVE_RATE_GET object.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGetV1Args command-specific arguments
function RateTblActiveRateGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.RATE_TBL_MONITOR, RateTblMonitor.RATE_TBL_ACTIVE_RATE_GET, 1, args, ...)
end

--- Serialize v1 RATE_TBL_ACTIVE_RATE_GET arguments.
---
--- @return string serialized payload
function RateTblActiveRateGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 RATE_TBL_ACTIVE_RATE_GET payload.
---
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGetV1Args deserialized arguments
function RateTblActiveRateGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGetV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGetV1Args
function RateTblActiveRateGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGetV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGetV1Args
function RateTblActiveRateGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGetV1
function RateTblActiveRateGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGetV1
function RateTblActiveRateGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReportV1Args
--- @alias RateTblActiveRateReportV1Args st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReportV1Args
--- @field public rate_parameter_set_id integer [0,255]
local RateTblActiveRateReportV1Args = {}

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReportV1:st.zwave.Command
--- @alias RateTblActiveRateReportV1 st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReportV1
---
--- v1 RATE_TBL_ACTIVE_RATE_REPORT
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReportV1Args command-specific arguments
local RateTblActiveRateReportV1 = {}
setmetatable(RateTblActiveRateReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 RATE_TBL_ACTIVE_RATE_REPORT object.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReportV1Args command-specific arguments
function RateTblActiveRateReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.RATE_TBL_MONITOR, RateTblMonitor.RATE_TBL_ACTIVE_RATE_REPORT, 1, args, ...)
end

--- Serialize v1 RATE_TBL_ACTIVE_RATE_REPORT arguments.
---
--- @return string serialized payload
function RateTblActiveRateReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.rate_parameter_set_id)
  return writer.buf
end

--- Deserialize a v1 RATE_TBL_ACTIVE_RATE_REPORT payload.
---
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReportV1Args deserialized arguments
function RateTblActiveRateReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("rate_parameter_set_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReportV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReportV1Args
function RateTblActiveRateReportV1._defaults(self)
  local args = {}
  args.rate_parameter_set_id = self.args.rate_parameter_set_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReportV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReportV1Args
function RateTblActiveRateReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReportV1
function RateTblActiveRateReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReportV1
function RateTblActiveRateReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGetV1Args
--- @alias RateTblCurrentDataGetV1Args st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGetV1Args
--- @field public rate_parameter_set_id integer [0,255]
--- @field public dataset_requested integer [0,16777215]
local RateTblCurrentDataGetV1Args = {}

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGetV1:st.zwave.Command
--- @alias RateTblCurrentDataGetV1 st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGetV1
---
--- v1 RATE_TBL_CURRENT_DATA_GET
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x07
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGetV1Args command-specific arguments
local RateTblCurrentDataGetV1 = {}
setmetatable(RateTblCurrentDataGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 RATE_TBL_CURRENT_DATA_GET object.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGetV1Args command-specific arguments
function RateTblCurrentDataGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.RATE_TBL_MONITOR, RateTblMonitor.RATE_TBL_CURRENT_DATA_GET, 1, args, ...)
end

--- Serialize v1 RATE_TBL_CURRENT_DATA_GET arguments.
---
--- @return string serialized payload
function RateTblCurrentDataGetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.rate_parameter_set_id)
  writer:write_be_u24(args.dataset_requested)
  return writer.buf
end

--- Deserialize a v1 RATE_TBL_CURRENT_DATA_GET payload.
---
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGetV1Args deserialized arguments
function RateTblCurrentDataGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("rate_parameter_set_id")
  reader:read_be_u24("dataset_requested")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGetV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGetV1Args
function RateTblCurrentDataGetV1._defaults(self)
  local args = {}
  args.rate_parameter_set_id = self.args.rate_parameter_set_id or 0
  args.dataset_requested = self.args.dataset_requested or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGetV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGetV1Args
function RateTblCurrentDataGetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGetV1
function RateTblCurrentDataGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGetV1
function RateTblCurrentDataGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1ArgsReports
--- @alias RateTblCurrentDataReportV1ArgsReports st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1ArgsReports
--- @field public current_scale integer [0,31]
--- @field public current_precision integer [0,7]
--- @field public current_value number [-2147483648,2147483647]
local RateTblCurrentDataReportV1ArgsReports = {}

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1Args
--- @alias RateTblCurrentDataReportV1Args st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1Args
--- @field public rate_parameter_set_id integer [0,255]
--- @field public dataset integer [0,16777215]
--- @field public year integer [0,65535]
--- @field public month integer [0,255]
--- @field public day integer [0,255]
--- @field public hour_local_time integer [0,255]
--- @field public minute_local_time integer [0,255]
--- @field public second_local_time integer [0,255]
--- @field public reports st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1ArgsReports[]
local RateTblCurrentDataReportV1Args = {}

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1:st.zwave.Command
--- @alias RateTblCurrentDataReportV1 st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1
---
--- v1 RATE_TBL_CURRENT_DATA_REPORT
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x08
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1Args command-specific arguments
local RateTblCurrentDataReportV1 = {}
setmetatable(RateTblCurrentDataReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 RATE_TBL_CURRENT_DATA_REPORT object.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1Args command-specific arguments
function RateTblCurrentDataReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.RATE_TBL_MONITOR, RateTblMonitor.RATE_TBL_CURRENT_DATA_REPORT, 1, args, ...)
end

--- Serialize v1 RATE_TBL_CURRENT_DATA_REPORT arguments.
---
--- @return string serialized payload
function RateTblCurrentDataReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(writer.length(args.reports))
  writer:write_u8(args.rate_parameter_set_id)
  writer:write_be_u24(args.dataset)
  writer:write_be_u16(args.year)
  writer:write_u8(args.month)
  writer:write_u8(args.day)
  writer:write_u8(args.hour_local_time)
  writer:write_u8(args.minute_local_time)
  writer:write_u8(args.second_local_time)
  for i=1,writer.length(args.reports) do
    writer:write_bits(5, args.reports[i].current_scale)
    writer:write_bits(3, args.reports[i].current_precision or writer.precision(args.reports[i].current_value))
    writer:write_float(args.reports[i].current_precision, args.reports[i].current_value)
  end
  return writer.buf
end

--- Deserialize a v1 RATE_TBL_CURRENT_DATA_REPORT payload.
---
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1Args deserialized arguments
function RateTblCurrentDataReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("reports_to_follow")
  reader:read_u8("rate_parameter_set_id")
  reader:read_be_u24("dataset")
  reader:read_be_u16("year")
  reader:read_u8("month")
  reader:read_u8("day")
  reader:read_u8("hour_local_time")
  reader:read_u8("minute_local_time")
  reader:read_u8("second_local_time")
  reader.parsed.reports = {}
  for i=1,reader.parsed.reports_to_follow do
    reader.parsed.reports[i] = {}
    reader:read_bits(5, "current_scale", reader.parsed.reports[i])
    reader:read_bits(3, "current_precision", reader.parsed.reports[i])
    reader:read_float(reader.parsed.reports[i].current_precision, "current_value", reader.parsed.reports[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1Args
function RateTblCurrentDataReportV1._defaults(self)
  local args = {}
  args.rate_parameter_set_id = self.args.rate_parameter_set_id or 0
  args.dataset = self.args.dataset or 0
  args.year = self.args.year or 0
  args.month = self.args.month or 0
  args.day = self.args.day or 0
  args.hour_local_time = self.args.hour_local_time or 0
  args.minute_local_time = self.args.minute_local_time or 0
  args.second_local_time = self.args.second_local_time or 0
  args.reports = self.args.reports or {}
  for i=1,buf.Writer.length(args.reports) do
    args.reports[i] = args.reports[i] or {}
    args.reports[i].current_scale = self.args.reports[i].current_scale or 0
    args.reports[i].current_value = self.args.reports[i].current_value or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1Args
function RateTblCurrentDataReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.reports) do
    args.reports[i] = args.reports[i] or {}
    args.reports[i].current_precision = args.reports[i].current_precision or writer.precision(args.reports[i].current_value)
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1
function RateTblCurrentDataReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1
function RateTblCurrentDataReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGetV1Args
--- @alias RateTblHistoricalDataGetV1Args st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGetV1Args
--- @field public maximum_reports integer [0,255]
--- @field public rate_parameter_set_id integer [0,255]
--- @field public dataset_requested integer [0,16777215]
--- @field public start_year integer [0,65535]
--- @field public start_month integer [0,255]
--- @field public start_day integer [0,255]
--- @field public start_hour_local_time integer [0,255]
--- @field public start_minute_local_time integer [0,255]
--- @field public start_second_local_time integer [0,255]
--- @field public stop_year integer [0,65535]
--- @field public stop_month integer [0,255]
--- @field public stop_day integer [0,255]
--- @field public stop_hour_local_time integer [0,255]
--- @field public stop_minute_local_time integer [0,255]
--- @field public stop_second_local_time integer [0,255]
local RateTblHistoricalDataGetV1Args = {}

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGetV1:st.zwave.Command
--- @alias RateTblHistoricalDataGetV1 st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGetV1
---
--- v1 RATE_TBL_HISTORICAL_DATA_GET
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x09
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGetV1Args command-specific arguments
local RateTblHistoricalDataGetV1 = {}
setmetatable(RateTblHistoricalDataGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 RATE_TBL_HISTORICAL_DATA_GET object.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGetV1Args command-specific arguments
function RateTblHistoricalDataGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.RATE_TBL_MONITOR, RateTblMonitor.RATE_TBL_HISTORICAL_DATA_GET, 1, args, ...)
end

--- Serialize v1 RATE_TBL_HISTORICAL_DATA_GET arguments.
---
--- @return string serialized payload
function RateTblHistoricalDataGetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.maximum_reports)
  writer:write_u8(args.rate_parameter_set_id)
  writer:write_be_u24(args.dataset_requested)
  writer:write_be_u16(args.start_year)
  writer:write_u8(args.start_month)
  writer:write_u8(args.start_day)
  writer:write_u8(args.start_hour_local_time)
  writer:write_u8(args.start_minute_local_time)
  writer:write_u8(args.start_second_local_time)
  writer:write_be_u16(args.stop_year)
  writer:write_u8(args.stop_month)
  writer:write_u8(args.stop_day)
  writer:write_u8(args.stop_hour_local_time)
  writer:write_u8(args.stop_minute_local_time)
  writer:write_u8(args.stop_second_local_time)
  return writer.buf
end

--- Deserialize a v1 RATE_TBL_HISTORICAL_DATA_GET payload.
---
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGetV1Args deserialized arguments
function RateTblHistoricalDataGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("maximum_reports")
  reader:read_u8("rate_parameter_set_id")
  reader:read_be_u24("dataset_requested")
  reader:read_be_u16("start_year")
  reader:read_u8("start_month")
  reader:read_u8("start_day")
  reader:read_u8("start_hour_local_time")
  reader:read_u8("start_minute_local_time")
  reader:read_u8("start_second_local_time")
  reader:read_be_u16("stop_year")
  reader:read_u8("stop_month")
  reader:read_u8("stop_day")
  reader:read_u8("stop_hour_local_time")
  reader:read_u8("stop_minute_local_time")
  reader:read_u8("stop_second_local_time")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGetV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGetV1Args
function RateTblHistoricalDataGetV1._defaults(self)
  local args = {}
  args.maximum_reports = self.args.maximum_reports or 0
  args.rate_parameter_set_id = self.args.rate_parameter_set_id or 0
  args.dataset_requested = self.args.dataset_requested or 0
  args.start_year = self.args.start_year or 0
  args.start_month = self.args.start_month or 0
  args.start_day = self.args.start_day or 0
  args.start_hour_local_time = self.args.start_hour_local_time or 0
  args.start_minute_local_time = self.args.start_minute_local_time or 0
  args.start_second_local_time = self.args.start_second_local_time or 0
  args.stop_year = self.args.stop_year or 0
  args.stop_month = self.args.stop_month or 0
  args.stop_day = self.args.stop_day or 0
  args.stop_hour_local_time = self.args.stop_hour_local_time or 0
  args.stop_minute_local_time = self.args.stop_minute_local_time or 0
  args.stop_second_local_time = self.args.stop_second_local_time or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGetV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGetV1Args
function RateTblHistoricalDataGetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGetV1
function RateTblHistoricalDataGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGetV1
function RateTblHistoricalDataGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1ArgsReports
--- @alias RateTblHistoricalDataReportV1ArgsReports st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1ArgsReports
--- @field public historical_scale integer [0,31]
--- @field public historical_precision integer [0,7]
--- @field public historical_value number [-2147483648,2147483647]
local RateTblHistoricalDataReportV1ArgsReports = {}

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1Args
--- @alias RateTblHistoricalDataReportV1Args st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1Args
--- @field public rate_parameter_set_id integer [0,255]
--- @field public dataset integer [0,16777215]
--- @field public year integer [0,65535]
--- @field public month integer [0,255]
--- @field public day integer [0,255]
--- @field public hour_local_time integer [0,255]
--- @field public minute_local_time integer [0,255]
--- @field public second_local_time integer [0,255]
--- @field public reports st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1ArgsReports[]
local RateTblHistoricalDataReportV1Args = {}

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1:st.zwave.Command
--- @alias RateTblHistoricalDataReportV1 st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1
---
--- v1 RATE_TBL_HISTORICAL_DATA_REPORT
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x0A
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1Args command-specific arguments
local RateTblHistoricalDataReportV1 = {}
setmetatable(RateTblHistoricalDataReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 RATE_TBL_HISTORICAL_DATA_REPORT object.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1Args command-specific arguments
function RateTblHistoricalDataReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.RATE_TBL_MONITOR, RateTblMonitor.RATE_TBL_HISTORICAL_DATA_REPORT, 1, args, ...)
end

--- Serialize v1 RATE_TBL_HISTORICAL_DATA_REPORT arguments.
---
--- @return string serialized payload
function RateTblHistoricalDataReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(writer.length(args.reports))
  writer:write_u8(args.rate_parameter_set_id)
  writer:write_be_u24(args.dataset)
  writer:write_be_u16(args.year)
  writer:write_u8(args.month)
  writer:write_u8(args.day)
  writer:write_u8(args.hour_local_time)
  writer:write_u8(args.minute_local_time)
  writer:write_u8(args.second_local_time)
  for i=1,writer.length(args.reports) do
    writer:write_bits(5, args.reports[i].historical_scale)
    writer:write_bits(3, args.reports[i].historical_precision or writer.precision(args.reports[i].historical_value))
    writer:write_float(args.reports[i].historical_precision, args.reports[i].historical_value)
  end
  return writer.buf
end

--- Deserialize a v1 RATE_TBL_HISTORICAL_DATA_REPORT payload.
---
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1Args deserialized arguments
function RateTblHistoricalDataReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("reports_to_follow")
  reader:read_u8("rate_parameter_set_id")
  reader:read_be_u24("dataset")
  reader:read_be_u16("year")
  reader:read_u8("month")
  reader:read_u8("day")
  reader:read_u8("hour_local_time")
  reader:read_u8("minute_local_time")
  reader:read_u8("second_local_time")
  reader.parsed.reports = {}
  for i=1,reader.parsed.reports_to_follow do
    reader.parsed.reports[i] = {}
    reader:read_bits(5, "historical_scale", reader.parsed.reports[i])
    reader:read_bits(3, "historical_precision", reader.parsed.reports[i])
    reader:read_float(reader.parsed.reports[i].historical_precision, "historical_value", reader.parsed.reports[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1Args
function RateTblHistoricalDataReportV1._defaults(self)
  local args = {}
  args.rate_parameter_set_id = self.args.rate_parameter_set_id or 0
  args.dataset = self.args.dataset or 0
  args.year = self.args.year or 0
  args.month = self.args.month or 0
  args.day = self.args.day or 0
  args.hour_local_time = self.args.hour_local_time or 0
  args.minute_local_time = self.args.minute_local_time or 0
  args.second_local_time = self.args.second_local_time or 0
  args.reports = self.args.reports or {}
  for i=1,buf.Writer.length(args.reports) do
    args.reports[i] = args.reports[i] or {}
    args.reports[i].historical_scale = self.args.reports[i].historical_scale or 0
    args.reports[i].historical_value = self.args.reports[i].historical_value or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1Args
function RateTblHistoricalDataReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.reports) do
    args.reports[i] = args.reports[i] or {}
    args.reports[i].historical_precision = args.reports[i].historical_precision or writer.precision(args.reports[i].historical_value)
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1
function RateTblHistoricalDataReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1
function RateTblHistoricalDataReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGet
--- @alias _RateTblSupportedGet st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGet
---
--- Dynamically versioned RATE_TBL_SUPPORTED_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGetV1Args
local _RateTblSupportedGet = {}
setmetatable(_RateTblSupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a RATE_TBL_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblSupportedGet
function _RateTblSupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, RateTblMonitor.RATE_TBL_SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReport
--- @alias _RateTblSupportedReport st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReport
---
--- Dynamically versioned RATE_TBL_SUPPORTED_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReportV1Args
local _RateTblSupportedReport = {}
setmetatable(_RateTblSupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a RATE_TBL_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblSupportedReport
function _RateTblSupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, RateTblMonitor.RATE_TBL_SUPPORTED_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblGet
--- @alias _RateTblGet st.zwave.CommandClass.RateTblMonitor.RateTblGet
---
--- Dynamically versioned RATE_TBL_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblGetV1Args
local _RateTblGet = {}
setmetatable(_RateTblGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a RATE_TBL_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblGet
function _RateTblGet:construct(module, args, ...)
  return zw.Command._construct(module, RateTblMonitor.RATE_TBL_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblReport
--- @alias _RateTblReport st.zwave.CommandClass.RateTblMonitor.RateTblReport
---
--- Dynamically versioned RATE_TBL_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblReportV1Args
local _RateTblReport = {}
setmetatable(_RateTblReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a RATE_TBL_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblReport
function _RateTblReport:construct(module, args, ...)
  return zw.Command._construct(module, RateTblMonitor.RATE_TBL_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGet
--- @alias _RateTblActiveRateGet st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGet
---
--- Dynamically versioned RATE_TBL_ACTIVE_RATE_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGetV1Args
local _RateTblActiveRateGet = {}
setmetatable(_RateTblActiveRateGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a RATE_TBL_ACTIVE_RATE_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateGet
function _RateTblActiveRateGet:construct(module, args, ...)
  return zw.Command._construct(module, RateTblMonitor.RATE_TBL_ACTIVE_RATE_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReport
--- @alias _RateTblActiveRateReport st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReport
---
--- Dynamically versioned RATE_TBL_ACTIVE_RATE_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReportV1Args
local _RateTblActiveRateReport = {}
setmetatable(_RateTblActiveRateReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a RATE_TBL_ACTIVE_RATE_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblActiveRateReport
function _RateTblActiveRateReport:construct(module, args, ...)
  return zw.Command._construct(module, RateTblMonitor.RATE_TBL_ACTIVE_RATE_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGet
--- @alias _RateTblCurrentDataGet st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGet
---
--- Dynamically versioned RATE_TBL_CURRENT_DATA_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x07
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGetV1Args
local _RateTblCurrentDataGet = {}
setmetatable(_RateTblCurrentDataGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a RATE_TBL_CURRENT_DATA_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataGet
function _RateTblCurrentDataGet:construct(module, args, ...)
  return zw.Command._construct(module, RateTblMonitor.RATE_TBL_CURRENT_DATA_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReport
--- @alias _RateTblCurrentDataReport st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReport
---
--- Dynamically versioned RATE_TBL_CURRENT_DATA_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x08
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1Args
local _RateTblCurrentDataReport = {}
setmetatable(_RateTblCurrentDataReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a RATE_TBL_CURRENT_DATA_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblCurrentDataReport
function _RateTblCurrentDataReport:construct(module, args, ...)
  return zw.Command._construct(module, RateTblMonitor.RATE_TBL_CURRENT_DATA_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGet
--- @alias _RateTblHistoricalDataGet st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGet
---
--- Dynamically versioned RATE_TBL_HISTORICAL_DATA_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x09
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGetV1Args
local _RateTblHistoricalDataGet = {}
setmetatable(_RateTblHistoricalDataGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a RATE_TBL_HISTORICAL_DATA_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataGet
function _RateTblHistoricalDataGet:construct(module, args, ...)
  return zw.Command._construct(module, RateTblMonitor.RATE_TBL_HISTORICAL_DATA_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReport
--- @alias _RateTblHistoricalDataReport st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReport
---
--- Dynamically versioned RATE_TBL_HISTORICAL_DATA_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x49
--- @field public cmd_id number 0x0A
--- @field public version number 1
--- @field public args st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1Args
local _RateTblHistoricalDataReport = {}
setmetatable(_RateTblHistoricalDataReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a RATE_TBL_HISTORICAL_DATA_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.RateTblMonitor command class module instance
--- @param args st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.RateTblMonitor.RateTblHistoricalDataReport
function _RateTblHistoricalDataReport:construct(module, args, ...)
  return zw.Command._construct(module, RateTblMonitor.RATE_TBL_HISTORICAL_DATA_REPORT, module._serialization_version, args, ...)
end

RateTblMonitor.RateTblSupportedGetV1 = RateTblSupportedGetV1
RateTblMonitor.RateTblSupportedReportV1 = RateTblSupportedReportV1
RateTblMonitor.RateTblGetV1 = RateTblGetV1
RateTblMonitor.RateTblReportV1 = RateTblReportV1
RateTblMonitor.RateTblActiveRateGetV1 = RateTblActiveRateGetV1
RateTblMonitor.RateTblActiveRateReportV1 = RateTblActiveRateReportV1
RateTblMonitor.RateTblCurrentDataGetV1 = RateTblCurrentDataGetV1
RateTblMonitor.RateTblCurrentDataReportV1 = RateTblCurrentDataReportV1
RateTblMonitor.RateTblHistoricalDataGetV1 = RateTblHistoricalDataGetV1
RateTblMonitor.RateTblHistoricalDataReportV1 = RateTblHistoricalDataReportV1
RateTblMonitor.RateTblSupportedGet = _RateTblSupportedGet
RateTblMonitor.RateTblSupportedReport = _RateTblSupportedReport
RateTblMonitor.RateTblGet = _RateTblGet
RateTblMonitor.RateTblReport = _RateTblReport
RateTblMonitor.RateTblActiveRateGet = _RateTblActiveRateGet
RateTblMonitor.RateTblActiveRateReport = _RateTblActiveRateReport
RateTblMonitor.RateTblCurrentDataGet = _RateTblCurrentDataGet
RateTblMonitor.RateTblCurrentDataReport = _RateTblCurrentDataReport
RateTblMonitor.RateTblHistoricalDataGet = _RateTblHistoricalDataGet
RateTblMonitor.RateTblHistoricalDataReport = _RateTblHistoricalDataReport

RateTblMonitor._lut = {
  [0] = { -- dynamically versioned constructors
    [RateTblMonitor.RATE_TBL_SUPPORTED_GET] = RateTblMonitor.RateTblSupportedGet,
    [RateTblMonitor.RATE_TBL_SUPPORTED_REPORT] = RateTblMonitor.RateTblSupportedReport,
    [RateTblMonitor.RATE_TBL_GET] = RateTblMonitor.RateTblGet,
    [RateTblMonitor.RATE_TBL_REPORT] = RateTblMonitor.RateTblReport,
    [RateTblMonitor.RATE_TBL_ACTIVE_RATE_GET] = RateTblMonitor.RateTblActiveRateGet,
    [RateTblMonitor.RATE_TBL_ACTIVE_RATE_REPORT] = RateTblMonitor.RateTblActiveRateReport,
    [RateTblMonitor.RATE_TBL_CURRENT_DATA_GET] = RateTblMonitor.RateTblCurrentDataGet,
    [RateTblMonitor.RATE_TBL_CURRENT_DATA_REPORT] = RateTblMonitor.RateTblCurrentDataReport,
    [RateTblMonitor.RATE_TBL_HISTORICAL_DATA_GET] = RateTblMonitor.RateTblHistoricalDataGet,
    [RateTblMonitor.RATE_TBL_HISTORICAL_DATA_REPORT] = RateTblMonitor.RateTblHistoricalDataReport
  },
  [1] = { -- version 1
    [RateTblMonitor.RATE_TBL_SUPPORTED_GET] = RateTblMonitor.RateTblSupportedGetV1,
    [RateTblMonitor.RATE_TBL_SUPPORTED_REPORT] = RateTblMonitor.RateTblSupportedReportV1,
    [RateTblMonitor.RATE_TBL_GET] = RateTblMonitor.RateTblGetV1,
    [RateTblMonitor.RATE_TBL_REPORT] = RateTblMonitor.RateTblReportV1,
    [RateTblMonitor.RATE_TBL_ACTIVE_RATE_GET] = RateTblMonitor.RateTblActiveRateGetV1,
    [RateTblMonitor.RATE_TBL_ACTIVE_RATE_REPORT] = RateTblMonitor.RateTblActiveRateReportV1,
    [RateTblMonitor.RATE_TBL_CURRENT_DATA_GET] = RateTblMonitor.RateTblCurrentDataGetV1,
    [RateTblMonitor.RATE_TBL_CURRENT_DATA_REPORT] = RateTblMonitor.RateTblCurrentDataReportV1,
    [RateTblMonitor.RATE_TBL_HISTORICAL_DATA_GET] = RateTblMonitor.RateTblHistoricalDataGetV1,
    [RateTblMonitor.RATE_TBL_HISTORICAL_DATA_REPORT] = RateTblMonitor.RateTblHistoricalDataReportV1
  }
}

return RateTblMonitor
