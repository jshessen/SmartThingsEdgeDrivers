-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.Schedule
--- @alias Schedule st.zwave.CommandClass.Schedule
---
--- Supported versions: 1,2,3,4
---
--- @field public SUPPORTED_GET number 0x01 - SCHEDULE_SUPPORTED_GET command id
--- @field public SUPPORTED_REPORT number 0x02 - SCHEDULE_SUPPORTED_REPORT command id
--- @field public COMMAND_SET number 0x03 - COMMAND_SCHEDULE_SET command id
--- @field public COMMAND_GET number 0x04 - COMMAND_SCHEDULE_GET command id
--- @field public COMMAND_REPORT number 0x05 - COMMAND_SCHEDULE_REPORT command id
--- @field public REMOVE number 0x06 - SCHEDULE_REMOVE command id
--- @field public STATE_SET number 0x07 - SCHEDULE_STATE_SET command id
--- @field public STATE_GET number 0x08 - SCHEDULE_STATE_GET command id
--- @field public STATE_REPORT number 0x09 - SCHEDULE_STATE_REPORT command id
--- @field public SUPPORTED_COMMANDS_GET number 0x0A - SCHEDULE_SUPPORTED_COMMANDS_GET command id
--- @field public SUPPORTED_COMMANDS_REPORT number 0x0B - SCHEDULE_SUPPORTED_COMMANDS_REPORT command id
local Schedule = {}
Schedule.SUPPORTED_GET = 0x01
Schedule.SUPPORTED_REPORT = 0x02
Schedule.COMMAND_SET = 0x03
Schedule.COMMAND_GET = 0x04
Schedule.COMMAND_REPORT = 0x05
Schedule.REMOVE = 0x06
Schedule.STATE_SET = 0x07
Schedule.STATE_GET = 0x08
Schedule.STATE_REPORT = 0x09
Schedule.SUPPORTED_COMMANDS_GET = 0x0A
Schedule.SUPPORTED_COMMANDS_REPORT = 0x0B

Schedule._commands = {
  [Schedule.SUPPORTED_GET] = "SUPPORTED_GET",
  [Schedule.SUPPORTED_REPORT] = "SUPPORTED_REPORT",
  [Schedule.COMMAND_SET] = "COMMAND_SET",
  [Schedule.COMMAND_GET] = "COMMAND_GET",
  [Schedule.COMMAND_REPORT] = "COMMAND_REPORT",
  [Schedule.REMOVE] = "REMOVE",
  [Schedule.STATE_SET] = "STATE_SET",
  [Schedule.STATE_GET] = "STATE_GET",
  [Schedule.STATE_REPORT] = "STATE_REPORT",
  [Schedule.SUPPORTED_COMMANDS_GET] = "SUPPORTED_COMMANDS_GET",
  [Schedule.SUPPORTED_COMMANDS_REPORT] = "SUPPORTED_COMMANDS_REPORT"
}

--- Instantiate a versioned instance of the Schedule Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.Schedule versioned command class instance
function Schedule:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.SCHEDULE][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(Schedule, {
  __call = Schedule.init
})

Schedule._serialization_version = nil
Schedule._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.SCHEDULE] = {
  [1] = true,
  [2] = true,
  [3] = true,
  [4] = true
}

--- @class st.zwave.CommandClass.Schedule.SupportedGetV1Args
--- @alias SupportedGetV1Args st.zwave.CommandClass.Schedule.SupportedGetV1Args
local SupportedGetV1Args = {}

--- @class st.zwave.CommandClass.Schedule.SupportedGetV1:st.zwave.Command
--- @alias SupportedGetV1 st.zwave.CommandClass.Schedule.SupportedGetV1
---
--- v1 SCHEDULE_SUPPORTED_GET
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Schedule.SupportedGetV1Args command-specific arguments
local SupportedGetV1 = {}
setmetatable(SupportedGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 SCHEDULE_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.SupportedGetV1Args command-specific arguments
function SupportedGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.SUPPORTED_GET, 1, args, ...)
end

--- Serialize v1 SCHEDULE_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function SupportedGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 SCHEDULE_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.Schedule.SupportedGetV1Args deserialized arguments
function SupportedGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedGetV1
--- @return st.zwave.CommandClass.Schedule.SupportedGetV1Args
function SupportedGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedGetV1
--- @return st.zwave.CommandClass.Schedule.SupportedGetV1Args
function SupportedGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedGetV1
function SupportedGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedGetV1
function SupportedGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.SupportedReportV1ArgsSupportedCcs
--- @alias SupportedReportV1ArgsSupportedCcs st.zwave.CommandClass.Schedule.SupportedReportV1ArgsSupportedCcs
--- @field public supported_cc integer [0,255]
--- @field public supported_command integer [0,3]
local SupportedReportV1ArgsSupportedCcs = {}

--- @class st.zwave.CommandClass.Schedule.SupportedReportV1Args
--- @alias SupportedReportV1Args st.zwave.CommandClass.Schedule.SupportedReportV1Args
--- @field public number_of_supported_schedule_id integer [0,255]
--- @field public start_time_support integer [0,63]
--- @field public fallback_support boolean
--- @field public support_enable_disable boolean
--- @field public supported_ccs st.zwave.CommandClass.Schedule.SupportedReportV1ArgsSupportedCcs[]
--- @field public supported_override_types integer [0,127]
--- @field public override_support boolean
local SupportedReportV1Args = {}

--- @class st.zwave.CommandClass.Schedule.SupportedReportV1:st.zwave.Command
--- @alias SupportedReportV1 st.zwave.CommandClass.Schedule.SupportedReportV1
---
--- v1 SCHEDULE_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Schedule.SupportedReportV1Args command-specific arguments
local SupportedReportV1 = {}
setmetatable(SupportedReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 SCHEDULE_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.SupportedReportV1Args command-specific arguments
function SupportedReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.SUPPORTED_REPORT, 1, args, ...)
end

--- Serialize v1 SCHEDULE_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.number_of_supported_schedule_id)
  writer:write_bits(6, args.start_time_support)
  writer:write_bool(args.fallback_support)
  writer:write_bool(args.support_enable_disable)
  writer:write_u8(writer.length(args.supported_ccs))
  for i=1,writer.length(args.supported_ccs) do
    writer:write_u8(args.supported_ccs[i].supported_cc)
    writer:write_bits(2, args.supported_ccs[i].supported_command)
    writer:write_bits(6, 0) -- reserved
  end
  writer:write_bits(7, args.supported_override_types)
  writer:write_bool(args.override_support)
  return writer.buf
end

--- Deserialize a v1 SCHEDULE_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.Schedule.SupportedReportV1Args deserialized arguments
function SupportedReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("number_of_supported_schedule_id")
  reader:read_bits(6, "start_time_support")
  reader:read_bool("fallback_support")
  reader:read_bool("support_enable_disable")
  reader:read_u8("number_of_supported_cc")
  reader.parsed.supported_ccs = {}
  for i=1,reader.parsed.number_of_supported_cc do
    reader.parsed.supported_ccs[i] = {}
    reader:read_u8("supported_cc", reader.parsed.supported_ccs[i])
    reader:read_bits(2, "supported_command", reader.parsed.supported_ccs[i])
    reader:read_bits(6) -- reserved
  end
  reader:read_bits(7, "supported_override_types")
  reader:read_bool("override_support")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedReportV1
--- @return st.zwave.CommandClass.Schedule.SupportedReportV1Args
function SupportedReportV1._defaults(self)
  local args = {}
  args.number_of_supported_schedule_id = self.args.number_of_supported_schedule_id or 0
  args.start_time_support = self.args.start_time_support or 0
  args.fallback_support = self.args.fallback_support or false
  args.support_enable_disable = self.args.support_enable_disable or false
  args.supported_ccs = self.args.supported_ccs or {}
  for i=1,buf.Writer.length(args.supported_ccs) do
    args.supported_ccs[i] = args.supported_ccs[i] or {}
    args.supported_ccs[i].supported_cc = self.args.supported_ccs[i].supported_cc or 0
    args.supported_ccs[i].supported_command = self.args.supported_ccs[i].supported_command or 0
  end
  args.supported_override_types = self.args.supported_override_types or 0
  args.override_support = self.args.override_support or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedReportV1
--- @return st.zwave.CommandClass.Schedule.SupportedReportV1Args
function SupportedReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.supported_ccs) do
    args.supported_ccs[i] = args.supported_ccs[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedReportV1
function SupportedReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedReportV1
function SupportedReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.CommandSetV1ArgsCmds
--- @alias CommandSetV1ArgsCmds st.zwave.CommandClass.Schedule.CommandSetV1ArgsCmds
--- @field public cmd_byte string
local CommandSetV1ArgsCmds = {}

--- @class st.zwave.CommandClass.Schedule.CommandSetV1Args
--- @alias CommandSetV1Args st.zwave.CommandClass.Schedule.CommandSetV1Args
--- @field public schedule_id integer [0,255]
--- @field public user_identifier integer [0,255]
--- @field public start_year integer [0,255]
--- @field public start_month integer [0,15]
--- @field public start_day_of_month integer [0,31]
--- @field public start_weekday integer [0,127]
--- @field public res boolean
--- @field public start_hour integer [0,31]
--- @field public duration_type integer [0,7]
--- @field public start_minute integer [0,63]
--- @field public duration_byte integer [0,65535]
--- @field public reports_to_follow integer [0,255]
--- @field public cmds st.zwave.CommandClass.Schedule.CommandSetV1ArgsCmds[]
local CommandSetV1Args = {}

--- @class st.zwave.CommandClass.Schedule.CommandSetV1:st.zwave.Command
--- @alias CommandSetV1 st.zwave.CommandClass.Schedule.CommandSetV1
---
--- v1 COMMAND_SCHEDULE_SET
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Schedule.CommandSetV1Args command-specific arguments
local CommandSetV1 = {}
setmetatable(CommandSetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 COMMAND_SCHEDULE_SET object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.CommandSetV1Args command-specific arguments
function CommandSetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.COMMAND_SET, 1, args, ...)
end

--- Serialize v1 COMMAND_SCHEDULE_SET arguments.
---
--- @return string serialized payload
function CommandSetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id)
  writer:write_u8(args.user_identifier)
  writer:write_u8(args.start_year)
  writer:write_bits(4, args.start_month)
  writer:write_bits(4, 0) -- reserved1
  writer:write_bits(5, args.start_day_of_month)
  writer:write_bits(3, 0) -- reserved2
  writer:write_bits(7, args.start_weekday)
  writer:write_bool(args.res)
  writer:write_bits(5, args.start_hour)
  writer:write_bits(3, args.duration_type)
  writer:write_bits(6, args.start_minute)
  writer:write_bits(2, 0) -- reserved3
  writer:write_be_u16(args.duration_byte)
  writer:write_u8(args.reports_to_follow)
  writer:write_u8(writer.length(args.cmds))
  for i=1,writer.length(args.cmds) do
    writer:write_u8(writer.length(args.cmds[i].cmd_byte))
    writer:write_bytes(args.cmds[i].cmd_byte)
  end
  return writer.buf
end

--- Deserialize a v1 COMMAND_SCHEDULE_SET payload.
---
--- @return st.zwave.CommandClass.Schedule.CommandSetV1Args deserialized arguments
function CommandSetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id")
  reader:read_u8("user_identifier")
  reader:read_u8("start_year")
  reader:read_bits(4, "start_month")
  reader:read_bits(4) -- reserved1
  reader:read_bits(5, "start_day_of_month")
  reader:read_bits(3) -- reserved2
  reader:read_bits(7, "start_weekday")
  reader:read_bool("res")
  reader:read_bits(5, "start_hour")
  reader:read_bits(3, "duration_type")
  reader:read_bits(6, "start_minute")
  reader:read_bits(2) -- reserved3
  reader:read_be_u16("duration_byte")
  reader:read_u8("reports_to_follow")
  reader:read_u8("number_of_cmd_to_follow")
  reader.parsed.cmds = {}
  for i=1,reader.parsed.number_of_cmd_to_follow do
    reader.parsed.cmds[i] = {}
    reader:read_u8("cmd_length", reader.parsed.cmds[i])
    reader:read_bytes(reader.parsed.cmds[i].cmd_length, "cmd_byte", reader.parsed.cmds[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandSetV1
--- @return st.zwave.CommandClass.Schedule.CommandSetV1Args
function CommandSetV1._defaults(self)
  local args = {}
  args.schedule_id = self.args.schedule_id or 0
  args.user_identifier = self.args.user_identifier or 0
  args.start_year = self.args.start_year or 0
  args.start_month = self.args.start_month or 0
  args.start_day_of_month = self.args.start_day_of_month or 0
  args.start_weekday = self.args.start_weekday or 0
  args.res = self.args.res or false
  args.start_hour = self.args.start_hour or 0
  args.duration_type = self.args.duration_type or 0
  args.start_minute = self.args.start_minute or 0
  args.duration_byte = self.args.duration_byte or 0
  args.reports_to_follow = self.args.reports_to_follow or 0
  args.cmds = self.args.cmds or {}
  for i=1,buf.Writer.length(args.cmds) do
    args.cmds[i] = args.cmds[i] or {}
    args.cmds[i].cmd_byte = self.args.cmds[i].cmd_byte or ""
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandSetV1
--- @return st.zwave.CommandClass.Schedule.CommandSetV1Args
function CommandSetV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.cmds) do
    args.cmds[i] = args.cmds[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.CommandSetV1
function CommandSetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.CommandSetV1
function CommandSetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.CommandGetV1Args
--- @alias CommandGetV1Args st.zwave.CommandClass.Schedule.CommandGetV1Args
--- @field public schedule_id integer [0,255]
local CommandGetV1Args = {}

--- @class st.zwave.CommandClass.Schedule.CommandGetV1:st.zwave.Command
--- @alias CommandGetV1 st.zwave.CommandClass.Schedule.CommandGetV1
---
--- v1 COMMAND_SCHEDULE_GET
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Schedule.CommandGetV1Args command-specific arguments
local CommandGetV1 = {}
setmetatable(CommandGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 COMMAND_SCHEDULE_GET object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.CommandGetV1Args command-specific arguments
function CommandGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.COMMAND_GET, 1, args, ...)
end

--- Serialize v1 COMMAND_SCHEDULE_GET arguments.
---
--- @return string serialized payload
function CommandGetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id)
  return writer.buf
end

--- Deserialize a v1 COMMAND_SCHEDULE_GET payload.
---
--- @return st.zwave.CommandClass.Schedule.CommandGetV1Args deserialized arguments
function CommandGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandGetV1
--- @return st.zwave.CommandClass.Schedule.CommandGetV1Args
function CommandGetV1._defaults(self)
  local args = {}
  args.schedule_id = self.args.schedule_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandGetV1
--- @return st.zwave.CommandClass.Schedule.CommandGetV1Args
function CommandGetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.CommandGetV1
function CommandGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.CommandGetV1
function CommandGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.CommandReportV1ArgsCmds
--- @alias CommandReportV1ArgsCmds st.zwave.CommandClass.Schedule.CommandReportV1ArgsCmds
--- @field public cmd_byte string
local CommandReportV1ArgsCmds = {}

--- @class st.zwave.CommandClass.Schedule.CommandReportV1Args
--- @alias CommandReportV1Args st.zwave.CommandClass.Schedule.CommandReportV1Args
--- @field public schedule_id integer [0,255]
--- @field public user_identifier integer [0,255]
--- @field public start_year integer [0,255]
--- @field public start_month integer [0,15]
--- @field public active_id integer [0,15]
--- @field public start_day_of_month integer [0,31]
--- @field public start_weekday integer [0,127]
--- @field public res boolean
--- @field public start_hour integer [0,31]
--- @field public duration_type integer [0,7]
--- @field public start_minute integer [0,63]
--- @field public duration_byte integer [0,65535]
--- @field public reports_to_follow integer [0,255]
--- @field public cmds st.zwave.CommandClass.Schedule.CommandReportV1ArgsCmds[]
local CommandReportV1Args = {}

--- @class st.zwave.CommandClass.Schedule.CommandReportV1:st.zwave.Command
--- @alias CommandReportV1 st.zwave.CommandClass.Schedule.CommandReportV1
---
--- v1 COMMAND_SCHEDULE_REPORT
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Schedule.CommandReportV1Args command-specific arguments
local CommandReportV1 = {}
setmetatable(CommandReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 COMMAND_SCHEDULE_REPORT object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.CommandReportV1Args command-specific arguments
function CommandReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.COMMAND_REPORT, 1, args, ...)
end

--- Serialize v1 COMMAND_SCHEDULE_REPORT arguments.
---
--- @return string serialized payload
function CommandReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id)
  writer:write_u8(args.user_identifier)
  writer:write_u8(args.start_year)
  writer:write_bits(4, args.start_month)
  writer:write_bits(4, args.active_id)
  writer:write_bits(5, args.start_day_of_month)
  writer:write_bits(3, 0) -- reserved2
  writer:write_bits(7, args.start_weekday)
  writer:write_bool(args.res)
  writer:write_bits(5, args.start_hour)
  writer:write_bits(3, args.duration_type)
  writer:write_bits(6, args.start_minute)
  writer:write_bits(2, 0) -- reserved3
  writer:write_be_u16(args.duration_byte)
  writer:write_u8(args.reports_to_follow)
  writer:write_u8(writer.length(args.cmds))
  for i=1,writer.length(args.cmds) do
    writer:write_u8(writer.length(args.cmds[i].cmd_byte))
    writer:write_bytes(args.cmds[i].cmd_byte)
  end
  return writer.buf
end

--- Deserialize a v1 COMMAND_SCHEDULE_REPORT payload.
---
--- @return st.zwave.CommandClass.Schedule.CommandReportV1Args deserialized arguments
function CommandReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id")
  reader:read_u8("user_identifier")
  reader:read_u8("start_year")
  reader:read_bits(4, "start_month")
  reader:read_bits(4, "active_id")
  reader:read_bits(5, "start_day_of_month")
  reader:read_bits(3) -- reserved2
  reader:read_bits(7, "start_weekday")
  reader:read_bool("res")
  reader:read_bits(5, "start_hour")
  reader:read_bits(3, "duration_type")
  reader:read_bits(6, "start_minute")
  reader:read_bits(2) -- reserved3
  reader:read_be_u16("duration_byte")
  reader:read_u8("reports_to_follow")
  reader:read_u8("number_of_cmd_to_follow")
  reader.parsed.cmds = {}
  for i=1,reader.parsed.number_of_cmd_to_follow do
    reader.parsed.cmds[i] = {}
    reader:read_u8("cmd_length", reader.parsed.cmds[i])
    reader:read_bytes(reader.parsed.cmds[i].cmd_length, "cmd_byte", reader.parsed.cmds[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandReportV1
--- @return st.zwave.CommandClass.Schedule.CommandReportV1Args
function CommandReportV1._defaults(self)
  local args = {}
  args.schedule_id = self.args.schedule_id or 0
  args.user_identifier = self.args.user_identifier or 0
  args.start_year = self.args.start_year or 0
  args.start_month = self.args.start_month or 0
  args.active_id = self.args.active_id or 0
  args.start_day_of_month = self.args.start_day_of_month or 0
  args.start_weekday = self.args.start_weekday or 0
  args.res = self.args.res or false
  args.start_hour = self.args.start_hour or 0
  args.duration_type = self.args.duration_type or 0
  args.start_minute = self.args.start_minute or 0
  args.duration_byte = self.args.duration_byte or 0
  args.reports_to_follow = self.args.reports_to_follow or 0
  args.cmds = self.args.cmds or {}
  for i=1,buf.Writer.length(args.cmds) do
    args.cmds[i] = args.cmds[i] or {}
    args.cmds[i].cmd_byte = self.args.cmds[i].cmd_byte or ""
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandReportV1
--- @return st.zwave.CommandClass.Schedule.CommandReportV1Args
function CommandReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.cmds) do
    args.cmds[i] = args.cmds[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.CommandReportV1
function CommandReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.CommandReportV1
function CommandReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.RemoveV1Args
--- @alias RemoveV1Args st.zwave.CommandClass.Schedule.RemoveV1Args
--- @field public schedule_id integer [0,255]
local RemoveV1Args = {}

--- @class st.zwave.CommandClass.Schedule.RemoveV1:st.zwave.Command
--- @alias RemoveV1 st.zwave.CommandClass.Schedule.RemoveV1
---
--- v1 SCHEDULE_REMOVE
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Schedule.RemoveV1Args command-specific arguments
local RemoveV1 = {}
setmetatable(RemoveV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 SCHEDULE_REMOVE object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.RemoveV1Args command-specific arguments
function RemoveV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.REMOVE, 1, args, ...)
end

--- Serialize v1 SCHEDULE_REMOVE arguments.
---
--- @return string serialized payload
function RemoveV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id)
  return writer.buf
end

--- Deserialize a v1 SCHEDULE_REMOVE payload.
---
--- @return st.zwave.CommandClass.Schedule.RemoveV1Args deserialized arguments
function RemoveV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.RemoveV1
--- @return st.zwave.CommandClass.Schedule.RemoveV1Args
function RemoveV1._defaults(self)
  local args = {}
  args.schedule_id = self.args.schedule_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.RemoveV1
--- @return st.zwave.CommandClass.Schedule.RemoveV1Args
function RemoveV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.RemoveV1
function RemoveV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.RemoveV1
function RemoveV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.StateSetV1Args
--- @alias StateSetV1Args st.zwave.CommandClass.Schedule.StateSetV1Args
--- @field public schedule_id integer [0,255]
--- @field public schedule_state integer [0,255]
local StateSetV1Args = {}

--- @class st.zwave.CommandClass.Schedule.StateSetV1:st.zwave.Command
--- @alias StateSetV1 st.zwave.CommandClass.Schedule.StateSetV1
---
--- v1 SCHEDULE_STATE_SET
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x07
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Schedule.StateSetV1Args command-specific arguments
local StateSetV1 = {}
setmetatable(StateSetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 SCHEDULE_STATE_SET object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.StateSetV1Args command-specific arguments
function StateSetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.STATE_SET, 1, args, ...)
end

--- Serialize v1 SCHEDULE_STATE_SET arguments.
---
--- @return string serialized payload
function StateSetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id)
  writer:write_u8(args.schedule_state)
  return writer.buf
end

--- Deserialize a v1 SCHEDULE_STATE_SET payload.
---
--- @return st.zwave.CommandClass.Schedule.StateSetV1Args deserialized arguments
function StateSetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id")
  reader:read_u8("schedule_state")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.StateSetV1
--- @return st.zwave.CommandClass.Schedule.StateSetV1Args
function StateSetV1._defaults(self)
  local args = {}
  args.schedule_id = self.args.schedule_id or 0
  args.schedule_state = self.args.schedule_state or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.StateSetV1
--- @return st.zwave.CommandClass.Schedule.StateSetV1Args
function StateSetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.StateSetV1
function StateSetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.StateSetV1
function StateSetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.StateGetV1Args
--- @alias StateGetV1Args st.zwave.CommandClass.Schedule.StateGetV1Args
local StateGetV1Args = {}

--- @class st.zwave.CommandClass.Schedule.StateGetV1:st.zwave.Command
--- @alias StateGetV1 st.zwave.CommandClass.Schedule.StateGetV1
---
--- v1 SCHEDULE_STATE_GET
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x08
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Schedule.StateGetV1Args command-specific arguments
local StateGetV1 = {}
setmetatable(StateGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 SCHEDULE_STATE_GET object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.StateGetV1Args command-specific arguments
function StateGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.STATE_GET, 1, args, ...)
end

--- Serialize v1 SCHEDULE_STATE_GET arguments.
---
--- @return string serialized payload
function StateGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 SCHEDULE_STATE_GET payload.
---
--- @return st.zwave.CommandClass.Schedule.StateGetV1Args deserialized arguments
function StateGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.StateGetV1
--- @return st.zwave.CommandClass.Schedule.StateGetV1Args
function StateGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.StateGetV1
--- @return st.zwave.CommandClass.Schedule.StateGetV1Args
function StateGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.StateGetV1
function StateGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.StateGetV1
function StateGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.StateReportV1ArgsReports
--- @alias StateReportV1ArgsReports st.zwave.CommandClass.Schedule.StateReportV1ArgsReports
--- @field public active_id_1 integer [0,15]
--- @field public active_id_2 integer [0,15]
local StateReportV1ArgsReports = {}

--- @class st.zwave.CommandClass.Schedule.StateReportV1Args
--- @alias StateReportV1Args st.zwave.CommandClass.Schedule.StateReportV1Args
--- @field public number_of_supported_schedule_id integer [0,255]
--- @field public override boolean
--- @field public reports st.zwave.CommandClass.Schedule.StateReportV1ArgsReports[]
local StateReportV1Args = {}

--- @class st.zwave.CommandClass.Schedule.StateReportV1:st.zwave.Command
--- @alias StateReportV1 st.zwave.CommandClass.Schedule.StateReportV1
---
--- v1 SCHEDULE_STATE_REPORT
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x09
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Schedule.StateReportV1Args command-specific arguments
local StateReportV1 = {}
setmetatable(StateReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 SCHEDULE_STATE_REPORT object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.StateReportV1Args command-specific arguments
function StateReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.STATE_REPORT, 1, args, ...)
end

--- Serialize v1 SCHEDULE_STATE_REPORT arguments.
---
--- @return string serialized payload
function StateReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.number_of_supported_schedule_id)
  writer:write_bool(args.override)
  writer:write_bits(7, writer.length(args.reports))
  for i=1,writer.length(args.reports) do
    writer:write_bits(4, args.reports[i].active_id_1)
    writer:write_bits(4, args.reports[i].active_id_2)
  end
  return writer.buf
end

--- Deserialize a v1 SCHEDULE_STATE_REPORT payload.
---
--- @return st.zwave.CommandClass.Schedule.StateReportV1Args deserialized arguments
function StateReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("number_of_supported_schedule_id")
  reader:read_bool("override")
  reader:read_bits(7, "reports_to_follow")
  reader.parsed.reports = {}
  for i=1,reader.parsed.reports_to_follow do
    reader.parsed.reports[i] = {}
    reader:read_bits(4, "active_id_1", reader.parsed.reports[i])
    reader:read_bits(4, "active_id_2", reader.parsed.reports[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.StateReportV1
--- @return st.zwave.CommandClass.Schedule.StateReportV1Args
function StateReportV1._defaults(self)
  local args = {}
  args.number_of_supported_schedule_id = self.args.number_of_supported_schedule_id or 0
  args.override = self.args.override or false
  args.reports = self.args.reports or {}
  for i=1,buf.Writer.length(args.reports) do
    args.reports[i] = args.reports[i] or {}
    args.reports[i].active_id_1 = self.args.reports[i].active_id_1 or 0
    args.reports[i].active_id_2 = self.args.reports[i].active_id_2 or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.StateReportV1
--- @return st.zwave.CommandClass.Schedule.StateReportV1Args
function StateReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.reports) do
    args.reports[i] = args.reports[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.StateReportV1
function StateReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.StateReportV1
function StateReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.SupportedGetV2Args
--- @alias SupportedGetV2Args st.zwave.CommandClass.Schedule.SupportedGetV2Args
--- @field public schedule_id_block integer [0,255]
local SupportedGetV2Args = {}

--- @class st.zwave.CommandClass.Schedule.SupportedGetV2:st.zwave.Command
--- @alias SupportedGetV2 st.zwave.CommandClass.Schedule.SupportedGetV2
---
--- v2 and forward-compatible v3,v4 SCHEDULE_SUPPORTED_GET
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x01
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Schedule.SupportedGetV2Args command-specific arguments
local SupportedGetV2 = {}
setmetatable(SupportedGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 SCHEDULE_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.SupportedGetV2Args command-specific arguments
function SupportedGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.SUPPORTED_GET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 SCHEDULE_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function SupportedGetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id_block)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 SCHEDULE_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.Schedule.SupportedGetV2Args deserialized arguments
function SupportedGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id_block")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedGetV2
--- @return st.zwave.CommandClass.Schedule.SupportedGetV2Args
function SupportedGetV2._defaults(self)
  local args = {}
  args.schedule_id_block = self.args.schedule_id_block or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedGetV2
--- @return st.zwave.CommandClass.Schedule.SupportedGetV2Args
function SupportedGetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedGetV2
function SupportedGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedGetV2
function SupportedGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.SupportedReportV2ArgsSupportedCcs
--- @alias SupportedReportV2ArgsSupportedCcs st.zwave.CommandClass.Schedule.SupportedReportV2ArgsSupportedCcs
--- @field public supported_cc integer [0,255]
--- @field public supported_command integer [0,3]
local SupportedReportV2ArgsSupportedCcs = {}

--- @class st.zwave.CommandClass.Schedule.SupportedReportV2Args
--- @alias SupportedReportV2Args st.zwave.CommandClass.Schedule.SupportedReportV2Args
--- @field public number_of_supported_schedule_id integer [0,255]
--- @field public start_time_support integer [0,63]
--- @field public fallback_support boolean
--- @field public support_enable_disable boolean
--- @field public supported_ccs st.zwave.CommandClass.Schedule.SupportedReportV2ArgsSupportedCcs[]
--- @field public supported_override_types integer [0,127]
--- @field public override_support boolean
--- @field public schedule_id_block integer [0,255]
--- @field public number_of_supported_schedule_blocks integer [0,255]
local SupportedReportV2Args = {}

--- @class st.zwave.CommandClass.Schedule.SupportedReportV2:st.zwave.Command
--- @alias SupportedReportV2 st.zwave.CommandClass.Schedule.SupportedReportV2
---
--- v2 and forward-compatible v3,v4 SCHEDULE_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x02
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Schedule.SupportedReportV2Args command-specific arguments
local SupportedReportV2 = {}
setmetatable(SupportedReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 SCHEDULE_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.SupportedReportV2Args command-specific arguments
function SupportedReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.SUPPORTED_REPORT, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 SCHEDULE_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.number_of_supported_schedule_id)
  writer:write_bits(6, args.start_time_support)
  writer:write_bool(args.fallback_support)
  writer:write_bool(args.support_enable_disable)
  writer:write_u8(writer.length(args.supported_ccs))
  for i=1,writer.length(args.supported_ccs) do
    writer:write_u8(args.supported_ccs[i].supported_cc)
    writer:write_bits(2, args.supported_ccs[i].supported_command)
    writer:write_bits(6, 0) -- reserved
  end
  writer:write_bits(7, args.supported_override_types)
  writer:write_bool(args.override_support)
  writer:write_u8(args.schedule_id_block)
  writer:write_u8(args.number_of_supported_schedule_blocks)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 SCHEDULE_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.Schedule.SupportedReportV2Args deserialized arguments
function SupportedReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("number_of_supported_schedule_id")
  reader:read_bits(6, "start_time_support")
  reader:read_bool("fallback_support")
  reader:read_bool("support_enable_disable")
  reader:read_u8("number_of_supported_cc")
  reader.parsed.supported_ccs = {}
  for i=1,reader.parsed.number_of_supported_cc do
    reader.parsed.supported_ccs[i] = {}
    reader:read_u8("supported_cc", reader.parsed.supported_ccs[i])
    reader:read_bits(2, "supported_command", reader.parsed.supported_ccs[i])
    reader:read_bits(6) -- reserved
  end
  reader:read_bits(7, "supported_override_types")
  reader:read_bool("override_support")
  reader:read_u8("schedule_id_block")
  reader:read_u8("number_of_supported_schedule_blocks")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedReportV2
--- @return st.zwave.CommandClass.Schedule.SupportedReportV2Args
function SupportedReportV2._defaults(self)
  local args = {}
  args.number_of_supported_schedule_id = self.args.number_of_supported_schedule_id or 0
  args.start_time_support = self.args.start_time_support or 0
  args.fallback_support = self.args.fallback_support or false
  args.support_enable_disable = self.args.support_enable_disable or false
  args.supported_ccs = self.args.supported_ccs or {}
  for i=1,buf.Writer.length(args.supported_ccs) do
    args.supported_ccs[i] = args.supported_ccs[i] or {}
    args.supported_ccs[i].supported_cc = self.args.supported_ccs[i].supported_cc or 0
    args.supported_ccs[i].supported_command = self.args.supported_ccs[i].supported_command or 0
  end
  args.supported_override_types = self.args.supported_override_types or 0
  args.override_support = self.args.override_support or false
  args.schedule_id_block = self.args.schedule_id_block or 0
  args.number_of_supported_schedule_blocks = self.args.number_of_supported_schedule_blocks or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedReportV2
--- @return st.zwave.CommandClass.Schedule.SupportedReportV2Args
function SupportedReportV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.supported_ccs) do
    args.supported_ccs[i] = args.supported_ccs[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedReportV2
function SupportedReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedReportV2
function SupportedReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.CommandSetV2ArgsCmds
--- @alias CommandSetV2ArgsCmds st.zwave.CommandClass.Schedule.CommandSetV2ArgsCmds
--- @field public cmd_byte string
local CommandSetV2ArgsCmds = {}

--- @class st.zwave.CommandClass.Schedule.CommandSetV2Args
--- @alias CommandSetV2Args st.zwave.CommandClass.Schedule.CommandSetV2Args
--- @field public schedule_id integer [0,255]
--- @field public schedule_id_block integer [0,255]
--- @field public start_year integer [0,255]
--- @field public start_month integer [0,15]
--- @field public start_day_of_month integer [0,31]
--- @field public start_weekday integer [0,127]
--- @field public start_hour integer [0,31]
--- @field public duration_type integer [0,7]
--- @field public start_minute integer [0,63]
--- @field public duration_byte integer [0,65535]
--- @field public reports_to_follow integer [0,255]
--- @field public cmds st.zwave.CommandClass.Schedule.CommandSetV2ArgsCmds[]
local CommandSetV2Args = {}

--- @class st.zwave.CommandClass.Schedule.CommandSetV2:st.zwave.Command
--- @alias CommandSetV2 st.zwave.CommandClass.Schedule.CommandSetV2
---
--- v2 COMMAND_SCHEDULE_SET
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x03
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Schedule.CommandSetV2Args command-specific arguments
local CommandSetV2 = {}
setmetatable(CommandSetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 COMMAND_SCHEDULE_SET object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.CommandSetV2Args command-specific arguments
function CommandSetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.COMMAND_SET, 2, args, ...)
end

--- Serialize v2 COMMAND_SCHEDULE_SET arguments.
---
--- @return string serialized payload
function CommandSetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id)
  writer:write_u8(args.schedule_id_block)
  writer:write_u8(args.start_year)
  writer:write_bits(4, args.start_month)
  writer:write_bits(4, 0) -- reserved0
  writer:write_bits(5, args.start_day_of_month)
  writer:write_bits(3, 0) -- reserved1
  writer:write_bits(7, args.start_weekday)
  writer:write_bool(false) -- reserved2
  writer:write_bits(5, args.start_hour)
  writer:write_bits(3, args.duration_type)
  writer:write_bits(6, args.start_minute)
  writer:write_bits(2, 0) -- reserved3
  writer:write_be_u16(args.duration_byte)
  writer:write_u8(args.reports_to_follow)
  writer:write_u8(writer.length(args.cmds))
  for i=1,writer.length(args.cmds) do
    writer:write_u8(writer.length(args.cmds[i].cmd_byte))
    writer:write_bytes(args.cmds[i].cmd_byte)
  end
  return writer.buf
end

--- Deserialize a v2 COMMAND_SCHEDULE_SET payload.
---
--- @return st.zwave.CommandClass.Schedule.CommandSetV2Args deserialized arguments
function CommandSetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id")
  reader:read_u8("schedule_id_block")
  reader:read_u8("start_year")
  reader:read_bits(4, "start_month")
  reader:read_bits(4) -- reserved0
  reader:read_bits(5, "start_day_of_month")
  reader:read_bits(3) -- reserved1
  reader:read_bits(7, "start_weekday")
  reader:read_bool() -- reserved2
  reader:read_bits(5, "start_hour")
  reader:read_bits(3, "duration_type")
  reader:read_bits(6, "start_minute")
  reader:read_bits(2) -- reserved3
  reader:read_be_u16("duration_byte")
  reader:read_u8("reports_to_follow")
  reader:read_u8("number_of_cmd_to_follow")
  reader.parsed.cmds = {}
  for i=1,reader.parsed.number_of_cmd_to_follow do
    reader.parsed.cmds[i] = {}
    reader:read_u8("cmd_length", reader.parsed.cmds[i])
    reader:read_bytes(reader.parsed.cmds[i].cmd_length, "cmd_byte", reader.parsed.cmds[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandSetV2
--- @return st.zwave.CommandClass.Schedule.CommandSetV2Args
function CommandSetV2._defaults(self)
  local args = {}
  args.schedule_id = self.args.schedule_id or 0
  args.schedule_id_block = self.args.schedule_id_block or 0
  args.start_year = self.args.start_year or 0
  args.start_month = self.args.start_month or 0
  args.start_day_of_month = self.args.start_day_of_month or 0
  args.start_weekday = self.args.start_weekday or 0
  args.start_hour = self.args.start_hour or 0
  args.duration_type = self.args.duration_type or 0
  args.start_minute = self.args.start_minute or 0
  args.duration_byte = self.args.duration_byte or 0
  args.reports_to_follow = self.args.reports_to_follow or 0
  args.cmds = self.args.cmds or {}
  for i=1,buf.Writer.length(args.cmds) do
    args.cmds[i] = args.cmds[i] or {}
    args.cmds[i].cmd_byte = self.args.cmds[i].cmd_byte or ""
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandSetV2
--- @return st.zwave.CommandClass.Schedule.CommandSetV2Args
function CommandSetV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.cmds) do
    args.cmds[i] = args.cmds[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.CommandSetV2
function CommandSetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.CommandSetV2
function CommandSetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.CommandGetV2Args
--- @alias CommandGetV2Args st.zwave.CommandClass.Schedule.CommandGetV2Args
--- @field public schedule_id integer [0,255]
--- @field public schedule_id_block integer [0,255]
local CommandGetV2Args = {}

--- @class st.zwave.CommandClass.Schedule.CommandGetV2:st.zwave.Command
--- @alias CommandGetV2 st.zwave.CommandClass.Schedule.CommandGetV2
---
--- v2 COMMAND_SCHEDULE_GET
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x04
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Schedule.CommandGetV2Args command-specific arguments
local CommandGetV2 = {}
setmetatable(CommandGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 COMMAND_SCHEDULE_GET object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.CommandGetV2Args command-specific arguments
function CommandGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.COMMAND_GET, 2, args, ...)
end

--- Serialize v2 COMMAND_SCHEDULE_GET arguments.
---
--- @return string serialized payload
function CommandGetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id)
  writer:write_u8(args.schedule_id_block)
  return writer.buf
end

--- Deserialize a v2 COMMAND_SCHEDULE_GET payload.
---
--- @return st.zwave.CommandClass.Schedule.CommandGetV2Args deserialized arguments
function CommandGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id")
  reader:read_u8("schedule_id_block")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandGetV2
--- @return st.zwave.CommandClass.Schedule.CommandGetV2Args
function CommandGetV2._defaults(self)
  local args = {}
  args.schedule_id = self.args.schedule_id or 0
  args.schedule_id_block = self.args.schedule_id_block or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandGetV2
--- @return st.zwave.CommandClass.Schedule.CommandGetV2Args
function CommandGetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.CommandGetV2
function CommandGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.CommandGetV2
function CommandGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.CommandReportV2ArgsCmds
--- @alias CommandReportV2ArgsCmds st.zwave.CommandClass.Schedule.CommandReportV2ArgsCmds
--- @field public cmd_byte string
local CommandReportV2ArgsCmds = {}

--- @class st.zwave.CommandClass.Schedule.CommandReportV2Args
--- @alias CommandReportV2Args st.zwave.CommandClass.Schedule.CommandReportV2Args
--- @field public schedule_id integer [0,255]
--- @field public schedule_id_block integer [0,255]
--- @field public start_year integer [0,255]
--- @field public start_month integer [0,15]
--- @field public active_id integer [0,15]
--- @field public start_day_of_month integer [0,31]
--- @field public start_weekday integer [0,127]
--- @field public start_hour integer [0,31]
--- @field public duration_type integer [0,7]
--- @field public start_minute integer [0,63]
--- @field public duration_byte integer [0,65535]
--- @field public reports_to_follow integer [0,255]
--- @field public cmds st.zwave.CommandClass.Schedule.CommandReportV2ArgsCmds[]
local CommandReportV2Args = {}

--- @class st.zwave.CommandClass.Schedule.CommandReportV2:st.zwave.Command
--- @alias CommandReportV2 st.zwave.CommandClass.Schedule.CommandReportV2
---
--- v2 COMMAND_SCHEDULE_REPORT
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x05
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Schedule.CommandReportV2Args command-specific arguments
local CommandReportV2 = {}
setmetatable(CommandReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 COMMAND_SCHEDULE_REPORT object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.CommandReportV2Args command-specific arguments
function CommandReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.COMMAND_REPORT, 2, args, ...)
end

--- Serialize v2 COMMAND_SCHEDULE_REPORT arguments.
---
--- @return string serialized payload
function CommandReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id)
  writer:write_u8(args.schedule_id_block)
  writer:write_u8(args.start_year)
  writer:write_bits(4, args.start_month)
  writer:write_bits(4, args.active_id)
  writer:write_bits(5, args.start_day_of_month)
  writer:write_bits(3, 0) -- reserved0
  writer:write_bits(7, args.start_weekday)
  writer:write_bool(false) -- reserved1
  writer:write_bits(5, args.start_hour)
  writer:write_bits(3, args.duration_type)
  writer:write_bits(6, args.start_minute)
  writer:write_bits(2, 0) -- reserved2
  writer:write_be_u16(args.duration_byte)
  writer:write_u8(args.reports_to_follow)
  writer:write_u8(writer.length(args.cmds))
  for i=1,writer.length(args.cmds) do
    writer:write_u8(writer.length(args.cmds[i].cmd_byte))
    writer:write_bytes(args.cmds[i].cmd_byte)
  end
  return writer.buf
end

--- Deserialize a v2 COMMAND_SCHEDULE_REPORT payload.
---
--- @return st.zwave.CommandClass.Schedule.CommandReportV2Args deserialized arguments
function CommandReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id")
  reader:read_u8("schedule_id_block")
  reader:read_u8("start_year")
  reader:read_bits(4, "start_month")
  reader:read_bits(4, "active_id")
  reader:read_bits(5, "start_day_of_month")
  reader:read_bits(3) -- reserved0
  reader:read_bits(7, "start_weekday")
  reader:read_bool() -- reserved1
  reader:read_bits(5, "start_hour")
  reader:read_bits(3, "duration_type")
  reader:read_bits(6, "start_minute")
  reader:read_bits(2) -- reserved2
  reader:read_be_u16("duration_byte")
  reader:read_u8("reports_to_follow")
  reader:read_u8("number_of_cmd_to_follow")
  reader.parsed.cmds = {}
  for i=1,reader.parsed.number_of_cmd_to_follow do
    reader.parsed.cmds[i] = {}
    reader:read_u8("cmd_length", reader.parsed.cmds[i])
    reader:read_bytes(reader.parsed.cmds[i].cmd_length, "cmd_byte", reader.parsed.cmds[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandReportV2
--- @return st.zwave.CommandClass.Schedule.CommandReportV2Args
function CommandReportV2._defaults(self)
  local args = {}
  args.schedule_id = self.args.schedule_id or 0
  args.schedule_id_block = self.args.schedule_id_block or 0
  args.start_year = self.args.start_year or 0
  args.start_month = self.args.start_month or 0
  args.active_id = self.args.active_id or 0
  args.start_day_of_month = self.args.start_day_of_month or 0
  args.start_weekday = self.args.start_weekday or 0
  args.start_hour = self.args.start_hour or 0
  args.duration_type = self.args.duration_type or 0
  args.start_minute = self.args.start_minute or 0
  args.duration_byte = self.args.duration_byte or 0
  args.reports_to_follow = self.args.reports_to_follow or 0
  args.cmds = self.args.cmds or {}
  for i=1,buf.Writer.length(args.cmds) do
    args.cmds[i] = args.cmds[i] or {}
    args.cmds[i].cmd_byte = self.args.cmds[i].cmd_byte or ""
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandReportV2
--- @return st.zwave.CommandClass.Schedule.CommandReportV2Args
function CommandReportV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.cmds) do
    args.cmds[i] = args.cmds[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.CommandReportV2
function CommandReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.CommandReportV2
function CommandReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.RemoveV2Args
--- @alias RemoveV2Args st.zwave.CommandClass.Schedule.RemoveV2Args
--- @field public schedule_id integer [0,255]
--- @field public schedule_id_block integer [0,255]
local RemoveV2Args = {}

--- @class st.zwave.CommandClass.Schedule.RemoveV2:st.zwave.Command
--- @alias RemoveV2 st.zwave.CommandClass.Schedule.RemoveV2
---
--- v2 and forward-compatible v3,v4 SCHEDULE_REMOVE
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x06
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Schedule.RemoveV2Args command-specific arguments
local RemoveV2 = {}
setmetatable(RemoveV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 SCHEDULE_REMOVE object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.RemoveV2Args command-specific arguments
function RemoveV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.REMOVE, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 SCHEDULE_REMOVE arguments.
---
--- @return string serialized payload
function RemoveV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id)
  writer:write_u8(args.schedule_id_block)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 SCHEDULE_REMOVE payload.
---
--- @return st.zwave.CommandClass.Schedule.RemoveV2Args deserialized arguments
function RemoveV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id")
  reader:read_u8("schedule_id_block")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.RemoveV2
--- @return st.zwave.CommandClass.Schedule.RemoveV2Args
function RemoveV2._defaults(self)
  local args = {}
  args.schedule_id = self.args.schedule_id or 0
  args.schedule_id_block = self.args.schedule_id_block or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.RemoveV2
--- @return st.zwave.CommandClass.Schedule.RemoveV2Args
function RemoveV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.RemoveV2
function RemoveV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.RemoveV2
function RemoveV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.StateSetV2Args
--- @alias StateSetV2Args st.zwave.CommandClass.Schedule.StateSetV2Args
--- @field public schedule_id integer [0,255]
--- @field public schedule_state integer [0,255]
--- @field public schedule_id_block integer [0,255]
local StateSetV2Args = {}

--- @class st.zwave.CommandClass.Schedule.StateSetV2:st.zwave.Command
--- @alias StateSetV2 st.zwave.CommandClass.Schedule.StateSetV2
---
--- v2 and forward-compatible v3,v4 SCHEDULE_STATE_SET
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x07
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Schedule.StateSetV2Args command-specific arguments
local StateSetV2 = {}
setmetatable(StateSetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 SCHEDULE_STATE_SET object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.StateSetV2Args command-specific arguments
function StateSetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.STATE_SET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 SCHEDULE_STATE_SET arguments.
---
--- @return string serialized payload
function StateSetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id)
  writer:write_u8(args.schedule_state)
  writer:write_u8(args.schedule_id_block)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 SCHEDULE_STATE_SET payload.
---
--- @return st.zwave.CommandClass.Schedule.StateSetV2Args deserialized arguments
function StateSetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id")
  reader:read_u8("schedule_state")
  reader:read_u8("schedule_id_block")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.StateSetV2
--- @return st.zwave.CommandClass.Schedule.StateSetV2Args
function StateSetV2._defaults(self)
  local args = {}
  args.schedule_id = self.args.schedule_id or 0
  args.schedule_state = self.args.schedule_state or 0
  args.schedule_id_block = self.args.schedule_id_block or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.StateSetV2
--- @return st.zwave.CommandClass.Schedule.StateSetV2Args
function StateSetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.StateSetV2
function StateSetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.StateSetV2
function StateSetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.StateGetV2Args
--- @alias StateGetV2Args st.zwave.CommandClass.Schedule.StateGetV2Args
--- @field public schedule_id_block integer [0,255]
local StateGetV2Args = {}

--- @class st.zwave.CommandClass.Schedule.StateGetV2:st.zwave.Command
--- @alias StateGetV2 st.zwave.CommandClass.Schedule.StateGetV2
---
--- v2 and forward-compatible v3,v4 SCHEDULE_STATE_GET
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x08
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Schedule.StateGetV2Args command-specific arguments
local StateGetV2 = {}
setmetatable(StateGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 SCHEDULE_STATE_GET object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.StateGetV2Args command-specific arguments
function StateGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.STATE_GET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 SCHEDULE_STATE_GET arguments.
---
--- @return string serialized payload
function StateGetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id_block)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 SCHEDULE_STATE_GET payload.
---
--- @return st.zwave.CommandClass.Schedule.StateGetV2Args deserialized arguments
function StateGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id_block")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.StateGetV2
--- @return st.zwave.CommandClass.Schedule.StateGetV2Args
function StateGetV2._defaults(self)
  local args = {}
  args.schedule_id_block = self.args.schedule_id_block or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.StateGetV2
--- @return st.zwave.CommandClass.Schedule.StateGetV2Args
function StateGetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.StateGetV2
function StateGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.StateGetV2
function StateGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.StateReportV2ArgsReports
--- @alias StateReportV2ArgsReports st.zwave.CommandClass.Schedule.StateReportV2ArgsReports
--- @field public active_id_1 integer [0,15]
--- @field public active_id_2 integer [0,15]
local StateReportV2ArgsReports = {}

--- @class st.zwave.CommandClass.Schedule.StateReportV2Args
--- @alias StateReportV2Args st.zwave.CommandClass.Schedule.StateReportV2Args
--- @field public number_of_supported_schedule_id integer [0,255]
--- @field public override boolean
--- @field public reports st.zwave.CommandClass.Schedule.StateReportV2ArgsReports[]
--- @field public schedule_id_block integer [0,255]
local StateReportV2Args = {}

--- @class st.zwave.CommandClass.Schedule.StateReportV2:st.zwave.Command
--- @alias StateReportV2 st.zwave.CommandClass.Schedule.StateReportV2
---
--- v2 and forward-compatible v3,v4 SCHEDULE_STATE_REPORT
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x09
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Schedule.StateReportV2Args command-specific arguments
local StateReportV2 = {}
setmetatable(StateReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 SCHEDULE_STATE_REPORT object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.StateReportV2Args command-specific arguments
function StateReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.STATE_REPORT, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 SCHEDULE_STATE_REPORT arguments.
---
--- @return string serialized payload
function StateReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.number_of_supported_schedule_id)
  writer:write_bool(args.override)
  writer:write_bits(7, writer.length(args.reports))
  for i=1,writer.length(args.reports) do
    writer:write_bits(4, args.reports[i].active_id_1)
    writer:write_bits(4, args.reports[i].active_id_2)
  end
  writer:write_u8(args.schedule_id_block)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 SCHEDULE_STATE_REPORT payload.
---
--- @return st.zwave.CommandClass.Schedule.StateReportV2Args deserialized arguments
function StateReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("number_of_supported_schedule_id")
  reader:read_bool("override")
  reader:read_bits(7, "reports_to_follow")
  reader.parsed.reports = {}
  for i=1,reader.parsed.reports_to_follow do
    reader.parsed.reports[i] = {}
    reader:read_bits(4, "active_id_1", reader.parsed.reports[i])
    reader:read_bits(4, "active_id_2", reader.parsed.reports[i])
  end
  reader:read_u8("schedule_id_block")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.StateReportV2
--- @return st.zwave.CommandClass.Schedule.StateReportV2Args
function StateReportV2._defaults(self)
  local args = {}
  args.number_of_supported_schedule_id = self.args.number_of_supported_schedule_id or 0
  args.override = self.args.override or false
  args.reports = self.args.reports or {}
  for i=1,buf.Writer.length(args.reports) do
    args.reports[i] = args.reports[i] or {}
    args.reports[i].active_id_1 = self.args.reports[i].active_id_1 or 0
    args.reports[i].active_id_2 = self.args.reports[i].active_id_2 or 0
  end
  args.schedule_id_block = self.args.schedule_id_block or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.StateReportV2
--- @return st.zwave.CommandClass.Schedule.StateReportV2Args
function StateReportV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.reports) do
    args.reports[i] = args.reports[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.StateReportV2
function StateReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.StateReportV2
function StateReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.CommandSetV3ArgsCmds
--- @alias CommandSetV3ArgsCmds st.zwave.CommandClass.Schedule.CommandSetV3ArgsCmds
--- @field public cmd_byte string
local CommandSetV3ArgsCmds = {}

--- @class st.zwave.CommandClass.Schedule.CommandSetV3Args
--- @alias CommandSetV3Args st.zwave.CommandClass.Schedule.CommandSetV3Args
--- @field public schedule_id integer [0,255]
--- @field public schedule_id_block integer [0,255]
--- @field public start_year integer [0,255]
--- @field public start_month integer [0,15]
--- @field public recurrence_offset integer [0,15]
--- @field public start_day_of_month integer [0,31]
--- @field public recurrence_mode integer see :lua:class:`Schedule.recurrence_mode <st.zwave.CommandClass.Schedule.recurrence_mode>`
--- @field public start_weekday integer [0,127]
--- @field public start_hour integer [0,31]
--- @field public duration_type integer [0,7]
--- @field public start_minute integer [0,63]
--- @field public relative boolean
--- @field public duration_byte integer [0,65535]
--- @field public reports_to_follow integer [0,255]
--- @field public cmds st.zwave.CommandClass.Schedule.CommandSetV3ArgsCmds[]
local CommandSetV3Args = {}

--- @class st.zwave.CommandClass.Schedule.CommandSetV3:st.zwave.Command
--- @alias CommandSetV3 st.zwave.CommandClass.Schedule.CommandSetV3
---
--- v3 and forward-compatible v4 COMMAND_SCHEDULE_SET
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x03
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Schedule.CommandSetV3Args command-specific arguments
local CommandSetV3 = {}
setmetatable(CommandSetV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4 COMMAND_SCHEDULE_SET object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.CommandSetV3Args command-specific arguments
function CommandSetV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.COMMAND_SET, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4 COMMAND_SCHEDULE_SET arguments.
---
--- @return string serialized payload
function CommandSetV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id)
  writer:write_u8(args.schedule_id_block)
  writer:write_u8(args.start_year)
  writer:write_bits(4, args.start_month)
  writer:write_bits(4, args.recurrence_offset)
  writer:write_bits(5, args.start_day_of_month)
  writer:write_bits(2, args.recurrence_mode)
  writer:write_bool(false) -- reserved1
  writer:write_bits(7, args.start_weekday)
  writer:write_bool(false) -- reserved2
  writer:write_bits(5, args.start_hour)
  writer:write_bits(3, args.duration_type)
  writer:write_bits(6, args.start_minute)
  writer:write_bool(args.relative)
  writer:write_bool(false) -- reserved3
  writer:write_be_u16(args.duration_byte)
  writer:write_u8(args.reports_to_follow)
  writer:write_u8(writer.length(args.cmds))
  for i=1,writer.length(args.cmds) do
    writer:write_u8(writer.length(args.cmds[i].cmd_byte))
    writer:write_bytes(args.cmds[i].cmd_byte)
  end
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4 COMMAND_SCHEDULE_SET payload.
---
--- @return st.zwave.CommandClass.Schedule.CommandSetV3Args deserialized arguments
function CommandSetV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id")
  reader:read_u8("schedule_id_block")
  reader:read_u8("start_year")
  reader:read_bits(4, "start_month")
  reader:read_bits(4, "recurrence_offset")
  reader:read_bits(5, "start_day_of_month")
  reader:read_bits(2, "recurrence_mode")
  reader:read_bool() -- reserved1
  reader:read_bits(7, "start_weekday")
  reader:read_bool() -- reserved2
  reader:read_bits(5, "start_hour")
  reader:read_bits(3, "duration_type")
  reader:read_bits(6, "start_minute")
  reader:read_bool("relative")
  reader:read_bool() -- reserved3
  reader:read_be_u16("duration_byte")
  reader:read_u8("reports_to_follow")
  reader:read_u8("number_of_cmd_to_follow")
  reader.parsed.cmds = {}
  for i=1,reader.parsed.number_of_cmd_to_follow do
    reader.parsed.cmds[i] = {}
    reader:read_u8("cmd_length", reader.parsed.cmds[i])
    reader:read_bytes(reader.parsed.cmds[i].cmd_length, "cmd_byte", reader.parsed.cmds[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandSetV3
--- @return st.zwave.CommandClass.Schedule.CommandSetV3Args
function CommandSetV3._defaults(self)
  local args = {}
  args.schedule_id = self.args.schedule_id or 0
  args.schedule_id_block = self.args.schedule_id_block or 0
  args.start_year = self.args.start_year or 0
  args.start_month = self.args.start_month or 0
  args.recurrence_offset = self.args.recurrence_offset or 0
  args.start_day_of_month = self.args.start_day_of_month or 0
  args.recurrence_mode = self.args.recurrence_mode or 0
  args.start_weekday = self.args.start_weekday or 0
  args.start_hour = self.args.start_hour or 0
  args.duration_type = self.args.duration_type or 0
  args.start_minute = self.args.start_minute or 0
  args.relative = self.args.relative or false
  args.duration_byte = self.args.duration_byte or 0
  args.reports_to_follow = self.args.reports_to_follow or 0
  args.cmds = self.args.cmds or {}
  for i=1,buf.Writer.length(args.cmds) do
    args.cmds[i] = args.cmds[i] or {}
    args.cmds[i].cmd_byte = self.args.cmds[i].cmd_byte or ""
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandSetV3
--- @return st.zwave.CommandClass.Schedule.CommandSetV3Args
function CommandSetV3._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.cmds) do
    args.cmds[i] = args.cmds[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.CommandSetV3
function CommandSetV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.CommandSetV3
function CommandSetV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.recurrence_mode = function()
    return zw._reflect(
      Schedule._reflect_recurrence_mode,
      args.recurrence_mode
    )
  end
end

--- @class st.zwave.CommandClass.Schedule.CommandGetV3Args
--- @alias CommandGetV3Args st.zwave.CommandClass.Schedule.CommandGetV3Args
--- @field public schedule_id integer [0,255]
--- @field public schedule_id_block integer [0,255]
--- @field public aid_ro_ctl boolean
local CommandGetV3Args = {}

--- @class st.zwave.CommandClass.Schedule.CommandGetV3:st.zwave.Command
--- @alias CommandGetV3 st.zwave.CommandClass.Schedule.CommandGetV3
---
--- v3 and forward-compatible v4 COMMAND_SCHEDULE_GET
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x04
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Schedule.CommandGetV3Args command-specific arguments
local CommandGetV3 = {}
setmetatable(CommandGetV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4 COMMAND_SCHEDULE_GET object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.CommandGetV3Args command-specific arguments
function CommandGetV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.COMMAND_GET, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4 COMMAND_SCHEDULE_GET arguments.
---
--- @return string serialized payload
function CommandGetV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id)
  writer:write_u8(args.schedule_id_block)
  writer:write_bits(7, 0) -- reserved
  writer:write_bool(args.aid_ro_ctl)
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4 COMMAND_SCHEDULE_GET payload.
---
--- @return st.zwave.CommandClass.Schedule.CommandGetV3Args deserialized arguments
function CommandGetV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id")
  reader:read_u8("schedule_id_block")
  reader:read_bits(7) -- reserved
  reader:read_bool("aid_ro_ctl")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandGetV3
--- @return st.zwave.CommandClass.Schedule.CommandGetV3Args
function CommandGetV3._defaults(self)
  local args = {}
  args.schedule_id = self.args.schedule_id or 0
  args.schedule_id_block = self.args.schedule_id_block or 0
  args.aid_ro_ctl = self.args.aid_ro_ctl or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandGetV3
--- @return st.zwave.CommandClass.Schedule.CommandGetV3Args
function CommandGetV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.CommandGetV3
function CommandGetV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.CommandGetV3
function CommandGetV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.CommandReportV3ArgsCmds
--- @alias CommandReportV3ArgsCmds st.zwave.CommandClass.Schedule.CommandReportV3ArgsCmds
--- @field public cmd_byte string
local CommandReportV3ArgsCmds = {}

--- @class st.zwave.CommandClass.Schedule.CommandReportV3Args
--- @alias CommandReportV3Args st.zwave.CommandClass.Schedule.CommandReportV3Args
--- @field public schedule_id integer [0,255]
--- @field public schedule_id_block integer [0,255]
--- @field public start_year integer [0,255]
--- @field public start_month integer [0,15]
--- @field public aid_ro integer [0,15]
--- @field public start_day_of_month integer [0,31]
--- @field public recurrence_mode integer see :lua:class:`Schedule.recurrence_mode <st.zwave.CommandClass.Schedule.recurrence_mode>`
--- @field public aid_ro_ctl boolean
--- @field public start_weekday integer [0,127]
--- @field public start_hour integer [0,31]
--- @field public duration_type integer [0,7]
--- @field public start_minute integer [0,63]
--- @field public relative boolean
--- @field public duration_byte integer [0,65535]
--- @field public reports_to_follow integer [0,255]
--- @field public cmds st.zwave.CommandClass.Schedule.CommandReportV3ArgsCmds[]
local CommandReportV3Args = {}

--- @class st.zwave.CommandClass.Schedule.CommandReportV3:st.zwave.Command
--- @alias CommandReportV3 st.zwave.CommandClass.Schedule.CommandReportV3
---
--- v3 and forward-compatible v4 COMMAND_SCHEDULE_REPORT
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x05
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Schedule.CommandReportV3Args command-specific arguments
local CommandReportV3 = {}
setmetatable(CommandReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4 COMMAND_SCHEDULE_REPORT object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.CommandReportV3Args command-specific arguments
function CommandReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.COMMAND_REPORT, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4 COMMAND_SCHEDULE_REPORT arguments.
---
--- @return string serialized payload
function CommandReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id)
  writer:write_u8(args.schedule_id_block)
  writer:write_u8(args.start_year)
  writer:write_bits(4, args.start_month)
  writer:write_bits(4, args.aid_ro)
  writer:write_bits(5, args.start_day_of_month)
  writer:write_bits(2, args.recurrence_mode)
  writer:write_bool(args.aid_ro_ctl)
  writer:write_bits(7, args.start_weekday)
  writer:write_bool(false) -- reserved1
  writer:write_bits(5, args.start_hour)
  writer:write_bits(3, args.duration_type)
  writer:write_bits(6, args.start_minute)
  writer:write_bool(args.relative)
  writer:write_bool(false) -- reserved2
  writer:write_be_u16(args.duration_byte)
  writer:write_u8(args.reports_to_follow)
  writer:write_u8(writer.length(args.cmds))
  for i=1,writer.length(args.cmds) do
    writer:write_u8(writer.length(args.cmds[i].cmd_byte))
    writer:write_bytes(args.cmds[i].cmd_byte)
  end
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4 COMMAND_SCHEDULE_REPORT payload.
---
--- @return st.zwave.CommandClass.Schedule.CommandReportV3Args deserialized arguments
function CommandReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id")
  reader:read_u8("schedule_id_block")
  reader:read_u8("start_year")
  reader:read_bits(4, "start_month")
  reader:read_bits(4, "aid_ro")
  reader:read_bits(5, "start_day_of_month")
  reader:read_bits(2, "recurrence_mode")
  reader:read_bool("aid_ro_ctl")
  reader:read_bits(7, "start_weekday")
  reader:read_bool() -- reserved1
  reader:read_bits(5, "start_hour")
  reader:read_bits(3, "duration_type")
  reader:read_bits(6, "start_minute")
  reader:read_bool("relative")
  reader:read_bool() -- reserved2
  reader:read_be_u16("duration_byte")
  reader:read_u8("reports_to_follow")
  reader:read_u8("number_of_cmd_to_follow")
  reader.parsed.cmds = {}
  for i=1,reader.parsed.number_of_cmd_to_follow do
    reader.parsed.cmds[i] = {}
    reader:read_u8("cmd_length", reader.parsed.cmds[i])
    reader:read_bytes(reader.parsed.cmds[i].cmd_length, "cmd_byte", reader.parsed.cmds[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandReportV3
--- @return st.zwave.CommandClass.Schedule.CommandReportV3Args
function CommandReportV3._defaults(self)
  local args = {}
  args.schedule_id = self.args.schedule_id or 0
  args.schedule_id_block = self.args.schedule_id_block or 0
  args.start_year = self.args.start_year or 0
  args.start_month = self.args.start_month or 0
  args.aid_ro = self.args.aid_ro or 0
  args.start_day_of_month = self.args.start_day_of_month or 0
  args.recurrence_mode = self.args.recurrence_mode or 0
  args.aid_ro_ctl = self.args.aid_ro_ctl or false
  args.start_weekday = self.args.start_weekday or 0
  args.start_hour = self.args.start_hour or 0
  args.duration_type = self.args.duration_type or 0
  args.start_minute = self.args.start_minute or 0
  args.relative = self.args.relative or false
  args.duration_byte = self.args.duration_byte or 0
  args.reports_to_follow = self.args.reports_to_follow or 0
  args.cmds = self.args.cmds or {}
  for i=1,buf.Writer.length(args.cmds) do
    args.cmds[i] = args.cmds[i] or {}
    args.cmds[i].cmd_byte = self.args.cmds[i].cmd_byte or ""
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.CommandReportV3
--- @return st.zwave.CommandClass.Schedule.CommandReportV3Args
function CommandReportV3._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.cmds) do
    args.cmds[i] = args.cmds[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.CommandReportV3
function CommandReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.CommandReportV3
function CommandReportV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.recurrence_mode = function()
    return zw._reflect(
      Schedule._reflect_recurrence_mode,
      args.recurrence_mode
    )
  end
end

--- @class st.zwave.CommandClass.Schedule.SupportedCommandsGetV4Args
--- @alias SupportedCommandsGetV4Args st.zwave.CommandClass.Schedule.SupportedCommandsGetV4Args
--- @field public schedule_id_block integer [0,255]
local SupportedCommandsGetV4Args = {}

--- @class st.zwave.CommandClass.Schedule.SupportedCommandsGetV4:st.zwave.Command
--- @alias SupportedCommandsGetV4 st.zwave.CommandClass.Schedule.SupportedCommandsGetV4
---
--- v4 SCHEDULE_SUPPORTED_COMMANDS_GET
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x0A
--- @field public version number 4
--- @field public args st.zwave.CommandClass.Schedule.SupportedCommandsGetV4Args command-specific arguments
local SupportedCommandsGetV4 = {}
setmetatable(SupportedCommandsGetV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 SCHEDULE_SUPPORTED_COMMANDS_GET object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.SupportedCommandsGetV4Args command-specific arguments
function SupportedCommandsGetV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.SUPPORTED_COMMANDS_GET, 4, args, ...)
end

--- Serialize v4 SCHEDULE_SUPPORTED_COMMANDS_GET arguments.
---
--- @return string serialized payload
function SupportedCommandsGetV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id_block)
  return writer.buf
end

--- Deserialize a v4 SCHEDULE_SUPPORTED_COMMANDS_GET payload.
---
--- @return st.zwave.CommandClass.Schedule.SupportedCommandsGetV4Args deserialized arguments
function SupportedCommandsGetV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id_block")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedCommandsGetV4
--- @return st.zwave.CommandClass.Schedule.SupportedCommandsGetV4Args
function SupportedCommandsGetV4._defaults(self)
  local args = {}
  args.schedule_id_block = self.args.schedule_id_block or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedCommandsGetV4
--- @return st.zwave.CommandClass.Schedule.SupportedCommandsGetV4Args
function SupportedCommandsGetV4._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedCommandsGetV4
function SupportedCommandsGetV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedCommandsGetV4
function SupportedCommandsGetV4._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.SupportedCommandsReportV4ArgsCommandClassListLengths
--- @alias SupportedCommandsReportV4ArgsCommandClassListLengths st.zwave.CommandClass.Schedule.SupportedCommandsReportV4ArgsCommandClassListLengths
--- @field public command_class integer
--- @field public supported_command string
local SupportedCommandsReportV4ArgsCommandClassListLengths = {}

--- @class st.zwave.CommandClass.Schedule.SupportedCommandsReportV4Args
--- @alias SupportedCommandsReportV4Args st.zwave.CommandClass.Schedule.SupportedCommandsReportV4Args
--- @field public schedule_id_block integer [0,255]
--- @field public command_class_list_lengths st.zwave.CommandClass.Schedule.SupportedCommandsReportV4ArgsCommandClassListLengths[]
local SupportedCommandsReportV4Args = {}

--- @class st.zwave.CommandClass.Schedule.SupportedCommandsReportV4:st.zwave.Command
--- @alias SupportedCommandsReportV4 st.zwave.CommandClass.Schedule.SupportedCommandsReportV4
---
--- v4 SCHEDULE_SUPPORTED_COMMANDS_REPORT
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x0B
--- @field public version number 4
--- @field public args st.zwave.CommandClass.Schedule.SupportedCommandsReportV4Args command-specific arguments
local SupportedCommandsReportV4 = {}
setmetatable(SupportedCommandsReportV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 SCHEDULE_SUPPORTED_COMMANDS_REPORT object.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.SupportedCommandsReportV4Args command-specific arguments
function SupportedCommandsReportV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.SCHEDULE, Schedule.SUPPORTED_COMMANDS_REPORT, 4, args, ...)
end

--- Serialize v4 SCHEDULE_SUPPORTED_COMMANDS_REPORT arguments.
---
--- @return string serialized payload
function SupportedCommandsReportV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.schedule_id_block)
  writer:write_u8(writer.length(args.command_class_list_lengths))
  for i=1,writer.length(args.command_class_list_lengths) do
    writer:write_cmd_class(args.command_class_list_lengths[i].command_class)
    writer:write_u8(writer.length(args.command_class_list_lengths[i].supported_command))
    writer:write_bytes(args.command_class_list_lengths[i].supported_command)
  end
  return writer.buf
end

--- Deserialize a v4 SCHEDULE_SUPPORTED_COMMANDS_REPORT payload.
---
--- @return st.zwave.CommandClass.Schedule.SupportedCommandsReportV4Args deserialized arguments
function SupportedCommandsReportV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("schedule_id_block")
  reader:read_u8("command_class_list_length")
  reader.parsed.command_class_list_lengths = {}
  for i=1,reader.parsed.command_class_list_length do
    reader.parsed.command_class_list_lengths[i] = {}
    reader:read_cmd_class("command_class", reader.parsed.command_class_list_lengths[i])
    reader:read_u8("supported_command_list_length", reader.parsed.command_class_list_lengths[i])
    reader:read_bytes(reader.parsed.command_class_list_lengths[i].supported_command_list_length, "supported_command", reader.parsed.command_class_list_lengths[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedCommandsReportV4
--- @return st.zwave.CommandClass.Schedule.SupportedCommandsReportV4Args
function SupportedCommandsReportV4._defaults(self)
  local args = {}
  args.schedule_id_block = self.args.schedule_id_block or 0
  args.command_class_list_lengths = self.args.command_class_list_lengths or {}
  for i=1,buf.Writer.length(args.command_class_list_lengths) do
    args.command_class_list_lengths[i] = args.command_class_list_lengths[i] or {}
    args.command_class_list_lengths[i].command_class = self.args.command_class_list_lengths[i].command_class or 0
    args.command_class_list_lengths[i].supported_command = self.args.command_class_list_lengths[i].supported_command or ""
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedCommandsReportV4
--- @return st.zwave.CommandClass.Schedule.SupportedCommandsReportV4Args
function SupportedCommandsReportV4._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.command_class_list_lengths) do
    args.command_class_list_lengths[i] = args.command_class_list_lengths[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedCommandsReportV4
function SupportedCommandsReportV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Schedule.SupportedCommandsReportV4
function SupportedCommandsReportV4._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Schedule.SupportedGet
--- @alias _SupportedGet st.zwave.CommandClass.Schedule.SupportedGet
---
--- Dynamically versioned SCHEDULE_SUPPORTED_GET
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x01
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.Schedule.SupportedGetV1Args|st.zwave.CommandClass.Schedule.SupportedGetV2Args
local _SupportedGet = {}
setmetatable(_SupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SCHEDULE_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.SupportedGetV1Args|st.zwave.CommandClass.Schedule.SupportedGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Schedule.SupportedGet
function _SupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, Schedule.SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Schedule.SupportedReport
--- @alias _SupportedReport st.zwave.CommandClass.Schedule.SupportedReport
---
--- Dynamically versioned SCHEDULE_SUPPORTED_REPORT
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x02
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.Schedule.SupportedReportV1Args|st.zwave.CommandClass.Schedule.SupportedReportV2Args
local _SupportedReport = {}
setmetatable(_SupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SCHEDULE_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.SupportedReportV1Args|st.zwave.CommandClass.Schedule.SupportedReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.Schedule.SupportedReport
function _SupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, Schedule.SUPPORTED_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Schedule.CommandSet
--- @alias _CommandSet st.zwave.CommandClass.Schedule.CommandSet
---
--- Dynamically versioned COMMAND_SCHEDULE_SET
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2,3
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x03
--- @field public version number 1,2,3
--- @field public args st.zwave.CommandClass.Schedule.CommandSetV1Args|st.zwave.CommandClass.Schedule.CommandSetV2Args|st.zwave.CommandClass.Schedule.CommandSetV3Args
local _CommandSet = {}
setmetatable(_CommandSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a COMMAND_SCHEDULE_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.CommandSetV1Args|st.zwave.CommandClass.Schedule.CommandSetV2Args|st.zwave.CommandClass.Schedule.CommandSetV3Args command-specific arguments
--- @return st.zwave.CommandClass.Schedule.CommandSet
function _CommandSet:construct(module, args, ...)
  return zw.Command._construct(module, Schedule.COMMAND_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Schedule.CommandGet
--- @alias _CommandGet st.zwave.CommandClass.Schedule.CommandGet
---
--- Dynamically versioned COMMAND_SCHEDULE_GET
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2,3
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x04
--- @field public version number 1,2,3
--- @field public args st.zwave.CommandClass.Schedule.CommandGetV1Args|st.zwave.CommandClass.Schedule.CommandGetV2Args|st.zwave.CommandClass.Schedule.CommandGetV3Args
local _CommandGet = {}
setmetatable(_CommandGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a COMMAND_SCHEDULE_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.CommandGetV1Args|st.zwave.CommandClass.Schedule.CommandGetV2Args|st.zwave.CommandClass.Schedule.CommandGetV3Args command-specific arguments
--- @return st.zwave.CommandClass.Schedule.CommandGet
function _CommandGet:construct(module, args, ...)
  return zw.Command._construct(module, Schedule.COMMAND_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Schedule.CommandReport
--- @alias _CommandReport st.zwave.CommandClass.Schedule.CommandReport
---
--- Dynamically versioned COMMAND_SCHEDULE_REPORT
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2,3
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x05
--- @field public version number 1,2,3
--- @field public args st.zwave.CommandClass.Schedule.CommandReportV1Args|st.zwave.CommandClass.Schedule.CommandReportV2Args|st.zwave.CommandClass.Schedule.CommandReportV3Args
local _CommandReport = {}
setmetatable(_CommandReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a COMMAND_SCHEDULE_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.CommandReportV1Args|st.zwave.CommandClass.Schedule.CommandReportV2Args|st.zwave.CommandClass.Schedule.CommandReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.Schedule.CommandReport
function _CommandReport:construct(module, args, ...)
  return zw.Command._construct(module, Schedule.COMMAND_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Schedule.Remove
--- @alias _Remove st.zwave.CommandClass.Schedule.Remove
---
--- Dynamically versioned SCHEDULE_REMOVE
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x06
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.Schedule.RemoveV1Args|st.zwave.CommandClass.Schedule.RemoveV2Args
local _Remove = {}
setmetatable(_Remove, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SCHEDULE_REMOVE object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.RemoveV1Args|st.zwave.CommandClass.Schedule.RemoveV2Args command-specific arguments
--- @return st.zwave.CommandClass.Schedule.Remove
function _Remove:construct(module, args, ...)
  return zw.Command._construct(module, Schedule.REMOVE, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Schedule.StateSet
--- @alias _StateSet st.zwave.CommandClass.Schedule.StateSet
---
--- Dynamically versioned SCHEDULE_STATE_SET
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x07
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.Schedule.StateSetV1Args|st.zwave.CommandClass.Schedule.StateSetV2Args
local _StateSet = {}
setmetatable(_StateSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SCHEDULE_STATE_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.StateSetV1Args|st.zwave.CommandClass.Schedule.StateSetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Schedule.StateSet
function _StateSet:construct(module, args, ...)
  return zw.Command._construct(module, Schedule.STATE_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Schedule.StateGet
--- @alias _StateGet st.zwave.CommandClass.Schedule.StateGet
---
--- Dynamically versioned SCHEDULE_STATE_GET
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x08
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.Schedule.StateGetV1Args|st.zwave.CommandClass.Schedule.StateGetV2Args
local _StateGet = {}
setmetatable(_StateGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SCHEDULE_STATE_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.StateGetV1Args|st.zwave.CommandClass.Schedule.StateGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.Schedule.StateGet
function _StateGet:construct(module, args, ...)
  return zw.Command._construct(module, Schedule.STATE_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Schedule.StateReport
--- @alias _StateReport st.zwave.CommandClass.Schedule.StateReport
---
--- Dynamically versioned SCHEDULE_STATE_REPORT
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x09
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.Schedule.StateReportV1Args|st.zwave.CommandClass.Schedule.StateReportV2Args
local _StateReport = {}
setmetatable(_StateReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SCHEDULE_STATE_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.StateReportV1Args|st.zwave.CommandClass.Schedule.StateReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.Schedule.StateReport
function _StateReport:construct(module, args, ...)
  return zw.Command._construct(module, Schedule.STATE_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Schedule.SupportedCommandsGet
--- @alias _SupportedCommandsGet st.zwave.CommandClass.Schedule.SupportedCommandsGet
---
--- Dynamically versioned SCHEDULE_SUPPORTED_COMMANDS_GET
---
--- Supported versions: 4; unique base versions: 4
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x0A
--- @field public version number 4
--- @field public args st.zwave.CommandClass.Schedule.SupportedCommandsGetV4Args
local _SupportedCommandsGet = {}
setmetatable(_SupportedCommandsGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SCHEDULE_SUPPORTED_COMMANDS_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.SupportedCommandsGetV4Args command-specific arguments
--- @return st.zwave.CommandClass.Schedule.SupportedCommandsGet
function _SupportedCommandsGet:construct(module, args, ...)
  return zw.Command._construct(module, Schedule.SUPPORTED_COMMANDS_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Schedule.SupportedCommandsReport
--- @alias _SupportedCommandsReport st.zwave.CommandClass.Schedule.SupportedCommandsReport
---
--- Dynamically versioned SCHEDULE_SUPPORTED_COMMANDS_REPORT
---
--- Supported versions: 4; unique base versions: 4
---
--- @field public cmd_class number 0x53
--- @field public cmd_id number 0x0B
--- @field public version number 4
--- @field public args st.zwave.CommandClass.Schedule.SupportedCommandsReportV4Args
local _SupportedCommandsReport = {}
setmetatable(_SupportedCommandsReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SCHEDULE_SUPPORTED_COMMANDS_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Schedule command class module instance
--- @param args st.zwave.CommandClass.Schedule.SupportedCommandsReportV4Args command-specific arguments
--- @return st.zwave.CommandClass.Schedule.SupportedCommandsReport
function _SupportedCommandsReport:construct(module, args, ...)
  return zw.Command._construct(module, Schedule.SUPPORTED_COMMANDS_REPORT, module._serialization_version, args, ...)
end

Schedule.SupportedGetV1 = SupportedGetV1
Schedule.SupportedReportV1 = SupportedReportV1
Schedule.CommandSetV1 = CommandSetV1
Schedule.CommandGetV1 = CommandGetV1
Schedule.CommandReportV1 = CommandReportV1
Schedule.RemoveV1 = RemoveV1
Schedule.StateSetV1 = StateSetV1
Schedule.StateGetV1 = StateGetV1
Schedule.StateReportV1 = StateReportV1
Schedule.SupportedGetV2 = SupportedGetV2
Schedule.SupportedReportV2 = SupportedReportV2
Schedule.CommandSetV2 = CommandSetV2
Schedule.CommandGetV2 = CommandGetV2
Schedule.CommandReportV2 = CommandReportV2
Schedule.RemoveV2 = RemoveV2
Schedule.StateSetV2 = StateSetV2
Schedule.StateGetV2 = StateGetV2
Schedule.StateReportV2 = StateReportV2
Schedule.CommandSetV3 = CommandSetV3
Schedule.CommandGetV3 = CommandGetV3
Schedule.CommandReportV3 = CommandReportV3
Schedule.SupportedCommandsGetV4 = SupportedCommandsGetV4
Schedule.SupportedCommandsReportV4 = SupportedCommandsReportV4
Schedule.SupportedGet = _SupportedGet
Schedule.SupportedReport = _SupportedReport
Schedule.CommandSet = _CommandSet
Schedule.CommandGet = _CommandGet
Schedule.CommandReport = _CommandReport
Schedule.Remove = _Remove
Schedule.StateSet = _StateSet
Schedule.StateGet = _StateGet
Schedule.StateReport = _StateReport
Schedule.SupportedCommandsGet = _SupportedCommandsGet
Schedule.SupportedCommandsReport = _SupportedCommandsReport

Schedule._lut = {
  [0] = { -- dynamically versioned constructors
    [Schedule.SUPPORTED_GET] = Schedule.SupportedGet,
    [Schedule.SUPPORTED_REPORT] = Schedule.SupportedReport,
    [Schedule.COMMAND_SET] = Schedule.CommandSet,
    [Schedule.COMMAND_GET] = Schedule.CommandGet,
    [Schedule.COMMAND_REPORT] = Schedule.CommandReport,
    [Schedule.REMOVE] = Schedule.Remove,
    [Schedule.STATE_SET] = Schedule.StateSet,
    [Schedule.STATE_GET] = Schedule.StateGet,
    [Schedule.STATE_REPORT] = Schedule.StateReport,
    [Schedule.SUPPORTED_COMMANDS_GET] = Schedule.SupportedCommandsGet,
    [Schedule.SUPPORTED_COMMANDS_REPORT] = Schedule.SupportedCommandsReport
  },
  [1] = { -- version 1
    [Schedule.SUPPORTED_GET] = Schedule.SupportedGetV1,
    [Schedule.SUPPORTED_REPORT] = Schedule.SupportedReportV1,
    [Schedule.COMMAND_SET] = Schedule.CommandSetV1,
    [Schedule.COMMAND_GET] = Schedule.CommandGetV1,
    [Schedule.COMMAND_REPORT] = Schedule.CommandReportV1,
    [Schedule.REMOVE] = Schedule.RemoveV1,
    [Schedule.STATE_SET] = Schedule.StateSetV1,
    [Schedule.STATE_GET] = Schedule.StateGetV1,
    [Schedule.STATE_REPORT] = Schedule.StateReportV1
  },
  [2] = { -- version 2
    [Schedule.SUPPORTED_GET] = Schedule.SupportedGetV2,
    [Schedule.SUPPORTED_REPORT] = Schedule.SupportedReportV2,
    [Schedule.COMMAND_SET] = Schedule.CommandSetV2,
    [Schedule.COMMAND_GET] = Schedule.CommandGetV2,
    [Schedule.COMMAND_REPORT] = Schedule.CommandReportV2,
    [Schedule.REMOVE] = Schedule.RemoveV2,
    [Schedule.STATE_SET] = Schedule.StateSetV2,
    [Schedule.STATE_GET] = Schedule.StateGetV2,
    [Schedule.STATE_REPORT] = Schedule.StateReportV2
  },
  [3] = { -- version 3
    [Schedule.SUPPORTED_GET] = Schedule.SupportedGetV2,
    [Schedule.SUPPORTED_REPORT] = Schedule.SupportedReportV2,
    [Schedule.COMMAND_SET] = Schedule.CommandSetV3,
    [Schedule.COMMAND_GET] = Schedule.CommandGetV3,
    [Schedule.COMMAND_REPORT] = Schedule.CommandReportV3,
    [Schedule.REMOVE] = Schedule.RemoveV2,
    [Schedule.STATE_SET] = Schedule.StateSetV2,
    [Schedule.STATE_GET] = Schedule.StateGetV2,
    [Schedule.STATE_REPORT] = Schedule.StateReportV2
  },
  [4] = { -- version 4
    [Schedule.SUPPORTED_GET] = Schedule.SupportedGetV2,
    [Schedule.SUPPORTED_REPORT] = Schedule.SupportedReportV2,
    [Schedule.COMMAND_SET] = Schedule.CommandSetV3,
    [Schedule.COMMAND_GET] = Schedule.CommandGetV3,
    [Schedule.COMMAND_REPORT] = Schedule.CommandReportV3,
    [Schedule.REMOVE] = Schedule.RemoveV2,
    [Schedule.STATE_SET] = Schedule.StateSetV2,
    [Schedule.STATE_GET] = Schedule.StateGetV2,
    [Schedule.STATE_REPORT] = Schedule.StateReportV2,
    [Schedule.SUPPORTED_COMMANDS_GET] = Schedule.SupportedCommandsGetV4,
    [Schedule.SUPPORTED_COMMANDS_REPORT] = Schedule.SupportedCommandsReportV4
  }
}
--- @class st.zwave.CommandClass.Schedule.recurrence_mode
--- @alias recurrence_mode st.zwave.CommandClass.Schedule.recurrence_mode
--- @field public REPEAT_EVERY_N_HOURS number 0x00
--- @field public REPEAT_EVERY_N_DAYS number 0x01
--- @field public REPEAT_EVERY_N_WEEKS number 0x02
local recurrence_mode = {
  REPEAT_EVERY_N_HOURS = 0x00,
  REPEAT_EVERY_N_DAYS = 0x01,
  REPEAT_EVERY_N_WEEKS = 0x02
}
Schedule.recurrence_mode = recurrence_mode
Schedule._reflect_recurrence_mode = zw._reflection_builder(Schedule.recurrence_mode)


return Schedule
