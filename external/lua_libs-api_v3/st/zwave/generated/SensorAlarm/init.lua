-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.SensorAlarm
--- @alias SensorAlarm st.zwave.CommandClass.SensorAlarm
---
--- Supported versions: 1
---
--- @field public GET number 0x01 - SENSOR_ALARM_GET command id
--- @field public REPORT number 0x02 - SENSOR_ALARM_REPORT command id
--- @field public SUPPORTED_GET number 0x03 - SENSOR_ALARM_SUPPORTED_GET command id
--- @field public SUPPORTED_REPORT number 0x04 - SENSOR_ALARM_SUPPORTED_REPORT command id
local SensorAlarm = {}
SensorAlarm.GET = 0x01
SensorAlarm.REPORT = 0x02
SensorAlarm.SUPPORTED_GET = 0x03
SensorAlarm.SUPPORTED_REPORT = 0x04

SensorAlarm._commands = {
  [SensorAlarm.GET] = "GET",
  [SensorAlarm.REPORT] = "REPORT",
  [SensorAlarm.SUPPORTED_GET] = "SUPPORTED_GET",
  [SensorAlarm.SUPPORTED_REPORT] = "SUPPORTED_REPORT"
}

--- Instantiate a versioned instance of the SensorAlarm Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.SensorAlarm versioned command class instance
function SensorAlarm:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.SENSOR_ALARM][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(SensorAlarm, {
  __call = SensorAlarm.init
})

SensorAlarm._serialization_version = nil
SensorAlarm._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.SENSOR_ALARM] = {
  [1] = true
}

--- @class st.zwave.CommandClass.SensorAlarm.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.SensorAlarm.GetV1Args
--- @field public sensor_type integer see :lua:class:`SensorAlarm.sensor_type <st.zwave.CommandClass.SensorAlarm.sensor_type>`
local GetV1Args = {}

--- @class st.zwave.CommandClass.SensorAlarm.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.SensorAlarm.GetV1
---
--- v1 SENSOR_ALARM_GET
---
--- @field public cmd_class number 0x9C
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SensorAlarm.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 SENSOR_ALARM_GET object.
---
--- @param module st.zwave.CommandClass.SensorAlarm command class module instance
--- @param args st.zwave.CommandClass.SensorAlarm.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_ALARM, SensorAlarm.GET, 1, args, ...)
end

--- Serialize v1 SENSOR_ALARM_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.sensor_type)
  return writer.buf
end

--- Deserialize a v1 SENSOR_ALARM_GET payload.
---
--- @return st.zwave.CommandClass.SensorAlarm.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("sensor_type")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorAlarm.GetV1
--- @return st.zwave.CommandClass.SensorAlarm.GetV1Args
function GetV1._defaults(self)
  local args = {}
  args.sensor_type = self.args.sensor_type or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorAlarm.GetV1
--- @return st.zwave.CommandClass.SensorAlarm.GetV1Args
function GetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorAlarm.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorAlarm.GetV1
function GetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.sensor_type = function()
    return zw._reflect(
      SensorAlarm._reflect_sensor_type,
      args.sensor_type
    )
  end
end

--- @class st.zwave.CommandClass.SensorAlarm.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.SensorAlarm.ReportV1Args
--- @field public source_node_id integer [0,255]
--- @field public sensor_type integer see :lua:class:`SensorAlarm.sensor_type <st.zwave.CommandClass.SensorAlarm.sensor_type>`
--- @field public sensor_state integer see :lua:class:`SensorAlarm.sensor_state <st.zwave.CommandClass.SensorAlarm.sensor_state>`
--- @field public seconds integer [0,65535]
local ReportV1Args = {}

--- @class st.zwave.CommandClass.SensorAlarm.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.SensorAlarm.ReportV1
---
--- v1 SENSOR_ALARM_REPORT
---
--- @field public cmd_class number 0x9C
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SensorAlarm.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 SENSOR_ALARM_REPORT object.
---
--- @param module st.zwave.CommandClass.SensorAlarm command class module instance
--- @param args st.zwave.CommandClass.SensorAlarm.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_ALARM, SensorAlarm.REPORT, 1, args, ...)
end

--- Serialize v1 SENSOR_ALARM_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.source_node_id)
  writer:write_u8(args.sensor_type)
  writer:write_u8(args.sensor_state)
  writer:write_be_u16(args.seconds)
  return writer.buf
end

--- Deserialize a v1 SENSOR_ALARM_REPORT payload.
---
--- @return st.zwave.CommandClass.SensorAlarm.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("source_node_id")
  reader:read_u8("sensor_type")
  reader:read_u8("sensor_state")
  reader:read_be_u16("seconds")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorAlarm.ReportV1
--- @return st.zwave.CommandClass.SensorAlarm.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.source_node_id = self.args.source_node_id or 0
  args.sensor_type = self.args.sensor_type or 0
  args.sensor_state = self.args.sensor_state or 0
  args.seconds = self.args.seconds or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorAlarm.ReportV1
--- @return st.zwave.CommandClass.SensorAlarm.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorAlarm.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorAlarm.ReportV1
function ReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.sensor_type = function()
    return zw._reflect(
      SensorAlarm._reflect_sensor_type,
      args.sensor_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.sensor_state = function()
    return zw._reflect(
      SensorAlarm._reflect_sensor_state,
      args.sensor_state
    )
  end
end

--- @class st.zwave.CommandClass.SensorAlarm.SupportedGetV1Args
--- @alias SupportedGetV1Args st.zwave.CommandClass.SensorAlarm.SupportedGetV1Args
local SupportedGetV1Args = {}

--- @class st.zwave.CommandClass.SensorAlarm.SupportedGetV1:st.zwave.Command
--- @alias SupportedGetV1 st.zwave.CommandClass.SensorAlarm.SupportedGetV1
---
--- v1 SENSOR_ALARM_SUPPORTED_GET
---
--- @field public cmd_class number 0x9C
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SensorAlarm.SupportedGetV1Args command-specific arguments
local SupportedGetV1 = {}
setmetatable(SupportedGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 SENSOR_ALARM_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.SensorAlarm command class module instance
--- @param args st.zwave.CommandClass.SensorAlarm.SupportedGetV1Args command-specific arguments
function SupportedGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_ALARM, SensorAlarm.SUPPORTED_GET, 1, args, ...)
end

--- Serialize v1 SENSOR_ALARM_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function SupportedGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 SENSOR_ALARM_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.SensorAlarm.SupportedGetV1Args deserialized arguments
function SupportedGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorAlarm.SupportedGetV1
--- @return st.zwave.CommandClass.SensorAlarm.SupportedGetV1Args
function SupportedGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorAlarm.SupportedGetV1
--- @return st.zwave.CommandClass.SensorAlarm.SupportedGetV1Args
function SupportedGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorAlarm.SupportedGetV1
function SupportedGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorAlarm.SupportedGetV1
function SupportedGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SensorAlarm.SupportedReportV1Args
--- @alias SupportedReportV1Args st.zwave.CommandClass.SensorAlarm.SupportedReportV1Args
--- @field public general_purpose_alarm boolean
--- @field public smoke_alarm boolean
--- @field public co_alarm boolean
--- @field public co2_alarm boolean
--- @field public heat_alarm boolean
--- @field public water_leak_alarm boolean
local SupportedReportV1Args = {}

--- @class st.zwave.CommandClass.SensorAlarm.SupportedReportV1:st.zwave.Command
--- @alias SupportedReportV1 st.zwave.CommandClass.SensorAlarm.SupportedReportV1
---
--- v1 SENSOR_ALARM_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x9C
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SensorAlarm.SupportedReportV1Args command-specific arguments
local SupportedReportV1 = {}
setmetatable(SupportedReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 SENSOR_ALARM_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.SensorAlarm command class module instance
--- @param args st.zwave.CommandClass.SensorAlarm.SupportedReportV1Args command-specific arguments
function SupportedReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_ALARM, SensorAlarm.SUPPORTED_REPORT, 1, args, ...)
end

--- Serialize v1 SENSOR_ALARM_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(1)
  writer:write_bool(args.general_purpose_alarm)
  writer:write_bool(args.smoke_alarm)
  writer:write_bool(args.co_alarm)
  writer:write_bool(args.co2_alarm)
  writer:write_bool(args.heat_alarm)
  writer:write_bool(args.water_leak_alarm)
  return writer.buf
end

--- Deserialize a v1 SENSOR_ALARM_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.SensorAlarm.SupportedReportV1Args deserialized arguments
function SupportedReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("number_of_bit_masks")
  if reader.parsed.number_of_bit_masks > 0 then
    reader:read_bool("general_purpose_alarm")
    reader:read_bool("smoke_alarm")
    reader:read_bool("co_alarm")
    reader:read_bool("co2_alarm")
    reader:read_bool("heat_alarm")
    reader:read_bool("water_leak_alarm")
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorAlarm.SupportedReportV1
--- @return st.zwave.CommandClass.SensorAlarm.SupportedReportV1Args
function SupportedReportV1._defaults(self)
  local args = {}
  args.general_purpose_alarm = self.args.general_purpose_alarm or false
  args.smoke_alarm = self.args.smoke_alarm or false
  args.co_alarm = self.args.co_alarm or false
  args.co2_alarm = self.args.co2_alarm or false
  args.heat_alarm = self.args.heat_alarm or false
  args.water_leak_alarm = self.args.water_leak_alarm or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorAlarm.SupportedReportV1
--- @return st.zwave.CommandClass.SensorAlarm.SupportedReportV1Args
function SupportedReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorAlarm.SupportedReportV1
function SupportedReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorAlarm.SupportedReportV1
function SupportedReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SensorAlarm.Get
--- @alias _Get st.zwave.CommandClass.SensorAlarm.Get
---
--- Dynamically versioned SENSOR_ALARM_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x9C
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SensorAlarm.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SENSOR_ALARM_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SensorAlarm command class module instance
--- @param args st.zwave.CommandClass.SensorAlarm.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.SensorAlarm.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, SensorAlarm.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SensorAlarm.Report
--- @alias _Report st.zwave.CommandClass.SensorAlarm.Report
---
--- Dynamically versioned SENSOR_ALARM_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x9C
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SensorAlarm.ReportV1Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SENSOR_ALARM_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SensorAlarm command class module instance
--- @param args st.zwave.CommandClass.SensorAlarm.ReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.SensorAlarm.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, SensorAlarm.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SensorAlarm.SupportedGet
--- @alias _SupportedGet st.zwave.CommandClass.SensorAlarm.SupportedGet
---
--- Dynamically versioned SENSOR_ALARM_SUPPORTED_GET
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x9C
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SensorAlarm.SupportedGetV1Args
local _SupportedGet = {}
setmetatable(_SupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SENSOR_ALARM_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SensorAlarm command class module instance
--- @param args st.zwave.CommandClass.SensorAlarm.SupportedGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.SensorAlarm.SupportedGet
function _SupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, SensorAlarm.SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SensorAlarm.SupportedReport
--- @alias _SupportedReport st.zwave.CommandClass.SensorAlarm.SupportedReport
---
--- Dynamically versioned SENSOR_ALARM_SUPPORTED_REPORT
---
--- Supported versions: 1; unique base versions: 1
---
--- @field public cmd_class number 0x9C
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SensorAlarm.SupportedReportV1Args
local _SupportedReport = {}
setmetatable(_SupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SENSOR_ALARM_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SensorAlarm command class module instance
--- @param args st.zwave.CommandClass.SensorAlarm.SupportedReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.SensorAlarm.SupportedReport
function _SupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, SensorAlarm.SUPPORTED_REPORT, module._serialization_version, args, ...)
end

SensorAlarm.GetV1 = GetV1
SensorAlarm.ReportV1 = ReportV1
SensorAlarm.SupportedGetV1 = SupportedGetV1
SensorAlarm.SupportedReportV1 = SupportedReportV1
SensorAlarm.Get = _Get
SensorAlarm.Report = _Report
SensorAlarm.SupportedGet = _SupportedGet
SensorAlarm.SupportedReport = _SupportedReport

SensorAlarm._lut = {
  [0] = { -- dynamically versioned constructors
    [SensorAlarm.GET] = SensorAlarm.Get,
    [SensorAlarm.REPORT] = SensorAlarm.Report,
    [SensorAlarm.SUPPORTED_GET] = SensorAlarm.SupportedGet,
    [SensorAlarm.SUPPORTED_REPORT] = SensorAlarm.SupportedReport
  },
  [1] = { -- version 1
    [SensorAlarm.GET] = SensorAlarm.GetV1,
    [SensorAlarm.REPORT] = SensorAlarm.ReportV1,
    [SensorAlarm.SUPPORTED_GET] = SensorAlarm.SupportedGetV1,
    [SensorAlarm.SUPPORTED_REPORT] = SensorAlarm.SupportedReportV1
  }
}
--- @class st.zwave.CommandClass.SensorAlarm.sensor_state
--- @alias sensor_state st.zwave.CommandClass.SensorAlarm.sensor_state
--- @field public NO_ALARM number 0x00
--- @field public ALARM number 0xFF
local sensor_state = {
  NO_ALARM = 0x00,
  ALARM = 0xFF
}
SensorAlarm.sensor_state = sensor_state
SensorAlarm._reflect_sensor_state = zw._reflection_builder(SensorAlarm.sensor_state)

--- @class st.zwave.CommandClass.SensorAlarm.sensor_type
--- @alias sensor_type st.zwave.CommandClass.SensorAlarm.sensor_type
--- @field public GENERAL_PURPOSE_ALARM number 0x00
--- @field public SMOKE_ALARM number 0x01
--- @field public CO_ALARM number 0x02
--- @field public CO2_ALARM number 0x03
--- @field public HEAT_ALARM number 0x04
--- @field public WATER_LEAK_ALARM number 0x05
--- @field public RETURN_FIRST_ALARM_ON_SUPPORTED_LIST number 0xFF
local sensor_type = {
  GENERAL_PURPOSE_ALARM = 0x00,
  SMOKE_ALARM = 0x01,
  CO_ALARM = 0x02,
  CO2_ALARM = 0x03,
  HEAT_ALARM = 0x04,
  WATER_LEAK_ALARM = 0x05,
  RETURN_FIRST_ALARM_ON_SUPPORTED_LIST = 0xFF
}
SensorAlarm.sensor_type = sensor_type
SensorAlarm._reflect_sensor_type = zw._reflection_builder(SensorAlarm.sensor_type)


return SensorAlarm
