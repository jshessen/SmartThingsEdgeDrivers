-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.SensorMultilevel
--- @alias SensorMultilevel st.zwave.CommandClass.SensorMultilevel
---
--- Supported versions: 1,2,3,4,5,6,7,8,9,10,11
---
--- @field public SUPPORTED_GET_SENSOR number 0x01 - SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR command id
--- @field public SUPPORTED_SENSOR_REPORT number 0x02 - SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT command id
--- @field public SUPPORTED_GET_SCALE number 0x03 - SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE command id
--- @field public GET number 0x04 - SENSOR_MULTILEVEL_GET command id
--- @field public REPORT number 0x05 - SENSOR_MULTILEVEL_REPORT command id
--- @field public SUPPORTED_SCALE_REPORT number 0x06 - SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT command id
local SensorMultilevel = {}
SensorMultilevel.SUPPORTED_GET_SENSOR = 0x01
SensorMultilevel.SUPPORTED_SENSOR_REPORT = 0x02
SensorMultilevel.SUPPORTED_GET_SCALE = 0x03
SensorMultilevel.GET = 0x04
SensorMultilevel.REPORT = 0x05
SensorMultilevel.SUPPORTED_SCALE_REPORT = 0x06

SensorMultilevel._commands = {
  [SensorMultilevel.SUPPORTED_GET_SENSOR] = "SUPPORTED_GET_SENSOR",
  [SensorMultilevel.SUPPORTED_SENSOR_REPORT] = "SUPPORTED_SENSOR_REPORT",
  [SensorMultilevel.SUPPORTED_GET_SCALE] = "SUPPORTED_GET_SCALE",
  [SensorMultilevel.GET] = "GET",
  [SensorMultilevel.REPORT] = "REPORT",
  [SensorMultilevel.SUPPORTED_SCALE_REPORT] = "SUPPORTED_SCALE_REPORT"
}

--- Instantiate a versioned instance of the SensorMultilevel Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.SensorMultilevel versioned command class instance
function SensorMultilevel:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.SENSOR_MULTILEVEL][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(SensorMultilevel, {
  __call = SensorMultilevel.init
})

SensorMultilevel._serialization_version = nil
SensorMultilevel._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.SENSOR_MULTILEVEL] = {
  [1] = true,
  [2] = true,
  [3] = true,
  [4] = true,
  [5] = true,
  [6] = true,
  [7] = true,
  [8] = true,
  [9] = true,
  [10] = true,
  [11] = true
}

--- @class st.zwave.CommandClass.SensorMultilevel.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.SensorMultilevel.GetV1Args
local GetV1Args = {}

--- @class st.zwave.CommandClass.SensorMultilevel.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.SensorMultilevel.GetV1
---
--- v1 and forward-compatible v2,v3,v4 SENSOR_MULTILEVEL_GET
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SensorMultilevel.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3,v4 SENSOR_MULTILEVEL_GET object.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_MULTILEVEL, SensorMultilevel.GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3,v4 SENSOR_MULTILEVEL_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3,v4 SENSOR_MULTILEVEL_GET payload.
---
--- @return st.zwave.CommandClass.SensorMultilevel.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.GetV1
--- @return st.zwave.CommandClass.SensorMultilevel.GetV1Args
function GetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.GetV1
--- @return st.zwave.CommandClass.SensorMultilevel.GetV1Args
function GetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SensorMultilevel.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.SensorMultilevel.ReportV1Args
--- @field public sensor_type integer see :lua:class:`SensorMultilevel.sensor_type <st.zwave.CommandClass.SensorMultilevel.sensor_type>`
--- @field public size integer [0,7]
--- @field public scale integer see :lua:class:`SensorMultilevel.scale <st.zwave.CommandClass.SensorMultilevel.scale>`
--- @field public precision integer [0,7]
--- @field public sensor_value number [-2147483648,2147483647]
local ReportV1Args = {}

--- @class st.zwave.CommandClass.SensorMultilevel.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.SensorMultilevel.ReportV1
---
--- v1 and forward-compatible v2,v3,v4,v5,v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_REPORT
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SensorMultilevel.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3,v4,v5,v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_REPORT object.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_MULTILEVEL, SensorMultilevel.REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3,v4,v5,v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.sensor_type)
  writer:write_bits(3, args.size or writer.size(args.sensor_value))
  writer:write_bits(2, args.scale)
  writer:write_bits(3, args.precision or writer.precision(args.sensor_value))
  writer:write_vfloat(args.size or writer.size(args.sensor_value), args.precision or writer.precision(args.sensor_value), args.sensor_value)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3,v4,v5,v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_REPORT payload.
---
--- @return st.zwave.CommandClass.SensorMultilevel.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("sensor_type")
  reader:read_bits(3, "size")
  reader:read_bits(2, "scale")
  reader:read_bits(3, "precision")
  reader:read_vfloat(reader.parsed.size, reader.parsed.precision, "sensor_value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.ReportV1
--- @return st.zwave.CommandClass.SensorMultilevel.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.sensor_type = self.args.sensor_type or 0
  args.scale = self.args.scale or 0
  args.sensor_value = self.args.sensor_value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.ReportV1
--- @return st.zwave.CommandClass.SensorMultilevel.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.size = args.size or writer.size(args.sensor_value)
  args.precision = args.precision or writer.precision(args.sensor_value)
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.ReportV1
function ReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.sensor_type = function()
    return zw._reflect(
      SensorMultilevel._reflect_sensor_type,
      args.sensor_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.scale = function()
    return zw._reflect(
      SensorMultilevel._reflect_scale,
      args.sensor_type,
      args.scale
    )
  end
end

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedGetSensorV5Args
--- @alias SupportedGetSensorV5Args st.zwave.CommandClass.SensorMultilevel.SupportedGetSensorV5Args
local SupportedGetSensorV5Args = {}

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedGetSensorV5:st.zwave.Command
--- @alias SupportedGetSensorV5 st.zwave.CommandClass.SensorMultilevel.SupportedGetSensorV5
---
--- v5 and forward-compatible v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x01
--- @field public version number 5
--- @field public args st.zwave.CommandClass.SensorMultilevel.SupportedGetSensorV5Args command-specific arguments
local SupportedGetSensorV5 = {}
setmetatable(SupportedGetSensorV5, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v5 and forward-compatible v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR object.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.SupportedGetSensorV5Args command-specific arguments
function SupportedGetSensorV5:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_MULTILEVEL, SensorMultilevel.SUPPORTED_GET_SENSOR, 5, args, ...)
end

--- Serialize v5 or forward-compatible v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR arguments.
---
--- @return string serialized payload
function SupportedGetSensorV5:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v5 or forward-compatible v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR payload.
---
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedGetSensorV5Args deserialized arguments
function SupportedGetSensorV5:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedGetSensorV5
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedGetSensorV5Args
function SupportedGetSensorV5._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedGetSensorV5
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedGetSensorV5Args
function SupportedGetSensorV5._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedGetSensorV5
function SupportedGetSensorV5._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedGetSensorV5
function SupportedGetSensorV5._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV5Args
--- @alias SupportedSensorReportV5Args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV5Args
--- @field public air_temperature boolean
--- @field public general_purpose_value boolean
--- @field public luminance boolean
--- @field public power boolean
--- @field public humidity boolean
--- @field public velocity boolean
--- @field public direction boolean
--- @field public atmospheric_pressure boolean
--- @field public barometric_pressure boolean
--- @field public solar_radiation boolean
--- @field public dew_point boolean
--- @field public rain_rate boolean
--- @field public tide_level boolean
--- @field public weight boolean
--- @field public voltage boolean
--- @field public current boolean
--- @field public co2_level boolean
--- @field public air_flow boolean
--- @field public tank_capacity boolean
--- @field public distance boolean
--- @field public angle_position boolean
--- @field public rotation boolean
--- @field public water_temperature boolean
--- @field public soil_temperature boolean
--- @field public seismic_intensity boolean
--- @field public seismic_magnitude boolean
--- @field public ultraviolet boolean
--- @field public electrical_resistivity boolean
--- @field public electrical_conductivity boolean
--- @field public loudness boolean
--- @field public moisture boolean
local SupportedSensorReportV5Args = {}

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV5:st.zwave.Command
--- @alias SupportedSensorReportV5 st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV5
---
--- v5 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x02
--- @field public version number 5
--- @field public args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV5Args command-specific arguments
local SupportedSensorReportV5 = {}
setmetatable(SupportedSensorReportV5, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v5 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT object.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV5Args command-specific arguments
function SupportedSensorReportV5:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_MULTILEVEL, SensorMultilevel.SUPPORTED_SENSOR_REPORT, 5, args, ...)
end

--- Serialize v5 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT arguments.
---
--- @return string serialized payload
function SupportedSensorReportV5:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(1, 0) -- reserved
  writer:write_bool(args.air_temperature)
  writer:write_bool(args.general_purpose_value)
  writer:write_bool(args.luminance)
  writer:write_bool(args.power)
  writer:write_bool(args.humidity)
  writer:write_bool(args.velocity)
  writer:write_bool(args.direction)
  writer:write_bool(args.atmospheric_pressure)
  writer:write_bool(args.barometric_pressure)
  writer:write_bool(args.solar_radiation)
  writer:write_bool(args.dew_point)
  writer:write_bool(args.rain_rate)
  writer:write_bool(args.tide_level)
  writer:write_bool(args.weight)
  writer:write_bool(args.voltage)
  writer:write_bool(args.current)
  writer:write_bool(args.co2_level)
  writer:write_bool(args.air_flow)
  writer:write_bool(args.tank_capacity)
  writer:write_bool(args.distance)
  writer:write_bool(args.angle_position)
  writer:write_bool(args.rotation)
  writer:write_bool(args.water_temperature)
  writer:write_bool(args.soil_temperature)
  writer:write_bool(args.seismic_intensity)
  writer:write_bool(args.seismic_magnitude)
  writer:write_bool(args.ultraviolet)
  writer:write_bool(args.electrical_resistivity)
  writer:write_bool(args.electrical_conductivity)
  writer:write_bool(args.loudness)
  writer:write_bool(args.moisture)
  return writer.buf
end

--- Deserialize a v5 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT payload.
---
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV5Args deserialized arguments
function SupportedSensorReportV5:deserialize()
  local reader = buf.Reader(self.payload)
  reader:bit_seek(1) -- reserved
  reader:read_bool("air_temperature")
  reader:read_bool("general_purpose_value")
  reader:read_bool("luminance")
  reader:read_bool("power")
  reader:read_bool("humidity")
  reader:read_bool("velocity")
  reader:read_bool("direction")
  reader:read_bool("atmospheric_pressure")
  reader:read_bool("barometric_pressure")
  reader:read_bool("solar_radiation")
  reader:read_bool("dew_point")
  reader:read_bool("rain_rate")
  reader:read_bool("tide_level")
  reader:read_bool("weight")
  reader:read_bool("voltage")
  reader:read_bool("current")
  reader:read_bool("co2_level")
  reader:read_bool("air_flow")
  reader:read_bool("tank_capacity")
  reader:read_bool("distance")
  reader:read_bool("angle_position")
  reader:read_bool("rotation")
  reader:read_bool("water_temperature")
  reader:read_bool("soil_temperature")
  reader:read_bool("seismic_intensity")
  reader:read_bool("seismic_magnitude")
  reader:read_bool("ultraviolet")
  reader:read_bool("electrical_resistivity")
  reader:read_bool("electrical_conductivity")
  reader:read_bool("loudness")
  reader:read_bool("moisture")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV5
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV5Args
function SupportedSensorReportV5._defaults(self)
  local args = {}
  args.air_temperature = self.args.air_temperature or false
  args.general_purpose_value = self.args.general_purpose_value or false
  args.luminance = self.args.luminance or false
  args.power = self.args.power or false
  args.humidity = self.args.humidity or false
  args.velocity = self.args.velocity or false
  args.direction = self.args.direction or false
  args.atmospheric_pressure = self.args.atmospheric_pressure or false
  args.barometric_pressure = self.args.barometric_pressure or false
  args.solar_radiation = self.args.solar_radiation or false
  args.dew_point = self.args.dew_point or false
  args.rain_rate = self.args.rain_rate or false
  args.tide_level = self.args.tide_level or false
  args.weight = self.args.weight or false
  args.voltage = self.args.voltage or false
  args.current = self.args.current or false
  args.co2_level = self.args.co2_level or false
  args.air_flow = self.args.air_flow or false
  args.tank_capacity = self.args.tank_capacity or false
  args.distance = self.args.distance or false
  args.angle_position = self.args.angle_position or false
  args.rotation = self.args.rotation or false
  args.water_temperature = self.args.water_temperature or false
  args.soil_temperature = self.args.soil_temperature or false
  args.seismic_intensity = self.args.seismic_intensity or false
  args.seismic_magnitude = self.args.seismic_magnitude or false
  args.ultraviolet = self.args.ultraviolet or false
  args.electrical_resistivity = self.args.electrical_resistivity or false
  args.electrical_conductivity = self.args.electrical_conductivity or false
  args.loudness = self.args.loudness or false
  args.moisture = self.args.moisture or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV5
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV5Args
function SupportedSensorReportV5._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV5
function SupportedSensorReportV5._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV5
function SupportedSensorReportV5._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedGetScaleV5Args
--- @alias SupportedGetScaleV5Args st.zwave.CommandClass.SensorMultilevel.SupportedGetScaleV5Args
--- @field public sensor_type integer see :lua:class:`SensorMultilevel.sensor_type <st.zwave.CommandClass.SensorMultilevel.sensor_type>`
local SupportedGetScaleV5Args = {}

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedGetScaleV5:st.zwave.Command
--- @alias SupportedGetScaleV5 st.zwave.CommandClass.SensorMultilevel.SupportedGetScaleV5
---
--- v5 and forward-compatible v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x03
--- @field public version number 5
--- @field public args st.zwave.CommandClass.SensorMultilevel.SupportedGetScaleV5Args command-specific arguments
local SupportedGetScaleV5 = {}
setmetatable(SupportedGetScaleV5, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v5 and forward-compatible v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE object.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.SupportedGetScaleV5Args command-specific arguments
function SupportedGetScaleV5:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_MULTILEVEL, SensorMultilevel.SUPPORTED_GET_SCALE, 5, args, ...)
end

--- Serialize v5 or forward-compatible v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE arguments.
---
--- @return string serialized payload
function SupportedGetScaleV5:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.sensor_type)
  return writer.buf
end

--- Deserialize a v5 or forward-compatible v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE payload.
---
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedGetScaleV5Args deserialized arguments
function SupportedGetScaleV5:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("sensor_type")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedGetScaleV5
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedGetScaleV5Args
function SupportedGetScaleV5._defaults(self)
  local args = {}
  args.sensor_type = self.args.sensor_type or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedGetScaleV5
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedGetScaleV5Args
function SupportedGetScaleV5._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedGetScaleV5
function SupportedGetScaleV5._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedGetScaleV5
function SupportedGetScaleV5._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.sensor_type = function()
    return zw._reflect(
      SensorMultilevel._reflect_sensor_type,
      args.sensor_type
    )
  end
end

--- @class st.zwave.CommandClass.SensorMultilevel.GetV5Args
--- @alias GetV5Args st.zwave.CommandClass.SensorMultilevel.GetV5Args
--- @field public sensor_type integer see :lua:class:`SensorMultilevel.sensor_type <st.zwave.CommandClass.SensorMultilevel.sensor_type>`
--- @field public scale integer see :lua:class:`SensorMultilevel.scale <st.zwave.CommandClass.SensorMultilevel.scale>`
local GetV5Args = {}

--- @class st.zwave.CommandClass.SensorMultilevel.GetV5:st.zwave.Command
--- @alias GetV5 st.zwave.CommandClass.SensorMultilevel.GetV5
---
--- v5 and forward-compatible v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_GET
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x04
--- @field public version number 5
--- @field public args st.zwave.CommandClass.SensorMultilevel.GetV5Args command-specific arguments
local GetV5 = {}
setmetatable(GetV5, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v5 and forward-compatible v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_GET object.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.GetV5Args command-specific arguments
function GetV5:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_MULTILEVEL, SensorMultilevel.GET, 5, args, ...)
end

--- Serialize v5 or forward-compatible v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_GET arguments.
---
--- @return string serialized payload
function GetV5:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.sensor_type)
  writer:write_bits(3, 0) -- reserved1
  writer:write_bits(2, args.scale)
  writer:write_bits(3, 0) -- reserved2
  return writer.buf
end

--- Deserialize a v5 or forward-compatible v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_GET payload.
---
--- @return st.zwave.CommandClass.SensorMultilevel.GetV5Args deserialized arguments
function GetV5:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("sensor_type")
  reader:read_bits(3) -- reserved1
  reader:read_bits(2, "scale")
  reader:read_bits(3) -- reserved2
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.GetV5
--- @return st.zwave.CommandClass.SensorMultilevel.GetV5Args
function GetV5._defaults(self)
  local args = {}
  args.sensor_type = self.args.sensor_type or 0
  args.scale = self.args.scale or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.GetV5
--- @return st.zwave.CommandClass.SensorMultilevel.GetV5Args
function GetV5._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.GetV5
function GetV5._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.GetV5
function GetV5._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.sensor_type = function()
    return zw._reflect(
      SensorMultilevel._reflect_sensor_type,
      args.sensor_type
    )
  end
end

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedScaleReportV5Args
--- @alias SupportedScaleReportV5Args st.zwave.CommandClass.SensorMultilevel.SupportedScaleReportV5Args
--- @field public sensor_type integer see :lua:class:`SensorMultilevel.sensor_type <st.zwave.CommandClass.SensorMultilevel.sensor_type>`
--- @field public scale_bit_mask integer [0,15]
local SupportedScaleReportV5Args = {}

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedScaleReportV5:st.zwave.Command
--- @alias SupportedScaleReportV5 st.zwave.CommandClass.SensorMultilevel.SupportedScaleReportV5
---
--- v5 and forward-compatible v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x06
--- @field public version number 5
--- @field public args st.zwave.CommandClass.SensorMultilevel.SupportedScaleReportV5Args command-specific arguments
local SupportedScaleReportV5 = {}
setmetatable(SupportedScaleReportV5, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v5 and forward-compatible v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT object.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.SupportedScaleReportV5Args command-specific arguments
function SupportedScaleReportV5:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_MULTILEVEL, SensorMultilevel.SUPPORTED_SCALE_REPORT, 5, args, ...)
end

--- Serialize v5 or forward-compatible v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT arguments.
---
--- @return string serialized payload
function SupportedScaleReportV5:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.sensor_type)
  writer:write_bits(4, args.scale_bit_mask)
  writer:write_bits(4, 0) -- reserved
  return writer.buf
end

--- Deserialize a v5 or forward-compatible v6,v7,v8,v9,v10,v11 SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT payload.
---
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedScaleReportV5Args deserialized arguments
function SupportedScaleReportV5:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("sensor_type")
  reader:read_bits(4, "scale_bit_mask")
  reader:read_bits(4) -- reserved
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedScaleReportV5
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedScaleReportV5Args
function SupportedScaleReportV5._defaults(self)
  local args = {}
  args.sensor_type = self.args.sensor_type or 0
  args.scale_bit_mask = self.args.scale_bit_mask or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedScaleReportV5
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedScaleReportV5Args
function SupportedScaleReportV5._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedScaleReportV5
function SupportedScaleReportV5._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedScaleReportV5
function SupportedScaleReportV5._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.sensor_type = function()
    return zw._reflect(
      SensorMultilevel._reflect_sensor_type,
      args.sensor_type
    )
  end
end

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV6Args
--- @alias SupportedSensorReportV6Args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV6Args
--- @field public air_temperature boolean
--- @field public general_purpose_value boolean
--- @field public luminance boolean
--- @field public power boolean
--- @field public humidity boolean
--- @field public velocity boolean
--- @field public direction boolean
--- @field public atmospheric_pressure boolean
--- @field public barometric_pressure boolean
--- @field public solar_radiation boolean
--- @field public dew_point boolean
--- @field public rain_rate boolean
--- @field public tide_level boolean
--- @field public weight boolean
--- @field public voltage boolean
--- @field public current boolean
--- @field public co2_level boolean
--- @field public air_flow boolean
--- @field public tank_capacity boolean
--- @field public distance boolean
--- @field public angle_position boolean
--- @field public rotation boolean
--- @field public water_temperature boolean
--- @field public soil_temperature boolean
--- @field public seismic_intensity boolean
--- @field public seismic_magnitude boolean
--- @field public ultraviolet boolean
--- @field public electrical_resistivity boolean
--- @field public electrical_conductivity boolean
--- @field public loudness boolean
--- @field public moisture boolean
--- @field public frequency boolean
--- @field public time boolean
--- @field public target_temperature boolean
local SupportedSensorReportV6Args = {}

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV6:st.zwave.Command
--- @alias SupportedSensorReportV6 st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV6
---
--- v6 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x02
--- @field public version number 6
--- @field public args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV6Args command-specific arguments
local SupportedSensorReportV6 = {}
setmetatable(SupportedSensorReportV6, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v6 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT object.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV6Args command-specific arguments
function SupportedSensorReportV6:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_MULTILEVEL, SensorMultilevel.SUPPORTED_SENSOR_REPORT, 6, args, ...)
end

--- Serialize v6 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT arguments.
---
--- @return string serialized payload
function SupportedSensorReportV6:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(1, 0) -- reserved
  writer:write_bool(args.air_temperature)
  writer:write_bool(args.general_purpose_value)
  writer:write_bool(args.luminance)
  writer:write_bool(args.power)
  writer:write_bool(args.humidity)
  writer:write_bool(args.velocity)
  writer:write_bool(args.direction)
  writer:write_bool(args.atmospheric_pressure)
  writer:write_bool(args.barometric_pressure)
  writer:write_bool(args.solar_radiation)
  writer:write_bool(args.dew_point)
  writer:write_bool(args.rain_rate)
  writer:write_bool(args.tide_level)
  writer:write_bool(args.weight)
  writer:write_bool(args.voltage)
  writer:write_bool(args.current)
  writer:write_bool(args.co2_level)
  writer:write_bool(args.air_flow)
  writer:write_bool(args.tank_capacity)
  writer:write_bool(args.distance)
  writer:write_bool(args.angle_position)
  writer:write_bool(args.rotation)
  writer:write_bool(args.water_temperature)
  writer:write_bool(args.soil_temperature)
  writer:write_bool(args.seismic_intensity)
  writer:write_bool(args.seismic_magnitude)
  writer:write_bool(args.ultraviolet)
  writer:write_bool(args.electrical_resistivity)
  writer:write_bool(args.electrical_conductivity)
  writer:write_bool(args.loudness)
  writer:write_bool(args.moisture)
  writer:write_bool(args.frequency)
  writer:write_bool(args.time)
  writer:write_bool(args.target_temperature)
  return writer.buf
end

--- Deserialize a v6 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT payload.
---
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV6Args deserialized arguments
function SupportedSensorReportV6:deserialize()
  local reader = buf.Reader(self.payload)
  reader:bit_seek(1) -- reserved
  reader:read_bool("air_temperature")
  reader:read_bool("general_purpose_value")
  reader:read_bool("luminance")
  reader:read_bool("power")
  reader:read_bool("humidity")
  reader:read_bool("velocity")
  reader:read_bool("direction")
  reader:read_bool("atmospheric_pressure")
  reader:read_bool("barometric_pressure")
  reader:read_bool("solar_radiation")
  reader:read_bool("dew_point")
  reader:read_bool("rain_rate")
  reader:read_bool("tide_level")
  reader:read_bool("weight")
  reader:read_bool("voltage")
  reader:read_bool("current")
  reader:read_bool("co2_level")
  reader:read_bool("air_flow")
  reader:read_bool("tank_capacity")
  reader:read_bool("distance")
  reader:read_bool("angle_position")
  reader:read_bool("rotation")
  reader:read_bool("water_temperature")
  reader:read_bool("soil_temperature")
  reader:read_bool("seismic_intensity")
  reader:read_bool("seismic_magnitude")
  reader:read_bool("ultraviolet")
  reader:read_bool("electrical_resistivity")
  reader:read_bool("electrical_conductivity")
  reader:read_bool("loudness")
  reader:read_bool("moisture")
  reader:read_bool("frequency")
  reader:read_bool("time")
  reader:read_bool("target_temperature")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV6
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV6Args
function SupportedSensorReportV6._defaults(self)
  local args = {}
  args.air_temperature = self.args.air_temperature or false
  args.general_purpose_value = self.args.general_purpose_value or false
  args.luminance = self.args.luminance or false
  args.power = self.args.power or false
  args.humidity = self.args.humidity or false
  args.velocity = self.args.velocity or false
  args.direction = self.args.direction or false
  args.atmospheric_pressure = self.args.atmospheric_pressure or false
  args.barometric_pressure = self.args.barometric_pressure or false
  args.solar_radiation = self.args.solar_radiation or false
  args.dew_point = self.args.dew_point or false
  args.rain_rate = self.args.rain_rate or false
  args.tide_level = self.args.tide_level or false
  args.weight = self.args.weight or false
  args.voltage = self.args.voltage or false
  args.current = self.args.current or false
  args.co2_level = self.args.co2_level or false
  args.air_flow = self.args.air_flow or false
  args.tank_capacity = self.args.tank_capacity or false
  args.distance = self.args.distance or false
  args.angle_position = self.args.angle_position or false
  args.rotation = self.args.rotation or false
  args.water_temperature = self.args.water_temperature or false
  args.soil_temperature = self.args.soil_temperature or false
  args.seismic_intensity = self.args.seismic_intensity or false
  args.seismic_magnitude = self.args.seismic_magnitude or false
  args.ultraviolet = self.args.ultraviolet or false
  args.electrical_resistivity = self.args.electrical_resistivity or false
  args.electrical_conductivity = self.args.electrical_conductivity or false
  args.loudness = self.args.loudness or false
  args.moisture = self.args.moisture or false
  args.frequency = self.args.frequency or false
  args.time = self.args.time or false
  args.target_temperature = self.args.target_temperature or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV6
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV6Args
function SupportedSensorReportV6._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV6
function SupportedSensorReportV6._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV6
function SupportedSensorReportV6._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV7Args
--- @alias SupportedSensorReportV7Args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV7Args
--- @field public air_temperature boolean
--- @field public general_purpose_value boolean
--- @field public luminance boolean
--- @field public power boolean
--- @field public humidity boolean
--- @field public velocity boolean
--- @field public direction boolean
--- @field public atmospheric_pressure boolean
--- @field public barometric_pressure boolean
--- @field public solar_radiation boolean
--- @field public dew_point boolean
--- @field public rain_rate boolean
--- @field public tide_level boolean
--- @field public weight boolean
--- @field public voltage boolean
--- @field public current boolean
--- @field public co2_level boolean
--- @field public air_flow boolean
--- @field public tank_capacity boolean
--- @field public distance boolean
--- @field public angle_position boolean
--- @field public rotation boolean
--- @field public water_temperature boolean
--- @field public soil_temperature boolean
--- @field public seismic_intensity boolean
--- @field public seismic_magnitude boolean
--- @field public ultraviolet boolean
--- @field public electrical_resistivity boolean
--- @field public electrical_conductivity boolean
--- @field public loudness boolean
--- @field public moisture boolean
--- @field public frequency boolean
--- @field public time boolean
--- @field public target_temperature boolean
--- @field public particulate_matter_2_5 boolean
--- @field public formaldehyde_ch2_o_level boolean
--- @field public radon_concentration boolean
--- @field public methane_density_ch4 boolean
--- @field public volatile_organic_compound boolean
--- @field public carbon_monoxide_co_level boolean
--- @field public soil_humidity boolean
--- @field public soil_reactivity boolean
--- @field public soil_salinity boolean
--- @field public heart_rate boolean
--- @field public blood_pressure boolean
--- @field public muscle_mass boolean
--- @field public fat_mass boolean
--- @field public bone_mass boolean
--- @field public total_body_water_tbw boolean
--- @field public basic_metabolic_rate_bmr boolean
--- @field public body_mass_index_bmi boolean
local SupportedSensorReportV7Args = {}

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV7:st.zwave.Command
--- @alias SupportedSensorReportV7 st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV7
---
--- v7 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x02
--- @field public version number 7
--- @field public args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV7Args command-specific arguments
local SupportedSensorReportV7 = {}
setmetatable(SupportedSensorReportV7, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v7 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT object.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV7Args command-specific arguments
function SupportedSensorReportV7:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_MULTILEVEL, SensorMultilevel.SUPPORTED_SENSOR_REPORT, 7, args, ...)
end

--- Serialize v7 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT arguments.
---
--- @return string serialized payload
function SupportedSensorReportV7:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(1, 0) -- reserved
  writer:write_bool(args.air_temperature)
  writer:write_bool(args.general_purpose_value)
  writer:write_bool(args.luminance)
  writer:write_bool(args.power)
  writer:write_bool(args.humidity)
  writer:write_bool(args.velocity)
  writer:write_bool(args.direction)
  writer:write_bool(args.atmospheric_pressure)
  writer:write_bool(args.barometric_pressure)
  writer:write_bool(args.solar_radiation)
  writer:write_bool(args.dew_point)
  writer:write_bool(args.rain_rate)
  writer:write_bool(args.tide_level)
  writer:write_bool(args.weight)
  writer:write_bool(args.voltage)
  writer:write_bool(args.current)
  writer:write_bool(args.co2_level)
  writer:write_bool(args.air_flow)
  writer:write_bool(args.tank_capacity)
  writer:write_bool(args.distance)
  writer:write_bool(args.angle_position)
  writer:write_bool(args.rotation)
  writer:write_bool(args.water_temperature)
  writer:write_bool(args.soil_temperature)
  writer:write_bool(args.seismic_intensity)
  writer:write_bool(args.seismic_magnitude)
  writer:write_bool(args.ultraviolet)
  writer:write_bool(args.electrical_resistivity)
  writer:write_bool(args.electrical_conductivity)
  writer:write_bool(args.loudness)
  writer:write_bool(args.moisture)
  writer:write_bool(args.frequency)
  writer:write_bool(args.time)
  writer:write_bool(args.target_temperature)
  writer:write_bool(args.particulate_matter_2_5)
  writer:write_bool(args.formaldehyde_ch2_o_level)
  writer:write_bool(args.radon_concentration)
  writer:write_bool(args.methane_density_ch4)
  writer:write_bool(args.volatile_organic_compound)
  writer:write_bool(args.carbon_monoxide_co_level)
  writer:write_bool(args.soil_humidity)
  writer:write_bool(args.soil_reactivity)
  writer:write_bool(args.soil_salinity)
  writer:write_bool(args.heart_rate)
  writer:write_bool(args.blood_pressure)
  writer:write_bool(args.muscle_mass)
  writer:write_bool(args.fat_mass)
  writer:write_bool(args.bone_mass)
  writer:write_bool(args.total_body_water_tbw)
  writer:write_bool(args.basic_metabolic_rate_bmr)
  writer:write_bool(args.body_mass_index_bmi)
  return writer.buf
end

--- Deserialize a v7 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT payload.
---
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV7Args deserialized arguments
function SupportedSensorReportV7:deserialize()
  local reader = buf.Reader(self.payload)
  reader:bit_seek(1) -- reserved
  reader:read_bool("air_temperature")
  reader:read_bool("general_purpose_value")
  reader:read_bool("luminance")
  reader:read_bool("power")
  reader:read_bool("humidity")
  reader:read_bool("velocity")
  reader:read_bool("direction")
  reader:read_bool("atmospheric_pressure")
  reader:read_bool("barometric_pressure")
  reader:read_bool("solar_radiation")
  reader:read_bool("dew_point")
  reader:read_bool("rain_rate")
  reader:read_bool("tide_level")
  reader:read_bool("weight")
  reader:read_bool("voltage")
  reader:read_bool("current")
  reader:read_bool("co2_level")
  reader:read_bool("air_flow")
  reader:read_bool("tank_capacity")
  reader:read_bool("distance")
  reader:read_bool("angle_position")
  reader:read_bool("rotation")
  reader:read_bool("water_temperature")
  reader:read_bool("soil_temperature")
  reader:read_bool("seismic_intensity")
  reader:read_bool("seismic_magnitude")
  reader:read_bool("ultraviolet")
  reader:read_bool("electrical_resistivity")
  reader:read_bool("electrical_conductivity")
  reader:read_bool("loudness")
  reader:read_bool("moisture")
  reader:read_bool("frequency")
  reader:read_bool("time")
  reader:read_bool("target_temperature")
  reader:read_bool("particulate_matter_2_5")
  reader:read_bool("formaldehyde_ch2_o_level")
  reader:read_bool("radon_concentration")
  reader:read_bool("methane_density_ch4")
  reader:read_bool("volatile_organic_compound")
  reader:read_bool("carbon_monoxide_co_level")
  reader:read_bool("soil_humidity")
  reader:read_bool("soil_reactivity")
  reader:read_bool("soil_salinity")
  reader:read_bool("heart_rate")
  reader:read_bool("blood_pressure")
  reader:read_bool("muscle_mass")
  reader:read_bool("fat_mass")
  reader:read_bool("bone_mass")
  reader:read_bool("total_body_water_tbw")
  reader:read_bool("basic_metabolic_rate_bmr")
  reader:read_bool("body_mass_index_bmi")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV7
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV7Args
function SupportedSensorReportV7._defaults(self)
  local args = {}
  args.air_temperature = self.args.air_temperature or false
  args.general_purpose_value = self.args.general_purpose_value or false
  args.luminance = self.args.luminance or false
  args.power = self.args.power or false
  args.humidity = self.args.humidity or false
  args.velocity = self.args.velocity or false
  args.direction = self.args.direction or false
  args.atmospheric_pressure = self.args.atmospheric_pressure or false
  args.barometric_pressure = self.args.barometric_pressure or false
  args.solar_radiation = self.args.solar_radiation or false
  args.dew_point = self.args.dew_point or false
  args.rain_rate = self.args.rain_rate or false
  args.tide_level = self.args.tide_level or false
  args.weight = self.args.weight or false
  args.voltage = self.args.voltage or false
  args.current = self.args.current or false
  args.co2_level = self.args.co2_level or false
  args.air_flow = self.args.air_flow or false
  args.tank_capacity = self.args.tank_capacity or false
  args.distance = self.args.distance or false
  args.angle_position = self.args.angle_position or false
  args.rotation = self.args.rotation or false
  args.water_temperature = self.args.water_temperature or false
  args.soil_temperature = self.args.soil_temperature or false
  args.seismic_intensity = self.args.seismic_intensity or false
  args.seismic_magnitude = self.args.seismic_magnitude or false
  args.ultraviolet = self.args.ultraviolet or false
  args.electrical_resistivity = self.args.electrical_resistivity or false
  args.electrical_conductivity = self.args.electrical_conductivity or false
  args.loudness = self.args.loudness or false
  args.moisture = self.args.moisture or false
  args.frequency = self.args.frequency or false
  args.time = self.args.time or false
  args.target_temperature = self.args.target_temperature or false
  args.particulate_matter_2_5 = self.args.particulate_matter_2_5 or false
  args.formaldehyde_ch2_o_level = self.args.formaldehyde_ch2_o_level or false
  args.radon_concentration = self.args.radon_concentration or false
  args.methane_density_ch4 = self.args.methane_density_ch4 or false
  args.volatile_organic_compound = self.args.volatile_organic_compound or false
  args.carbon_monoxide_co_level = self.args.carbon_monoxide_co_level or false
  args.soil_humidity = self.args.soil_humidity or false
  args.soil_reactivity = self.args.soil_reactivity or false
  args.soil_salinity = self.args.soil_salinity or false
  args.heart_rate = self.args.heart_rate or false
  args.blood_pressure = self.args.blood_pressure or false
  args.muscle_mass = self.args.muscle_mass or false
  args.fat_mass = self.args.fat_mass or false
  args.bone_mass = self.args.bone_mass or false
  args.total_body_water_tbw = self.args.total_body_water_tbw or false
  args.basic_metabolic_rate_bmr = self.args.basic_metabolic_rate_bmr or false
  args.body_mass_index_bmi = self.args.body_mass_index_bmi or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV7
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV7Args
function SupportedSensorReportV7._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV7
function SupportedSensorReportV7._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV7
function SupportedSensorReportV7._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV8Args
--- @alias SupportedSensorReportV8Args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV8Args
--- @field public air_temperature boolean
--- @field public general_purpose_value boolean
--- @field public luminance boolean
--- @field public power boolean
--- @field public humidity boolean
--- @field public velocity boolean
--- @field public direction boolean
--- @field public atmospheric_pressure boolean
--- @field public barometric_pressure boolean
--- @field public solar_radiation boolean
--- @field public dew_point boolean
--- @field public rain_rate boolean
--- @field public tide_level boolean
--- @field public weight boolean
--- @field public voltage boolean
--- @field public current boolean
--- @field public co2_level boolean
--- @field public air_flow boolean
--- @field public tank_capacity boolean
--- @field public distance boolean
--- @field public angle_position boolean
--- @field public rotation boolean
--- @field public water_temperature boolean
--- @field public soil_temperature boolean
--- @field public seismic_intensity boolean
--- @field public seismic_magnitude boolean
--- @field public ultraviolet boolean
--- @field public electrical_resistivity boolean
--- @field public electrical_conductivity boolean
--- @field public loudness boolean
--- @field public moisture boolean
--- @field public frequency boolean
--- @field public time boolean
--- @field public target_temperature boolean
--- @field public particulate_matter_2_5 boolean
--- @field public formaldehyde_ch2_o_level boolean
--- @field public radon_concentration boolean
--- @field public methane_density_ch4 boolean
--- @field public volatile_organic_compound boolean
--- @field public carbon_monoxide_co_level boolean
--- @field public soil_humidity boolean
--- @field public soil_reactivity boolean
--- @field public soil_salinity boolean
--- @field public heart_rate boolean
--- @field public blood_pressure boolean
--- @field public muscle_mass boolean
--- @field public fat_mass boolean
--- @field public bone_mass boolean
--- @field public total_body_water_tbw boolean
--- @field public basic_metabolic_rate_bmr boolean
--- @field public body_mass_index_bmi boolean
--- @field public acceleration_x_axis boolean
--- @field public acceleration_y_axis boolean
--- @field public acceleration_z_axis boolean
--- @field public smoke_density boolean
local SupportedSensorReportV8Args = {}

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV8:st.zwave.Command
--- @alias SupportedSensorReportV8 st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV8
---
--- v8 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x02
--- @field public version number 8
--- @field public args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV8Args command-specific arguments
local SupportedSensorReportV8 = {}
setmetatable(SupportedSensorReportV8, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v8 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT object.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV8Args command-specific arguments
function SupportedSensorReportV8:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_MULTILEVEL, SensorMultilevel.SUPPORTED_SENSOR_REPORT, 8, args, ...)
end

--- Serialize v8 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT arguments.
---
--- @return string serialized payload
function SupportedSensorReportV8:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(1, 0) -- reserved
  writer:write_bool(args.air_temperature)
  writer:write_bool(args.general_purpose_value)
  writer:write_bool(args.luminance)
  writer:write_bool(args.power)
  writer:write_bool(args.humidity)
  writer:write_bool(args.velocity)
  writer:write_bool(args.direction)
  writer:write_bool(args.atmospheric_pressure)
  writer:write_bool(args.barometric_pressure)
  writer:write_bool(args.solar_radiation)
  writer:write_bool(args.dew_point)
  writer:write_bool(args.rain_rate)
  writer:write_bool(args.tide_level)
  writer:write_bool(args.weight)
  writer:write_bool(args.voltage)
  writer:write_bool(args.current)
  writer:write_bool(args.co2_level)
  writer:write_bool(args.air_flow)
  writer:write_bool(args.tank_capacity)
  writer:write_bool(args.distance)
  writer:write_bool(args.angle_position)
  writer:write_bool(args.rotation)
  writer:write_bool(args.water_temperature)
  writer:write_bool(args.soil_temperature)
  writer:write_bool(args.seismic_intensity)
  writer:write_bool(args.seismic_magnitude)
  writer:write_bool(args.ultraviolet)
  writer:write_bool(args.electrical_resistivity)
  writer:write_bool(args.electrical_conductivity)
  writer:write_bool(args.loudness)
  writer:write_bool(args.moisture)
  writer:write_bool(args.frequency)
  writer:write_bool(args.time)
  writer:write_bool(args.target_temperature)
  writer:write_bool(args.particulate_matter_2_5)
  writer:write_bool(args.formaldehyde_ch2_o_level)
  writer:write_bool(args.radon_concentration)
  writer:write_bool(args.methane_density_ch4)
  writer:write_bool(args.volatile_organic_compound)
  writer:write_bool(args.carbon_monoxide_co_level)
  writer:write_bool(args.soil_humidity)
  writer:write_bool(args.soil_reactivity)
  writer:write_bool(args.soil_salinity)
  writer:write_bool(args.heart_rate)
  writer:write_bool(args.blood_pressure)
  writer:write_bool(args.muscle_mass)
  writer:write_bool(args.fat_mass)
  writer:write_bool(args.bone_mass)
  writer:write_bool(args.total_body_water_tbw)
  writer:write_bool(args.basic_metabolic_rate_bmr)
  writer:write_bool(args.body_mass_index_bmi)
  writer:write_bool(args.acceleration_x_axis)
  writer:write_bool(args.acceleration_y_axis)
  writer:write_bool(args.acceleration_z_axis)
  writer:write_bool(args.smoke_density)
  return writer.buf
end

--- Deserialize a v8 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT payload.
---
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV8Args deserialized arguments
function SupportedSensorReportV8:deserialize()
  local reader = buf.Reader(self.payload)
  reader:bit_seek(1) -- reserved
  reader:read_bool("air_temperature")
  reader:read_bool("general_purpose_value")
  reader:read_bool("luminance")
  reader:read_bool("power")
  reader:read_bool("humidity")
  reader:read_bool("velocity")
  reader:read_bool("direction")
  reader:read_bool("atmospheric_pressure")
  reader:read_bool("barometric_pressure")
  reader:read_bool("solar_radiation")
  reader:read_bool("dew_point")
  reader:read_bool("rain_rate")
  reader:read_bool("tide_level")
  reader:read_bool("weight")
  reader:read_bool("voltage")
  reader:read_bool("current")
  reader:read_bool("co2_level")
  reader:read_bool("air_flow")
  reader:read_bool("tank_capacity")
  reader:read_bool("distance")
  reader:read_bool("angle_position")
  reader:read_bool("rotation")
  reader:read_bool("water_temperature")
  reader:read_bool("soil_temperature")
  reader:read_bool("seismic_intensity")
  reader:read_bool("seismic_magnitude")
  reader:read_bool("ultraviolet")
  reader:read_bool("electrical_resistivity")
  reader:read_bool("electrical_conductivity")
  reader:read_bool("loudness")
  reader:read_bool("moisture")
  reader:read_bool("frequency")
  reader:read_bool("time")
  reader:read_bool("target_temperature")
  reader:read_bool("particulate_matter_2_5")
  reader:read_bool("formaldehyde_ch2_o_level")
  reader:read_bool("radon_concentration")
  reader:read_bool("methane_density_ch4")
  reader:read_bool("volatile_organic_compound")
  reader:read_bool("carbon_monoxide_co_level")
  reader:read_bool("soil_humidity")
  reader:read_bool("soil_reactivity")
  reader:read_bool("soil_salinity")
  reader:read_bool("heart_rate")
  reader:read_bool("blood_pressure")
  reader:read_bool("muscle_mass")
  reader:read_bool("fat_mass")
  reader:read_bool("bone_mass")
  reader:read_bool("total_body_water_tbw")
  reader:read_bool("basic_metabolic_rate_bmr")
  reader:read_bool("body_mass_index_bmi")
  reader:read_bool("acceleration_x_axis")
  reader:read_bool("acceleration_y_axis")
  reader:read_bool("acceleration_z_axis")
  reader:read_bool("smoke_density")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV8
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV8Args
function SupportedSensorReportV8._defaults(self)
  local args = {}
  args.air_temperature = self.args.air_temperature or false
  args.general_purpose_value = self.args.general_purpose_value or false
  args.luminance = self.args.luminance or false
  args.power = self.args.power or false
  args.humidity = self.args.humidity or false
  args.velocity = self.args.velocity or false
  args.direction = self.args.direction or false
  args.atmospheric_pressure = self.args.atmospheric_pressure or false
  args.barometric_pressure = self.args.barometric_pressure or false
  args.solar_radiation = self.args.solar_radiation or false
  args.dew_point = self.args.dew_point or false
  args.rain_rate = self.args.rain_rate or false
  args.tide_level = self.args.tide_level or false
  args.weight = self.args.weight or false
  args.voltage = self.args.voltage or false
  args.current = self.args.current or false
  args.co2_level = self.args.co2_level or false
  args.air_flow = self.args.air_flow or false
  args.tank_capacity = self.args.tank_capacity or false
  args.distance = self.args.distance or false
  args.angle_position = self.args.angle_position or false
  args.rotation = self.args.rotation or false
  args.water_temperature = self.args.water_temperature or false
  args.soil_temperature = self.args.soil_temperature or false
  args.seismic_intensity = self.args.seismic_intensity or false
  args.seismic_magnitude = self.args.seismic_magnitude or false
  args.ultraviolet = self.args.ultraviolet or false
  args.electrical_resistivity = self.args.electrical_resistivity or false
  args.electrical_conductivity = self.args.electrical_conductivity or false
  args.loudness = self.args.loudness or false
  args.moisture = self.args.moisture or false
  args.frequency = self.args.frequency or false
  args.time = self.args.time or false
  args.target_temperature = self.args.target_temperature or false
  args.particulate_matter_2_5 = self.args.particulate_matter_2_5 or false
  args.formaldehyde_ch2_o_level = self.args.formaldehyde_ch2_o_level or false
  args.radon_concentration = self.args.radon_concentration or false
  args.methane_density_ch4 = self.args.methane_density_ch4 or false
  args.volatile_organic_compound = self.args.volatile_organic_compound or false
  args.carbon_monoxide_co_level = self.args.carbon_monoxide_co_level or false
  args.soil_humidity = self.args.soil_humidity or false
  args.soil_reactivity = self.args.soil_reactivity or false
  args.soil_salinity = self.args.soil_salinity or false
  args.heart_rate = self.args.heart_rate or false
  args.blood_pressure = self.args.blood_pressure or false
  args.muscle_mass = self.args.muscle_mass or false
  args.fat_mass = self.args.fat_mass or false
  args.bone_mass = self.args.bone_mass or false
  args.total_body_water_tbw = self.args.total_body_water_tbw or false
  args.basic_metabolic_rate_bmr = self.args.basic_metabolic_rate_bmr or false
  args.body_mass_index_bmi = self.args.body_mass_index_bmi or false
  args.acceleration_x_axis = self.args.acceleration_x_axis or false
  args.acceleration_y_axis = self.args.acceleration_y_axis or false
  args.acceleration_z_axis = self.args.acceleration_z_axis or false
  args.smoke_density = self.args.smoke_density or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV8
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV8Args
function SupportedSensorReportV8._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV8
function SupportedSensorReportV8._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV8
function SupportedSensorReportV8._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV9Args
--- @alias SupportedSensorReportV9Args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV9Args
--- @field public air_temperature boolean
--- @field public general_purpose_value boolean
--- @field public luminance boolean
--- @field public power boolean
--- @field public humidity boolean
--- @field public velocity boolean
--- @field public direction boolean
--- @field public atmospheric_pressure boolean
--- @field public barometric_pressure boolean
--- @field public solar_radiation boolean
--- @field public dew_point boolean
--- @field public rain_rate boolean
--- @field public tide_level boolean
--- @field public weight boolean
--- @field public voltage boolean
--- @field public current boolean
--- @field public co2_level boolean
--- @field public air_flow boolean
--- @field public tank_capacity boolean
--- @field public distance boolean
--- @field public angle_position boolean
--- @field public rotation boolean
--- @field public water_temperature boolean
--- @field public soil_temperature boolean
--- @field public seismic_intensity boolean
--- @field public seismic_magnitude boolean
--- @field public ultraviolet boolean
--- @field public electrical_resistivity boolean
--- @field public electrical_conductivity boolean
--- @field public loudness boolean
--- @field public moisture boolean
--- @field public frequency boolean
--- @field public time boolean
--- @field public target_temperature boolean
--- @field public particulate_matter_2_5 boolean
--- @field public formaldehyde_ch2_o_level boolean
--- @field public radon_concentration boolean
--- @field public methane_density_ch4 boolean
--- @field public volatile_organic_compound boolean
--- @field public carbon_monoxide_co_level boolean
--- @field public soil_humidity boolean
--- @field public soil_reactivity boolean
--- @field public soil_salinity boolean
--- @field public heart_rate boolean
--- @field public blood_pressure boolean
--- @field public muscle_mass boolean
--- @field public fat_mass boolean
--- @field public bone_mass boolean
--- @field public total_body_water_tbw boolean
--- @field public basic_metabolic_rate_bmr boolean
--- @field public body_mass_index_bmi boolean
--- @field public acceleration_x_axis boolean
--- @field public acceleration_y_axis boolean
--- @field public acceleration_z_axis boolean
--- @field public smoke_density boolean
--- @field public water_flow boolean
--- @field public water_pressure boolean
--- @field public rf_signal_strength boolean
local SupportedSensorReportV9Args = {}

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV9:st.zwave.Command
--- @alias SupportedSensorReportV9 st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV9
---
--- v9 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x02
--- @field public version number 9
--- @field public args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV9Args command-specific arguments
local SupportedSensorReportV9 = {}
setmetatable(SupportedSensorReportV9, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v9 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT object.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV9Args command-specific arguments
function SupportedSensorReportV9:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_MULTILEVEL, SensorMultilevel.SUPPORTED_SENSOR_REPORT, 9, args, ...)
end

--- Serialize v9 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT arguments.
---
--- @return string serialized payload
function SupportedSensorReportV9:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(1, 0) -- reserved
  writer:write_bool(args.air_temperature)
  writer:write_bool(args.general_purpose_value)
  writer:write_bool(args.luminance)
  writer:write_bool(args.power)
  writer:write_bool(args.humidity)
  writer:write_bool(args.velocity)
  writer:write_bool(args.direction)
  writer:write_bool(args.atmospheric_pressure)
  writer:write_bool(args.barometric_pressure)
  writer:write_bool(args.solar_radiation)
  writer:write_bool(args.dew_point)
  writer:write_bool(args.rain_rate)
  writer:write_bool(args.tide_level)
  writer:write_bool(args.weight)
  writer:write_bool(args.voltage)
  writer:write_bool(args.current)
  writer:write_bool(args.co2_level)
  writer:write_bool(args.air_flow)
  writer:write_bool(args.tank_capacity)
  writer:write_bool(args.distance)
  writer:write_bool(args.angle_position)
  writer:write_bool(args.rotation)
  writer:write_bool(args.water_temperature)
  writer:write_bool(args.soil_temperature)
  writer:write_bool(args.seismic_intensity)
  writer:write_bool(args.seismic_magnitude)
  writer:write_bool(args.ultraviolet)
  writer:write_bool(args.electrical_resistivity)
  writer:write_bool(args.electrical_conductivity)
  writer:write_bool(args.loudness)
  writer:write_bool(args.moisture)
  writer:write_bool(args.frequency)
  writer:write_bool(args.time)
  writer:write_bool(args.target_temperature)
  writer:write_bool(args.particulate_matter_2_5)
  writer:write_bool(args.formaldehyde_ch2_o_level)
  writer:write_bool(args.radon_concentration)
  writer:write_bool(args.methane_density_ch4)
  writer:write_bool(args.volatile_organic_compound)
  writer:write_bool(args.carbon_monoxide_co_level)
  writer:write_bool(args.soil_humidity)
  writer:write_bool(args.soil_reactivity)
  writer:write_bool(args.soil_salinity)
  writer:write_bool(args.heart_rate)
  writer:write_bool(args.blood_pressure)
  writer:write_bool(args.muscle_mass)
  writer:write_bool(args.fat_mass)
  writer:write_bool(args.bone_mass)
  writer:write_bool(args.total_body_water_tbw)
  writer:write_bool(args.basic_metabolic_rate_bmr)
  writer:write_bool(args.body_mass_index_bmi)
  writer:write_bool(args.acceleration_x_axis)
  writer:write_bool(args.acceleration_y_axis)
  writer:write_bool(args.acceleration_z_axis)
  writer:write_bool(args.smoke_density)
  writer:write_bool(args.water_flow)
  writer:write_bool(args.water_pressure)
  writer:write_bool(args.rf_signal_strength)
  return writer.buf
end

--- Deserialize a v9 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT payload.
---
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV9Args deserialized arguments
function SupportedSensorReportV9:deserialize()
  local reader = buf.Reader(self.payload)
  reader:bit_seek(1) -- reserved
  reader:read_bool("air_temperature")
  reader:read_bool("general_purpose_value")
  reader:read_bool("luminance")
  reader:read_bool("power")
  reader:read_bool("humidity")
  reader:read_bool("velocity")
  reader:read_bool("direction")
  reader:read_bool("atmospheric_pressure")
  reader:read_bool("barometric_pressure")
  reader:read_bool("solar_radiation")
  reader:read_bool("dew_point")
  reader:read_bool("rain_rate")
  reader:read_bool("tide_level")
  reader:read_bool("weight")
  reader:read_bool("voltage")
  reader:read_bool("current")
  reader:read_bool("co2_level")
  reader:read_bool("air_flow")
  reader:read_bool("tank_capacity")
  reader:read_bool("distance")
  reader:read_bool("angle_position")
  reader:read_bool("rotation")
  reader:read_bool("water_temperature")
  reader:read_bool("soil_temperature")
  reader:read_bool("seismic_intensity")
  reader:read_bool("seismic_magnitude")
  reader:read_bool("ultraviolet")
  reader:read_bool("electrical_resistivity")
  reader:read_bool("electrical_conductivity")
  reader:read_bool("loudness")
  reader:read_bool("moisture")
  reader:read_bool("frequency")
  reader:read_bool("time")
  reader:read_bool("target_temperature")
  reader:read_bool("particulate_matter_2_5")
  reader:read_bool("formaldehyde_ch2_o_level")
  reader:read_bool("radon_concentration")
  reader:read_bool("methane_density_ch4")
  reader:read_bool("volatile_organic_compound")
  reader:read_bool("carbon_monoxide_co_level")
  reader:read_bool("soil_humidity")
  reader:read_bool("soil_reactivity")
  reader:read_bool("soil_salinity")
  reader:read_bool("heart_rate")
  reader:read_bool("blood_pressure")
  reader:read_bool("muscle_mass")
  reader:read_bool("fat_mass")
  reader:read_bool("bone_mass")
  reader:read_bool("total_body_water_tbw")
  reader:read_bool("basic_metabolic_rate_bmr")
  reader:read_bool("body_mass_index_bmi")
  reader:read_bool("acceleration_x_axis")
  reader:read_bool("acceleration_y_axis")
  reader:read_bool("acceleration_z_axis")
  reader:read_bool("smoke_density")
  reader:read_bool("water_flow")
  reader:read_bool("water_pressure")
  reader:read_bool("rf_signal_strength")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV9
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV9Args
function SupportedSensorReportV9._defaults(self)
  local args = {}
  args.air_temperature = self.args.air_temperature or false
  args.general_purpose_value = self.args.general_purpose_value or false
  args.luminance = self.args.luminance or false
  args.power = self.args.power or false
  args.humidity = self.args.humidity or false
  args.velocity = self.args.velocity or false
  args.direction = self.args.direction or false
  args.atmospheric_pressure = self.args.atmospheric_pressure or false
  args.barometric_pressure = self.args.barometric_pressure or false
  args.solar_radiation = self.args.solar_radiation or false
  args.dew_point = self.args.dew_point or false
  args.rain_rate = self.args.rain_rate or false
  args.tide_level = self.args.tide_level or false
  args.weight = self.args.weight or false
  args.voltage = self.args.voltage or false
  args.current = self.args.current or false
  args.co2_level = self.args.co2_level or false
  args.air_flow = self.args.air_flow or false
  args.tank_capacity = self.args.tank_capacity or false
  args.distance = self.args.distance or false
  args.angle_position = self.args.angle_position or false
  args.rotation = self.args.rotation or false
  args.water_temperature = self.args.water_temperature or false
  args.soil_temperature = self.args.soil_temperature or false
  args.seismic_intensity = self.args.seismic_intensity or false
  args.seismic_magnitude = self.args.seismic_magnitude or false
  args.ultraviolet = self.args.ultraviolet or false
  args.electrical_resistivity = self.args.electrical_resistivity or false
  args.electrical_conductivity = self.args.electrical_conductivity or false
  args.loudness = self.args.loudness or false
  args.moisture = self.args.moisture or false
  args.frequency = self.args.frequency or false
  args.time = self.args.time or false
  args.target_temperature = self.args.target_temperature or false
  args.particulate_matter_2_5 = self.args.particulate_matter_2_5 or false
  args.formaldehyde_ch2_o_level = self.args.formaldehyde_ch2_o_level or false
  args.radon_concentration = self.args.radon_concentration or false
  args.methane_density_ch4 = self.args.methane_density_ch4 or false
  args.volatile_organic_compound = self.args.volatile_organic_compound or false
  args.carbon_monoxide_co_level = self.args.carbon_monoxide_co_level or false
  args.soil_humidity = self.args.soil_humidity or false
  args.soil_reactivity = self.args.soil_reactivity or false
  args.soil_salinity = self.args.soil_salinity or false
  args.heart_rate = self.args.heart_rate or false
  args.blood_pressure = self.args.blood_pressure or false
  args.muscle_mass = self.args.muscle_mass or false
  args.fat_mass = self.args.fat_mass or false
  args.bone_mass = self.args.bone_mass or false
  args.total_body_water_tbw = self.args.total_body_water_tbw or false
  args.basic_metabolic_rate_bmr = self.args.basic_metabolic_rate_bmr or false
  args.body_mass_index_bmi = self.args.body_mass_index_bmi or false
  args.acceleration_x_axis = self.args.acceleration_x_axis or false
  args.acceleration_y_axis = self.args.acceleration_y_axis or false
  args.acceleration_z_axis = self.args.acceleration_z_axis or false
  args.smoke_density = self.args.smoke_density or false
  args.water_flow = self.args.water_flow or false
  args.water_pressure = self.args.water_pressure or false
  args.rf_signal_strength = self.args.rf_signal_strength or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV9
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV9Args
function SupportedSensorReportV9._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV9
function SupportedSensorReportV9._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV9
function SupportedSensorReportV9._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV10Args
--- @alias SupportedSensorReportV10Args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV10Args
--- @field public air_temperature boolean
--- @field public general_purpose_value boolean
--- @field public luminance boolean
--- @field public power boolean
--- @field public humidity boolean
--- @field public velocity boolean
--- @field public direction boolean
--- @field public atmospheric_pressure boolean
--- @field public barometric_pressure boolean
--- @field public solar_radiation boolean
--- @field public dew_point boolean
--- @field public rain_rate boolean
--- @field public tide_level boolean
--- @field public weight boolean
--- @field public voltage boolean
--- @field public current boolean
--- @field public co2_level boolean
--- @field public air_flow boolean
--- @field public tank_capacity boolean
--- @field public distance boolean
--- @field public angle_position boolean
--- @field public rotation boolean
--- @field public water_temperature boolean
--- @field public soil_temperature boolean
--- @field public seismic_intensity boolean
--- @field public seismic_magnitude boolean
--- @field public ultraviolet boolean
--- @field public electrical_resistivity boolean
--- @field public electrical_conductivity boolean
--- @field public loudness boolean
--- @field public moisture boolean
--- @field public frequency boolean
--- @field public time boolean
--- @field public target_temperature boolean
--- @field public particulate_matter_2_5 boolean
--- @field public formaldehyde_ch2_o_level boolean
--- @field public radon_concentration boolean
--- @field public methane_density_ch4 boolean
--- @field public volatile_organic_compound boolean
--- @field public carbon_monoxide_co_level boolean
--- @field public soil_humidity boolean
--- @field public soil_reactivity boolean
--- @field public soil_salinity boolean
--- @field public heart_rate boolean
--- @field public blood_pressure boolean
--- @field public muscle_mass boolean
--- @field public fat_mass boolean
--- @field public bone_mass boolean
--- @field public total_body_water_tbw boolean
--- @field public basic_metabolic_rate_bmr boolean
--- @field public body_mass_index_bmi boolean
--- @field public acceleration_x_axis boolean
--- @field public acceleration_y_axis boolean
--- @field public acceleration_z_axis boolean
--- @field public smoke_density boolean
--- @field public water_flow boolean
--- @field public water_pressure boolean
--- @field public rf_signal_strength boolean
--- @field public particulate_matter boolean
--- @field public respiratory_rate boolean
local SupportedSensorReportV10Args = {}

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV10:st.zwave.Command
--- @alias SupportedSensorReportV10 st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV10
---
--- v10 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x02
--- @field public version number 10
--- @field public args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV10Args command-specific arguments
local SupportedSensorReportV10 = {}
setmetatable(SupportedSensorReportV10, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v10 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT object.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV10Args command-specific arguments
function SupportedSensorReportV10:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_MULTILEVEL, SensorMultilevel.SUPPORTED_SENSOR_REPORT, 10, args, ...)
end

--- Serialize v10 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT arguments.
---
--- @return string serialized payload
function SupportedSensorReportV10:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(1, 0) -- reserved
  writer:write_bool(args.air_temperature)
  writer:write_bool(args.general_purpose_value)
  writer:write_bool(args.luminance)
  writer:write_bool(args.power)
  writer:write_bool(args.humidity)
  writer:write_bool(args.velocity)
  writer:write_bool(args.direction)
  writer:write_bool(args.atmospheric_pressure)
  writer:write_bool(args.barometric_pressure)
  writer:write_bool(args.solar_radiation)
  writer:write_bool(args.dew_point)
  writer:write_bool(args.rain_rate)
  writer:write_bool(args.tide_level)
  writer:write_bool(args.weight)
  writer:write_bool(args.voltage)
  writer:write_bool(args.current)
  writer:write_bool(args.co2_level)
  writer:write_bool(args.air_flow)
  writer:write_bool(args.tank_capacity)
  writer:write_bool(args.distance)
  writer:write_bool(args.angle_position)
  writer:write_bool(args.rotation)
  writer:write_bool(args.water_temperature)
  writer:write_bool(args.soil_temperature)
  writer:write_bool(args.seismic_intensity)
  writer:write_bool(args.seismic_magnitude)
  writer:write_bool(args.ultraviolet)
  writer:write_bool(args.electrical_resistivity)
  writer:write_bool(args.electrical_conductivity)
  writer:write_bool(args.loudness)
  writer:write_bool(args.moisture)
  writer:write_bool(args.frequency)
  writer:write_bool(args.time)
  writer:write_bool(args.target_temperature)
  writer:write_bool(args.particulate_matter_2_5)
  writer:write_bool(args.formaldehyde_ch2_o_level)
  writer:write_bool(args.radon_concentration)
  writer:write_bool(args.methane_density_ch4)
  writer:write_bool(args.volatile_organic_compound)
  writer:write_bool(args.carbon_monoxide_co_level)
  writer:write_bool(args.soil_humidity)
  writer:write_bool(args.soil_reactivity)
  writer:write_bool(args.soil_salinity)
  writer:write_bool(args.heart_rate)
  writer:write_bool(args.blood_pressure)
  writer:write_bool(args.muscle_mass)
  writer:write_bool(args.fat_mass)
  writer:write_bool(args.bone_mass)
  writer:write_bool(args.total_body_water_tbw)
  writer:write_bool(args.basic_metabolic_rate_bmr)
  writer:write_bool(args.body_mass_index_bmi)
  writer:write_bool(args.acceleration_x_axis)
  writer:write_bool(args.acceleration_y_axis)
  writer:write_bool(args.acceleration_z_axis)
  writer:write_bool(args.smoke_density)
  writer:write_bool(args.water_flow)
  writer:write_bool(args.water_pressure)
  writer:write_bool(args.rf_signal_strength)
  writer:write_bool(args.particulate_matter)
  writer:write_bool(args.respiratory_rate)
  return writer.buf
end

--- Deserialize a v10 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT payload.
---
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV10Args deserialized arguments
function SupportedSensorReportV10:deserialize()
  local reader = buf.Reader(self.payload)
  reader:bit_seek(1) -- reserved
  reader:read_bool("air_temperature")
  reader:read_bool("general_purpose_value")
  reader:read_bool("luminance")
  reader:read_bool("power")
  reader:read_bool("humidity")
  reader:read_bool("velocity")
  reader:read_bool("direction")
  reader:read_bool("atmospheric_pressure")
  reader:read_bool("barometric_pressure")
  reader:read_bool("solar_radiation")
  reader:read_bool("dew_point")
  reader:read_bool("rain_rate")
  reader:read_bool("tide_level")
  reader:read_bool("weight")
  reader:read_bool("voltage")
  reader:read_bool("current")
  reader:read_bool("co2_level")
  reader:read_bool("air_flow")
  reader:read_bool("tank_capacity")
  reader:read_bool("distance")
  reader:read_bool("angle_position")
  reader:read_bool("rotation")
  reader:read_bool("water_temperature")
  reader:read_bool("soil_temperature")
  reader:read_bool("seismic_intensity")
  reader:read_bool("seismic_magnitude")
  reader:read_bool("ultraviolet")
  reader:read_bool("electrical_resistivity")
  reader:read_bool("electrical_conductivity")
  reader:read_bool("loudness")
  reader:read_bool("moisture")
  reader:read_bool("frequency")
  reader:read_bool("time")
  reader:read_bool("target_temperature")
  reader:read_bool("particulate_matter_2_5")
  reader:read_bool("formaldehyde_ch2_o_level")
  reader:read_bool("radon_concentration")
  reader:read_bool("methane_density_ch4")
  reader:read_bool("volatile_organic_compound")
  reader:read_bool("carbon_monoxide_co_level")
  reader:read_bool("soil_humidity")
  reader:read_bool("soil_reactivity")
  reader:read_bool("soil_salinity")
  reader:read_bool("heart_rate")
  reader:read_bool("blood_pressure")
  reader:read_bool("muscle_mass")
  reader:read_bool("fat_mass")
  reader:read_bool("bone_mass")
  reader:read_bool("total_body_water_tbw")
  reader:read_bool("basic_metabolic_rate_bmr")
  reader:read_bool("body_mass_index_bmi")
  reader:read_bool("acceleration_x_axis")
  reader:read_bool("acceleration_y_axis")
  reader:read_bool("acceleration_z_axis")
  reader:read_bool("smoke_density")
  reader:read_bool("water_flow")
  reader:read_bool("water_pressure")
  reader:read_bool("rf_signal_strength")
  reader:read_bool("particulate_matter")
  reader:read_bool("respiratory_rate")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV10
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV10Args
function SupportedSensorReportV10._defaults(self)
  local args = {}
  args.air_temperature = self.args.air_temperature or false
  args.general_purpose_value = self.args.general_purpose_value or false
  args.luminance = self.args.luminance or false
  args.power = self.args.power or false
  args.humidity = self.args.humidity or false
  args.velocity = self.args.velocity or false
  args.direction = self.args.direction or false
  args.atmospheric_pressure = self.args.atmospheric_pressure or false
  args.barometric_pressure = self.args.barometric_pressure or false
  args.solar_radiation = self.args.solar_radiation or false
  args.dew_point = self.args.dew_point or false
  args.rain_rate = self.args.rain_rate or false
  args.tide_level = self.args.tide_level or false
  args.weight = self.args.weight or false
  args.voltage = self.args.voltage or false
  args.current = self.args.current or false
  args.co2_level = self.args.co2_level or false
  args.air_flow = self.args.air_flow or false
  args.tank_capacity = self.args.tank_capacity or false
  args.distance = self.args.distance or false
  args.angle_position = self.args.angle_position or false
  args.rotation = self.args.rotation or false
  args.water_temperature = self.args.water_temperature or false
  args.soil_temperature = self.args.soil_temperature or false
  args.seismic_intensity = self.args.seismic_intensity or false
  args.seismic_magnitude = self.args.seismic_magnitude or false
  args.ultraviolet = self.args.ultraviolet or false
  args.electrical_resistivity = self.args.electrical_resistivity or false
  args.electrical_conductivity = self.args.electrical_conductivity or false
  args.loudness = self.args.loudness or false
  args.moisture = self.args.moisture or false
  args.frequency = self.args.frequency or false
  args.time = self.args.time or false
  args.target_temperature = self.args.target_temperature or false
  args.particulate_matter_2_5 = self.args.particulate_matter_2_5 or false
  args.formaldehyde_ch2_o_level = self.args.formaldehyde_ch2_o_level or false
  args.radon_concentration = self.args.radon_concentration or false
  args.methane_density_ch4 = self.args.methane_density_ch4 or false
  args.volatile_organic_compound = self.args.volatile_organic_compound or false
  args.carbon_monoxide_co_level = self.args.carbon_monoxide_co_level or false
  args.soil_humidity = self.args.soil_humidity or false
  args.soil_reactivity = self.args.soil_reactivity or false
  args.soil_salinity = self.args.soil_salinity or false
  args.heart_rate = self.args.heart_rate or false
  args.blood_pressure = self.args.blood_pressure or false
  args.muscle_mass = self.args.muscle_mass or false
  args.fat_mass = self.args.fat_mass or false
  args.bone_mass = self.args.bone_mass or false
  args.total_body_water_tbw = self.args.total_body_water_tbw or false
  args.basic_metabolic_rate_bmr = self.args.basic_metabolic_rate_bmr or false
  args.body_mass_index_bmi = self.args.body_mass_index_bmi or false
  args.acceleration_x_axis = self.args.acceleration_x_axis or false
  args.acceleration_y_axis = self.args.acceleration_y_axis or false
  args.acceleration_z_axis = self.args.acceleration_z_axis or false
  args.smoke_density = self.args.smoke_density or false
  args.water_flow = self.args.water_flow or false
  args.water_pressure = self.args.water_pressure or false
  args.rf_signal_strength = self.args.rf_signal_strength or false
  args.particulate_matter = self.args.particulate_matter or false
  args.respiratory_rate = self.args.respiratory_rate or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV10
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV10Args
function SupportedSensorReportV10._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV10
function SupportedSensorReportV10._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV10
function SupportedSensorReportV10._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV11Args
--- @alias SupportedSensorReportV11Args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV11Args
--- @field public air_temperature boolean
--- @field public general_purpose_value boolean
--- @field public luminance boolean
--- @field public power boolean
--- @field public humidity boolean
--- @field public velocity boolean
--- @field public direction boolean
--- @field public atmospheric_pressure boolean
--- @field public barometric_pressure boolean
--- @field public solar_radiation boolean
--- @field public dew_point boolean
--- @field public rain_rate boolean
--- @field public tide_level boolean
--- @field public weight boolean
--- @field public voltage boolean
--- @field public current boolean
--- @field public co2_level boolean
--- @field public air_flow boolean
--- @field public tank_capacity boolean
--- @field public distance boolean
--- @field public angle_position boolean
--- @field public rotation boolean
--- @field public water_temperature boolean
--- @field public soil_temperature boolean
--- @field public seismic_intensity boolean
--- @field public seismic_magnitude boolean
--- @field public ultraviolet boolean
--- @field public electrical_resistivity boolean
--- @field public electrical_conductivity boolean
--- @field public loudness boolean
--- @field public moisture boolean
--- @field public frequency boolean
--- @field public time boolean
--- @field public target_temperature boolean
--- @field public particulate_matter_2_5 boolean
--- @field public formaldehyde_ch2_o_level boolean
--- @field public radon_concentration boolean
--- @field public methane_density_ch4 boolean
--- @field public volatile_organic_compound boolean
--- @field public carbon_monoxide_co_level boolean
--- @field public soil_humidity boolean
--- @field public soil_reactivity boolean
--- @field public soil_salinity boolean
--- @field public heart_rate boolean
--- @field public blood_pressure boolean
--- @field public muscle_mass boolean
--- @field public fat_mass boolean
--- @field public bone_mass boolean
--- @field public total_body_water_tbw boolean
--- @field public basic_metabolic_rate_bmr boolean
--- @field public body_mass_index_bmi boolean
--- @field public acceleration_x_axis boolean
--- @field public acceleration_y_axis boolean
--- @field public acceleration_z_axis boolean
--- @field public smoke_density boolean
--- @field public water_flow boolean
--- @field public water_pressure boolean
--- @field public rf_signal_strength boolean
--- @field public particulate_matter boolean
--- @field public respiratory_rate boolean
--- @field public relative_modulation_level boolean
--- @field public boiler_water_temperature boolean
--- @field public domestic_hot_water_temperature boolean
--- @field public outside_temperature boolean
--- @field public exhaust_temperature boolean
local SupportedSensorReportV11Args = {}

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV11:st.zwave.Command
--- @alias SupportedSensorReportV11 st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV11
---
--- v11 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x02
--- @field public version number 11
--- @field public args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV11Args command-specific arguments
local SupportedSensorReportV11 = {}
setmetatable(SupportedSensorReportV11, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v11 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT object.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV11Args command-specific arguments
function SupportedSensorReportV11:init(module, args, ...)
  zw.Command._parse(self, module, zw.SENSOR_MULTILEVEL, SensorMultilevel.SUPPORTED_SENSOR_REPORT, 11, args, ...)
end

--- Serialize v11 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT arguments.
---
--- @return string serialized payload
function SupportedSensorReportV11:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(1, 0) -- reserved
  writer:write_bool(args.air_temperature)
  writer:write_bool(args.general_purpose_value)
  writer:write_bool(args.luminance)
  writer:write_bool(args.power)
  writer:write_bool(args.humidity)
  writer:write_bool(args.velocity)
  writer:write_bool(args.direction)
  writer:write_bool(args.atmospheric_pressure)
  writer:write_bool(args.barometric_pressure)
  writer:write_bool(args.solar_radiation)
  writer:write_bool(args.dew_point)
  writer:write_bool(args.rain_rate)
  writer:write_bool(args.tide_level)
  writer:write_bool(args.weight)
  writer:write_bool(args.voltage)
  writer:write_bool(args.current)
  writer:write_bool(args.co2_level)
  writer:write_bool(args.air_flow)
  writer:write_bool(args.tank_capacity)
  writer:write_bool(args.distance)
  writer:write_bool(args.angle_position)
  writer:write_bool(args.rotation)
  writer:write_bool(args.water_temperature)
  writer:write_bool(args.soil_temperature)
  writer:write_bool(args.seismic_intensity)
  writer:write_bool(args.seismic_magnitude)
  writer:write_bool(args.ultraviolet)
  writer:write_bool(args.electrical_resistivity)
  writer:write_bool(args.electrical_conductivity)
  writer:write_bool(args.loudness)
  writer:write_bool(args.moisture)
  writer:write_bool(args.frequency)
  writer:write_bool(args.time)
  writer:write_bool(args.target_temperature)
  writer:write_bool(args.particulate_matter_2_5)
  writer:write_bool(args.formaldehyde_ch2_o_level)
  writer:write_bool(args.radon_concentration)
  writer:write_bool(args.methane_density_ch4)
  writer:write_bool(args.volatile_organic_compound)
  writer:write_bool(args.carbon_monoxide_co_level)
  writer:write_bool(args.soil_humidity)
  writer:write_bool(args.soil_reactivity)
  writer:write_bool(args.soil_salinity)
  writer:write_bool(args.heart_rate)
  writer:write_bool(args.blood_pressure)
  writer:write_bool(args.muscle_mass)
  writer:write_bool(args.fat_mass)
  writer:write_bool(args.bone_mass)
  writer:write_bool(args.total_body_water_tbw)
  writer:write_bool(args.basic_metabolic_rate_bmr)
  writer:write_bool(args.body_mass_index_bmi)
  writer:write_bool(args.acceleration_x_axis)
  writer:write_bool(args.acceleration_y_axis)
  writer:write_bool(args.acceleration_z_axis)
  writer:write_bool(args.smoke_density)
  writer:write_bool(args.water_flow)
  writer:write_bool(args.water_pressure)
  writer:write_bool(args.rf_signal_strength)
  writer:write_bool(args.particulate_matter)
  writer:write_bool(args.respiratory_rate)
  writer:write_bool(args.relative_modulation_level)
  writer:write_bool(args.boiler_water_temperature)
  writer:write_bool(args.domestic_hot_water_temperature)
  writer:write_bool(args.outside_temperature)
  writer:write_bool(args.exhaust_temperature)
  return writer.buf
end

--- Deserialize a v11 SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT payload.
---
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV11Args deserialized arguments
function SupportedSensorReportV11:deserialize()
  local reader = buf.Reader(self.payload)
  reader:bit_seek(1) -- reserved
  reader:read_bool("air_temperature")
  reader:read_bool("general_purpose_value")
  reader:read_bool("luminance")
  reader:read_bool("power")
  reader:read_bool("humidity")
  reader:read_bool("velocity")
  reader:read_bool("direction")
  reader:read_bool("atmospheric_pressure")
  reader:read_bool("barometric_pressure")
  reader:read_bool("solar_radiation")
  reader:read_bool("dew_point")
  reader:read_bool("rain_rate")
  reader:read_bool("tide_level")
  reader:read_bool("weight")
  reader:read_bool("voltage")
  reader:read_bool("current")
  reader:read_bool("co2_level")
  reader:read_bool("air_flow")
  reader:read_bool("tank_capacity")
  reader:read_bool("distance")
  reader:read_bool("angle_position")
  reader:read_bool("rotation")
  reader:read_bool("water_temperature")
  reader:read_bool("soil_temperature")
  reader:read_bool("seismic_intensity")
  reader:read_bool("seismic_magnitude")
  reader:read_bool("ultraviolet")
  reader:read_bool("electrical_resistivity")
  reader:read_bool("electrical_conductivity")
  reader:read_bool("loudness")
  reader:read_bool("moisture")
  reader:read_bool("frequency")
  reader:read_bool("time")
  reader:read_bool("target_temperature")
  reader:read_bool("particulate_matter_2_5")
  reader:read_bool("formaldehyde_ch2_o_level")
  reader:read_bool("radon_concentration")
  reader:read_bool("methane_density_ch4")
  reader:read_bool("volatile_organic_compound")
  reader:read_bool("carbon_monoxide_co_level")
  reader:read_bool("soil_humidity")
  reader:read_bool("soil_reactivity")
  reader:read_bool("soil_salinity")
  reader:read_bool("heart_rate")
  reader:read_bool("blood_pressure")
  reader:read_bool("muscle_mass")
  reader:read_bool("fat_mass")
  reader:read_bool("bone_mass")
  reader:read_bool("total_body_water_tbw")
  reader:read_bool("basic_metabolic_rate_bmr")
  reader:read_bool("body_mass_index_bmi")
  reader:read_bool("acceleration_x_axis")
  reader:read_bool("acceleration_y_axis")
  reader:read_bool("acceleration_z_axis")
  reader:read_bool("smoke_density")
  reader:read_bool("water_flow")
  reader:read_bool("water_pressure")
  reader:read_bool("rf_signal_strength")
  reader:read_bool("particulate_matter")
  reader:read_bool("respiratory_rate")
  reader:read_bool("relative_modulation_level")
  reader:read_bool("boiler_water_temperature")
  reader:read_bool("domestic_hot_water_temperature")
  reader:read_bool("outside_temperature")
  reader:read_bool("exhaust_temperature")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV11
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV11Args
function SupportedSensorReportV11._defaults(self)
  local args = {}
  args.air_temperature = self.args.air_temperature or false
  args.general_purpose_value = self.args.general_purpose_value or false
  args.luminance = self.args.luminance or false
  args.power = self.args.power or false
  args.humidity = self.args.humidity or false
  args.velocity = self.args.velocity or false
  args.direction = self.args.direction or false
  args.atmospheric_pressure = self.args.atmospheric_pressure or false
  args.barometric_pressure = self.args.barometric_pressure or false
  args.solar_radiation = self.args.solar_radiation or false
  args.dew_point = self.args.dew_point or false
  args.rain_rate = self.args.rain_rate or false
  args.tide_level = self.args.tide_level or false
  args.weight = self.args.weight or false
  args.voltage = self.args.voltage or false
  args.current = self.args.current or false
  args.co2_level = self.args.co2_level or false
  args.air_flow = self.args.air_flow or false
  args.tank_capacity = self.args.tank_capacity or false
  args.distance = self.args.distance or false
  args.angle_position = self.args.angle_position or false
  args.rotation = self.args.rotation or false
  args.water_temperature = self.args.water_temperature or false
  args.soil_temperature = self.args.soil_temperature or false
  args.seismic_intensity = self.args.seismic_intensity or false
  args.seismic_magnitude = self.args.seismic_magnitude or false
  args.ultraviolet = self.args.ultraviolet or false
  args.electrical_resistivity = self.args.electrical_resistivity or false
  args.electrical_conductivity = self.args.electrical_conductivity or false
  args.loudness = self.args.loudness or false
  args.moisture = self.args.moisture or false
  args.frequency = self.args.frequency or false
  args.time = self.args.time or false
  args.target_temperature = self.args.target_temperature or false
  args.particulate_matter_2_5 = self.args.particulate_matter_2_5 or false
  args.formaldehyde_ch2_o_level = self.args.formaldehyde_ch2_o_level or false
  args.radon_concentration = self.args.radon_concentration or false
  args.methane_density_ch4 = self.args.methane_density_ch4 or false
  args.volatile_organic_compound = self.args.volatile_organic_compound or false
  args.carbon_monoxide_co_level = self.args.carbon_monoxide_co_level or false
  args.soil_humidity = self.args.soil_humidity or false
  args.soil_reactivity = self.args.soil_reactivity or false
  args.soil_salinity = self.args.soil_salinity or false
  args.heart_rate = self.args.heart_rate or false
  args.blood_pressure = self.args.blood_pressure or false
  args.muscle_mass = self.args.muscle_mass or false
  args.fat_mass = self.args.fat_mass or false
  args.bone_mass = self.args.bone_mass or false
  args.total_body_water_tbw = self.args.total_body_water_tbw or false
  args.basic_metabolic_rate_bmr = self.args.basic_metabolic_rate_bmr or false
  args.body_mass_index_bmi = self.args.body_mass_index_bmi or false
  args.acceleration_x_axis = self.args.acceleration_x_axis or false
  args.acceleration_y_axis = self.args.acceleration_y_axis or false
  args.acceleration_z_axis = self.args.acceleration_z_axis or false
  args.smoke_density = self.args.smoke_density or false
  args.water_flow = self.args.water_flow or false
  args.water_pressure = self.args.water_pressure or false
  args.rf_signal_strength = self.args.rf_signal_strength or false
  args.particulate_matter = self.args.particulate_matter or false
  args.respiratory_rate = self.args.respiratory_rate or false
  args.relative_modulation_level = self.args.relative_modulation_level or false
  args.boiler_water_temperature = self.args.boiler_water_temperature or false
  args.domestic_hot_water_temperature = self.args.domestic_hot_water_temperature or false
  args.outside_temperature = self.args.outside_temperature or false
  args.exhaust_temperature = self.args.exhaust_temperature or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV11
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV11Args
function SupportedSensorReportV11._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV11
function SupportedSensorReportV11._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV11
function SupportedSensorReportV11._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SensorMultilevel.Get
--- @alias _Get st.zwave.CommandClass.SensorMultilevel.Get
---
--- Dynamically versioned SENSOR_MULTILEVEL_GET
---
--- Supported versions: 1,2,3,4,5,6,7,8,9,10,11; unique base versions: 1,5
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x04
--- @field public version number 1,5
--- @field public args st.zwave.CommandClass.SensorMultilevel.GetV1Args|st.zwave.CommandClass.SensorMultilevel.GetV5Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SENSOR_MULTILEVEL_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.GetV1Args|st.zwave.CommandClass.SensorMultilevel.GetV5Args command-specific arguments
--- @return st.zwave.CommandClass.SensorMultilevel.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, SensorMultilevel.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SensorMultilevel.Report
--- @alias _Report st.zwave.CommandClass.SensorMultilevel.Report
---
--- Dynamically versioned SENSOR_MULTILEVEL_REPORT
---
--- Supported versions: 1,2,3,4,5,6,7,8,9,10,11; unique base versions: 1
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SensorMultilevel.ReportV1Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SENSOR_MULTILEVEL_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.ReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.SensorMultilevel.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, SensorMultilevel.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedGetSensor
--- @alias _SupportedGetSensor st.zwave.CommandClass.SensorMultilevel.SupportedGetSensor
---
--- Dynamically versioned SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR
---
--- Supported versions: 5,6,7,8,9,10,11; unique base versions: 5
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x01
--- @field public version number 5
--- @field public args st.zwave.CommandClass.SensorMultilevel.SupportedGetSensorV5Args
local _SupportedGetSensor = {}
setmetatable(_SupportedGetSensor, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SENSOR_MULTILEVEL_SUPPORTED_GET_SENSOR object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.SupportedGetSensorV5Args command-specific arguments
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedGetSensor
function _SupportedGetSensor:construct(module, args, ...)
  return zw.Command._construct(module, SensorMultilevel.SUPPORTED_GET_SENSOR, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedSensorReport
--- @alias _SupportedSensorReport st.zwave.CommandClass.SensorMultilevel.SupportedSensorReport
---
--- Dynamically versioned SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT
---
--- Supported versions: 5,6,7,8,9,10,11; unique base versions: 5,6,7,8,9,10,11
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x02
--- @field public version number 5,6,7,8,9,10,11
--- @field public args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV5Args|st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV6Args|st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV7Args|st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV8Args|st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV9Args|st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV10Args|st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV11Args
local _SupportedSensorReport = {}
setmetatable(_SupportedSensorReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SENSOR_MULTILEVEL_SUPPORTED_SENSOR_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV5Args|st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV6Args|st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV7Args|st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV8Args|st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV9Args|st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV10Args|st.zwave.CommandClass.SensorMultilevel.SupportedSensorReportV11Args command-specific arguments
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedSensorReport
function _SupportedSensorReport:construct(module, args, ...)
  return zw.Command._construct(module, SensorMultilevel.SUPPORTED_SENSOR_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedGetScale
--- @alias _SupportedGetScale st.zwave.CommandClass.SensorMultilevel.SupportedGetScale
---
--- Dynamically versioned SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE
---
--- Supported versions: 5,6,7,8,9,10,11; unique base versions: 5
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x03
--- @field public version number 5
--- @field public args st.zwave.CommandClass.SensorMultilevel.SupportedGetScaleV5Args
local _SupportedGetScale = {}
setmetatable(_SupportedGetScale, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SENSOR_MULTILEVEL_SUPPORTED_GET_SCALE object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.SupportedGetScaleV5Args command-specific arguments
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedGetScale
function _SupportedGetScale:construct(module, args, ...)
  return zw.Command._construct(module, SensorMultilevel.SUPPORTED_GET_SCALE, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SensorMultilevel.SupportedScaleReport
--- @alias _SupportedScaleReport st.zwave.CommandClass.SensorMultilevel.SupportedScaleReport
---
--- Dynamically versioned SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT
---
--- Supported versions: 5,6,7,8,9,10,11; unique base versions: 5
---
--- @field public cmd_class number 0x31
--- @field public cmd_id number 0x06
--- @field public version number 5
--- @field public args st.zwave.CommandClass.SensorMultilevel.SupportedScaleReportV5Args
local _SupportedScaleReport = {}
setmetatable(_SupportedScaleReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SENSOR_MULTILEVEL_SUPPORTED_SCALE_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SensorMultilevel command class module instance
--- @param args st.zwave.CommandClass.SensorMultilevel.SupportedScaleReportV5Args command-specific arguments
--- @return st.zwave.CommandClass.SensorMultilevel.SupportedScaleReport
function _SupportedScaleReport:construct(module, args, ...)
  return zw.Command._construct(module, SensorMultilevel.SUPPORTED_SCALE_REPORT, module._serialization_version, args, ...)
end

SensorMultilevel.GetV1 = GetV1
SensorMultilevel.ReportV1 = ReportV1
SensorMultilevel.SupportedGetSensorV5 = SupportedGetSensorV5
SensorMultilevel.SupportedSensorReportV5 = SupportedSensorReportV5
SensorMultilevel.SupportedGetScaleV5 = SupportedGetScaleV5
SensorMultilevel.GetV5 = GetV5
SensorMultilevel.SupportedScaleReportV5 = SupportedScaleReportV5
SensorMultilevel.SupportedSensorReportV6 = SupportedSensorReportV6
SensorMultilevel.SupportedSensorReportV7 = SupportedSensorReportV7
SensorMultilevel.SupportedSensorReportV8 = SupportedSensorReportV8
SensorMultilevel.SupportedSensorReportV9 = SupportedSensorReportV9
SensorMultilevel.SupportedSensorReportV10 = SupportedSensorReportV10
SensorMultilevel.SupportedSensorReportV11 = SupportedSensorReportV11
SensorMultilevel.Get = _Get
SensorMultilevel.Report = _Report
SensorMultilevel.SupportedGetSensor = _SupportedGetSensor
SensorMultilevel.SupportedSensorReport = _SupportedSensorReport
SensorMultilevel.SupportedGetScale = _SupportedGetScale
SensorMultilevel.SupportedScaleReport = _SupportedScaleReport

SensorMultilevel._lut = {
  [0] = { -- dynamically versioned constructors
    [SensorMultilevel.SUPPORTED_GET_SENSOR] = SensorMultilevel.SupportedGetSensor,
    [SensorMultilevel.SUPPORTED_SENSOR_REPORT] = SensorMultilevel.SupportedSensorReport,
    [SensorMultilevel.SUPPORTED_GET_SCALE] = SensorMultilevel.SupportedGetScale,
    [SensorMultilevel.GET] = SensorMultilevel.Get,
    [SensorMultilevel.REPORT] = SensorMultilevel.Report,
    [SensorMultilevel.SUPPORTED_SCALE_REPORT] = SensorMultilevel.SupportedScaleReport
  },
  [1] = { -- version 1
    [SensorMultilevel.GET] = SensorMultilevel.GetV1,
    [SensorMultilevel.REPORT] = SensorMultilevel.ReportV1
  },
  [2] = { -- version 2
    [SensorMultilevel.GET] = SensorMultilevel.GetV1,
    [SensorMultilevel.REPORT] = SensorMultilevel.ReportV1
  },
  [3] = { -- version 3
    [SensorMultilevel.GET] = SensorMultilevel.GetV1,
    [SensorMultilevel.REPORT] = SensorMultilevel.ReportV1
  },
  [4] = { -- version 4
    [SensorMultilevel.GET] = SensorMultilevel.GetV1,
    [SensorMultilevel.REPORT] = SensorMultilevel.ReportV1
  },
  [5] = { -- version 5
    [SensorMultilevel.SUPPORTED_GET_SENSOR] = SensorMultilevel.SupportedGetSensorV5,
    [SensorMultilevel.SUPPORTED_SENSOR_REPORT] = SensorMultilevel.SupportedSensorReportV5,
    [SensorMultilevel.SUPPORTED_GET_SCALE] = SensorMultilevel.SupportedGetScaleV5,
    [SensorMultilevel.GET] = SensorMultilevel.GetV5,
    [SensorMultilevel.REPORT] = SensorMultilevel.ReportV1,
    [SensorMultilevel.SUPPORTED_SCALE_REPORT] = SensorMultilevel.SupportedScaleReportV5
  },
  [6] = { -- version 6
    [SensorMultilevel.SUPPORTED_GET_SENSOR] = SensorMultilevel.SupportedGetSensorV5,
    [SensorMultilevel.SUPPORTED_SENSOR_REPORT] = SensorMultilevel.SupportedSensorReportV6,
    [SensorMultilevel.SUPPORTED_GET_SCALE] = SensorMultilevel.SupportedGetScaleV5,
    [SensorMultilevel.GET] = SensorMultilevel.GetV5,
    [SensorMultilevel.REPORT] = SensorMultilevel.ReportV1,
    [SensorMultilevel.SUPPORTED_SCALE_REPORT] = SensorMultilevel.SupportedScaleReportV5
  },
  [7] = { -- version 7
    [SensorMultilevel.SUPPORTED_GET_SENSOR] = SensorMultilevel.SupportedGetSensorV5,
    [SensorMultilevel.SUPPORTED_SENSOR_REPORT] = SensorMultilevel.SupportedSensorReportV7,
    [SensorMultilevel.SUPPORTED_GET_SCALE] = SensorMultilevel.SupportedGetScaleV5,
    [SensorMultilevel.GET] = SensorMultilevel.GetV5,
    [SensorMultilevel.REPORT] = SensorMultilevel.ReportV1,
    [SensorMultilevel.SUPPORTED_SCALE_REPORT] = SensorMultilevel.SupportedScaleReportV5
  },
  [8] = { -- version 8
    [SensorMultilevel.SUPPORTED_GET_SENSOR] = SensorMultilevel.SupportedGetSensorV5,
    [SensorMultilevel.SUPPORTED_SENSOR_REPORT] = SensorMultilevel.SupportedSensorReportV8,
    [SensorMultilevel.SUPPORTED_GET_SCALE] = SensorMultilevel.SupportedGetScaleV5,
    [SensorMultilevel.GET] = SensorMultilevel.GetV5,
    [SensorMultilevel.REPORT] = SensorMultilevel.ReportV1,
    [SensorMultilevel.SUPPORTED_SCALE_REPORT] = SensorMultilevel.SupportedScaleReportV5
  },
  [9] = { -- version 9
    [SensorMultilevel.SUPPORTED_GET_SENSOR] = SensorMultilevel.SupportedGetSensorV5,
    [SensorMultilevel.SUPPORTED_SENSOR_REPORT] = SensorMultilevel.SupportedSensorReportV9,
    [SensorMultilevel.SUPPORTED_GET_SCALE] = SensorMultilevel.SupportedGetScaleV5,
    [SensorMultilevel.GET] = SensorMultilevel.GetV5,
    [SensorMultilevel.REPORT] = SensorMultilevel.ReportV1,
    [SensorMultilevel.SUPPORTED_SCALE_REPORT] = SensorMultilevel.SupportedScaleReportV5
  },
  [10] = { -- version 10
    [SensorMultilevel.SUPPORTED_GET_SENSOR] = SensorMultilevel.SupportedGetSensorV5,
    [SensorMultilevel.SUPPORTED_SENSOR_REPORT] = SensorMultilevel.SupportedSensorReportV10,
    [SensorMultilevel.SUPPORTED_GET_SCALE] = SensorMultilevel.SupportedGetScaleV5,
    [SensorMultilevel.GET] = SensorMultilevel.GetV5,
    [SensorMultilevel.REPORT] = SensorMultilevel.ReportV1,
    [SensorMultilevel.SUPPORTED_SCALE_REPORT] = SensorMultilevel.SupportedScaleReportV5
  },
  [11] = { -- version 11
    [SensorMultilevel.SUPPORTED_GET_SENSOR] = SensorMultilevel.SupportedGetSensorV5,
    [SensorMultilevel.SUPPORTED_SENSOR_REPORT] = SensorMultilevel.SupportedSensorReportV11,
    [SensorMultilevel.SUPPORTED_GET_SCALE] = SensorMultilevel.SupportedGetScaleV5,
    [SensorMultilevel.GET] = SensorMultilevel.GetV5,
    [SensorMultilevel.REPORT] = SensorMultilevel.ReportV1,
    [SensorMultilevel.SUPPORTED_SCALE_REPORT] = SensorMultilevel.SupportedScaleReportV5
  }
}
--- @class st.zwave.CommandClass.SensorMultilevel.sensor_type
--- @alias sensor_type st.zwave.CommandClass.SensorMultilevel.sensor_type
--- @field public TEMPERATURE number 0x01
--- @field public GENERAL_PURPOSE_VALUE number 0x02
--- @field public LUMINANCE number 0x03
--- @field public POWER number 0x04
--- @field public RELATIVE_HUMIDITY number 0x05
--- @field public VELOCITY number 0x06
--- @field public DIRECTION number 0x07
--- @field public ATMOSPHERIC_PRESSURE number 0x08
--- @field public BAROMETRIC_PRESSURE number 0x09
--- @field public SOLAR_RADIATION number 0x0A
--- @field public DEW_POINT number 0x0B
--- @field public RAIN_RATE number 0x0C
--- @field public TIDE_LEVEL number 0x0D
--- @field public WEIGHT number 0x0E
--- @field public VOLTAGE number 0x0F
--- @field public CURRENT number 0x10
--- @field public CO2_LEVEL number 0x11
--- @field public AIR_FLOW number 0x12
--- @field public TANK_CAPACITY number 0x13
--- @field public DISTANCE number 0x14
--- @field public ANGLE_POSITION number 0x15
--- @field public ROTATION number 0x16
--- @field public WATER_TEMPERATURE number 0x17
--- @field public SOIL_TEMPERATURE number 0x18
--- @field public SEISMIC_INTENSITY number 0x19
--- @field public SEISMIC_MAGNITUDE number 0x1A
--- @field public ULTRAVIOLET number 0x1B
--- @field public ELECTRICAL_RESISTIVITY number 0x1C
--- @field public ELECTRICAL_CONDUCTIVITY number 0x1D
--- @field public LOUDNESS number 0x1E
--- @field public MOISTURE number 0x1F
--- @field public FREQUENCY number 0x20
--- @field public TIME number 0x21
--- @field public TARGET_TEMPERATURE number 0x22
--- @field public PARTICULATE_MATTER_2_5 number 0x23
--- @field public FORMALDEHYDE_CH2_O_LEVEL number 0x24
--- @field public RADON_CONCENTRATION number 0x25
--- @field public METHANE_DENSITY_CH4 number 0x26
--- @field public VOLATILE_ORGANIC_COMPOUND number 0x27
--- @field public CARBON_MONOXIDE_CO_LEVEL number 0x28
--- @field public SOIL_HUMIDITY number 0x29
--- @field public SOIL_REACTIVITY number 0x2A
--- @field public SOIL_SALINITY number 0x2B
--- @field public HEART_RATE number 0x2C
--- @field public BLOOD_PRESSURE number 0x2D
--- @field public MUSCLE_MASS number 0x2E
--- @field public FAT_MASS number 0x2F
--- @field public BONE_MASS number 0x30
--- @field public TOTAL_BODY_WATER_TBW number 0x31
--- @field public BASIC_METABOLIC_RATE_BMR number 0x32
--- @field public BODY_MASS_INDEX_BMI number 0x33
--- @field public ACCELERATION_X_AXIS number 0x34
--- @field public ACCELERATION_Y_AXIS number 0x35
--- @field public ACCELERATION_Z_AXIS number 0x36
--- @field public SMOKE_DENSITY number 0x37
--- @field public WATER_FLOW number 0x38
--- @field public WATER_PRESSURE number 0x39
--- @field public RF_SIGNAL_STRENGTH number 0x3A
--- @field public PARTICULATE_MATTER number 0x3B
--- @field public RESPIRATORY_RATE number 0x3C
--- @field public RELATIVE_MODULATION_LEVEL number 0x3D
--- @field public BOILER_WATER_TEMPERATURE number 0x3E
--- @field public DOMESTIC_HOT_WATER_TEMPERATURE number 0x3F
--- @field public OUTSIDE_TEMPERATURE number 0x40
--- @field public EXHAUST_TEMPERATURE number 0x41
--- @field public WATER_CHLORINE_LEVEL number 0x42
--- @field public WATER_ACIDITY number 0x43
--- @field public WATER_OXIDATION_REDUCTION_POTENTIAL number 0x44
--- @field public HEART_RATE_LF_HF_RATIO number 0x45
--- @field public MOTION_DIRECTION number 0x46
--- @field public APPLIED_FORCE_ON_THE_SENSOR number 0x47
--- @field public RETURN_AIR_TEMPERATURE number 0x48
--- @field public SUPPLY_AIR_TEMPERATURE number 0x49
--- @field public CONDENSER_COIL_TEMPERATURE number 0x4A
--- @field public EVAPORATOR_COIL_TEMPERATURE number 0x4B
--- @field public LIQUID_LINE_TEMPERATURE number 0x4C
--- @field public DISCHARGE_LINE_TEMPERATURE number 0x4D
--- @field public SUCTION_PRESSURE number 0x4E
--- @field public DISCHARGE_PRESSURE number 0x4F
--- @field public DEFROST_TEMPERATURE number 0x50
--- @field public OZONE_O3 number 0x51
--- @field public SULFUR_DIOXIDE_SO2 number 0x52
--- @field public NITROGEN_DIOXIDE_NO2 number 0x53
--- @field public AMMONIA_NH3 number 0x54
--- @field public LEAD_PB number 0x55
--- @field public PARTICULATE_MATTER_1 number 0x56
local sensor_type = {
  TEMPERATURE = 0x01,
  GENERAL_PURPOSE_VALUE = 0x02,
  LUMINANCE = 0x03,
  POWER = 0x04,
  RELATIVE_HUMIDITY = 0x05,
  VELOCITY = 0x06,
  DIRECTION = 0x07,
  ATMOSPHERIC_PRESSURE = 0x08,
  BAROMETRIC_PRESSURE = 0x09,
  SOLAR_RADIATION = 0x0A,
  DEW_POINT = 0x0B,
  RAIN_RATE = 0x0C,
  TIDE_LEVEL = 0x0D,
  WEIGHT = 0x0E,
  VOLTAGE = 0x0F,
  CURRENT = 0x10,
  CO2_LEVEL = 0x11,
  AIR_FLOW = 0x12,
  TANK_CAPACITY = 0x13,
  DISTANCE = 0x14,
  ANGLE_POSITION = 0x15,
  ROTATION = 0x16,
  WATER_TEMPERATURE = 0x17,
  SOIL_TEMPERATURE = 0x18,
  SEISMIC_INTENSITY = 0x19,
  SEISMIC_MAGNITUDE = 0x1A,
  ULTRAVIOLET = 0x1B,
  ELECTRICAL_RESISTIVITY = 0x1C,
  ELECTRICAL_CONDUCTIVITY = 0x1D,
  LOUDNESS = 0x1E,
  MOISTURE = 0x1F,
  FREQUENCY = 0x20,
  TIME = 0x21,
  TARGET_TEMPERATURE = 0x22,
  PARTICULATE_MATTER_2_5 = 0x23,
  FORMALDEHYDE_CH2_O_LEVEL = 0x24,
  RADON_CONCENTRATION = 0x25,
  METHANE_DENSITY_CH4 = 0x26,
  VOLATILE_ORGANIC_COMPOUND = 0x27,
  CARBON_MONOXIDE_CO_LEVEL = 0x28,
  SOIL_HUMIDITY = 0x29,
  SOIL_REACTIVITY = 0x2A,
  SOIL_SALINITY = 0x2B,
  HEART_RATE = 0x2C,
  BLOOD_PRESSURE = 0x2D,
  MUSCLE_MASS = 0x2E,
  FAT_MASS = 0x2F,
  BONE_MASS = 0x30,
  TOTAL_BODY_WATER_TBW = 0x31,
  BASIC_METABOLIC_RATE_BMR = 0x32,
  BODY_MASS_INDEX_BMI = 0x33,
  ACCELERATION_X_AXIS = 0x34,
  ACCELERATION_Y_AXIS = 0x35,
  ACCELERATION_Z_AXIS = 0x36,
  SMOKE_DENSITY = 0x37,
  WATER_FLOW = 0x38,
  WATER_PRESSURE = 0x39,
  RF_SIGNAL_STRENGTH = 0x3A,
  PARTICULATE_MATTER = 0x3B,
  RESPIRATORY_RATE = 0x3C,
  RELATIVE_MODULATION_LEVEL = 0x3D,
  BOILER_WATER_TEMPERATURE = 0x3E,
  DOMESTIC_HOT_WATER_TEMPERATURE = 0x3F,
  OUTSIDE_TEMPERATURE = 0x40,
  EXHAUST_TEMPERATURE = 0x41,
  WATER_CHLORINE_LEVEL = 0x42,
  WATER_ACIDITY = 0x43,
  WATER_OXIDATION_REDUCTION_POTENTIAL = 0x44,
  HEART_RATE_LF_HF_RATIO = 0x45,
  MOTION_DIRECTION = 0x46,
  APPLIED_FORCE_ON_THE_SENSOR = 0x47,
  RETURN_AIR_TEMPERATURE = 0x48,
  SUPPLY_AIR_TEMPERATURE = 0x49,
  CONDENSER_COIL_TEMPERATURE = 0x4A,
  EVAPORATOR_COIL_TEMPERATURE = 0x4B,
  LIQUID_LINE_TEMPERATURE = 0x4C,
  DISCHARGE_LINE_TEMPERATURE = 0x4D,
  SUCTION_PRESSURE = 0x4E,
  DISCHARGE_PRESSURE = 0x4F,
  DEFROST_TEMPERATURE = 0x50,
  OZONE_O3 = 0x51,
  SULFUR_DIOXIDE_SO2 = 0x52,
  NITROGEN_DIOXIDE_NO2 = 0x53,
  AMMONIA_NH3 = 0x54,
  LEAD_PB = 0x55,
  PARTICULATE_MATTER_1 = 0x56
}
SensorMultilevel.sensor_type = sensor_type
SensorMultilevel._reflect_sensor_type = zw._reflection_builder(SensorMultilevel.sensor_type)

--- @class st.zwave.CommandClass.SensorMultilevel.scale_acceleration_x_axis
--- @alias scale_acceleration_x_axis st.zwave.CommandClass.SensorMultilevel.scale_acceleration_x_axis
--- @field public METERS_PER_SQUARE_SECOND number 0x00
local scale_acceleration_x_axis = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_acceleration_y_axis
--- @alias scale_acceleration_y_axis st.zwave.CommandClass.SensorMultilevel.scale_acceleration_y_axis
--- @field public METERS_PER_SQUARE_SECOND number 0x00
local scale_acceleration_y_axis = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_acceleration_z_axis
--- @alias scale_acceleration_z_axis st.zwave.CommandClass.SensorMultilevel.scale_acceleration_z_axis
--- @field public METERS_PER_SQUARE_SECOND number 0x00
local scale_acceleration_z_axis = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_air_flow
--- @alias scale_air_flow st.zwave.CommandClass.SensorMultilevel.scale_air_flow
--- @field public CUBIC_METERS_PER_HOUR number 0x00
--- @field public CUBIC_FEET_PER_MINUTE number 0x01
local scale_air_flow = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_ammonia_nh3
--- @alias scale_ammonia_nh3 st.zwave.CommandClass.SensorMultilevel.scale_ammonia_nh3
--- @field public MICROGRAMS_PER_CUBIC_METER number 0x00
local scale_ammonia_nh3 = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_angle_position
--- @alias scale_angle_position st.zwave.CommandClass.SensorMultilevel.scale_angle_position
--- @field public PERCENTAGE number 0x00
--- @field public DEGREES_RELATIVE_TO_NORTH_POLE_OF_STANDING_EYE_VIEW number 0x02
local scale_angle_position = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_applied_force_on_the_sensor
--- @alias scale_applied_force_on_the_sensor st.zwave.CommandClass.SensorMultilevel.scale_applied_force_on_the_sensor
--- @field public NEWTONS number 0x00
local scale_applied_force_on_the_sensor = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_atmospheric_pressure
--- @alias scale_atmospheric_pressure st.zwave.CommandClass.SensorMultilevel.scale_atmospheric_pressure
--- @field public KILOPASCALS number 0x00
--- @field public INCHES_OF_MERCURY number 0x01
local scale_atmospheric_pressure = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_barometric_pressure
--- @alias scale_barometric_pressure st.zwave.CommandClass.SensorMultilevel.scale_barometric_pressure
--- @field public KILOPASCALS number 0x00
--- @field public INCHES_OF_MERCURY number 0x01
local scale_barometric_pressure = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_basic_metabolic_rate_bmr
--- @alias scale_basic_metabolic_rate_bmr st.zwave.CommandClass.SensorMultilevel.scale_basic_metabolic_rate_bmr
--- @field public JOULES number 0x00
local scale_basic_metabolic_rate_bmr = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_blood_pressure
--- @alias scale_blood_pressure st.zwave.CommandClass.SensorMultilevel.scale_blood_pressure
--- @field public SYSTOLIC_MM_HG number 0x00
--- @field public DIASTOLIC_MM_HG number 0x01
local scale_blood_pressure = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_body_mass_index_bmi
--- @alias scale_body_mass_index_bmi st.zwave.CommandClass.SensorMultilevel.scale_body_mass_index_bmi
--- @field public BMI_INDEX number 0x00
local scale_body_mass_index_bmi = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_boiler_water_temperature
--- @alias scale_boiler_water_temperature st.zwave.CommandClass.SensorMultilevel.scale_boiler_water_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_boiler_water_temperature = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_bone_mass
--- @alias scale_bone_mass st.zwave.CommandClass.SensorMultilevel.scale_bone_mass
--- @field public KILOGRAMS number 0x00
local scale_bone_mass = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_carbon_monoxide_co_level
--- @alias scale_carbon_monoxide_co_level st.zwave.CommandClass.SensorMultilevel.scale_carbon_monoxide_co_level
--- @field public MOLES_PER_CUBIC_METER number 0x00
--- @field public PARTS_PER_MILLION number 0x01
local scale_carbon_monoxide_co_level = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_co2_level
--- @alias scale_co2_level st.zwave.CommandClass.SensorMultilevel.scale_co2_level
--- @field public PARTS_PER_MILLION number 0x00
local scale_co2_level = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_condenser_coil_temperature
--- @alias scale_condenser_coil_temperature st.zwave.CommandClass.SensorMultilevel.scale_condenser_coil_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_condenser_coil_temperature = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_current
--- @alias scale_current st.zwave.CommandClass.SensorMultilevel.scale_current
--- @field public AMPERES number 0x00
--- @field public MILLIAMPERES number 0x01
local scale_current = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_defrost_temperature
--- @alias scale_defrost_temperature st.zwave.CommandClass.SensorMultilevel.scale_defrost_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_defrost_temperature = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_dew_point
--- @alias scale_dew_point st.zwave.CommandClass.SensorMultilevel.scale_dew_point
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_dew_point = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_direction
--- @alias scale_direction st.zwave.CommandClass.SensorMultilevel.scale_direction
--- @field public DEGREES number 0x00
local scale_direction = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_discharge_line_temperature
--- @alias scale_discharge_line_temperature st.zwave.CommandClass.SensorMultilevel.scale_discharge_line_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_discharge_line_temperature = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_discharge_pressure
--- @alias scale_discharge_pressure st.zwave.CommandClass.SensorMultilevel.scale_discharge_pressure
--- @field public KILOPASCALS number 0x00
--- @field public POUNDS_PER_SQUARE_INCH number 0x01
local scale_discharge_pressure = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_distance
--- @alias scale_distance st.zwave.CommandClass.SensorMultilevel.scale_distance
--- @field public METERS number 0x00
--- @field public CENTIMETERS number 0x01
--- @field public FEET number 0x02
local scale_distance = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_domestic_hot_water_temperature
--- @alias scale_domestic_hot_water_temperature st.zwave.CommandClass.SensorMultilevel.scale_domestic_hot_water_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_domestic_hot_water_temperature = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_electrical_conductivity
--- @alias scale_electrical_conductivity st.zwave.CommandClass.SensorMultilevel.scale_electrical_conductivity
--- @field public SIEMENS_PER_METER number 0x00
local scale_electrical_conductivity = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_electrical_resistivity
--- @alias scale_electrical_resistivity st.zwave.CommandClass.SensorMultilevel.scale_electrical_resistivity
--- @field public OHM_METERS number 0x00
local scale_electrical_resistivity = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_evaporator_coil_temperature
--- @alias scale_evaporator_coil_temperature st.zwave.CommandClass.SensorMultilevel.scale_evaporator_coil_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_evaporator_coil_temperature = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_exhaust_temperature
--- @alias scale_exhaust_temperature st.zwave.CommandClass.SensorMultilevel.scale_exhaust_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_exhaust_temperature = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_fat_mass
--- @alias scale_fat_mass st.zwave.CommandClass.SensorMultilevel.scale_fat_mass
--- @field public KILOGRAMS number 0x00
local scale_fat_mass = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_formaldehyde_ch2_o_level
--- @alias scale_formaldehyde_ch2_o_level st.zwave.CommandClass.SensorMultilevel.scale_formaldehyde_ch2_o_level
--- @field public MOLES_PER_CUBIC_METER number 0x00
local scale_formaldehyde_ch2_o_level = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_frequency
--- @alias scale_frequency st.zwave.CommandClass.SensorMultilevel.scale_frequency
--- @field public HERTZ number 0x00
--- @field public KILOHERTZ number 0x01
local scale_frequency = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_general_purpose_value
--- @alias scale_general_purpose_value st.zwave.CommandClass.SensorMultilevel.scale_general_purpose_value
--- @field public PERCENTAGE number 0x00
--- @field public DIMENSIONLESS number 0x01
local scale_general_purpose_value = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_heart_rate
--- @alias scale_heart_rate st.zwave.CommandClass.SensorMultilevel.scale_heart_rate
--- @field public BEATS_PER_MINUTE number 0x00
local scale_heart_rate = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_heart_rate_lf_hf_ratio
--- @alias scale_heart_rate_lf_hf_ratio st.zwave.CommandClass.SensorMultilevel.scale_heart_rate_lf_hf_ratio
--- @field public DIMENSIONLESS number 0x00
local scale_heart_rate_lf_hf_ratio = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_lead_pb
--- @alias scale_lead_pb st.zwave.CommandClass.SensorMultilevel.scale_lead_pb
--- @field public MICROGRAMS_PER_CUBIC_METER number 0x00
local scale_lead_pb = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_liquid_line_temperature
--- @alias scale_liquid_line_temperature st.zwave.CommandClass.SensorMultilevel.scale_liquid_line_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_liquid_line_temperature = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_loudness
--- @alias scale_loudness st.zwave.CommandClass.SensorMultilevel.scale_loudness
--- @field public DECIBELS number 0x00
--- @field public A_WEIGHTED_DECIBELS number 0x01
local scale_loudness = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_luminance
--- @alias scale_luminance st.zwave.CommandClass.SensorMultilevel.scale_luminance
--- @field public PERCENTAGE number 0x00
--- @field public LUX number 0x01
local scale_luminance = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_methane_density_ch4
--- @alias scale_methane_density_ch4 st.zwave.CommandClass.SensorMultilevel.scale_methane_density_ch4
--- @field public MOLES_PER_CUBIC_METER number 0x00
local scale_methane_density_ch4 = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_moisture
--- @alias scale_moisture st.zwave.CommandClass.SensorMultilevel.scale_moisture
--- @field public PERCENTAGE number 0x00
--- @field public VOLUME_WATER_CONTENT number 0x01
--- @field public KILOOHM number 0x02
--- @field public WATER_ACTIVITY number 0x03
local scale_moisture = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_motion_direction
--- @alias scale_motion_direction st.zwave.CommandClass.SensorMultilevel.scale_motion_direction
--- @field public DEGREES number 0x00
local scale_motion_direction = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_muscle_mass
--- @alias scale_muscle_mass st.zwave.CommandClass.SensorMultilevel.scale_muscle_mass
--- @field public KILOGRAMS number 0x00
local scale_muscle_mass = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_nitrogen_dioxide_no2
--- @alias scale_nitrogen_dioxide_no2 st.zwave.CommandClass.SensorMultilevel.scale_nitrogen_dioxide_no2
--- @field public MICROGRAMS_PER_CUBIC_METER number 0x00
local scale_nitrogen_dioxide_no2 = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_outside_temperature
--- @alias scale_outside_temperature st.zwave.CommandClass.SensorMultilevel.scale_outside_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_outside_temperature = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_ozone_o3
--- @alias scale_ozone_o3 st.zwave.CommandClass.SensorMultilevel.scale_ozone_o3
--- @field public MICROGRAMS_PER_CUBIC_METER number 0x00
local scale_ozone_o3 = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_particulate_matter
--- @alias scale_particulate_matter st.zwave.CommandClass.SensorMultilevel.scale_particulate_matter
--- @field public MOLES_PER_CUBIC_METER number 0x00
--- @field public MICROGRAMS_PER_CUBIC_METER number 0x01
local scale_particulate_matter = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_particulate_matter_1
--- @alias scale_particulate_matter_1 st.zwave.CommandClass.SensorMultilevel.scale_particulate_matter_1
--- @field public MICROGRAMS_PER_CUBIC_METER number 0x00
local scale_particulate_matter_1 = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_particulate_matter_2_5
--- @alias scale_particulate_matter_2_5 st.zwave.CommandClass.SensorMultilevel.scale_particulate_matter_2_5
--- @field public MOLES_PER_CUBIC_METER number 0x00
--- @field public MICROGRAMS_PER_CUBIC_METER number 0x01
local scale_particulate_matter_2_5 = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_power
--- @alias scale_power st.zwave.CommandClass.SensorMultilevel.scale_power
--- @field public WATTS number 0x00
--- @field public BTU_PER_HOUR number 0x01
local scale_power = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_radon_concentration
--- @alias scale_radon_concentration st.zwave.CommandClass.SensorMultilevel.scale_radon_concentration
--- @field public BECQUERELS_PER_CUBIC_METER number 0x00
--- @field public PICOCURIES_PER_LITER number 0x01
local scale_radon_concentration = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_rain_rate
--- @alias scale_rain_rate st.zwave.CommandClass.SensorMultilevel.scale_rain_rate
--- @field public MILLIMETERS_PER_HOUR number 0x00
--- @field public INCHES_PER_HOUR number 0x01
local scale_rain_rate = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_relative_humidity
--- @alias scale_relative_humidity st.zwave.CommandClass.SensorMultilevel.scale_relative_humidity
--- @field public PERCENTAGE number 0x00
--- @field public ABSOLUTE_HUMIDITY number 0x01
local scale_relative_humidity = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_relative_modulation_level
--- @alias scale_relative_modulation_level st.zwave.CommandClass.SensorMultilevel.scale_relative_modulation_level
--- @field public PERCENTAGE number 0x00
local scale_relative_modulation_level = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_respiratory_rate
--- @alias scale_respiratory_rate st.zwave.CommandClass.SensorMultilevel.scale_respiratory_rate
--- @field public BREATHS_PER_MINUTE number 0x00
local scale_respiratory_rate = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_return_air_temperature
--- @alias scale_return_air_temperature st.zwave.CommandClass.SensorMultilevel.scale_return_air_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_return_air_temperature = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_rf_signal_strength
--- @alias scale_rf_signal_strength st.zwave.CommandClass.SensorMultilevel.scale_rf_signal_strength
--- @field public RSSI number 0x00
--- @field public DBM number 0x01
local scale_rf_signal_strength = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_rotation
--- @alias scale_rotation st.zwave.CommandClass.SensorMultilevel.scale_rotation
--- @field public REVOLUTIONS_PER_MINUTE number 0x00
--- @field public HERTZ number 0x01
local scale_rotation = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_seismic_intensity
--- @alias scale_seismic_intensity st.zwave.CommandClass.SensorMultilevel.scale_seismic_intensity
--- @field public MERCALLI number 0x00
--- @field public EUROPEAN_MACROSEISMIC number 0x01
--- @field public LIEDU number 0x02
--- @field public SHINDO number 0x03
local scale_seismic_intensity = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_seismic_magnitude
--- @alias scale_seismic_magnitude st.zwave.CommandClass.SensorMultilevel.scale_seismic_magnitude
--- @field public LOCAL number 0x00
--- @field public MOMENT number 0x01
--- @field public SURFACE_WAVE number 0x02
--- @field public BODY_WAVE number 0x03
local scale_seismic_magnitude = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_smoke_density
--- @alias scale_smoke_density st.zwave.CommandClass.SensorMultilevel.scale_smoke_density
--- @field public PERCENTAGE number 0x00
local scale_smoke_density = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_soil_humidity
--- @alias scale_soil_humidity st.zwave.CommandClass.SensorMultilevel.scale_soil_humidity
--- @field public PERCENTAGE number 0x00
local scale_soil_humidity = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_soil_reactivity
--- @alias scale_soil_reactivity st.zwave.CommandClass.SensorMultilevel.scale_soil_reactivity
--- @field public PH number 0x00
local scale_soil_reactivity = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_soil_salinity
--- @alias scale_soil_salinity st.zwave.CommandClass.SensorMultilevel.scale_soil_salinity
--- @field public MOLES_PER_CUBIC_METER number 0x00
local scale_soil_salinity = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_soil_temperature
--- @alias scale_soil_temperature st.zwave.CommandClass.SensorMultilevel.scale_soil_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_soil_temperature = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_solar_radiation
--- @alias scale_solar_radiation st.zwave.CommandClass.SensorMultilevel.scale_solar_radiation
--- @field public WATTS_PER_SQUARE_METER number 0x00
local scale_solar_radiation = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_suction_pressure
--- @alias scale_suction_pressure st.zwave.CommandClass.SensorMultilevel.scale_suction_pressure
--- @field public KILOPASCALS number 0x00
--- @field public POUNDS_PER_SQUARE_INCH number 0x01
local scale_suction_pressure = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_sulfur_dioxide_so2
--- @alias scale_sulfur_dioxide_so2 st.zwave.CommandClass.SensorMultilevel.scale_sulfur_dioxide_so2
--- @field public MICROGRAMS_PER_CUBIC_METER number 0x00
local scale_sulfur_dioxide_so2 = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_supply_air_temperature
--- @alias scale_supply_air_temperature st.zwave.CommandClass.SensorMultilevel.scale_supply_air_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_supply_air_temperature = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_tank_capacity
--- @alias scale_tank_capacity st.zwave.CommandClass.SensorMultilevel.scale_tank_capacity
--- @field public LITERS number 0x00
--- @field public CUBIC_METERS number 0x01
--- @field public GALLONS number 0x02
local scale_tank_capacity = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_target_temperature
--- @alias scale_target_temperature st.zwave.CommandClass.SensorMultilevel.scale_target_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_target_temperature = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_temperature
--- @alias scale_temperature st.zwave.CommandClass.SensorMultilevel.scale_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_temperature = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_tide_level
--- @alias scale_tide_level st.zwave.CommandClass.SensorMultilevel.scale_tide_level
--- @field public METERS number 0x00
--- @field public FEET number 0x01
local scale_tide_level = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_time
--- @alias scale_time st.zwave.CommandClass.SensorMultilevel.scale_time
--- @field public SECONDS number 0x00
local scale_time = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_total_body_water_tbw
--- @alias scale_total_body_water_tbw st.zwave.CommandClass.SensorMultilevel.scale_total_body_water_tbw
--- @field public KILOGRAMS number 0x00
local scale_total_body_water_tbw = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_ultraviolet
--- @alias scale_ultraviolet st.zwave.CommandClass.SensorMultilevel.scale_ultraviolet
--- @field public UV_INDEX number 0x00
local scale_ultraviolet = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_velocity
--- @alias scale_velocity st.zwave.CommandClass.SensorMultilevel.scale_velocity
--- @field public METERS_PER_SECOND number 0x00
--- @field public MILES_PER_HOUR number 0x01
local scale_velocity = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_volatile_organic_compound
--- @alias scale_volatile_organic_compound st.zwave.CommandClass.SensorMultilevel.scale_volatile_organic_compound
--- @field public MOLES_PER_CUBIC_METER number 0x00
--- @field public PARTS_PER_MILLION number 0x01
local scale_volatile_organic_compound = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_voltage
--- @alias scale_voltage st.zwave.CommandClass.SensorMultilevel.scale_voltage
--- @field public VOLTS number 0x00
--- @field public MILLIVOLTS number 0x01
local scale_voltage = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_water_acidity
--- @alias scale_water_acidity st.zwave.CommandClass.SensorMultilevel.scale_water_acidity
--- @field public PH number 0x00
local scale_water_acidity = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_water_chlorine_level
--- @alias scale_water_chlorine_level st.zwave.CommandClass.SensorMultilevel.scale_water_chlorine_level
--- @field public MILLIGRAMS_PER_LITER number 0x00
local scale_water_chlorine_level = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_water_flow
--- @alias scale_water_flow st.zwave.CommandClass.SensorMultilevel.scale_water_flow
--- @field public LITERS_PER_HOUR number 0x00
local scale_water_flow = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_water_oxidation_reduction_potential
--- @alias scale_water_oxidation_reduction_potential st.zwave.CommandClass.SensorMultilevel.scale_water_oxidation_reduction_potential
--- @field public MILLIVOLTS number 0x00
local scale_water_oxidation_reduction_potential = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_water_pressure
--- @alias scale_water_pressure st.zwave.CommandClass.SensorMultilevel.scale_water_pressure
--- @field public KILOPASCALS number 0x00
local scale_water_pressure = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_water_temperature
--- @alias scale_water_temperature st.zwave.CommandClass.SensorMultilevel.scale_water_temperature
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale_water_temperature = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale_weight
--- @alias scale_weight st.zwave.CommandClass.SensorMultilevel.scale_weight
--- @field public KILOGRAMS number 0x00
--- @field public POUNDS number 0x01
local scale_weight = {}

--- @class st.zwave.CommandClass.SensorMultilevel.scale
--- @alias scale st.zwave.CommandClass.SensorMultilevel.scale
--- @field public acceleration_x_axis st.zwave.CommandClass.scale_acceleration_x_axis
--- @field public acceleration_y_axis st.zwave.CommandClass.scale_acceleration_y_axis
--- @field public acceleration_z_axis st.zwave.CommandClass.scale_acceleration_z_axis
--- @field public air_flow st.zwave.CommandClass.scale_air_flow
--- @field public ammonia_nh3 st.zwave.CommandClass.scale_ammonia_nh3
--- @field public angle_position st.zwave.CommandClass.scale_angle_position
--- @field public applied_force_on_the_sensor st.zwave.CommandClass.scale_applied_force_on_the_sensor
--- @field public atmospheric_pressure st.zwave.CommandClass.scale_atmospheric_pressure
--- @field public barometric_pressure st.zwave.CommandClass.scale_barometric_pressure
--- @field public basic_metabolic_rate_bmr st.zwave.CommandClass.scale_basic_metabolic_rate_bmr
--- @field public blood_pressure st.zwave.CommandClass.scale_blood_pressure
--- @field public body_mass_index_bmi st.zwave.CommandClass.scale_body_mass_index_bmi
--- @field public boiler_water_temperature st.zwave.CommandClass.scale_boiler_water_temperature
--- @field public bone_mass st.zwave.CommandClass.scale_bone_mass
--- @field public carbon_monoxide_co_level st.zwave.CommandClass.scale_carbon_monoxide_co_level
--- @field public co2_level st.zwave.CommandClass.scale_co2_level
--- @field public condenser_coil_temperature st.zwave.CommandClass.scale_condenser_coil_temperature
--- @field public current st.zwave.CommandClass.scale_current
--- @field public defrost_temperature st.zwave.CommandClass.scale_defrost_temperature
--- @field public dew_point st.zwave.CommandClass.scale_dew_point
--- @field public direction st.zwave.CommandClass.scale_direction
--- @field public discharge_line_temperature st.zwave.CommandClass.scale_discharge_line_temperature
--- @field public discharge_pressure st.zwave.CommandClass.scale_discharge_pressure
--- @field public distance st.zwave.CommandClass.scale_distance
--- @field public domestic_hot_water_temperature st.zwave.CommandClass.scale_domestic_hot_water_temperature
--- @field public electrical_conductivity st.zwave.CommandClass.scale_electrical_conductivity
--- @field public electrical_resistivity st.zwave.CommandClass.scale_electrical_resistivity
--- @field public evaporator_coil_temperature st.zwave.CommandClass.scale_evaporator_coil_temperature
--- @field public exhaust_temperature st.zwave.CommandClass.scale_exhaust_temperature
--- @field public fat_mass st.zwave.CommandClass.scale_fat_mass
--- @field public formaldehyde_ch2_o_level st.zwave.CommandClass.scale_formaldehyde_ch2_o_level
--- @field public frequency st.zwave.CommandClass.scale_frequency
--- @field public general_purpose_value st.zwave.CommandClass.scale_general_purpose_value
--- @field public heart_rate st.zwave.CommandClass.scale_heart_rate
--- @field public heart_rate_lf_hf_ratio st.zwave.CommandClass.scale_heart_rate_lf_hf_ratio
--- @field public lead_pb st.zwave.CommandClass.scale_lead_pb
--- @field public liquid_line_temperature st.zwave.CommandClass.scale_liquid_line_temperature
--- @field public loudness st.zwave.CommandClass.scale_loudness
--- @field public luminance st.zwave.CommandClass.scale_luminance
--- @field public methane_density_ch4 st.zwave.CommandClass.scale_methane_density_ch4
--- @field public moisture st.zwave.CommandClass.scale_moisture
--- @field public motion_direction st.zwave.CommandClass.scale_motion_direction
--- @field public muscle_mass st.zwave.CommandClass.scale_muscle_mass
--- @field public nitrogen_dioxide_no2 st.zwave.CommandClass.scale_nitrogen_dioxide_no2
--- @field public outside_temperature st.zwave.CommandClass.scale_outside_temperature
--- @field public ozone_o3 st.zwave.CommandClass.scale_ozone_o3
--- @field public particulate_matter st.zwave.CommandClass.scale_particulate_matter
--- @field public particulate_matter_1 st.zwave.CommandClass.scale_particulate_matter_1
--- @field public particulate_matter_2_5 st.zwave.CommandClass.scale_particulate_matter_2_5
--- @field public power st.zwave.CommandClass.scale_power
--- @field public radon_concentration st.zwave.CommandClass.scale_radon_concentration
--- @field public rain_rate st.zwave.CommandClass.scale_rain_rate
--- @field public relative_humidity st.zwave.CommandClass.scale_relative_humidity
--- @field public relative_modulation_level st.zwave.CommandClass.scale_relative_modulation_level
--- @field public respiratory_rate st.zwave.CommandClass.scale_respiratory_rate
--- @field public return_air_temperature st.zwave.CommandClass.scale_return_air_temperature
--- @field public rf_signal_strength st.zwave.CommandClass.scale_rf_signal_strength
--- @field public rotation st.zwave.CommandClass.scale_rotation
--- @field public seismic_intensity st.zwave.CommandClass.scale_seismic_intensity
--- @field public seismic_magnitude st.zwave.CommandClass.scale_seismic_magnitude
--- @field public smoke_density st.zwave.CommandClass.scale_smoke_density
--- @field public soil_humidity st.zwave.CommandClass.scale_soil_humidity
--- @field public soil_reactivity st.zwave.CommandClass.scale_soil_reactivity
--- @field public soil_salinity st.zwave.CommandClass.scale_soil_salinity
--- @field public soil_temperature st.zwave.CommandClass.scale_soil_temperature
--- @field public solar_radiation st.zwave.CommandClass.scale_solar_radiation
--- @field public suction_pressure st.zwave.CommandClass.scale_suction_pressure
--- @field public sulfur_dioxide_so2 st.zwave.CommandClass.scale_sulfur_dioxide_so2
--- @field public supply_air_temperature st.zwave.CommandClass.scale_supply_air_temperature
--- @field public tank_capacity st.zwave.CommandClass.scale_tank_capacity
--- @field public target_temperature st.zwave.CommandClass.scale_target_temperature
--- @field public temperature st.zwave.CommandClass.scale_temperature
--- @field public tide_level st.zwave.CommandClass.scale_tide_level
--- @field public time st.zwave.CommandClass.scale_time
--- @field public total_body_water_tbw st.zwave.CommandClass.scale_total_body_water_tbw
--- @field public ultraviolet st.zwave.CommandClass.scale_ultraviolet
--- @field public velocity st.zwave.CommandClass.scale_velocity
--- @field public volatile_organic_compound st.zwave.CommandClass.scale_volatile_organic_compound
--- @field public voltage st.zwave.CommandClass.scale_voltage
--- @field public water_acidity st.zwave.CommandClass.scale_water_acidity
--- @field public water_chlorine_level st.zwave.CommandClass.scale_water_chlorine_level
--- @field public water_flow st.zwave.CommandClass.scale_water_flow
--- @field public water_oxidation_reduction_potential st.zwave.CommandClass.scale_water_oxidation_reduction_potential
--- @field public water_pressure st.zwave.CommandClass.scale_water_pressure
--- @field public water_temperature st.zwave.CommandClass.scale_water_temperature
--- @field public weight st.zwave.CommandClass.scale_weight
local scale = {
  acceleration_x_axis = {
    METERS_PER_SQUARE_SECOND = 0x00
  },
  acceleration_y_axis = {
    METERS_PER_SQUARE_SECOND = 0x00
  },
  acceleration_z_axis = {
    METERS_PER_SQUARE_SECOND = 0x00
  },
  air_flow = {
    CUBIC_METERS_PER_HOUR = 0x00,
    CUBIC_FEET_PER_MINUTE = 0x01
  },
  ammonia_nh3 = {
    MICROGRAMS_PER_CUBIC_METER = 0x00
  },
  angle_position = {
    PERCENTAGE = 0x00,
    DEGREES_RELATIVE_TO_NORTH_POLE_OF_STANDING_EYE_VIEW = 0x02
  },
  applied_force_on_the_sensor = {
    NEWTONS = 0x00
  },
  atmospheric_pressure = {
    KILOPASCALS = 0x00,
    INCHES_OF_MERCURY = 0x01
  },
  barometric_pressure = {
    KILOPASCALS = 0x00,
    INCHES_OF_MERCURY = 0x01
  },
  basic_metabolic_rate_bmr = {
    JOULES = 0x00
  },
  blood_pressure = {
    SYSTOLIC_MM_HG = 0x00,
    DIASTOLIC_MM_HG = 0x01
  },
  body_mass_index_bmi = {
    BMI_INDEX = 0x00
  },
  boiler_water_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  bone_mass = {
    KILOGRAMS = 0x00
  },
  carbon_monoxide_co_level = {
    MOLES_PER_CUBIC_METER = 0x00,
    PARTS_PER_MILLION = 0x01
  },
  co2_level = {
    PARTS_PER_MILLION = 0x00
  },
  condenser_coil_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  current = {
    AMPERES = 0x00,
    MILLIAMPERES = 0x01
  },
  defrost_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  dew_point = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  direction = {
    DEGREES = 0x00
  },
  discharge_line_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  discharge_pressure = {
    KILOPASCALS = 0x00,
    POUNDS_PER_SQUARE_INCH = 0x01
  },
  distance = {
    METERS = 0x00,
    CENTIMETERS = 0x01,
    FEET = 0x02
  },
  domestic_hot_water_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  electrical_conductivity = {
    SIEMENS_PER_METER = 0x00
  },
  electrical_resistivity = {
    OHM_METERS = 0x00
  },
  evaporator_coil_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  exhaust_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  fat_mass = {
    KILOGRAMS = 0x00
  },
  formaldehyde_ch2_o_level = {
    MOLES_PER_CUBIC_METER = 0x00
  },
  frequency = {
    HERTZ = 0x00,
    KILOHERTZ = 0x01
  },
  general_purpose_value = {
    PERCENTAGE = 0x00,
    DIMENSIONLESS = 0x01
  },
  heart_rate = {
    BEATS_PER_MINUTE = 0x00
  },
  heart_rate_lf_hf_ratio = {
    DIMENSIONLESS = 0x00
  },
  lead_pb = {
    MICROGRAMS_PER_CUBIC_METER = 0x00
  },
  liquid_line_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  loudness = {
    DECIBELS = 0x00,
    A_WEIGHTED_DECIBELS = 0x01
  },
  luminance = {
    PERCENTAGE = 0x00,
    LUX = 0x01
  },
  methane_density_ch4 = {
    MOLES_PER_CUBIC_METER = 0x00
  },
  moisture = {
    PERCENTAGE = 0x00,
    VOLUME_WATER_CONTENT = 0x01,
    KILOOHM = 0x02,
    WATER_ACTIVITY = 0x03
  },
  motion_direction = {
    DEGREES = 0x00
  },
  muscle_mass = {
    KILOGRAMS = 0x00
  },
  nitrogen_dioxide_no2 = {
    MICROGRAMS_PER_CUBIC_METER = 0x00
  },
  outside_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  ozone_o3 = {
    MICROGRAMS_PER_CUBIC_METER = 0x00
  },
  particulate_matter = {
    MOLES_PER_CUBIC_METER = 0x00,
    MICROGRAMS_PER_CUBIC_METER = 0x01
  },
  particulate_matter_1 = {
    MICROGRAMS_PER_CUBIC_METER = 0x00
  },
  particulate_matter_2_5 = {
    MOLES_PER_CUBIC_METER = 0x00,
    MICROGRAMS_PER_CUBIC_METER = 0x01
  },
  power = {
    WATTS = 0x00,
    BTU_PER_HOUR = 0x01
  },
  radon_concentration = {
    BECQUERELS_PER_CUBIC_METER = 0x00,
    PICOCURIES_PER_LITER = 0x01
  },
  rain_rate = {
    MILLIMETERS_PER_HOUR = 0x00,
    INCHES_PER_HOUR = 0x01
  },
  relative_humidity = {
    PERCENTAGE = 0x00,
    ABSOLUTE_HUMIDITY = 0x01
  },
  relative_modulation_level = {
    PERCENTAGE = 0x00
  },
  respiratory_rate = {
    BREATHS_PER_MINUTE = 0x00
  },
  return_air_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  rf_signal_strength = {
    RSSI = 0x00,
    DBM = 0x01
  },
  rotation = {
    REVOLUTIONS_PER_MINUTE = 0x00,
    HERTZ = 0x01
  },
  seismic_intensity = {
    MERCALLI = 0x00,
    EUROPEAN_MACROSEISMIC = 0x01,
    LIEDU = 0x02,
    SHINDO = 0x03
  },
  seismic_magnitude = {
    LOCAL = 0x00,
    MOMENT = 0x01,
    SURFACE_WAVE = 0x02,
    BODY_WAVE = 0x03
  },
  smoke_density = {
    PERCENTAGE = 0x00
  },
  soil_humidity = {
    PERCENTAGE = 0x00
  },
  soil_reactivity = {
    PH = 0x00
  },
  soil_salinity = {
    MOLES_PER_CUBIC_METER = 0x00
  },
  soil_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  solar_radiation = {
    WATTS_PER_SQUARE_METER = 0x00
  },
  suction_pressure = {
    KILOPASCALS = 0x00,
    POUNDS_PER_SQUARE_INCH = 0x01
  },
  sulfur_dioxide_so2 = {
    MICROGRAMS_PER_CUBIC_METER = 0x00
  },
  supply_air_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  tank_capacity = {
    LITERS = 0x00,
    CUBIC_METERS = 0x01,
    GALLONS = 0x02
  },
  target_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  tide_level = {
    METERS = 0x00,
    FEET = 0x01
  },
  time = {
    SECONDS = 0x00
  },
  total_body_water_tbw = {
    KILOGRAMS = 0x00
  },
  ultraviolet = {
    UV_INDEX = 0x00
  },
  velocity = {
    METERS_PER_SECOND = 0x00,
    MILES_PER_HOUR = 0x01
  },
  volatile_organic_compound = {
    MOLES_PER_CUBIC_METER = 0x00,
    PARTS_PER_MILLION = 0x01
  },
  voltage = {
    VOLTS = 0x00,
    MILLIVOLTS = 0x01
  },
  water_acidity = {
    PH = 0x00
  },
  water_chlorine_level = {
    MILLIGRAMS_PER_LITER = 0x00
  },
  water_flow = {
    LITERS_PER_HOUR = 0x00
  },
  water_oxidation_reduction_potential = {
    MILLIVOLTS = 0x00
  },
  water_pressure = {
    KILOPASCALS = 0x00
  },
  water_temperature = {
    CELSIUS = 0x00,
    FAHRENHEIT = 0x01
  },
  weight = {
    KILOGRAMS = 0x00,
    POUNDS = 0x01
  }
}
SensorMultilevel.scale = scale
SensorMultilevel._reflect_scale = zw._reflection_builder(SensorMultilevel.scale, SensorMultilevel.sensor_type)


return SensorMultilevel
