-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.SoundSwitch
--- @alias SoundSwitch st.zwave.CommandClass.SoundSwitch
---
--- Supported versions: 1,2
---
--- @field public TONES_NUMBER_GET number 0x01 - SOUND_SWITCH_TONES_NUMBER_GET command id
--- @field public TONES_NUMBER_REPORT number 0x02 - SOUND_SWITCH_TONES_NUMBER_REPORT command id
--- @field public TONE_INFO_GET number 0x03 - SOUND_SWITCH_TONE_INFO_GET command id
--- @field public TONE_INFO_REPORT number 0x04 - SOUND_SWITCH_TONE_INFO_REPORT command id
--- @field public CONFIGURATION_SET number 0x05 - SOUND_SWITCH_CONFIGURATION_SET command id
--- @field public CONFIGURATION_GET number 0x06 - SOUND_SWITCH_CONFIGURATION_GET command id
--- @field public CONFIGURATION_REPORT number 0x07 - SOUND_SWITCH_CONFIGURATION_REPORT command id
--- @field public TONE_PLAY_SET number 0x08 - SOUND_SWITCH_TONE_PLAY_SET command id
--- @field public TONE_PLAY_GET number 0x09 - SOUND_SWITCH_TONE_PLAY_GET command id
--- @field public TONE_PLAY_REPORT number 0x0A - SOUND_SWITCH_TONE_PLAY_REPORT command id
local SoundSwitch = {}
SoundSwitch.TONES_NUMBER_GET = 0x01
SoundSwitch.TONES_NUMBER_REPORT = 0x02
SoundSwitch.TONE_INFO_GET = 0x03
SoundSwitch.TONE_INFO_REPORT = 0x04
SoundSwitch.CONFIGURATION_SET = 0x05
SoundSwitch.CONFIGURATION_GET = 0x06
SoundSwitch.CONFIGURATION_REPORT = 0x07
SoundSwitch.TONE_PLAY_SET = 0x08
SoundSwitch.TONE_PLAY_GET = 0x09
SoundSwitch.TONE_PLAY_REPORT = 0x0A

SoundSwitch._commands = {
  [SoundSwitch.TONES_NUMBER_GET] = "TONES_NUMBER_GET",
  [SoundSwitch.TONES_NUMBER_REPORT] = "TONES_NUMBER_REPORT",
  [SoundSwitch.TONE_INFO_GET] = "TONE_INFO_GET",
  [SoundSwitch.TONE_INFO_REPORT] = "TONE_INFO_REPORT",
  [SoundSwitch.CONFIGURATION_SET] = "CONFIGURATION_SET",
  [SoundSwitch.CONFIGURATION_GET] = "CONFIGURATION_GET",
  [SoundSwitch.CONFIGURATION_REPORT] = "CONFIGURATION_REPORT",
  [SoundSwitch.TONE_PLAY_SET] = "TONE_PLAY_SET",
  [SoundSwitch.TONE_PLAY_GET] = "TONE_PLAY_GET",
  [SoundSwitch.TONE_PLAY_REPORT] = "TONE_PLAY_REPORT"
}

--- Instantiate a versioned instance of the SoundSwitch Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.SoundSwitch versioned command class instance
function SoundSwitch:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.SOUND_SWITCH][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(SoundSwitch, {
  __call = SoundSwitch.init
})

SoundSwitch._serialization_version = nil
SoundSwitch._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.SOUND_SWITCH] = {
  [1] = true,
  [2] = true
}

--- @class st.zwave.CommandClass.SoundSwitch.TonesNumberGetV1Args
--- @alias TonesNumberGetV1Args st.zwave.CommandClass.SoundSwitch.TonesNumberGetV1Args
local TonesNumberGetV1Args = {}

--- @class st.zwave.CommandClass.SoundSwitch.TonesNumberGetV1:st.zwave.Command
--- @alias TonesNumberGetV1 st.zwave.CommandClass.SoundSwitch.TonesNumberGetV1
---
--- v1 and forward-compatible v2 SOUND_SWITCH_TONES_NUMBER_GET
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.TonesNumberGetV1Args command-specific arguments
local TonesNumberGetV1 = {}
setmetatable(TonesNumberGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 SOUND_SWITCH_TONES_NUMBER_GET object.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.TonesNumberGetV1Args command-specific arguments
function TonesNumberGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SOUND_SWITCH, SoundSwitch.TONES_NUMBER_GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 SOUND_SWITCH_TONES_NUMBER_GET arguments.
---
--- @return string serialized payload
function TonesNumberGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 SOUND_SWITCH_TONES_NUMBER_GET payload.
---
--- @return st.zwave.CommandClass.SoundSwitch.TonesNumberGetV1Args deserialized arguments
function TonesNumberGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonesNumberGetV1
--- @return st.zwave.CommandClass.SoundSwitch.TonesNumberGetV1Args
function TonesNumberGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonesNumberGetV1
--- @return st.zwave.CommandClass.SoundSwitch.TonesNumberGetV1Args
function TonesNumberGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonesNumberGetV1
function TonesNumberGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonesNumberGetV1
function TonesNumberGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SoundSwitch.TonesNumberReportV1Args
--- @alias TonesNumberReportV1Args st.zwave.CommandClass.SoundSwitch.TonesNumberReportV1Args
--- @field public supported_tones integer [0,255]
local TonesNumberReportV1Args = {}

--- @class st.zwave.CommandClass.SoundSwitch.TonesNumberReportV1:st.zwave.Command
--- @alias TonesNumberReportV1 st.zwave.CommandClass.SoundSwitch.TonesNumberReportV1
---
--- v1 and forward-compatible v2 SOUND_SWITCH_TONES_NUMBER_REPORT
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.TonesNumberReportV1Args command-specific arguments
local TonesNumberReportV1 = {}
setmetatable(TonesNumberReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 SOUND_SWITCH_TONES_NUMBER_REPORT object.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.TonesNumberReportV1Args command-specific arguments
function TonesNumberReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SOUND_SWITCH, SoundSwitch.TONES_NUMBER_REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 SOUND_SWITCH_TONES_NUMBER_REPORT arguments.
---
--- @return string serialized payload
function TonesNumberReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.supported_tones)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 SOUND_SWITCH_TONES_NUMBER_REPORT payload.
---
--- @return st.zwave.CommandClass.SoundSwitch.TonesNumberReportV1Args deserialized arguments
function TonesNumberReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("supported_tones")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonesNumberReportV1
--- @return st.zwave.CommandClass.SoundSwitch.TonesNumberReportV1Args
function TonesNumberReportV1._defaults(self)
  local args = {}
  args.supported_tones = self.args.supported_tones or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonesNumberReportV1
--- @return st.zwave.CommandClass.SoundSwitch.TonesNumberReportV1Args
function TonesNumberReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonesNumberReportV1
function TonesNumberReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonesNumberReportV1
function TonesNumberReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SoundSwitch.ToneInfoGetV1Args
--- @alias ToneInfoGetV1Args st.zwave.CommandClass.SoundSwitch.ToneInfoGetV1Args
--- @field public tone_identifier integer [0,255]
local ToneInfoGetV1Args = {}

--- @class st.zwave.CommandClass.SoundSwitch.ToneInfoGetV1:st.zwave.Command
--- @alias ToneInfoGetV1 st.zwave.CommandClass.SoundSwitch.ToneInfoGetV1
---
--- v1 and forward-compatible v2 SOUND_SWITCH_TONE_INFO_GET
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.ToneInfoGetV1Args command-specific arguments
local ToneInfoGetV1 = {}
setmetatable(ToneInfoGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 SOUND_SWITCH_TONE_INFO_GET object.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.ToneInfoGetV1Args command-specific arguments
function ToneInfoGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SOUND_SWITCH, SoundSwitch.TONE_INFO_GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 SOUND_SWITCH_TONE_INFO_GET arguments.
---
--- @return string serialized payload
function ToneInfoGetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.tone_identifier)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 SOUND_SWITCH_TONE_INFO_GET payload.
---
--- @return st.zwave.CommandClass.SoundSwitch.ToneInfoGetV1Args deserialized arguments
function ToneInfoGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("tone_identifier")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ToneInfoGetV1
--- @return st.zwave.CommandClass.SoundSwitch.ToneInfoGetV1Args
function ToneInfoGetV1._defaults(self)
  local args = {}
  args.tone_identifier = self.args.tone_identifier or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ToneInfoGetV1
--- @return st.zwave.CommandClass.SoundSwitch.ToneInfoGetV1Args
function ToneInfoGetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ToneInfoGetV1
function ToneInfoGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ToneInfoGetV1
function ToneInfoGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SoundSwitch.ToneInfoReportV1Args
--- @alias ToneInfoReportV1Args st.zwave.CommandClass.SoundSwitch.ToneInfoReportV1Args
--- @field public tone_identifier integer [0,255]
--- @field public tone_duration integer [0,65535]
--- @field public name string
local ToneInfoReportV1Args = {}

--- @class st.zwave.CommandClass.SoundSwitch.ToneInfoReportV1:st.zwave.Command
--- @alias ToneInfoReportV1 st.zwave.CommandClass.SoundSwitch.ToneInfoReportV1
---
--- v1 and forward-compatible v2 SOUND_SWITCH_TONE_INFO_REPORT
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.ToneInfoReportV1Args command-specific arguments
local ToneInfoReportV1 = {}
setmetatable(ToneInfoReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 SOUND_SWITCH_TONE_INFO_REPORT object.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.ToneInfoReportV1Args command-specific arguments
function ToneInfoReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SOUND_SWITCH, SoundSwitch.TONE_INFO_REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 SOUND_SWITCH_TONE_INFO_REPORT arguments.
---
--- @return string serialized payload
function ToneInfoReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.tone_identifier)
  writer:write_be_u16(args.tone_duration)
  writer:write_u8(writer.length(args.name))
  writer:write_bytes(args.name)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 SOUND_SWITCH_TONE_INFO_REPORT payload.
---
--- @return st.zwave.CommandClass.SoundSwitch.ToneInfoReportV1Args deserialized arguments
function ToneInfoReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("tone_identifier")
  reader:read_be_u16("tone_duration")
  reader:read_u8("name_length")
  reader:read_bytes(reader.parsed.name_length, "name")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ToneInfoReportV1
--- @return st.zwave.CommandClass.SoundSwitch.ToneInfoReportV1Args
function ToneInfoReportV1._defaults(self)
  local args = {}
  args.tone_identifier = self.args.tone_identifier or 0
  args.tone_duration = self.args.tone_duration or 0
  args.name = self.args.name or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ToneInfoReportV1
--- @return st.zwave.CommandClass.SoundSwitch.ToneInfoReportV1Args
function ToneInfoReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ToneInfoReportV1
function ToneInfoReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ToneInfoReportV1
function ToneInfoReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SoundSwitch.ConfigurationSetV1Args
--- @alias ConfigurationSetV1Args st.zwave.CommandClass.SoundSwitch.ConfigurationSetV1Args
--- @field public volume integer [0,255]
--- @field public default_tone_identifier integer [0,255]
local ConfigurationSetV1Args = {}

--- @class st.zwave.CommandClass.SoundSwitch.ConfigurationSetV1:st.zwave.Command
--- @alias ConfigurationSetV1 st.zwave.CommandClass.SoundSwitch.ConfigurationSetV1
---
--- v1 and forward-compatible v2 SOUND_SWITCH_CONFIGURATION_SET
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.ConfigurationSetV1Args command-specific arguments
local ConfigurationSetV1 = {}
setmetatable(ConfigurationSetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 SOUND_SWITCH_CONFIGURATION_SET object.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.ConfigurationSetV1Args command-specific arguments
function ConfigurationSetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SOUND_SWITCH, SoundSwitch.CONFIGURATION_SET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 SOUND_SWITCH_CONFIGURATION_SET arguments.
---
--- @return string serialized payload
function ConfigurationSetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.volume)
  writer:write_u8(args.default_tone_identifier)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 SOUND_SWITCH_CONFIGURATION_SET payload.
---
--- @return st.zwave.CommandClass.SoundSwitch.ConfigurationSetV1Args deserialized arguments
function ConfigurationSetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("volume")
  reader:read_u8("default_tone_identifier")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ConfigurationSetV1
--- @return st.zwave.CommandClass.SoundSwitch.ConfigurationSetV1Args
function ConfigurationSetV1._defaults(self)
  local args = {}
  args.volume = self.args.volume or 0
  args.default_tone_identifier = self.args.default_tone_identifier or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ConfigurationSetV1
--- @return st.zwave.CommandClass.SoundSwitch.ConfigurationSetV1Args
function ConfigurationSetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ConfigurationSetV1
function ConfigurationSetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ConfigurationSetV1
function ConfigurationSetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SoundSwitch.ConfigurationGetV1Args
--- @alias ConfigurationGetV1Args st.zwave.CommandClass.SoundSwitch.ConfigurationGetV1Args
local ConfigurationGetV1Args = {}

--- @class st.zwave.CommandClass.SoundSwitch.ConfigurationGetV1:st.zwave.Command
--- @alias ConfigurationGetV1 st.zwave.CommandClass.SoundSwitch.ConfigurationGetV1
---
--- v1 and forward-compatible v2 SOUND_SWITCH_CONFIGURATION_GET
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.ConfigurationGetV1Args command-specific arguments
local ConfigurationGetV1 = {}
setmetatable(ConfigurationGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 SOUND_SWITCH_CONFIGURATION_GET object.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.ConfigurationGetV1Args command-specific arguments
function ConfigurationGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SOUND_SWITCH, SoundSwitch.CONFIGURATION_GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 SOUND_SWITCH_CONFIGURATION_GET arguments.
---
--- @return string serialized payload
function ConfigurationGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 SOUND_SWITCH_CONFIGURATION_GET payload.
---
--- @return st.zwave.CommandClass.SoundSwitch.ConfigurationGetV1Args deserialized arguments
function ConfigurationGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ConfigurationGetV1
--- @return st.zwave.CommandClass.SoundSwitch.ConfigurationGetV1Args
function ConfigurationGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ConfigurationGetV1
--- @return st.zwave.CommandClass.SoundSwitch.ConfigurationGetV1Args
function ConfigurationGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ConfigurationGetV1
function ConfigurationGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ConfigurationGetV1
function ConfigurationGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SoundSwitch.ConfigurationReportV1Args
--- @alias ConfigurationReportV1Args st.zwave.CommandClass.SoundSwitch.ConfigurationReportV1Args
--- @field public volume integer [0,255]
--- @field public default_tone_identifer integer [0,255]
local ConfigurationReportV1Args = {}

--- @class st.zwave.CommandClass.SoundSwitch.ConfigurationReportV1:st.zwave.Command
--- @alias ConfigurationReportV1 st.zwave.CommandClass.SoundSwitch.ConfigurationReportV1
---
--- v1 and forward-compatible v2 SOUND_SWITCH_CONFIGURATION_REPORT
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x07
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.ConfigurationReportV1Args command-specific arguments
local ConfigurationReportV1 = {}
setmetatable(ConfigurationReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 SOUND_SWITCH_CONFIGURATION_REPORT object.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.ConfigurationReportV1Args command-specific arguments
function ConfigurationReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SOUND_SWITCH, SoundSwitch.CONFIGURATION_REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 SOUND_SWITCH_CONFIGURATION_REPORT arguments.
---
--- @return string serialized payload
function ConfigurationReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.volume)
  writer:write_u8(args.default_tone_identifer)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 SOUND_SWITCH_CONFIGURATION_REPORT payload.
---
--- @return st.zwave.CommandClass.SoundSwitch.ConfigurationReportV1Args deserialized arguments
function ConfigurationReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("volume")
  reader:read_u8("default_tone_identifer")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ConfigurationReportV1
--- @return st.zwave.CommandClass.SoundSwitch.ConfigurationReportV1Args
function ConfigurationReportV1._defaults(self)
  local args = {}
  args.volume = self.args.volume or 0
  args.default_tone_identifer = self.args.default_tone_identifer or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ConfigurationReportV1
--- @return st.zwave.CommandClass.SoundSwitch.ConfigurationReportV1Args
function ConfigurationReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ConfigurationReportV1
function ConfigurationReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SoundSwitch.ConfigurationReportV1
function ConfigurationReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SoundSwitch.TonePlaySetV1Args
--- @alias TonePlaySetV1Args st.zwave.CommandClass.SoundSwitch.TonePlaySetV1Args
--- @field public tone_identifier integer [0,255]
local TonePlaySetV1Args = {}

--- @class st.zwave.CommandClass.SoundSwitch.TonePlaySetV1:st.zwave.Command
--- @alias TonePlaySetV1 st.zwave.CommandClass.SoundSwitch.TonePlaySetV1
---
--- v1 SOUND_SWITCH_TONE_PLAY_SET
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x08
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.TonePlaySetV1Args command-specific arguments
local TonePlaySetV1 = {}
setmetatable(TonePlaySetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 SOUND_SWITCH_TONE_PLAY_SET object.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.TonePlaySetV1Args command-specific arguments
function TonePlaySetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SOUND_SWITCH, SoundSwitch.TONE_PLAY_SET, 1, args, ...)
end

--- Serialize v1 SOUND_SWITCH_TONE_PLAY_SET arguments.
---
--- @return string serialized payload
function TonePlaySetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.tone_identifier)
  return writer.buf
end

--- Deserialize a v1 SOUND_SWITCH_TONE_PLAY_SET payload.
---
--- @return st.zwave.CommandClass.SoundSwitch.TonePlaySetV1Args deserialized arguments
function TonePlaySetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("tone_identifier")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlaySetV1
--- @return st.zwave.CommandClass.SoundSwitch.TonePlaySetV1Args
function TonePlaySetV1._defaults(self)
  local args = {}
  args.tone_identifier = self.args.tone_identifier or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlaySetV1
--- @return st.zwave.CommandClass.SoundSwitch.TonePlaySetV1Args
function TonePlaySetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlaySetV1
function TonePlaySetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlaySetV1
function TonePlaySetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SoundSwitch.TonePlayGetV1Args
--- @alias TonePlayGetV1Args st.zwave.CommandClass.SoundSwitch.TonePlayGetV1Args
local TonePlayGetV1Args = {}

--- @class st.zwave.CommandClass.SoundSwitch.TonePlayGetV1:st.zwave.Command
--- @alias TonePlayGetV1 st.zwave.CommandClass.SoundSwitch.TonePlayGetV1
---
--- v1 and forward-compatible v2 SOUND_SWITCH_TONE_PLAY_GET
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x09
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.TonePlayGetV1Args command-specific arguments
local TonePlayGetV1 = {}
setmetatable(TonePlayGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 SOUND_SWITCH_TONE_PLAY_GET object.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.TonePlayGetV1Args command-specific arguments
function TonePlayGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SOUND_SWITCH, SoundSwitch.TONE_PLAY_GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 SOUND_SWITCH_TONE_PLAY_GET arguments.
---
--- @return string serialized payload
function TonePlayGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 SOUND_SWITCH_TONE_PLAY_GET payload.
---
--- @return st.zwave.CommandClass.SoundSwitch.TonePlayGetV1Args deserialized arguments
function TonePlayGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlayGetV1
--- @return st.zwave.CommandClass.SoundSwitch.TonePlayGetV1Args
function TonePlayGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlayGetV1
--- @return st.zwave.CommandClass.SoundSwitch.TonePlayGetV1Args
function TonePlayGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlayGetV1
function TonePlayGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlayGetV1
function TonePlayGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SoundSwitch.TonePlayReportV1Args
--- @alias TonePlayReportV1Args st.zwave.CommandClass.SoundSwitch.TonePlayReportV1Args
--- @field public tone_identifier integer [0,255]
local TonePlayReportV1Args = {}

--- @class st.zwave.CommandClass.SoundSwitch.TonePlayReportV1:st.zwave.Command
--- @alias TonePlayReportV1 st.zwave.CommandClass.SoundSwitch.TonePlayReportV1
---
--- v1 SOUND_SWITCH_TONE_PLAY_REPORT
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x0A
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.TonePlayReportV1Args command-specific arguments
local TonePlayReportV1 = {}
setmetatable(TonePlayReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 SOUND_SWITCH_TONE_PLAY_REPORT object.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.TonePlayReportV1Args command-specific arguments
function TonePlayReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SOUND_SWITCH, SoundSwitch.TONE_PLAY_REPORT, 1, args, ...)
end

--- Serialize v1 SOUND_SWITCH_TONE_PLAY_REPORT arguments.
---
--- @return string serialized payload
function TonePlayReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.tone_identifier)
  return writer.buf
end

--- Deserialize a v1 SOUND_SWITCH_TONE_PLAY_REPORT payload.
---
--- @return st.zwave.CommandClass.SoundSwitch.TonePlayReportV1Args deserialized arguments
function TonePlayReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("tone_identifier")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlayReportV1
--- @return st.zwave.CommandClass.SoundSwitch.TonePlayReportV1Args
function TonePlayReportV1._defaults(self)
  local args = {}
  args.tone_identifier = self.args.tone_identifier or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlayReportV1
--- @return st.zwave.CommandClass.SoundSwitch.TonePlayReportV1Args
function TonePlayReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlayReportV1
function TonePlayReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlayReportV1
function TonePlayReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SoundSwitch.TonePlaySetV2Args
--- @alias TonePlaySetV2Args st.zwave.CommandClass.SoundSwitch.TonePlaySetV2Args
--- @field public tone_identifier integer [0,255]
--- @field public play_command_tone_volume integer [0,255]
local TonePlaySetV2Args = {}

--- @class st.zwave.CommandClass.SoundSwitch.TonePlaySetV2:st.zwave.Command
--- @alias TonePlaySetV2 st.zwave.CommandClass.SoundSwitch.TonePlaySetV2
---
--- v2 SOUND_SWITCH_TONE_PLAY_SET
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x08
--- @field public version number 2
--- @field public args st.zwave.CommandClass.SoundSwitch.TonePlaySetV2Args command-specific arguments
local TonePlaySetV2 = {}
setmetatable(TonePlaySetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 SOUND_SWITCH_TONE_PLAY_SET object.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.TonePlaySetV2Args command-specific arguments
function TonePlaySetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.SOUND_SWITCH, SoundSwitch.TONE_PLAY_SET, 2, args, ...)
end

--- Serialize v2 SOUND_SWITCH_TONE_PLAY_SET arguments.
---
--- @return string serialized payload
function TonePlaySetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.tone_identifier)
  writer:write_u8(args.play_command_tone_volume)
  return writer.buf
end

--- Deserialize a v2 SOUND_SWITCH_TONE_PLAY_SET payload.
---
--- @return st.zwave.CommandClass.SoundSwitch.TonePlaySetV2Args deserialized arguments
function TonePlaySetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("tone_identifier")
  reader:read_u8("play_command_tone_volume")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlaySetV2
--- @return st.zwave.CommandClass.SoundSwitch.TonePlaySetV2Args
function TonePlaySetV2._defaults(self)
  local args = {}
  args.tone_identifier = self.args.tone_identifier or 0
  args.play_command_tone_volume = self.args.play_command_tone_volume or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlaySetV2
--- @return st.zwave.CommandClass.SoundSwitch.TonePlaySetV2Args
function TonePlaySetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlaySetV2
function TonePlaySetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlaySetV2
function TonePlaySetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SoundSwitch.TonePlayReportV2Args
--- @alias TonePlayReportV2Args st.zwave.CommandClass.SoundSwitch.TonePlayReportV2Args
--- @field public tone_identifier integer [0,255]
--- @field public play_command_tone_volume integer [0,255]
local TonePlayReportV2Args = {}

--- @class st.zwave.CommandClass.SoundSwitch.TonePlayReportV2:st.zwave.Command
--- @alias TonePlayReportV2 st.zwave.CommandClass.SoundSwitch.TonePlayReportV2
---
--- v2 SOUND_SWITCH_TONE_PLAY_REPORT
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x0A
--- @field public version number 2
--- @field public args st.zwave.CommandClass.SoundSwitch.TonePlayReportV2Args command-specific arguments
local TonePlayReportV2 = {}
setmetatable(TonePlayReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 SOUND_SWITCH_TONE_PLAY_REPORT object.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.TonePlayReportV2Args command-specific arguments
function TonePlayReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.SOUND_SWITCH, SoundSwitch.TONE_PLAY_REPORT, 2, args, ...)
end

--- Serialize v2 SOUND_SWITCH_TONE_PLAY_REPORT arguments.
---
--- @return string serialized payload
function TonePlayReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.tone_identifier)
  writer:write_u8(args.play_command_tone_volume)
  return writer.buf
end

--- Deserialize a v2 SOUND_SWITCH_TONE_PLAY_REPORT payload.
---
--- @return st.zwave.CommandClass.SoundSwitch.TonePlayReportV2Args deserialized arguments
function TonePlayReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("tone_identifier")
  reader:read_u8("play_command_tone_volume")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlayReportV2
--- @return st.zwave.CommandClass.SoundSwitch.TonePlayReportV2Args
function TonePlayReportV2._defaults(self)
  local args = {}
  args.tone_identifier = self.args.tone_identifier or 0
  args.play_command_tone_volume = self.args.play_command_tone_volume or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlayReportV2
--- @return st.zwave.CommandClass.SoundSwitch.TonePlayReportV2Args
function TonePlayReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlayReportV2
function TonePlayReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SoundSwitch.TonePlayReportV2
function TonePlayReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SoundSwitch.TonesNumberGet
--- @alias _TonesNumberGet st.zwave.CommandClass.SoundSwitch.TonesNumberGet
---
--- Dynamically versioned SOUND_SWITCH_TONES_NUMBER_GET
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.TonesNumberGetV1Args
local _TonesNumberGet = {}
setmetatable(_TonesNumberGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SOUND_SWITCH_TONES_NUMBER_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.TonesNumberGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.SoundSwitch.TonesNumberGet
function _TonesNumberGet:construct(module, args, ...)
  return zw.Command._construct(module, SoundSwitch.TONES_NUMBER_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SoundSwitch.TonesNumberReport
--- @alias _TonesNumberReport st.zwave.CommandClass.SoundSwitch.TonesNumberReport
---
--- Dynamically versioned SOUND_SWITCH_TONES_NUMBER_REPORT
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.TonesNumberReportV1Args
local _TonesNumberReport = {}
setmetatable(_TonesNumberReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SOUND_SWITCH_TONES_NUMBER_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.TonesNumberReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.SoundSwitch.TonesNumberReport
function _TonesNumberReport:construct(module, args, ...)
  return zw.Command._construct(module, SoundSwitch.TONES_NUMBER_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SoundSwitch.ToneInfoGet
--- @alias _ToneInfoGet st.zwave.CommandClass.SoundSwitch.ToneInfoGet
---
--- Dynamically versioned SOUND_SWITCH_TONE_INFO_GET
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.ToneInfoGetV1Args
local _ToneInfoGet = {}
setmetatable(_ToneInfoGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SOUND_SWITCH_TONE_INFO_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.ToneInfoGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.SoundSwitch.ToneInfoGet
function _ToneInfoGet:construct(module, args, ...)
  return zw.Command._construct(module, SoundSwitch.TONE_INFO_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SoundSwitch.ToneInfoReport
--- @alias _ToneInfoReport st.zwave.CommandClass.SoundSwitch.ToneInfoReport
---
--- Dynamically versioned SOUND_SWITCH_TONE_INFO_REPORT
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.ToneInfoReportV1Args
local _ToneInfoReport = {}
setmetatable(_ToneInfoReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SOUND_SWITCH_TONE_INFO_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.ToneInfoReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.SoundSwitch.ToneInfoReport
function _ToneInfoReport:construct(module, args, ...)
  return zw.Command._construct(module, SoundSwitch.TONE_INFO_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SoundSwitch.ConfigurationSet
--- @alias _ConfigurationSet st.zwave.CommandClass.SoundSwitch.ConfigurationSet
---
--- Dynamically versioned SOUND_SWITCH_CONFIGURATION_SET
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.ConfigurationSetV1Args
local _ConfigurationSet = {}
setmetatable(_ConfigurationSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SOUND_SWITCH_CONFIGURATION_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.ConfigurationSetV1Args command-specific arguments
--- @return st.zwave.CommandClass.SoundSwitch.ConfigurationSet
function _ConfigurationSet:construct(module, args, ...)
  return zw.Command._construct(module, SoundSwitch.CONFIGURATION_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SoundSwitch.ConfigurationGet
--- @alias _ConfigurationGet st.zwave.CommandClass.SoundSwitch.ConfigurationGet
---
--- Dynamically versioned SOUND_SWITCH_CONFIGURATION_GET
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.ConfigurationGetV1Args
local _ConfigurationGet = {}
setmetatable(_ConfigurationGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SOUND_SWITCH_CONFIGURATION_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.ConfigurationGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.SoundSwitch.ConfigurationGet
function _ConfigurationGet:construct(module, args, ...)
  return zw.Command._construct(module, SoundSwitch.CONFIGURATION_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SoundSwitch.ConfigurationReport
--- @alias _ConfigurationReport st.zwave.CommandClass.SoundSwitch.ConfigurationReport
---
--- Dynamically versioned SOUND_SWITCH_CONFIGURATION_REPORT
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x07
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.ConfigurationReportV1Args
local _ConfigurationReport = {}
setmetatable(_ConfigurationReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SOUND_SWITCH_CONFIGURATION_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.ConfigurationReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.SoundSwitch.ConfigurationReport
function _ConfigurationReport:construct(module, args, ...)
  return zw.Command._construct(module, SoundSwitch.CONFIGURATION_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SoundSwitch.TonePlaySet
--- @alias _TonePlaySet st.zwave.CommandClass.SoundSwitch.TonePlaySet
---
--- Dynamically versioned SOUND_SWITCH_TONE_PLAY_SET
---
--- Supported versions: 1,2; unique base versions: 1,2
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x08
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.SoundSwitch.TonePlaySetV1Args|st.zwave.CommandClass.SoundSwitch.TonePlaySetV2Args
local _TonePlaySet = {}
setmetatable(_TonePlaySet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SOUND_SWITCH_TONE_PLAY_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.TonePlaySetV1Args|st.zwave.CommandClass.SoundSwitch.TonePlaySetV2Args command-specific arguments
--- @return st.zwave.CommandClass.SoundSwitch.TonePlaySet
function _TonePlaySet:construct(module, args, ...)
  return zw.Command._construct(module, SoundSwitch.TONE_PLAY_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SoundSwitch.TonePlayGet
--- @alias _TonePlayGet st.zwave.CommandClass.SoundSwitch.TonePlayGet
---
--- Dynamically versioned SOUND_SWITCH_TONE_PLAY_GET
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x09
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SoundSwitch.TonePlayGetV1Args
local _TonePlayGet = {}
setmetatable(_TonePlayGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SOUND_SWITCH_TONE_PLAY_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.TonePlayGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.SoundSwitch.TonePlayGet
function _TonePlayGet:construct(module, args, ...)
  return zw.Command._construct(module, SoundSwitch.TONE_PLAY_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SoundSwitch.TonePlayReport
--- @alias _TonePlayReport st.zwave.CommandClass.SoundSwitch.TonePlayReport
---
--- Dynamically versioned SOUND_SWITCH_TONE_PLAY_REPORT
---
--- Supported versions: 1,2; unique base versions: 1,2
---
--- @field public cmd_class number 0x79
--- @field public cmd_id number 0x0A
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.SoundSwitch.TonePlayReportV1Args|st.zwave.CommandClass.SoundSwitch.TonePlayReportV2Args
local _TonePlayReport = {}
setmetatable(_TonePlayReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SOUND_SWITCH_TONE_PLAY_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SoundSwitch command class module instance
--- @param args st.zwave.CommandClass.SoundSwitch.TonePlayReportV1Args|st.zwave.CommandClass.SoundSwitch.TonePlayReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.SoundSwitch.TonePlayReport
function _TonePlayReport:construct(module, args, ...)
  return zw.Command._construct(module, SoundSwitch.TONE_PLAY_REPORT, module._serialization_version, args, ...)
end

SoundSwitch.TonesNumberGetV1 = TonesNumberGetV1
SoundSwitch.TonesNumberReportV1 = TonesNumberReportV1
SoundSwitch.ToneInfoGetV1 = ToneInfoGetV1
SoundSwitch.ToneInfoReportV1 = ToneInfoReportV1
SoundSwitch.ConfigurationSetV1 = ConfigurationSetV1
SoundSwitch.ConfigurationGetV1 = ConfigurationGetV1
SoundSwitch.ConfigurationReportV1 = ConfigurationReportV1
SoundSwitch.TonePlaySetV1 = TonePlaySetV1
SoundSwitch.TonePlayGetV1 = TonePlayGetV1
SoundSwitch.TonePlayReportV1 = TonePlayReportV1
SoundSwitch.TonePlaySetV2 = TonePlaySetV2
SoundSwitch.TonePlayReportV2 = TonePlayReportV2
SoundSwitch.TonesNumberGet = _TonesNumberGet
SoundSwitch.TonesNumberReport = _TonesNumberReport
SoundSwitch.ToneInfoGet = _ToneInfoGet
SoundSwitch.ToneInfoReport = _ToneInfoReport
SoundSwitch.ConfigurationSet = _ConfigurationSet
SoundSwitch.ConfigurationGet = _ConfigurationGet
SoundSwitch.ConfigurationReport = _ConfigurationReport
SoundSwitch.TonePlaySet = _TonePlaySet
SoundSwitch.TonePlayGet = _TonePlayGet
SoundSwitch.TonePlayReport = _TonePlayReport

SoundSwitch._lut = {
  [0] = { -- dynamically versioned constructors
    [SoundSwitch.TONES_NUMBER_GET] = SoundSwitch.TonesNumberGet,
    [SoundSwitch.TONES_NUMBER_REPORT] = SoundSwitch.TonesNumberReport,
    [SoundSwitch.TONE_INFO_GET] = SoundSwitch.ToneInfoGet,
    [SoundSwitch.TONE_INFO_REPORT] = SoundSwitch.ToneInfoReport,
    [SoundSwitch.CONFIGURATION_SET] = SoundSwitch.ConfigurationSet,
    [SoundSwitch.CONFIGURATION_GET] = SoundSwitch.ConfigurationGet,
    [SoundSwitch.CONFIGURATION_REPORT] = SoundSwitch.ConfigurationReport,
    [SoundSwitch.TONE_PLAY_SET] = SoundSwitch.TonePlaySet,
    [SoundSwitch.TONE_PLAY_GET] = SoundSwitch.TonePlayGet,
    [SoundSwitch.TONE_PLAY_REPORT] = SoundSwitch.TonePlayReport
  },
  [1] = { -- version 1
    [SoundSwitch.TONES_NUMBER_GET] = SoundSwitch.TonesNumberGetV1,
    [SoundSwitch.TONES_NUMBER_REPORT] = SoundSwitch.TonesNumberReportV1,
    [SoundSwitch.TONE_INFO_GET] = SoundSwitch.ToneInfoGetV1,
    [SoundSwitch.TONE_INFO_REPORT] = SoundSwitch.ToneInfoReportV1,
    [SoundSwitch.CONFIGURATION_SET] = SoundSwitch.ConfigurationSetV1,
    [SoundSwitch.CONFIGURATION_GET] = SoundSwitch.ConfigurationGetV1,
    [SoundSwitch.CONFIGURATION_REPORT] = SoundSwitch.ConfigurationReportV1,
    [SoundSwitch.TONE_PLAY_SET] = SoundSwitch.TonePlaySetV1,
    [SoundSwitch.TONE_PLAY_GET] = SoundSwitch.TonePlayGetV1,
    [SoundSwitch.TONE_PLAY_REPORT] = SoundSwitch.TonePlayReportV1
  },
  [2] = { -- version 2
    [SoundSwitch.TONES_NUMBER_GET] = SoundSwitch.TonesNumberGetV1,
    [SoundSwitch.TONES_NUMBER_REPORT] = SoundSwitch.TonesNumberReportV1,
    [SoundSwitch.TONE_INFO_GET] = SoundSwitch.ToneInfoGetV1,
    [SoundSwitch.TONE_INFO_REPORT] = SoundSwitch.ToneInfoReportV1,
    [SoundSwitch.CONFIGURATION_SET] = SoundSwitch.ConfigurationSetV1,
    [SoundSwitch.CONFIGURATION_GET] = SoundSwitch.ConfigurationGetV1,
    [SoundSwitch.CONFIGURATION_REPORT] = SoundSwitch.ConfigurationReportV1,
    [SoundSwitch.TONE_PLAY_SET] = SoundSwitch.TonePlaySetV2,
    [SoundSwitch.TONE_PLAY_GET] = SoundSwitch.TonePlayGetV1,
    [SoundSwitch.TONE_PLAY_REPORT] = SoundSwitch.TonePlayReportV2
  }
}

return SoundSwitch
