-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.SwitchColor
--- @alias SwitchColor st.zwave.CommandClass.SwitchColor
---
--- Supported versions: 1,2,3
---
--- @field public SUPPORTED_GET number 0x01 - SWITCH_COLOR_SUPPORTED_GET command id
--- @field public SUPPORTED_REPORT number 0x02 - SWITCH_COLOR_SUPPORTED_REPORT command id
--- @field public GET number 0x03 - SWITCH_COLOR_GET command id
--- @field public REPORT number 0x04 - SWITCH_COLOR_REPORT command id
--- @field public SET number 0x05 - SWITCH_COLOR_SET command id
--- @field public START_LEVEL_CHANGE number 0x06 - SWITCH_COLOR_START_LEVEL_CHANGE command id
--- @field public STOP_LEVEL_CHANGE number 0x07 - SWITCH_COLOR_STOP_LEVEL_CHANGE command id
local SwitchColor = {}
SwitchColor.SUPPORTED_GET = 0x01
SwitchColor.SUPPORTED_REPORT = 0x02
SwitchColor.GET = 0x03
SwitchColor.REPORT = 0x04
SwitchColor.SET = 0x05
SwitchColor.START_LEVEL_CHANGE = 0x06
SwitchColor.STOP_LEVEL_CHANGE = 0x07

SwitchColor._commands = {
  [SwitchColor.SUPPORTED_GET] = "SUPPORTED_GET",
  [SwitchColor.SUPPORTED_REPORT] = "SUPPORTED_REPORT",
  [SwitchColor.GET] = "GET",
  [SwitchColor.REPORT] = "REPORT",
  [SwitchColor.SET] = "SET",
  [SwitchColor.START_LEVEL_CHANGE] = "START_LEVEL_CHANGE",
  [SwitchColor.STOP_LEVEL_CHANGE] = "STOP_LEVEL_CHANGE"
}

--- Instantiate a versioned instance of the SwitchColor Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.SwitchColor versioned command class instance
function SwitchColor:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.SWITCH_COLOR][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(SwitchColor, {
  __call = SwitchColor.init
})

SwitchColor._serialization_version = nil
SwitchColor._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.SWITCH_COLOR] = {
  [1] = true,
  [2] = true,
  [3] = true
}

--- @class st.zwave.CommandClass.SwitchColor.SupportedGetV1Args
--- @alias SupportedGetV1Args st.zwave.CommandClass.SwitchColor.SupportedGetV1Args
local SupportedGetV1Args = {}

--- @class st.zwave.CommandClass.SwitchColor.SupportedGetV1:st.zwave.Command
--- @alias SupportedGetV1 st.zwave.CommandClass.SwitchColor.SupportedGetV1
---
--- v1 and forward-compatible v2,v3 SWITCH_COLOR_SUPPORTED_GET
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchColor.SupportedGetV1Args command-specific arguments
local SupportedGetV1 = {}
setmetatable(SupportedGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 SWITCH_COLOR_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.SupportedGetV1Args command-specific arguments
function SupportedGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_COLOR, SwitchColor.SUPPORTED_GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 SWITCH_COLOR_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function SupportedGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 SWITCH_COLOR_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.SwitchColor.SupportedGetV1Args deserialized arguments
function SupportedGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.SupportedGetV1
--- @return st.zwave.CommandClass.SwitchColor.SupportedGetV1Args
function SupportedGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.SupportedGetV1
--- @return st.zwave.CommandClass.SwitchColor.SupportedGetV1Args
function SupportedGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchColor.SupportedGetV1
function SupportedGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchColor.SupportedGetV1
function SupportedGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SwitchColor.SupportedReportV1Args
--- @alias SupportedReportV1Args st.zwave.CommandClass.SwitchColor.SupportedReportV1Args
--- @field public warm_white boolean
--- @field public cold_white boolean
--- @field public red boolean
--- @field public green boolean
--- @field public blue boolean
--- @field public amber boolean
--- @field public cyan boolean
--- @field public purple boolean
local SupportedReportV1Args = {}

--- @class st.zwave.CommandClass.SwitchColor.SupportedReportV1:st.zwave.Command
--- @alias SupportedReportV1 st.zwave.CommandClass.SwitchColor.SupportedReportV1
---
--- v1 and forward-compatible v2,v3 SWITCH_COLOR_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchColor.SupportedReportV1Args command-specific arguments
local SupportedReportV1 = {}
setmetatable(SupportedReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 SWITCH_COLOR_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.SupportedReportV1Args command-specific arguments
function SupportedReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_COLOR, SwitchColor.SUPPORTED_REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 SWITCH_COLOR_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.warm_white)
  writer:write_bool(args.cold_white)
  writer:write_bool(args.red)
  writer:write_bool(args.green)
  writer:write_bool(args.blue)
  writer:write_bool(args.amber)
  writer:write_bool(args.cyan)
  writer:write_bool(args.purple)
  writer:write_bool(false) -- reserved
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 SWITCH_COLOR_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.SwitchColor.SupportedReportV1Args deserialized arguments
function SupportedReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("warm_white")
  reader:read_bool("cold_white")
  reader:read_bool("red")
  reader:read_bool("green")
  reader:read_bool("blue")
  reader:read_bool("amber")
  reader:read_bool("cyan")
  reader:read_bool("purple")
  reader:read_bool() -- reserved
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.SupportedReportV1
--- @return st.zwave.CommandClass.SwitchColor.SupportedReportV1Args
function SupportedReportV1._defaults(self)
  local args = {}
  args.warm_white = self.args.warm_white or false
  args.cold_white = self.args.cold_white or false
  args.red = self.args.red or false
  args.green = self.args.green or false
  args.blue = self.args.blue or false
  args.amber = self.args.amber or false
  args.cyan = self.args.cyan or false
  args.purple = self.args.purple or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.SupportedReportV1
--- @return st.zwave.CommandClass.SwitchColor.SupportedReportV1Args
function SupportedReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchColor.SupportedReportV1
function SupportedReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchColor.SupportedReportV1
function SupportedReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SwitchColor.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.SwitchColor.GetV1Args
--- @field public color_component_id integer see :lua:class:`SwitchColor.color_component_id <st.zwave.CommandClass.SwitchColor.color_component_id>`
local GetV1Args = {}

--- @class st.zwave.CommandClass.SwitchColor.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.SwitchColor.GetV1
---
--- v1 and forward-compatible v2,v3 SWITCH_COLOR_GET
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchColor.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 SWITCH_COLOR_GET object.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_COLOR, SwitchColor.GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 SWITCH_COLOR_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.color_component_id)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 SWITCH_COLOR_GET payload.
---
--- @return st.zwave.CommandClass.SwitchColor.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("color_component_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.GetV1
--- @return st.zwave.CommandClass.SwitchColor.GetV1Args
function GetV1._defaults(self)
  local args = {}
  args.color_component_id = self.args.color_component_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.GetV1
--- @return st.zwave.CommandClass.SwitchColor.GetV1Args
function GetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchColor.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchColor.GetV1
function GetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.color_component_id = function()
    return zw._reflect(
      SwitchColor._reflect_color_component_id,
      args.color_component_id
    )
  end
end

--- @class st.zwave.CommandClass.SwitchColor.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.SwitchColor.ReportV1Args
--- @field public color_component_id integer see :lua:class:`SwitchColor.color_component_id <st.zwave.CommandClass.SwitchColor.color_component_id>`
--- @field public value integer [0,255]
local ReportV1Args = {}

--- @class st.zwave.CommandClass.SwitchColor.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.SwitchColor.ReportV1
---
--- v1 and forward-compatible v2 SWITCH_COLOR_REPORT
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchColor.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 SWITCH_COLOR_REPORT object.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_COLOR, SwitchColor.REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 SWITCH_COLOR_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.color_component_id)
  writer:write_u8(args.value)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 SWITCH_COLOR_REPORT payload.
---
--- @return st.zwave.CommandClass.SwitchColor.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("color_component_id")
  reader:read_u8("value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.ReportV1
--- @return st.zwave.CommandClass.SwitchColor.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.color_component_id = self.args.color_component_id or 0
  args.value = self.args.value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.ReportV1
--- @return st.zwave.CommandClass.SwitchColor.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchColor.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchColor.ReportV1
function ReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.color_component_id = function()
    return zw._reflect(
      SwitchColor._reflect_color_component_id,
      args.color_component_id
    )
  end
end

--- @class st.zwave.CommandClass.SwitchColor.SetV1ArgsColorComponents
--- @alias SetV1ArgsColorComponents st.zwave.CommandClass.SwitchColor.SetV1ArgsColorComponents
--- @field public color_component_id integer see :lua:class:`SwitchColor.color_component_id <st.zwave.CommandClass.SwitchColor.color_component_id>`
--- @field public value integer [0,255]
local SetV1ArgsColorComponents = {}

--- @class st.zwave.CommandClass.SwitchColor.SetV1Args
--- @alias SetV1Args st.zwave.CommandClass.SwitchColor.SetV1Args
--- @field public color_components st.zwave.CommandClass.SwitchColor.SetV1ArgsColorComponents[]
local SetV1Args = {}

--- @class st.zwave.CommandClass.SwitchColor.SetV1:st.zwave.Command
--- @alias SetV1 st.zwave.CommandClass.SwitchColor.SetV1
---
--- v1 SWITCH_COLOR_SET
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchColor.SetV1Args command-specific arguments
local SetV1 = {}
setmetatable(SetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 SWITCH_COLOR_SET object.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.SetV1Args command-specific arguments
function SetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_COLOR, SwitchColor.SET, 1, args, ...)
end

--- Serialize v1 SWITCH_COLOR_SET arguments.
---
--- @return string serialized payload
function SetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, writer.length(args.color_components))
  writer:write_bits(3, 0) -- reserved
  for i=1,writer.length(args.color_components) do
    writer:write_u8(args.color_components[i].color_component_id)
    writer:write_u8(args.color_components[i].value)
  end
  return writer.buf
end

--- Deserialize a v1 SWITCH_COLOR_SET payload.
---
--- @return st.zwave.CommandClass.SwitchColor.SetV1Args deserialized arguments
function SetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "color_component_count")
  reader:read_bits(3) -- reserved
  reader.parsed.color_components = {}
  for i=1,reader.parsed.color_component_count do
    reader.parsed.color_components[i] = {}
    reader:read_u8("color_component_id", reader.parsed.color_components[i])
    reader:read_u8("value", reader.parsed.color_components[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.SetV1
--- @return st.zwave.CommandClass.SwitchColor.SetV1Args
function SetV1._defaults(self)
  local args = {}
  args.color_components = self.args.color_components or {}
  for i=1,buf.Writer.length(args.color_components) do
    args.color_components[i] = args.color_components[i] or {}
    args.color_components[i].color_component_id = self.args.color_components[i].color_component_id or 0
    args.color_components[i].value = self.args.color_components[i].value or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.SetV1
--- @return st.zwave.CommandClass.SwitchColor.SetV1Args
function SetV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.color_components) do
    args.color_components[i] = args.color_components[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchColor.SetV1
function SetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchColor.SetV1
function SetV1._set_reflectors(self)
  local args = self.args
  for i=1,buf.Writer.length(args.color_components) do
    args.color_components[i]._reflect = args.color_components[i]._reflect or {}
    args.color_components[i]._reflect.color_component_id = function()
      return zw._reflect(
        SwitchColor._reflect_color_component_id,
        args.color_components[i].color_component_id
      )
    end
  end
end

--- @class st.zwave.CommandClass.SwitchColor.StartLevelChangeV1Args
--- @alias StartLevelChangeV1Args st.zwave.CommandClass.SwitchColor.StartLevelChangeV1Args
--- @field public ignore_start_state boolean
--- @field public up_down boolean
--- @field public color_component_id integer see :lua:class:`SwitchColor.color_component_id <st.zwave.CommandClass.SwitchColor.color_component_id>`
--- @field public start_level integer [0,255]
local StartLevelChangeV1Args = {}

--- @class st.zwave.CommandClass.SwitchColor.StartLevelChangeV1:st.zwave.Command
--- @alias StartLevelChangeV1 st.zwave.CommandClass.SwitchColor.StartLevelChangeV1
---
--- v1 and forward-compatible v2 SWITCH_COLOR_START_LEVEL_CHANGE
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x06
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchColor.StartLevelChangeV1Args command-specific arguments
local StartLevelChangeV1 = {}
setmetatable(StartLevelChangeV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 SWITCH_COLOR_START_LEVEL_CHANGE object.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.StartLevelChangeV1Args command-specific arguments
function StartLevelChangeV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_COLOR, SwitchColor.START_LEVEL_CHANGE, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 SWITCH_COLOR_START_LEVEL_CHANGE arguments.
---
--- @return string serialized payload
function StartLevelChangeV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, 0) -- res1
  writer:write_bool(args.ignore_start_state)
  writer:write_bool(args.up_down)
  writer:write_bool(false) -- res2
  writer:write_u8(args.color_component_id)
  writer:write_u8(args.start_level)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 SWITCH_COLOR_START_LEVEL_CHANGE payload.
---
--- @return st.zwave.CommandClass.SwitchColor.StartLevelChangeV1Args deserialized arguments
function StartLevelChangeV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5) -- res1
  reader:read_bool("ignore_start_state")
  reader:read_bool("up_down")
  reader:read_bool() -- res2
  reader:read_u8("color_component_id")
  reader:read_u8("start_level")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.StartLevelChangeV1
--- @return st.zwave.CommandClass.SwitchColor.StartLevelChangeV1Args
function StartLevelChangeV1._defaults(self)
  local args = {}
  args.ignore_start_state = self.args.ignore_start_state or false
  args.up_down = self.args.up_down or false
  args.color_component_id = self.args.color_component_id or 0
  args.start_level = self.args.start_level or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.StartLevelChangeV1
--- @return st.zwave.CommandClass.SwitchColor.StartLevelChangeV1Args
function StartLevelChangeV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchColor.StartLevelChangeV1
function StartLevelChangeV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchColor.StartLevelChangeV1
function StartLevelChangeV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.color_component_id = function()
    return zw._reflect(
      SwitchColor._reflect_color_component_id,
      args.color_component_id
    )
  end
end

--- @class st.zwave.CommandClass.SwitchColor.StopLevelChangeV1Args
--- @alias StopLevelChangeV1Args st.zwave.CommandClass.SwitchColor.StopLevelChangeV1Args
--- @field public color_component_id integer see :lua:class:`SwitchColor.color_component_id <st.zwave.CommandClass.SwitchColor.color_component_id>`
local StopLevelChangeV1Args = {}

--- @class st.zwave.CommandClass.SwitchColor.StopLevelChangeV1:st.zwave.Command
--- @alias StopLevelChangeV1 st.zwave.CommandClass.SwitchColor.StopLevelChangeV1
---
--- v1 and forward-compatible v2,v3 SWITCH_COLOR_STOP_LEVEL_CHANGE
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x07
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchColor.StopLevelChangeV1Args command-specific arguments
local StopLevelChangeV1 = {}
setmetatable(StopLevelChangeV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 SWITCH_COLOR_STOP_LEVEL_CHANGE object.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.StopLevelChangeV1Args command-specific arguments
function StopLevelChangeV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_COLOR, SwitchColor.STOP_LEVEL_CHANGE, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 SWITCH_COLOR_STOP_LEVEL_CHANGE arguments.
---
--- @return string serialized payload
function StopLevelChangeV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.color_component_id)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 SWITCH_COLOR_STOP_LEVEL_CHANGE payload.
---
--- @return st.zwave.CommandClass.SwitchColor.StopLevelChangeV1Args deserialized arguments
function StopLevelChangeV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("color_component_id")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.StopLevelChangeV1
--- @return st.zwave.CommandClass.SwitchColor.StopLevelChangeV1Args
function StopLevelChangeV1._defaults(self)
  local args = {}
  args.color_component_id = self.args.color_component_id or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.StopLevelChangeV1
--- @return st.zwave.CommandClass.SwitchColor.StopLevelChangeV1Args
function StopLevelChangeV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchColor.StopLevelChangeV1
function StopLevelChangeV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchColor.StopLevelChangeV1
function StopLevelChangeV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.color_component_id = function()
    return zw._reflect(
      SwitchColor._reflect_color_component_id,
      args.color_component_id
    )
  end
end

--- @class st.zwave.CommandClass.SwitchColor.SetV2ArgsColorComponents
--- @alias SetV2ArgsColorComponents st.zwave.CommandClass.SwitchColor.SetV2ArgsColorComponents
--- @field public color_component_id integer see :lua:class:`SwitchColor.color_component_id <st.zwave.CommandClass.SwitchColor.color_component_id>`
--- @field public value integer [0,255]
local SetV2ArgsColorComponents = {}

--- @class st.zwave.CommandClass.SwitchColor.SetV2Args
--- @alias SetV2Args st.zwave.CommandClass.SwitchColor.SetV2Args
--- @field public color_components st.zwave.CommandClass.SwitchColor.SetV2ArgsColorComponents[]
--- @field public duration number|string [0,7620] or "default"
local SetV2Args = {}

--- @class st.zwave.CommandClass.SwitchColor.SetV2:st.zwave.Command
--- @alias SetV2 st.zwave.CommandClass.SwitchColor.SetV2
---
--- v2 and forward-compatible v3 SWITCH_COLOR_SET
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x05
--- @field public version number 2
--- @field public args st.zwave.CommandClass.SwitchColor.SetV2Args command-specific arguments
local SetV2 = {}
setmetatable(SetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3 SWITCH_COLOR_SET object.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.SetV2Args command-specific arguments
function SetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_COLOR, SwitchColor.SET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3 SWITCH_COLOR_SET arguments.
---
--- @return string serialized payload
function SetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, writer.length(args.color_components))
  writer:write_bits(3, 0) -- reserved
  for i=1,writer.length(args.color_components) do
    writer:write_u8(args.color_components[i].color_component_id)
    writer:write_u8(args.color_components[i].value)
  end
  writer:write_actuator_duration_set(args.duration)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3 SWITCH_COLOR_SET payload.
---
--- @return st.zwave.CommandClass.SwitchColor.SetV2Args deserialized arguments
function SetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "color_component_count")
  reader:read_bits(3) -- reserved
  reader.parsed.color_components = {}
  for i=1,reader.parsed.color_component_count do
    reader.parsed.color_components[i] = {}
    reader:read_u8("color_component_id", reader.parsed.color_components[i])
    reader:read_u8("value", reader.parsed.color_components[i])
  end
  reader:read_actuator_duration_set("duration")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.SetV2
--- @return st.zwave.CommandClass.SwitchColor.SetV2Args
function SetV2._defaults(self)
  local args = {}
  args.color_components = self.args.color_components or {}
  for i=1,buf.Writer.length(args.color_components) do
    args.color_components[i] = args.color_components[i] or {}
    args.color_components[i].color_component_id = self.args.color_components[i].color_component_id or 0
    args.color_components[i].value = self.args.color_components[i].value or 0
  end
  args.duration = self.args.duration or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.SetV2
--- @return st.zwave.CommandClass.SwitchColor.SetV2Args
function SetV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.color_components) do
    args.color_components[i] = args.color_components[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchColor.SetV2
function SetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchColor.SetV2
function SetV2._set_reflectors(self)
  local args = self.args
  for i=1,buf.Writer.length(args.color_components) do
    args.color_components[i]._reflect = args.color_components[i]._reflect or {}
    args.color_components[i]._reflect.color_component_id = function()
      return zw._reflect(
        SwitchColor._reflect_color_component_id,
        args.color_components[i].color_component_id
      )
    end
  end
end

--- @class st.zwave.CommandClass.SwitchColor.ReportV3Args
--- @alias ReportV3Args st.zwave.CommandClass.SwitchColor.ReportV3Args
--- @field public color_component_id integer see :lua:class:`SwitchColor.color_component_id <st.zwave.CommandClass.SwitchColor.color_component_id>`
--- @field public current_value integer [0,255]
--- @field public target_value integer [0,255]
--- @field public duration number|string [0,7560] or "unknown" or "reserved"
local ReportV3Args = {}

--- @class st.zwave.CommandClass.SwitchColor.ReportV3:st.zwave.Command
--- @alias ReportV3 st.zwave.CommandClass.SwitchColor.ReportV3
---
--- v3 SWITCH_COLOR_REPORT
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x04
--- @field public version number 3
--- @field public args st.zwave.CommandClass.SwitchColor.ReportV3Args command-specific arguments
local ReportV3 = {}
setmetatable(ReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 SWITCH_COLOR_REPORT object.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.ReportV3Args command-specific arguments
function ReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_COLOR, SwitchColor.REPORT, 3, args, ...)
end

--- Serialize v3 SWITCH_COLOR_REPORT arguments.
---
--- @return string serialized payload
function ReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.color_component_id)
  writer:write_u8(args.current_value)
  writer:write_u8(args.target_value)
  writer:write_actuator_duration_report(args.duration)
  return writer.buf
end

--- Deserialize a v3 SWITCH_COLOR_REPORT payload.
---
--- @return st.zwave.CommandClass.SwitchColor.ReportV3Args deserialized arguments
function ReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("color_component_id")
  reader:read_u8("current_value")
  reader:read_u8("target_value")
  reader:read_actuator_duration_report("duration")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.ReportV3
--- @return st.zwave.CommandClass.SwitchColor.ReportV3Args
function ReportV3._defaults(self)
  local args = {}
  args.color_component_id = self.args.color_component_id or 0
  args.current_value = self.args.current_value or 0
  args.target_value = self.args.target_value or 0
  args.duration = self.args.duration or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.ReportV3
--- @return st.zwave.CommandClass.SwitchColor.ReportV3Args
function ReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchColor.ReportV3
function ReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchColor.ReportV3
function ReportV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.color_component_id = function()
    return zw._reflect(
      SwitchColor._reflect_color_component_id,
      args.color_component_id
    )
  end
end

--- @class st.zwave.CommandClass.SwitchColor.StartLevelChangeV3Args
--- @alias StartLevelChangeV3Args st.zwave.CommandClass.SwitchColor.StartLevelChangeV3Args
--- @field public ignore_start_state boolean
--- @field public up_down boolean
--- @field public color_component_id integer see :lua:class:`SwitchColor.color_component_id <st.zwave.CommandClass.SwitchColor.color_component_id>`
--- @field public start_level integer [0,255]
--- @field public duration number|string [0,7620] or "default"
local StartLevelChangeV3Args = {}

--- @class st.zwave.CommandClass.SwitchColor.StartLevelChangeV3:st.zwave.Command
--- @alias StartLevelChangeV3 st.zwave.CommandClass.SwitchColor.StartLevelChangeV3
---
--- v3 SWITCH_COLOR_START_LEVEL_CHANGE
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x06
--- @field public version number 3
--- @field public args st.zwave.CommandClass.SwitchColor.StartLevelChangeV3Args command-specific arguments
local StartLevelChangeV3 = {}
setmetatable(StartLevelChangeV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 SWITCH_COLOR_START_LEVEL_CHANGE object.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.StartLevelChangeV3Args command-specific arguments
function StartLevelChangeV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_COLOR, SwitchColor.START_LEVEL_CHANGE, 3, args, ...)
end

--- Serialize v3 SWITCH_COLOR_START_LEVEL_CHANGE arguments.
---
--- @return string serialized payload
function StartLevelChangeV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, 0) -- res1
  writer:write_bool(args.ignore_start_state)
  writer:write_bool(args.up_down)
  writer:write_bool(false) -- res2
  writer:write_u8(args.color_component_id)
  writer:write_u8(args.start_level)
  writer:write_actuator_duration_set(args.duration)
  return writer.buf
end

--- Deserialize a v3 SWITCH_COLOR_START_LEVEL_CHANGE payload.
---
--- @return st.zwave.CommandClass.SwitchColor.StartLevelChangeV3Args deserialized arguments
function StartLevelChangeV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5) -- res1
  reader:read_bool("ignore_start_state")
  reader:read_bool("up_down")
  reader:read_bool() -- res2
  reader:read_u8("color_component_id")
  reader:read_u8("start_level")
  reader:read_actuator_duration_set("duration")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.StartLevelChangeV3
--- @return st.zwave.CommandClass.SwitchColor.StartLevelChangeV3Args
function StartLevelChangeV3._defaults(self)
  local args = {}
  args.ignore_start_state = self.args.ignore_start_state or false
  args.up_down = self.args.up_down or false
  args.color_component_id = self.args.color_component_id or 0
  args.start_level = self.args.start_level or 0
  args.duration = self.args.duration or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchColor.StartLevelChangeV3
--- @return st.zwave.CommandClass.SwitchColor.StartLevelChangeV3Args
function StartLevelChangeV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchColor.StartLevelChangeV3
function StartLevelChangeV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchColor.StartLevelChangeV3
function StartLevelChangeV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.color_component_id = function()
    return zw._reflect(
      SwitchColor._reflect_color_component_id,
      args.color_component_id
    )
  end
end

--- @class st.zwave.CommandClass.SwitchColor.SupportedGet
--- @alias _SupportedGet st.zwave.CommandClass.SwitchColor.SupportedGet
---
--- Dynamically versioned SWITCH_COLOR_SUPPORTED_GET
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchColor.SupportedGetV1Args
local _SupportedGet = {}
setmetatable(_SupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SWITCH_COLOR_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.SupportedGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.SwitchColor.SupportedGet
function _SupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, SwitchColor.SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SwitchColor.SupportedReport
--- @alias _SupportedReport st.zwave.CommandClass.SwitchColor.SupportedReport
---
--- Dynamically versioned SWITCH_COLOR_SUPPORTED_REPORT
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchColor.SupportedReportV1Args
local _SupportedReport = {}
setmetatable(_SupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SWITCH_COLOR_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.SupportedReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.SwitchColor.SupportedReport
function _SupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, SwitchColor.SUPPORTED_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SwitchColor.Get
--- @alias _Get st.zwave.CommandClass.SwitchColor.Get
---
--- Dynamically versioned SWITCH_COLOR_GET
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchColor.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SWITCH_COLOR_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.SwitchColor.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, SwitchColor.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SwitchColor.Report
--- @alias _Report st.zwave.CommandClass.SwitchColor.Report
---
--- Dynamically versioned SWITCH_COLOR_REPORT
---
--- Supported versions: 1,2,3; unique base versions: 1,3
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x04
--- @field public version number 1,3
--- @field public args st.zwave.CommandClass.SwitchColor.ReportV1Args|st.zwave.CommandClass.SwitchColor.ReportV3Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SWITCH_COLOR_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.ReportV1Args|st.zwave.CommandClass.SwitchColor.ReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.SwitchColor.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, SwitchColor.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SwitchColor.Set
--- @alias _Set st.zwave.CommandClass.SwitchColor.Set
---
--- Dynamically versioned SWITCH_COLOR_SET
---
--- Supported versions: 1,2,3; unique base versions: 1,2
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x05
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.SwitchColor.SetV1Args|st.zwave.CommandClass.SwitchColor.SetV2Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SWITCH_COLOR_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.SetV1Args|st.zwave.CommandClass.SwitchColor.SetV2Args command-specific arguments
--- @return st.zwave.CommandClass.SwitchColor.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, SwitchColor.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SwitchColor.StartLevelChange
--- @alias _StartLevelChange st.zwave.CommandClass.SwitchColor.StartLevelChange
---
--- Dynamically versioned SWITCH_COLOR_START_LEVEL_CHANGE
---
--- Supported versions: 1,2,3; unique base versions: 1,3
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x06
--- @field public version number 1,3
--- @field public args st.zwave.CommandClass.SwitchColor.StartLevelChangeV1Args|st.zwave.CommandClass.SwitchColor.StartLevelChangeV3Args
local _StartLevelChange = {}
setmetatable(_StartLevelChange, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SWITCH_COLOR_START_LEVEL_CHANGE object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.StartLevelChangeV1Args|st.zwave.CommandClass.SwitchColor.StartLevelChangeV3Args command-specific arguments
--- @return st.zwave.CommandClass.SwitchColor.StartLevelChange
function _StartLevelChange:construct(module, args, ...)
  return zw.Command._construct(module, SwitchColor.START_LEVEL_CHANGE, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SwitchColor.StopLevelChange
--- @alias _StopLevelChange st.zwave.CommandClass.SwitchColor.StopLevelChange
---
--- Dynamically versioned SWITCH_COLOR_STOP_LEVEL_CHANGE
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x33
--- @field public cmd_id number 0x07
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchColor.StopLevelChangeV1Args
local _StopLevelChange = {}
setmetatable(_StopLevelChange, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SWITCH_COLOR_STOP_LEVEL_CHANGE object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SwitchColor command class module instance
--- @param args st.zwave.CommandClass.SwitchColor.StopLevelChangeV1Args command-specific arguments
--- @return st.zwave.CommandClass.SwitchColor.StopLevelChange
function _StopLevelChange:construct(module, args, ...)
  return zw.Command._construct(module, SwitchColor.STOP_LEVEL_CHANGE, module._serialization_version, args, ...)
end

SwitchColor.SupportedGetV1 = SupportedGetV1
SwitchColor.SupportedReportV1 = SupportedReportV1
SwitchColor.GetV1 = GetV1
SwitchColor.ReportV1 = ReportV1
SwitchColor.SetV1 = SetV1
SwitchColor.StartLevelChangeV1 = StartLevelChangeV1
SwitchColor.StopLevelChangeV1 = StopLevelChangeV1
SwitchColor.SetV2 = SetV2
SwitchColor.ReportV3 = ReportV3
SwitchColor.StartLevelChangeV3 = StartLevelChangeV3
SwitchColor.SupportedGet = _SupportedGet
SwitchColor.SupportedReport = _SupportedReport
SwitchColor.Get = _Get
SwitchColor.Report = _Report
SwitchColor.Set = _Set
SwitchColor.StartLevelChange = _StartLevelChange
SwitchColor.StopLevelChange = _StopLevelChange

SwitchColor._lut = {
  [0] = { -- dynamically versioned constructors
    [SwitchColor.SUPPORTED_GET] = SwitchColor.SupportedGet,
    [SwitchColor.SUPPORTED_REPORT] = SwitchColor.SupportedReport,
    [SwitchColor.GET] = SwitchColor.Get,
    [SwitchColor.REPORT] = SwitchColor.Report,
    [SwitchColor.SET] = SwitchColor.Set,
    [SwitchColor.START_LEVEL_CHANGE] = SwitchColor.StartLevelChange,
    [SwitchColor.STOP_LEVEL_CHANGE] = SwitchColor.StopLevelChange
  },
  [1] = { -- version 1
    [SwitchColor.SUPPORTED_GET] = SwitchColor.SupportedGetV1,
    [SwitchColor.SUPPORTED_REPORT] = SwitchColor.SupportedReportV1,
    [SwitchColor.GET] = SwitchColor.GetV1,
    [SwitchColor.REPORT] = SwitchColor.ReportV1,
    [SwitchColor.SET] = SwitchColor.SetV1,
    [SwitchColor.START_LEVEL_CHANGE] = SwitchColor.StartLevelChangeV1,
    [SwitchColor.STOP_LEVEL_CHANGE] = SwitchColor.StopLevelChangeV1
  },
  [2] = { -- version 2
    [SwitchColor.SUPPORTED_GET] = SwitchColor.SupportedGetV1,
    [SwitchColor.SUPPORTED_REPORT] = SwitchColor.SupportedReportV1,
    [SwitchColor.GET] = SwitchColor.GetV1,
    [SwitchColor.REPORT] = SwitchColor.ReportV1,
    [SwitchColor.SET] = SwitchColor.SetV2,
    [SwitchColor.START_LEVEL_CHANGE] = SwitchColor.StartLevelChangeV1,
    [SwitchColor.STOP_LEVEL_CHANGE] = SwitchColor.StopLevelChangeV1
  },
  [3] = { -- version 3
    [SwitchColor.SUPPORTED_GET] = SwitchColor.SupportedGetV1,
    [SwitchColor.SUPPORTED_REPORT] = SwitchColor.SupportedReportV1,
    [SwitchColor.GET] = SwitchColor.GetV1,
    [SwitchColor.REPORT] = SwitchColor.ReportV3,
    [SwitchColor.SET] = SwitchColor.SetV2,
    [SwitchColor.START_LEVEL_CHANGE] = SwitchColor.StartLevelChangeV3,
    [SwitchColor.STOP_LEVEL_CHANGE] = SwitchColor.StopLevelChangeV1
  }
}
--- @class st.zwave.CommandClass.SwitchColor.color_component_id
--- @alias color_component_id st.zwave.CommandClass.SwitchColor.color_component_id
--- @field public WARM_WHITE number 0x00
--- @field public COLD_WHITE number 0x01
--- @field public RED number 0x02
--- @field public GREEN number 0x03
--- @field public BLUE number 0x04
--- @field public AMBER number 0x05
--- @field public CYAN number 0x06
--- @field public PURPLE number 0x07
local color_component_id = {
  WARM_WHITE = 0x00,
  COLD_WHITE = 0x01,
  RED = 0x02,
  GREEN = 0x03,
  BLUE = 0x04,
  AMBER = 0x05,
  CYAN = 0x06,
  PURPLE = 0x07
}
SwitchColor.color_component_id = color_component_id
SwitchColor._reflect_color_component_id = zw._reflection_builder(SwitchColor.color_component_id)


return SwitchColor
