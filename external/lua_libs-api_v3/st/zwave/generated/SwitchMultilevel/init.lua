-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.SwitchMultilevel
--- @alias SwitchMultilevel st.zwave.CommandClass.SwitchMultilevel
---
--- Supported versions: 1,2,3,4
---
--- @field public SET number 0x01 - SWITCH_MULTILEVEL_SET command id
--- @field public GET number 0x02 - SWITCH_MULTILEVEL_GET command id
--- @field public REPORT number 0x03 - SWITCH_MULTILEVEL_REPORT command id
--- @field public START_LEVEL_CHANGE number 0x04 - SWITCH_MULTILEVEL_START_LEVEL_CHANGE command id
--- @field public STOP_LEVEL_CHANGE number 0x05 - SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE command id
--- @field public SUPPORTED_GET number 0x06 - SWITCH_MULTILEVEL_SUPPORTED_GET command id
--- @field public SUPPORTED_REPORT number 0x07 - SWITCH_MULTILEVEL_SUPPORTED_REPORT command id
local SwitchMultilevel = {}
SwitchMultilevel.SET = 0x01
SwitchMultilevel.GET = 0x02
SwitchMultilevel.REPORT = 0x03
SwitchMultilevel.START_LEVEL_CHANGE = 0x04
SwitchMultilevel.STOP_LEVEL_CHANGE = 0x05
SwitchMultilevel.SUPPORTED_GET = 0x06
SwitchMultilevel.SUPPORTED_REPORT = 0x07

SwitchMultilevel._commands = {
  [SwitchMultilevel.SET] = "SET",
  [SwitchMultilevel.GET] = "GET",
  [SwitchMultilevel.REPORT] = "REPORT",
  [SwitchMultilevel.START_LEVEL_CHANGE] = "START_LEVEL_CHANGE",
  [SwitchMultilevel.STOP_LEVEL_CHANGE] = "STOP_LEVEL_CHANGE",
  [SwitchMultilevel.SUPPORTED_GET] = "SUPPORTED_GET",
  [SwitchMultilevel.SUPPORTED_REPORT] = "SUPPORTED_REPORT"
}

--- Instantiate a versioned instance of the SwitchMultilevel Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.SwitchMultilevel versioned command class instance
function SwitchMultilevel:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.SWITCH_MULTILEVEL][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(SwitchMultilevel, {
  __call = SwitchMultilevel.init
})

SwitchMultilevel._serialization_version = nil
SwitchMultilevel._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.SWITCH_MULTILEVEL] = {
  [1] = true,
  [2] = true,
  [3] = true,
  [4] = true
}

--- @class st.zwave.CommandClass.SwitchMultilevel.SetV1Args
--- @alias SetV1Args st.zwave.CommandClass.SwitchMultilevel.SetV1Args
--- @field public value integer see :lua:class:`SwitchMultilevel.value <st.zwave.CommandClass.SwitchMultilevel.value>`
local SetV1Args = {}

--- @class st.zwave.CommandClass.SwitchMultilevel.SetV1:st.zwave.Command
--- @alias SetV1 st.zwave.CommandClass.SwitchMultilevel.SetV1
---
--- v1 SWITCH_MULTILEVEL_SET
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchMultilevel.SetV1Args command-specific arguments
local SetV1 = {}
setmetatable(SetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 SWITCH_MULTILEVEL_SET object.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.SetV1Args command-specific arguments
function SetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_MULTILEVEL, SwitchMultilevel.SET, 1, args, ...)
end

--- Serialize v1 SWITCH_MULTILEVEL_SET arguments.
---
--- @return string serialized payload
function SetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.value)
  return writer.buf
end

--- Deserialize a v1 SWITCH_MULTILEVEL_SET payload.
---
--- @return st.zwave.CommandClass.SwitchMultilevel.SetV1Args deserialized arguments
function SetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.SetV1
--- @return st.zwave.CommandClass.SwitchMultilevel.SetV1Args
function SetV1._defaults(self)
  local args = {}
  args.value = self.args.value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.SetV1
--- @return st.zwave.CommandClass.SwitchMultilevel.SetV1Args
function SetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.SetV1
function SetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.SetV1
function SetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.value = function()
    return zw._reflect(
      SwitchMultilevel._reflect_value,
      args.value
    )
  end
end

--- @class st.zwave.CommandClass.SwitchMultilevel.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.SwitchMultilevel.GetV1Args
local GetV1Args = {}

--- @class st.zwave.CommandClass.SwitchMultilevel.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.SwitchMultilevel.GetV1
---
--- v1 and forward-compatible v2,v3,v4 SWITCH_MULTILEVEL_GET
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchMultilevel.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3,v4 SWITCH_MULTILEVEL_GET object.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_MULTILEVEL, SwitchMultilevel.GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3,v4 SWITCH_MULTILEVEL_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3,v4 SWITCH_MULTILEVEL_GET payload.
---
--- @return st.zwave.CommandClass.SwitchMultilevel.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.GetV1
--- @return st.zwave.CommandClass.SwitchMultilevel.GetV1Args
function GetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.GetV1
--- @return st.zwave.CommandClass.SwitchMultilevel.GetV1Args
function GetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SwitchMultilevel.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.SwitchMultilevel.ReportV1Args
--- @field public value integer see :lua:class:`SwitchMultilevel.value <st.zwave.CommandClass.SwitchMultilevel.value>`
local ReportV1Args = {}

--- @class st.zwave.CommandClass.SwitchMultilevel.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.SwitchMultilevel.ReportV1
---
--- v1 and forward-compatible v2,v3 SWITCH_MULTILEVEL_REPORT
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchMultilevel.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 SWITCH_MULTILEVEL_REPORT object.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_MULTILEVEL, SwitchMultilevel.REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 SWITCH_MULTILEVEL_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.value)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 SWITCH_MULTILEVEL_REPORT payload.
---
--- @return st.zwave.CommandClass.SwitchMultilevel.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.ReportV1
--- @return st.zwave.CommandClass.SwitchMultilevel.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.value = self.args.value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.ReportV1
--- @return st.zwave.CommandClass.SwitchMultilevel.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.ReportV1
function ReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.value = function()
    return zw._reflect(
      SwitchMultilevel._reflect_value,
      args.value
    )
  end
end

--- @class st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV1Args
--- @alias StartLevelChangeV1Args st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV1Args
--- @field public ignore_start_level boolean
--- @field public up_down boolean
--- @field public start_level integer [0,255]
local StartLevelChangeV1Args = {}

--- @class st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV1:st.zwave.Command
--- @alias StartLevelChangeV1 st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV1
---
--- v1 SWITCH_MULTILEVEL_START_LEVEL_CHANGE
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV1Args command-specific arguments
local StartLevelChangeV1 = {}
setmetatable(StartLevelChangeV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 SWITCH_MULTILEVEL_START_LEVEL_CHANGE object.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV1Args command-specific arguments
function StartLevelChangeV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_MULTILEVEL, SwitchMultilevel.START_LEVEL_CHANGE, 1, args, ...)
end

--- Serialize v1 SWITCH_MULTILEVEL_START_LEVEL_CHANGE arguments.
---
--- @return string serialized payload
function StartLevelChangeV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, 0) -- reserved1
  writer:write_bool(args.ignore_start_level)
  writer:write_bool(args.up_down)
  writer:write_bool(false) -- reserved2
  writer:write_u8(args.start_level)
  return writer.buf
end

--- Deserialize a v1 SWITCH_MULTILEVEL_START_LEVEL_CHANGE payload.
---
--- @return st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV1Args deserialized arguments
function StartLevelChangeV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5) -- reserved1
  reader:read_bool("ignore_start_level")
  reader:read_bool("up_down")
  reader:read_bool() -- reserved2
  reader:read_u8("start_level")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV1
--- @return st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV1Args
function StartLevelChangeV1._defaults(self)
  local args = {}
  args.ignore_start_level = self.args.ignore_start_level or false
  args.up_down = self.args.up_down or false
  args.start_level = self.args.start_level or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV1
--- @return st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV1Args
function StartLevelChangeV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV1
function StartLevelChangeV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV1
function StartLevelChangeV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SwitchMultilevel.StopLevelChangeV1Args
--- @alias StopLevelChangeV1Args st.zwave.CommandClass.SwitchMultilevel.StopLevelChangeV1Args
local StopLevelChangeV1Args = {}

--- @class st.zwave.CommandClass.SwitchMultilevel.StopLevelChangeV1:st.zwave.Command
--- @alias StopLevelChangeV1 st.zwave.CommandClass.SwitchMultilevel.StopLevelChangeV1
---
--- v1 and forward-compatible v2,v3,v4 SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchMultilevel.StopLevelChangeV1Args command-specific arguments
local StopLevelChangeV1 = {}
setmetatable(StopLevelChangeV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3,v4 SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE object.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.StopLevelChangeV1Args command-specific arguments
function StopLevelChangeV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_MULTILEVEL, SwitchMultilevel.STOP_LEVEL_CHANGE, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3,v4 SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE arguments.
---
--- @return string serialized payload
function StopLevelChangeV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3,v4 SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE payload.
---
--- @return st.zwave.CommandClass.SwitchMultilevel.StopLevelChangeV1Args deserialized arguments
function StopLevelChangeV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.StopLevelChangeV1
--- @return st.zwave.CommandClass.SwitchMultilevel.StopLevelChangeV1Args
function StopLevelChangeV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.StopLevelChangeV1
--- @return st.zwave.CommandClass.SwitchMultilevel.StopLevelChangeV1Args
function StopLevelChangeV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.StopLevelChangeV1
function StopLevelChangeV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.StopLevelChangeV1
function StopLevelChangeV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SwitchMultilevel.SetV2Args
--- @alias SetV2Args st.zwave.CommandClass.SwitchMultilevel.SetV2Args
--- @field public value integer see :lua:class:`SwitchMultilevel.value <st.zwave.CommandClass.SwitchMultilevel.value>`
--- @field public duration number|string [0,7620] or "default"
local SetV2Args = {}

--- @class st.zwave.CommandClass.SwitchMultilevel.SetV2:st.zwave.Command
--- @alias SetV2 st.zwave.CommandClass.SwitchMultilevel.SetV2
---
--- v2 and forward-compatible v3,v4 SWITCH_MULTILEVEL_SET
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x01
--- @field public version number 2
--- @field public args st.zwave.CommandClass.SwitchMultilevel.SetV2Args command-specific arguments
local SetV2 = {}
setmetatable(SetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4 SWITCH_MULTILEVEL_SET object.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.SetV2Args command-specific arguments
function SetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_MULTILEVEL, SwitchMultilevel.SET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4 SWITCH_MULTILEVEL_SET arguments.
---
--- @return string serialized payload
function SetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.value)
  writer:write_actuator_duration_set(args.duration)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4 SWITCH_MULTILEVEL_SET payload.
---
--- @return st.zwave.CommandClass.SwitchMultilevel.SetV2Args deserialized arguments
function SetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("value")
  reader:read_actuator_duration_set("duration")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.SetV2
--- @return st.zwave.CommandClass.SwitchMultilevel.SetV2Args
function SetV2._defaults(self)
  local args = {}
  args.value = self.args.value or 0
  args.duration = self.args.duration or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.SetV2
--- @return st.zwave.CommandClass.SwitchMultilevel.SetV2Args
function SetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.SetV2
function SetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.SetV2
function SetV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.value = function()
    return zw._reflect(
      SwitchMultilevel._reflect_value,
      args.value
    )
  end
end

--- @class st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV2Args
--- @alias StartLevelChangeV2Args st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV2Args
--- @field public ignore_start_level boolean
--- @field public up_down boolean
--- @field public start_level integer [0,255]
--- @field public duration number|string [0,7620] or "default"
local StartLevelChangeV2Args = {}

--- @class st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV2:st.zwave.Command
--- @alias StartLevelChangeV2 st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV2
---
--- v2 SWITCH_MULTILEVEL_START_LEVEL_CHANGE
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x04
--- @field public version number 2
--- @field public args st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV2Args command-specific arguments
local StartLevelChangeV2 = {}
setmetatable(StartLevelChangeV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 SWITCH_MULTILEVEL_START_LEVEL_CHANGE object.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV2Args command-specific arguments
function StartLevelChangeV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_MULTILEVEL, SwitchMultilevel.START_LEVEL_CHANGE, 2, args, ...)
end

--- Serialize v2 SWITCH_MULTILEVEL_START_LEVEL_CHANGE arguments.
---
--- @return string serialized payload
function StartLevelChangeV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, 0) -- reserved1
  writer:write_bool(args.ignore_start_level)
  writer:write_bool(args.up_down)
  writer:write_bool(false) -- reserved2
  writer:write_u8(args.start_level)
  writer:write_actuator_duration_set(args.duration)
  return writer.buf
end

--- Deserialize a v2 SWITCH_MULTILEVEL_START_LEVEL_CHANGE payload.
---
--- @return st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV2Args deserialized arguments
function StartLevelChangeV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5) -- reserved1
  reader:read_bool("ignore_start_level")
  reader:read_bool("up_down")
  reader:read_bool() -- reserved2
  reader:read_u8("start_level")
  reader:read_actuator_duration_set("duration")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV2
--- @return st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV2Args
function StartLevelChangeV2._defaults(self)
  local args = {}
  args.ignore_start_level = self.args.ignore_start_level or false
  args.up_down = self.args.up_down or false
  args.start_level = self.args.start_level or 0
  args.duration = self.args.duration or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV2
--- @return st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV2Args
function StartLevelChangeV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV2
function StartLevelChangeV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV2
function StartLevelChangeV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV3Args
--- @alias StartLevelChangeV3Args st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV3Args
--- @field public inc_dec integer see :lua:class:`SwitchMultilevel.inc_dec <st.zwave.CommandClass.SwitchMultilevel.inc_dec>`
--- @field public ignore_start_level boolean
--- @field public up_down integer see :lua:class:`SwitchMultilevel.up_down <st.zwave.CommandClass.SwitchMultilevel.up_down>`
--- @field public start_level integer [0,255]
--- @field public duration number|string [0,7620] or "default"
--- @field public step_size integer [0,255]
local StartLevelChangeV3Args = {}

--- @class st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV3:st.zwave.Command
--- @alias StartLevelChangeV3 st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV3
---
--- v3 and forward-compatible v4 SWITCH_MULTILEVEL_START_LEVEL_CHANGE
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x04
--- @field public version number 3
--- @field public args st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV3Args command-specific arguments
local StartLevelChangeV3 = {}
setmetatable(StartLevelChangeV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4 SWITCH_MULTILEVEL_START_LEVEL_CHANGE object.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV3Args command-specific arguments
function StartLevelChangeV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_MULTILEVEL, SwitchMultilevel.START_LEVEL_CHANGE, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4 SWITCH_MULTILEVEL_START_LEVEL_CHANGE arguments.
---
--- @return string serialized payload
function StartLevelChangeV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(3, 0) -- reserved
  writer:write_bits(2, args.inc_dec)
  writer:write_bool(args.ignore_start_level)
  writer:write_bits(2, args.up_down)
  writer:write_u8(args.start_level)
  writer:write_actuator_duration_set(args.duration)
  writer:write_u8(args.step_size)
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4 SWITCH_MULTILEVEL_START_LEVEL_CHANGE payload.
---
--- @return st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV3Args deserialized arguments
function StartLevelChangeV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(3) -- reserved
  reader:read_bits(2, "inc_dec")
  reader:read_bool("ignore_start_level")
  reader:read_bits(2, "up_down")
  reader:read_u8("start_level")
  reader:read_actuator_duration_set("duration")
  reader:read_u8("step_size")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV3
--- @return st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV3Args
function StartLevelChangeV3._defaults(self)
  local args = {}
  args.inc_dec = self.args.inc_dec or 0
  args.ignore_start_level = self.args.ignore_start_level or false
  args.up_down = self.args.up_down or 0
  args.start_level = self.args.start_level or 0
  args.duration = self.args.duration or 0
  args.step_size = self.args.step_size or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV3
--- @return st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV3Args
function StartLevelChangeV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV3
function StartLevelChangeV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV3
function StartLevelChangeV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.inc_dec = function()
    return zw._reflect(
      SwitchMultilevel._reflect_inc_dec,
      args.inc_dec
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.up_down = function()
    return zw._reflect(
      SwitchMultilevel._reflect_up_down,
      args.up_down
    )
  end
end

--- @class st.zwave.CommandClass.SwitchMultilevel.SupportedGetV3Args
--- @alias SupportedGetV3Args st.zwave.CommandClass.SwitchMultilevel.SupportedGetV3Args
local SupportedGetV3Args = {}

--- @class st.zwave.CommandClass.SwitchMultilevel.SupportedGetV3:st.zwave.Command
--- @alias SupportedGetV3 st.zwave.CommandClass.SwitchMultilevel.SupportedGetV3
---
--- v3 and forward-compatible v4 SWITCH_MULTILEVEL_SUPPORTED_GET
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x06
--- @field public version number 3
--- @field public args st.zwave.CommandClass.SwitchMultilevel.SupportedGetV3Args command-specific arguments
local SupportedGetV3 = {}
setmetatable(SupportedGetV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4 SWITCH_MULTILEVEL_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.SupportedGetV3Args command-specific arguments
function SupportedGetV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_MULTILEVEL, SwitchMultilevel.SUPPORTED_GET, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4 SWITCH_MULTILEVEL_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function SupportedGetV3:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4 SWITCH_MULTILEVEL_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.SwitchMultilevel.SupportedGetV3Args deserialized arguments
function SupportedGetV3:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.SupportedGetV3
--- @return st.zwave.CommandClass.SwitchMultilevel.SupportedGetV3Args
function SupportedGetV3._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.SupportedGetV3
--- @return st.zwave.CommandClass.SwitchMultilevel.SupportedGetV3Args
function SupportedGetV3._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.SupportedGetV3
function SupportedGetV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.SupportedGetV3
function SupportedGetV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SwitchMultilevel.SupportedReportV3Args
--- @alias SupportedReportV3Args st.zwave.CommandClass.SwitchMultilevel.SupportedReportV3Args
--- @field public primary_switch_type integer [0,31]
--- @field public secondary_switch_type integer [0,31]
local SupportedReportV3Args = {}

--- @class st.zwave.CommandClass.SwitchMultilevel.SupportedReportV3:st.zwave.Command
--- @alias SupportedReportV3 st.zwave.CommandClass.SwitchMultilevel.SupportedReportV3
---
--- v3 and forward-compatible v4 SWITCH_MULTILEVEL_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x07
--- @field public version number 3
--- @field public args st.zwave.CommandClass.SwitchMultilevel.SupportedReportV3Args command-specific arguments
local SupportedReportV3 = {}
setmetatable(SupportedReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4 SWITCH_MULTILEVEL_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.SupportedReportV3Args command-specific arguments
function SupportedReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_MULTILEVEL, SwitchMultilevel.SUPPORTED_REPORT, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4 SWITCH_MULTILEVEL_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, args.primary_switch_type)
  writer:write_bits(3, 0) -- reserved1
  writer:write_bits(5, args.secondary_switch_type)
  writer:write_bits(3, 0) -- reserved2
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4 SWITCH_MULTILEVEL_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.SwitchMultilevel.SupportedReportV3Args deserialized arguments
function SupportedReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "primary_switch_type")
  reader:read_bits(3) -- reserved1
  reader:read_bits(5, "secondary_switch_type")
  reader:read_bits(3) -- reserved2
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.SupportedReportV3
--- @return st.zwave.CommandClass.SwitchMultilevel.SupportedReportV3Args
function SupportedReportV3._defaults(self)
  local args = {}
  args.primary_switch_type = self.args.primary_switch_type or 0
  args.secondary_switch_type = self.args.secondary_switch_type or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.SupportedReportV3
--- @return st.zwave.CommandClass.SwitchMultilevel.SupportedReportV3Args
function SupportedReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.SupportedReportV3
function SupportedReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.SupportedReportV3
function SupportedReportV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.SwitchMultilevel.ReportV4Args
--- @alias ReportV4Args st.zwave.CommandClass.SwitchMultilevel.ReportV4Args
--- @field public current_value integer see :lua:class:`SwitchMultilevel.value <st.zwave.CommandClass.SwitchMultilevel.value>`
--- @field public target_value integer see :lua:class:`SwitchMultilevel.value <st.zwave.CommandClass.SwitchMultilevel.value>`
--- @field public duration number|string [0,7560] or "unknown" or "reserved"
local ReportV4Args = {}

--- @class st.zwave.CommandClass.SwitchMultilevel.ReportV4:st.zwave.Command
--- @alias ReportV4 st.zwave.CommandClass.SwitchMultilevel.ReportV4
---
--- v4 SWITCH_MULTILEVEL_REPORT
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x03
--- @field public version number 4
--- @field public args st.zwave.CommandClass.SwitchMultilevel.ReportV4Args command-specific arguments
local ReportV4 = {}
setmetatable(ReportV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 SWITCH_MULTILEVEL_REPORT object.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.ReportV4Args command-specific arguments
function ReportV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.SWITCH_MULTILEVEL, SwitchMultilevel.REPORT, 4, args, ...)
end

--- Serialize v4 SWITCH_MULTILEVEL_REPORT arguments.
---
--- @return string serialized payload
function ReportV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.current_value)
  writer:write_u8(args.target_value)
  writer:write_actuator_duration_report(args.duration)
  return writer.buf
end

--- Deserialize a v4 SWITCH_MULTILEVEL_REPORT payload.
---
--- @return st.zwave.CommandClass.SwitchMultilevel.ReportV4Args deserialized arguments
function ReportV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("current_value")
  reader:read_u8("target_value")
  reader:read_actuator_duration_report("duration")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.ReportV4
--- @return st.zwave.CommandClass.SwitchMultilevel.ReportV4Args
function ReportV4._defaults(self)
  local args = {}
  args.current_value = self.args.current_value or 0
  args.target_value = self.args.target_value or 0
  args.duration = self.args.duration or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.ReportV4
--- @return st.zwave.CommandClass.SwitchMultilevel.ReportV4Args
function ReportV4._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.ReportV4
function ReportV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.SwitchMultilevel.ReportV4
function ReportV4._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.current_value = function()
    return zw._reflect(
      SwitchMultilevel._reflect_value,
      args.current_value
    )
  end
end

--- @class st.zwave.CommandClass.SwitchMultilevel.Set
--- @alias _Set st.zwave.CommandClass.SwitchMultilevel.Set
---
--- Dynamically versioned SWITCH_MULTILEVEL_SET
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x01
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.SwitchMultilevel.SetV1Args|st.zwave.CommandClass.SwitchMultilevel.SetV2Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SWITCH_MULTILEVEL_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.SetV1Args|st.zwave.CommandClass.SwitchMultilevel.SetV2Args command-specific arguments
--- @return st.zwave.CommandClass.SwitchMultilevel.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, SwitchMultilevel.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SwitchMultilevel.Get
--- @alias _Get st.zwave.CommandClass.SwitchMultilevel.Get
---
--- Dynamically versioned SWITCH_MULTILEVEL_GET
---
--- Supported versions: 1,2,3,4; unique base versions: 1
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchMultilevel.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SWITCH_MULTILEVEL_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.SwitchMultilevel.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, SwitchMultilevel.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SwitchMultilevel.Report
--- @alias _Report st.zwave.CommandClass.SwitchMultilevel.Report
---
--- Dynamically versioned SWITCH_MULTILEVEL_REPORT
---
--- Supported versions: 1,2,3,4; unique base versions: 1,4
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x03
--- @field public version number 1,4
--- @field public args st.zwave.CommandClass.SwitchMultilevel.ReportV1Args|st.zwave.CommandClass.SwitchMultilevel.ReportV4Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SWITCH_MULTILEVEL_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.ReportV1Args|st.zwave.CommandClass.SwitchMultilevel.ReportV4Args command-specific arguments
--- @return st.zwave.CommandClass.SwitchMultilevel.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, SwitchMultilevel.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SwitchMultilevel.StartLevelChange
--- @alias _StartLevelChange st.zwave.CommandClass.SwitchMultilevel.StartLevelChange
---
--- Dynamically versioned SWITCH_MULTILEVEL_START_LEVEL_CHANGE
---
--- Supported versions: 1,2,3,4; unique base versions: 1,2,3
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x04
--- @field public version number 1,2,3
--- @field public args st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV1Args|st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV2Args|st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV3Args
local _StartLevelChange = {}
setmetatable(_StartLevelChange, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SWITCH_MULTILEVEL_START_LEVEL_CHANGE object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV1Args|st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV2Args|st.zwave.CommandClass.SwitchMultilevel.StartLevelChangeV3Args command-specific arguments
--- @return st.zwave.CommandClass.SwitchMultilevel.StartLevelChange
function _StartLevelChange:construct(module, args, ...)
  return zw.Command._construct(module, SwitchMultilevel.START_LEVEL_CHANGE, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SwitchMultilevel.StopLevelChange
--- @alias _StopLevelChange st.zwave.CommandClass.SwitchMultilevel.StopLevelChange
---
--- Dynamically versioned SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE
---
--- Supported versions: 1,2,3,4; unique base versions: 1
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.SwitchMultilevel.StopLevelChangeV1Args
local _StopLevelChange = {}
setmetatable(_StopLevelChange, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SWITCH_MULTILEVEL_STOP_LEVEL_CHANGE object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.StopLevelChangeV1Args command-specific arguments
--- @return st.zwave.CommandClass.SwitchMultilevel.StopLevelChange
function _StopLevelChange:construct(module, args, ...)
  return zw.Command._construct(module, SwitchMultilevel.STOP_LEVEL_CHANGE, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SwitchMultilevel.SupportedGet
--- @alias _SupportedGet st.zwave.CommandClass.SwitchMultilevel.SupportedGet
---
--- Dynamically versioned SWITCH_MULTILEVEL_SUPPORTED_GET
---
--- Supported versions: 3,4; unique base versions: 3
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x06
--- @field public version number 3
--- @field public args st.zwave.CommandClass.SwitchMultilevel.SupportedGetV3Args
local _SupportedGet = {}
setmetatable(_SupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SWITCH_MULTILEVEL_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.SupportedGetV3Args command-specific arguments
--- @return st.zwave.CommandClass.SwitchMultilevel.SupportedGet
function _SupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, SwitchMultilevel.SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.SwitchMultilevel.SupportedReport
--- @alias _SupportedReport st.zwave.CommandClass.SwitchMultilevel.SupportedReport
---
--- Dynamically versioned SWITCH_MULTILEVEL_SUPPORTED_REPORT
---
--- Supported versions: 3,4; unique base versions: 3
---
--- @field public cmd_class number 0x26
--- @field public cmd_id number 0x07
--- @field public version number 3
--- @field public args st.zwave.CommandClass.SwitchMultilevel.SupportedReportV3Args
local _SupportedReport = {}
setmetatable(_SupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a SWITCH_MULTILEVEL_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.SwitchMultilevel command class module instance
--- @param args st.zwave.CommandClass.SwitchMultilevel.SupportedReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.SwitchMultilevel.SupportedReport
function _SupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, SwitchMultilevel.SUPPORTED_REPORT, module._serialization_version, args, ...)
end

SwitchMultilevel.SetV1 = SetV1
SwitchMultilevel.GetV1 = GetV1
SwitchMultilevel.ReportV1 = ReportV1
SwitchMultilevel.StartLevelChangeV1 = StartLevelChangeV1
SwitchMultilevel.StopLevelChangeV1 = StopLevelChangeV1
SwitchMultilevel.SetV2 = SetV2
SwitchMultilevel.StartLevelChangeV2 = StartLevelChangeV2
SwitchMultilevel.StartLevelChangeV3 = StartLevelChangeV3
SwitchMultilevel.SupportedGetV3 = SupportedGetV3
SwitchMultilevel.SupportedReportV3 = SupportedReportV3
SwitchMultilevel.ReportV4 = ReportV4
SwitchMultilevel.Set = _Set
SwitchMultilevel.Get = _Get
SwitchMultilevel.Report = _Report
SwitchMultilevel.StartLevelChange = _StartLevelChange
SwitchMultilevel.StopLevelChange = _StopLevelChange
SwitchMultilevel.SupportedGet = _SupportedGet
SwitchMultilevel.SupportedReport = _SupportedReport

SwitchMultilevel._lut = {
  [0] = { -- dynamically versioned constructors
    [SwitchMultilevel.SET] = SwitchMultilevel.Set,
    [SwitchMultilevel.GET] = SwitchMultilevel.Get,
    [SwitchMultilevel.REPORT] = SwitchMultilevel.Report,
    [SwitchMultilevel.START_LEVEL_CHANGE] = SwitchMultilevel.StartLevelChange,
    [SwitchMultilevel.STOP_LEVEL_CHANGE] = SwitchMultilevel.StopLevelChange,
    [SwitchMultilevel.SUPPORTED_GET] = SwitchMultilevel.SupportedGet,
    [SwitchMultilevel.SUPPORTED_REPORT] = SwitchMultilevel.SupportedReport
  },
  [1] = { -- version 1
    [SwitchMultilevel.SET] = SwitchMultilevel.SetV1,
    [SwitchMultilevel.GET] = SwitchMultilevel.GetV1,
    [SwitchMultilevel.REPORT] = SwitchMultilevel.ReportV1,
    [SwitchMultilevel.START_LEVEL_CHANGE] = SwitchMultilevel.StartLevelChangeV1,
    [SwitchMultilevel.STOP_LEVEL_CHANGE] = SwitchMultilevel.StopLevelChangeV1
  },
  [2] = { -- version 2
    [SwitchMultilevel.SET] = SwitchMultilevel.SetV2,
    [SwitchMultilevel.GET] = SwitchMultilevel.GetV1,
    [SwitchMultilevel.REPORT] = SwitchMultilevel.ReportV1,
    [SwitchMultilevel.START_LEVEL_CHANGE] = SwitchMultilevel.StartLevelChangeV2,
    [SwitchMultilevel.STOP_LEVEL_CHANGE] = SwitchMultilevel.StopLevelChangeV1
  },
  [3] = { -- version 3
    [SwitchMultilevel.SET] = SwitchMultilevel.SetV2,
    [SwitchMultilevel.GET] = SwitchMultilevel.GetV1,
    [SwitchMultilevel.REPORT] = SwitchMultilevel.ReportV1,
    [SwitchMultilevel.START_LEVEL_CHANGE] = SwitchMultilevel.StartLevelChangeV3,
    [SwitchMultilevel.STOP_LEVEL_CHANGE] = SwitchMultilevel.StopLevelChangeV1,
    [SwitchMultilevel.SUPPORTED_GET] = SwitchMultilevel.SupportedGetV3,
    [SwitchMultilevel.SUPPORTED_REPORT] = SwitchMultilevel.SupportedReportV3
  },
  [4] = { -- version 4
    [SwitchMultilevel.SET] = SwitchMultilevel.SetV2,
    [SwitchMultilevel.GET] = SwitchMultilevel.GetV1,
    [SwitchMultilevel.REPORT] = SwitchMultilevel.ReportV4,
    [SwitchMultilevel.START_LEVEL_CHANGE] = SwitchMultilevel.StartLevelChangeV3,
    [SwitchMultilevel.STOP_LEVEL_CHANGE] = SwitchMultilevel.StopLevelChangeV1,
    [SwitchMultilevel.SUPPORTED_GET] = SwitchMultilevel.SupportedGetV3,
    [SwitchMultilevel.SUPPORTED_REPORT] = SwitchMultilevel.SupportedReportV3
  }
}
--- @class st.zwave.CommandClass.SwitchMultilevel.inc_dec
--- @alias inc_dec st.zwave.CommandClass.SwitchMultilevel.inc_dec
--- @field public INCREMENT number 0x00
--- @field public DECREMENT number 0x01
--- @field public NONE number 0x03
local inc_dec = {
  INCREMENT = 0x00,
  DECREMENT = 0x01,
  NONE = 0x03
}
SwitchMultilevel.inc_dec = inc_dec
SwitchMultilevel._reflect_inc_dec = zw._reflection_builder(SwitchMultilevel.inc_dec)

--- @class st.zwave.CommandClass.SwitchMultilevel.up_down
--- @alias up_down st.zwave.CommandClass.SwitchMultilevel.up_down
--- @field public UP number 0x00
--- @field public DOWN number 0x01
--- @field public NONE number 0x03
local up_down = {
  UP = 0x00,
  DOWN = 0x01,
  NONE = 0x03
}
SwitchMultilevel.up_down = up_down
SwitchMultilevel._reflect_up_down = zw._reflection_builder(SwitchMultilevel.up_down)

--- @class st.zwave.CommandClass.SwitchMultilevel.value
--- @alias value st.zwave.CommandClass.SwitchMultilevel.value
--- @field public OFF_DISABLE number 0x00
--- @field public ON_ENABLE number 0xFF
local value = {
  OFF_DISABLE = 0x00,
  ON_ENABLE = 0xFF
}
SwitchMultilevel.value = value
SwitchMultilevel._reflect_value = zw._reflection_builder(SwitchMultilevel.value)


return SwitchMultilevel
