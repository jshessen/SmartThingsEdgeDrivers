-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.ThermostatFanMode
--- @alias ThermostatFanMode st.zwave.CommandClass.ThermostatFanMode
---
--- Supported versions: 1,2,3,4,5
---
--- @field public SET number 0x01 - THERMOSTAT_FAN_MODE_SET command id
--- @field public GET number 0x02 - THERMOSTAT_FAN_MODE_GET command id
--- @field public REPORT number 0x03 - THERMOSTAT_FAN_MODE_REPORT command id
--- @field public SUPPORTED_GET number 0x04 - THERMOSTAT_FAN_MODE_SUPPORTED_GET command id
--- @field public SUPPORTED_REPORT number 0x05 - THERMOSTAT_FAN_MODE_SUPPORTED_REPORT command id
local ThermostatFanMode = {}
ThermostatFanMode.SET = 0x01
ThermostatFanMode.GET = 0x02
ThermostatFanMode.REPORT = 0x03
ThermostatFanMode.SUPPORTED_GET = 0x04
ThermostatFanMode.SUPPORTED_REPORT = 0x05

ThermostatFanMode._commands = {
  [ThermostatFanMode.SET] = "SET",
  [ThermostatFanMode.GET] = "GET",
  [ThermostatFanMode.REPORT] = "REPORT",
  [ThermostatFanMode.SUPPORTED_GET] = "SUPPORTED_GET",
  [ThermostatFanMode.SUPPORTED_REPORT] = "SUPPORTED_REPORT"
}

--- Instantiate a versioned instance of the ThermostatFanMode Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.ThermostatFanMode versioned command class instance
function ThermostatFanMode:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.THERMOSTAT_FAN_MODE][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(ThermostatFanMode, {
  __call = ThermostatFanMode.init
})

ThermostatFanMode._serialization_version = nil
ThermostatFanMode._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.THERMOSTAT_FAN_MODE] = {
  [1] = true,
  [2] = true,
  [3] = true,
  [4] = true,
  [5] = true
}

--- @class st.zwave.CommandClass.ThermostatFanMode.SetV1Args
--- @alias SetV1Args st.zwave.CommandClass.ThermostatFanMode.SetV1Args
--- @field public fan_mode integer see :lua:class:`ThermostatFanMode.fan_mode <st.zwave.CommandClass.ThermostatFanMode.fan_mode>`
local SetV1Args = {}

--- @class st.zwave.CommandClass.ThermostatFanMode.SetV1:st.zwave.Command
--- @alias SetV1 st.zwave.CommandClass.ThermostatFanMode.SetV1
---
--- v1 THERMOSTAT_FAN_MODE_SET
---
--- @field public cmd_class number 0x44
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatFanMode.SetV1Args command-specific arguments
local SetV1 = {}
setmetatable(SetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 THERMOSTAT_FAN_MODE_SET object.
---
--- @param module st.zwave.CommandClass.ThermostatFanMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatFanMode.SetV1Args command-specific arguments
function SetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_FAN_MODE, ThermostatFanMode.SET, 1, args, ...)
end

--- Serialize v1 THERMOSTAT_FAN_MODE_SET arguments.
---
--- @return string serialized payload
function SetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(4, args.fan_mode)
  writer:write_bits(4, 0) -- reserved
  return writer.buf
end

--- Deserialize a v1 THERMOSTAT_FAN_MODE_SET payload.
---
--- @return st.zwave.CommandClass.ThermostatFanMode.SetV1Args deserialized arguments
function SetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(4, "fan_mode")
  reader:read_bits(4) -- reserved
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SetV1
--- @return st.zwave.CommandClass.ThermostatFanMode.SetV1Args
function SetV1._defaults(self)
  local args = {}
  args.fan_mode = self.args.fan_mode or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SetV1
--- @return st.zwave.CommandClass.ThermostatFanMode.SetV1Args
function SetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SetV1
function SetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SetV1
function SetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.fan_mode = function()
    return zw._reflect(
      ThermostatFanMode._reflect_fan_mode,
      args.fan_mode
    )
  end
end

--- @class st.zwave.CommandClass.ThermostatFanMode.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.ThermostatFanMode.GetV1Args
local GetV1Args = {}

--- @class st.zwave.CommandClass.ThermostatFanMode.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.ThermostatFanMode.GetV1
---
--- v1 and forward-compatible v2,v3,v4,v5 THERMOSTAT_FAN_MODE_GET
---
--- @field public cmd_class number 0x44
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatFanMode.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3,v4,v5 THERMOSTAT_FAN_MODE_GET object.
---
--- @param module st.zwave.CommandClass.ThermostatFanMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatFanMode.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_FAN_MODE, ThermostatFanMode.GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3,v4,v5 THERMOSTAT_FAN_MODE_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3,v4,v5 THERMOSTAT_FAN_MODE_GET payload.
---
--- @return st.zwave.CommandClass.ThermostatFanMode.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.GetV1
--- @return st.zwave.CommandClass.ThermostatFanMode.GetV1Args
function GetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.GetV1
--- @return st.zwave.CommandClass.ThermostatFanMode.GetV1Args
function GetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatFanMode.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.ThermostatFanMode.ReportV1Args
--- @field public fan_mode integer see :lua:class:`ThermostatFanMode.fan_mode <st.zwave.CommandClass.ThermostatFanMode.fan_mode>`
local ReportV1Args = {}

--- @class st.zwave.CommandClass.ThermostatFanMode.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.ThermostatFanMode.ReportV1
---
--- v1 and forward-compatible v2 THERMOSTAT_FAN_MODE_REPORT
---
--- @field public cmd_class number 0x44
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatFanMode.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 THERMOSTAT_FAN_MODE_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatFanMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatFanMode.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_FAN_MODE, ThermostatFanMode.REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 THERMOSTAT_FAN_MODE_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(4, args.fan_mode)
  writer:write_bits(4, 0) -- reserved
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 THERMOSTAT_FAN_MODE_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatFanMode.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(4, "fan_mode")
  reader:read_bits(4) -- reserved
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.ReportV1
--- @return st.zwave.CommandClass.ThermostatFanMode.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.fan_mode = self.args.fan_mode or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.ReportV1
--- @return st.zwave.CommandClass.ThermostatFanMode.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.ReportV1
function ReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.fan_mode = function()
    return zw._reflect(
      ThermostatFanMode._reflect_fan_mode,
      args.fan_mode
    )
  end
end

--- @class st.zwave.CommandClass.ThermostatFanMode.SupportedGetV1Args
--- @alias SupportedGetV1Args st.zwave.CommandClass.ThermostatFanMode.SupportedGetV1Args
local SupportedGetV1Args = {}

--- @class st.zwave.CommandClass.ThermostatFanMode.SupportedGetV1:st.zwave.Command
--- @alias SupportedGetV1 st.zwave.CommandClass.ThermostatFanMode.SupportedGetV1
---
--- v1 and forward-compatible v2,v3,v4,v5 THERMOSTAT_FAN_MODE_SUPPORTED_GET
---
--- @field public cmd_class number 0x44
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatFanMode.SupportedGetV1Args command-specific arguments
local SupportedGetV1 = {}
setmetatable(SupportedGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3,v4,v5 THERMOSTAT_FAN_MODE_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.ThermostatFanMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatFanMode.SupportedGetV1Args command-specific arguments
function SupportedGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_FAN_MODE, ThermostatFanMode.SUPPORTED_GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3,v4,v5 THERMOSTAT_FAN_MODE_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function SupportedGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3,v4,v5 THERMOSTAT_FAN_MODE_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedGetV1Args deserialized arguments
function SupportedGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedGetV1
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedGetV1Args
function SupportedGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedGetV1
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedGetV1Args
function SupportedGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedGetV1
function SupportedGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedGetV1
function SupportedGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatFanMode.SupportedReportV1Args
--- @alias SupportedReportV1Args st.zwave.CommandClass.ThermostatFanMode.SupportedReportV1Args
--- @field public auto boolean
--- @field public on boolean
--- @field public auto_high boolean
--- @field public on_high boolean
local SupportedReportV1Args = {}

--- @class st.zwave.CommandClass.ThermostatFanMode.SupportedReportV1:st.zwave.Command
--- @alias SupportedReportV1 st.zwave.CommandClass.ThermostatFanMode.SupportedReportV1
---
--- v1 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x44
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatFanMode.SupportedReportV1Args command-specific arguments
local SupportedReportV1 = {}
setmetatable(SupportedReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatFanMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatFanMode.SupportedReportV1Args command-specific arguments
function SupportedReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_FAN_MODE, ThermostatFanMode.SUPPORTED_REPORT, 1, args, ...)
end

--- Serialize v1 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.auto)
  writer:write_bool(args.on)
  writer:write_bool(args.auto_high)
  writer:write_bool(args.on_high)
  return writer.buf
end

--- Deserialize a v1 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedReportV1Args deserialized arguments
function SupportedReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("auto")
  reader:read_bool("on")
  reader:read_bool("auto_high")
  reader:read_bool("on_high")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedReportV1
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedReportV1Args
function SupportedReportV1._defaults(self)
  local args = {}
  args.auto = self.args.auto or false
  args.on = self.args.on or false
  args.auto_high = self.args.auto_high or false
  args.on_high = self.args.on_high or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedReportV1
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedReportV1Args
function SupportedReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedReportV1
function SupportedReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedReportV1
function SupportedReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatFanMode.SetV2Args
--- @alias SetV2Args st.zwave.CommandClass.ThermostatFanMode.SetV2Args
--- @field public fan_mode integer see :lua:class:`ThermostatFanMode.fan_mode <st.zwave.CommandClass.ThermostatFanMode.fan_mode>`
--- @field public off boolean
local SetV2Args = {}

--- @class st.zwave.CommandClass.ThermostatFanMode.SetV2:st.zwave.Command
--- @alias SetV2 st.zwave.CommandClass.ThermostatFanMode.SetV2
---
--- v2 and forward-compatible v3,v4,v5 THERMOSTAT_FAN_MODE_SET
---
--- @field public cmd_class number 0x44
--- @field public cmd_id number 0x01
--- @field public version number 2
--- @field public args st.zwave.CommandClass.ThermostatFanMode.SetV2Args command-specific arguments
local SetV2 = {}
setmetatable(SetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3,v4,v5 THERMOSTAT_FAN_MODE_SET object.
---
--- @param module st.zwave.CommandClass.ThermostatFanMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatFanMode.SetV2Args command-specific arguments
function SetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_FAN_MODE, ThermostatFanMode.SET, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3,v4,v5 THERMOSTAT_FAN_MODE_SET arguments.
---
--- @return string serialized payload
function SetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(4, args.fan_mode)
  writer:write_bits(3, 0) -- reserved
  writer:write_bool(args.off)
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3,v4,v5 THERMOSTAT_FAN_MODE_SET payload.
---
--- @return st.zwave.CommandClass.ThermostatFanMode.SetV2Args deserialized arguments
function SetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(4, "fan_mode")
  reader:read_bits(3) -- reserved
  reader:read_bool("off")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SetV2
--- @return st.zwave.CommandClass.ThermostatFanMode.SetV2Args
function SetV2._defaults(self)
  local args = {}
  args.fan_mode = self.args.fan_mode or 0
  args.off = self.args.off or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SetV2
--- @return st.zwave.CommandClass.ThermostatFanMode.SetV2Args
function SetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SetV2
function SetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SetV2
function SetV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.fan_mode = function()
    return zw._reflect(
      ThermostatFanMode._reflect_fan_mode,
      args.fan_mode
    )
  end
end

--- @class st.zwave.CommandClass.ThermostatFanMode.SupportedReportV2Args
--- @alias SupportedReportV2Args st.zwave.CommandClass.ThermostatFanMode.SupportedReportV2Args
--- @field public auto boolean
--- @field public low boolean
--- @field public auto_high boolean
--- @field public high boolean
--- @field public auto_medium boolean
--- @field public medium boolean
local SupportedReportV2Args = {}

--- @class st.zwave.CommandClass.ThermostatFanMode.SupportedReportV2:st.zwave.Command
--- @alias SupportedReportV2 st.zwave.CommandClass.ThermostatFanMode.SupportedReportV2
---
--- v2 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x44
--- @field public cmd_id number 0x05
--- @field public version number 2
--- @field public args st.zwave.CommandClass.ThermostatFanMode.SupportedReportV2Args command-specific arguments
local SupportedReportV2 = {}
setmetatable(SupportedReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatFanMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatFanMode.SupportedReportV2Args command-specific arguments
function SupportedReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_FAN_MODE, ThermostatFanMode.SUPPORTED_REPORT, 2, args, ...)
end

--- Serialize v2 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.auto)
  writer:write_bool(args.low)
  writer:write_bool(args.auto_high)
  writer:write_bool(args.high)
  writer:write_bool(args.auto_medium)
  writer:write_bool(args.medium)
  return writer.buf
end

--- Deserialize a v2 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedReportV2Args deserialized arguments
function SupportedReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("auto")
  reader:read_bool("low")
  reader:read_bool("auto_high")
  reader:read_bool("high")
  reader:read_bool("auto_medium")
  reader:read_bool("medium")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedReportV2
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedReportV2Args
function SupportedReportV2._defaults(self)
  local args = {}
  args.auto = self.args.auto or false
  args.low = self.args.low or false
  args.auto_high = self.args.auto_high or false
  args.high = self.args.high or false
  args.auto_medium = self.args.auto_medium or false
  args.medium = self.args.medium or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedReportV2
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedReportV2Args
function SupportedReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedReportV2
function SupportedReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedReportV2
function SupportedReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatFanMode.ReportV3Args
--- @alias ReportV3Args st.zwave.CommandClass.ThermostatFanMode.ReportV3Args
--- @field public fan_mode integer see :lua:class:`ThermostatFanMode.fan_mode <st.zwave.CommandClass.ThermostatFanMode.fan_mode>`
--- @field public off boolean
local ReportV3Args = {}

--- @class st.zwave.CommandClass.ThermostatFanMode.ReportV3:st.zwave.Command
--- @alias ReportV3 st.zwave.CommandClass.ThermostatFanMode.ReportV3
---
--- v3 and forward-compatible v4,v5 THERMOSTAT_FAN_MODE_REPORT
---
--- @field public cmd_class number 0x44
--- @field public cmd_id number 0x03
--- @field public version number 3
--- @field public args st.zwave.CommandClass.ThermostatFanMode.ReportV3Args command-specific arguments
local ReportV3 = {}
setmetatable(ReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 and forward-compatible v4,v5 THERMOSTAT_FAN_MODE_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatFanMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatFanMode.ReportV3Args command-specific arguments
function ReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_FAN_MODE, ThermostatFanMode.REPORT, 3, args, ...)
end

--- Serialize v3 or forward-compatible v4,v5 THERMOSTAT_FAN_MODE_REPORT arguments.
---
--- @return string serialized payload
function ReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(4, args.fan_mode)
  writer:write_bits(3, 0) -- reserved
  writer:write_bool(args.off)
  return writer.buf
end

--- Deserialize a v3 or forward-compatible v4,v5 THERMOSTAT_FAN_MODE_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatFanMode.ReportV3Args deserialized arguments
function ReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(4, "fan_mode")
  reader:read_bits(3) -- reserved
  reader:read_bool("off")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.ReportV3
--- @return st.zwave.CommandClass.ThermostatFanMode.ReportV3Args
function ReportV3._defaults(self)
  local args = {}
  args.fan_mode = self.args.fan_mode or 0
  args.off = self.args.off or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.ReportV3
--- @return st.zwave.CommandClass.ThermostatFanMode.ReportV3Args
function ReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.ReportV3
function ReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.ReportV3
function ReportV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.fan_mode = function()
    return zw._reflect(
      ThermostatFanMode._reflect_fan_mode,
      args.fan_mode
    )
  end
end

--- @class st.zwave.CommandClass.ThermostatFanMode.SupportedReportV3Args
--- @alias SupportedReportV3Args st.zwave.CommandClass.ThermostatFanMode.SupportedReportV3Args
--- @field public auto boolean
--- @field public low boolean
--- @field public auto_high boolean
--- @field public high boolean
--- @field public auto_medium boolean
--- @field public medium boolean
--- @field public circulation boolean
--- @field public humidity_circulation boolean
local SupportedReportV3Args = {}

--- @class st.zwave.CommandClass.ThermostatFanMode.SupportedReportV3:st.zwave.Command
--- @alias SupportedReportV3 st.zwave.CommandClass.ThermostatFanMode.SupportedReportV3
---
--- v3 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x44
--- @field public cmd_id number 0x05
--- @field public version number 3
--- @field public args st.zwave.CommandClass.ThermostatFanMode.SupportedReportV3Args command-specific arguments
local SupportedReportV3 = {}
setmetatable(SupportedReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatFanMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatFanMode.SupportedReportV3Args command-specific arguments
function SupportedReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_FAN_MODE, ThermostatFanMode.SUPPORTED_REPORT, 3, args, ...)
end

--- Serialize v3 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.auto)
  writer:write_bool(args.low)
  writer:write_bool(args.auto_high)
  writer:write_bool(args.high)
  writer:write_bool(args.auto_medium)
  writer:write_bool(args.medium)
  writer:write_bool(args.circulation)
  writer:write_bool(args.humidity_circulation)
  return writer.buf
end

--- Deserialize a v3 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedReportV3Args deserialized arguments
function SupportedReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("auto")
  reader:read_bool("low")
  reader:read_bool("auto_high")
  reader:read_bool("high")
  reader:read_bool("auto_medium")
  reader:read_bool("medium")
  reader:read_bool("circulation")
  reader:read_bool("humidity_circulation")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedReportV3
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedReportV3Args
function SupportedReportV3._defaults(self)
  local args = {}
  args.auto = self.args.auto or false
  args.low = self.args.low or false
  args.auto_high = self.args.auto_high or false
  args.high = self.args.high or false
  args.auto_medium = self.args.auto_medium or false
  args.medium = self.args.medium or false
  args.circulation = self.args.circulation or false
  args.humidity_circulation = self.args.humidity_circulation or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedReportV3
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedReportV3Args
function SupportedReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedReportV3
function SupportedReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedReportV3
function SupportedReportV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatFanMode.SupportedReportV4Args
--- @alias SupportedReportV4Args st.zwave.CommandClass.ThermostatFanMode.SupportedReportV4Args
--- @field public auto boolean
--- @field public low boolean
--- @field public auto_high boolean
--- @field public high boolean
--- @field public auto_medium boolean
--- @field public medium boolean
--- @field public circulation boolean
--- @field public humidity_circulation boolean
--- @field public left_right boolean
--- @field public up_down boolean
--- @field public quiet boolean
local SupportedReportV4Args = {}

--- @class st.zwave.CommandClass.ThermostatFanMode.SupportedReportV4:st.zwave.Command
--- @alias SupportedReportV4 st.zwave.CommandClass.ThermostatFanMode.SupportedReportV4
---
--- v4 and forward-compatible v5 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x44
--- @field public cmd_id number 0x05
--- @field public version number 4
--- @field public args st.zwave.CommandClass.ThermostatFanMode.SupportedReportV4Args command-specific arguments
local SupportedReportV4 = {}
setmetatable(SupportedReportV4, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v4 and forward-compatible v5 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatFanMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatFanMode.SupportedReportV4Args command-specific arguments
function SupportedReportV4:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_FAN_MODE, ThermostatFanMode.SUPPORTED_REPORT, 4, args, ...)
end

--- Serialize v4 or forward-compatible v5 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV4:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.auto)
  writer:write_bool(args.low)
  writer:write_bool(args.auto_high)
  writer:write_bool(args.high)
  writer:write_bool(args.auto_medium)
  writer:write_bool(args.medium)
  writer:write_bool(args.circulation)
  writer:write_bool(args.humidity_circulation)
  writer:write_bool(args.left_right)
  writer:write_bool(args.up_down)
  writer:write_bool(args.quiet)
  writer:write_bool(false) -- reserved_b
  writer:write_bool(false) -- reserved_c
  writer:write_bool(false) -- reserved_d
  writer:write_bool(false) -- reserved_e
  writer:write_bool(false) -- reserved_f
  return writer.buf
end

--- Deserialize a v4 or forward-compatible v5 THERMOSTAT_FAN_MODE_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedReportV4Args deserialized arguments
function SupportedReportV4:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("auto")
  reader:read_bool("low")
  reader:read_bool("auto_high")
  reader:read_bool("high")
  reader:read_bool("auto_medium")
  reader:read_bool("medium")
  reader:read_bool("circulation")
  reader:read_bool("humidity_circulation")
  reader:read_bool("left_right")
  reader:read_bool("up_down")
  reader:read_bool("quiet")
  reader:read_bool() -- reserved_b
  reader:read_bool() -- reserved_c
  reader:read_bool() -- reserved_d
  reader:read_bool() -- reserved_e
  reader:read_bool() -- reserved_f
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedReportV4
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedReportV4Args
function SupportedReportV4._defaults(self)
  local args = {}
  args.auto = self.args.auto or false
  args.low = self.args.low or false
  args.auto_high = self.args.auto_high or false
  args.high = self.args.high or false
  args.auto_medium = self.args.auto_medium or false
  args.medium = self.args.medium or false
  args.circulation = self.args.circulation or false
  args.humidity_circulation = self.args.humidity_circulation or false
  args.left_right = self.args.left_right or false
  args.up_down = self.args.up_down or false
  args.quiet = self.args.quiet or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedReportV4
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedReportV4Args
function SupportedReportV4._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedReportV4
function SupportedReportV4._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatFanMode.SupportedReportV4
function SupportedReportV4._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatFanMode.Set
--- @alias _Set st.zwave.CommandClass.ThermostatFanMode.Set
---
--- Dynamically versioned THERMOSTAT_FAN_MODE_SET
---
--- Supported versions: 1,2,3,4,5; unique base versions: 1,2
---
--- @field public cmd_class number 0x44
--- @field public cmd_id number 0x01
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.ThermostatFanMode.SetV1Args|st.zwave.CommandClass.ThermostatFanMode.SetV2Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_FAN_MODE_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatFanMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatFanMode.SetV1Args|st.zwave.CommandClass.ThermostatFanMode.SetV2Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatFanMode.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatFanMode.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatFanMode.Get
--- @alias _Get st.zwave.CommandClass.ThermostatFanMode.Get
---
--- Dynamically versioned THERMOSTAT_FAN_MODE_GET
---
--- Supported versions: 1,2,3,4,5; unique base versions: 1
---
--- @field public cmd_class number 0x44
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatFanMode.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_FAN_MODE_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatFanMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatFanMode.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatFanMode.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatFanMode.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatFanMode.Report
--- @alias _Report st.zwave.CommandClass.ThermostatFanMode.Report
---
--- Dynamically versioned THERMOSTAT_FAN_MODE_REPORT
---
--- Supported versions: 1,2,3,4,5; unique base versions: 1,3
---
--- @field public cmd_class number 0x44
--- @field public cmd_id number 0x03
--- @field public version number 1,3
--- @field public args st.zwave.CommandClass.ThermostatFanMode.ReportV1Args|st.zwave.CommandClass.ThermostatFanMode.ReportV3Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_FAN_MODE_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatFanMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatFanMode.ReportV1Args|st.zwave.CommandClass.ThermostatFanMode.ReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatFanMode.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatFanMode.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatFanMode.SupportedGet
--- @alias _SupportedGet st.zwave.CommandClass.ThermostatFanMode.SupportedGet
---
--- Dynamically versioned THERMOSTAT_FAN_MODE_SUPPORTED_GET
---
--- Supported versions: 1,2,3,4,5; unique base versions: 1
---
--- @field public cmd_class number 0x44
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatFanMode.SupportedGetV1Args
local _SupportedGet = {}
setmetatable(_SupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_FAN_MODE_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatFanMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatFanMode.SupportedGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedGet
function _SupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatFanMode.SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatFanMode.SupportedReport
--- @alias _SupportedReport st.zwave.CommandClass.ThermostatFanMode.SupportedReport
---
--- Dynamically versioned THERMOSTAT_FAN_MODE_SUPPORTED_REPORT
---
--- Supported versions: 1,2,3,4,5; unique base versions: 1,2,3,4
---
--- @field public cmd_class number 0x44
--- @field public cmd_id number 0x05
--- @field public version number 1,2,3,4
--- @field public args st.zwave.CommandClass.ThermostatFanMode.SupportedReportV1Args|st.zwave.CommandClass.ThermostatFanMode.SupportedReportV2Args|st.zwave.CommandClass.ThermostatFanMode.SupportedReportV3Args|st.zwave.CommandClass.ThermostatFanMode.SupportedReportV4Args
local _SupportedReport = {}
setmetatable(_SupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_FAN_MODE_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatFanMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatFanMode.SupportedReportV1Args|st.zwave.CommandClass.ThermostatFanMode.SupportedReportV2Args|st.zwave.CommandClass.ThermostatFanMode.SupportedReportV3Args|st.zwave.CommandClass.ThermostatFanMode.SupportedReportV4Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatFanMode.SupportedReport
function _SupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatFanMode.SUPPORTED_REPORT, module._serialization_version, args, ...)
end

ThermostatFanMode.SetV1 = SetV1
ThermostatFanMode.GetV1 = GetV1
ThermostatFanMode.ReportV1 = ReportV1
ThermostatFanMode.SupportedGetV1 = SupportedGetV1
ThermostatFanMode.SupportedReportV1 = SupportedReportV1
ThermostatFanMode.SetV2 = SetV2
ThermostatFanMode.SupportedReportV2 = SupportedReportV2
ThermostatFanMode.ReportV3 = ReportV3
ThermostatFanMode.SupportedReportV3 = SupportedReportV3
ThermostatFanMode.SupportedReportV4 = SupportedReportV4
ThermostatFanMode.Set = _Set
ThermostatFanMode.Get = _Get
ThermostatFanMode.Report = _Report
ThermostatFanMode.SupportedGet = _SupportedGet
ThermostatFanMode.SupportedReport = _SupportedReport

ThermostatFanMode._lut = {
  [0] = { -- dynamically versioned constructors
    [ThermostatFanMode.SET] = ThermostatFanMode.Set,
    [ThermostatFanMode.GET] = ThermostatFanMode.Get,
    [ThermostatFanMode.REPORT] = ThermostatFanMode.Report,
    [ThermostatFanMode.SUPPORTED_GET] = ThermostatFanMode.SupportedGet,
    [ThermostatFanMode.SUPPORTED_REPORT] = ThermostatFanMode.SupportedReport
  },
  [1] = { -- version 1
    [ThermostatFanMode.SET] = ThermostatFanMode.SetV1,
    [ThermostatFanMode.GET] = ThermostatFanMode.GetV1,
    [ThermostatFanMode.REPORT] = ThermostatFanMode.ReportV1,
    [ThermostatFanMode.SUPPORTED_GET] = ThermostatFanMode.SupportedGetV1,
    [ThermostatFanMode.SUPPORTED_REPORT] = ThermostatFanMode.SupportedReportV1
  },
  [2] = { -- version 2
    [ThermostatFanMode.SET] = ThermostatFanMode.SetV2,
    [ThermostatFanMode.GET] = ThermostatFanMode.GetV1,
    [ThermostatFanMode.REPORT] = ThermostatFanMode.ReportV1,
    [ThermostatFanMode.SUPPORTED_GET] = ThermostatFanMode.SupportedGetV1,
    [ThermostatFanMode.SUPPORTED_REPORT] = ThermostatFanMode.SupportedReportV2
  },
  [3] = { -- version 3
    [ThermostatFanMode.SET] = ThermostatFanMode.SetV2,
    [ThermostatFanMode.GET] = ThermostatFanMode.GetV1,
    [ThermostatFanMode.REPORT] = ThermostatFanMode.ReportV3,
    [ThermostatFanMode.SUPPORTED_GET] = ThermostatFanMode.SupportedGetV1,
    [ThermostatFanMode.SUPPORTED_REPORT] = ThermostatFanMode.SupportedReportV3
  },
  [4] = { -- version 4
    [ThermostatFanMode.SET] = ThermostatFanMode.SetV2,
    [ThermostatFanMode.GET] = ThermostatFanMode.GetV1,
    [ThermostatFanMode.REPORT] = ThermostatFanMode.ReportV3,
    [ThermostatFanMode.SUPPORTED_GET] = ThermostatFanMode.SupportedGetV1,
    [ThermostatFanMode.SUPPORTED_REPORT] = ThermostatFanMode.SupportedReportV4
  },
  [5] = { -- version 5
    [ThermostatFanMode.SET] = ThermostatFanMode.SetV2,
    [ThermostatFanMode.GET] = ThermostatFanMode.GetV1,
    [ThermostatFanMode.REPORT] = ThermostatFanMode.ReportV3,
    [ThermostatFanMode.SUPPORTED_GET] = ThermostatFanMode.SupportedGetV1,
    [ThermostatFanMode.SUPPORTED_REPORT] = ThermostatFanMode.SupportedReportV4
  }
}
--- @class st.zwave.CommandClass.ThermostatFanMode.fan_mode
--- @alias fan_mode st.zwave.CommandClass.ThermostatFanMode.fan_mode
--- @field public AUTO_LOW number 0x00
--- @field public LOW number 0x01
--- @field public AUTO_HIGH number 0x02
--- @field public HIGH number 0x03
--- @field public AUTO_MEDIUM number 0x04
--- @field public MEDIUM number 0x05
--- @field public CIRCULATION number 0x06
--- @field public HUMIDITY number 0x07
--- @field public LEFT_RIGHT number 0x08
--- @field public UP_DOWN number 0x09
--- @field public QUIET number 0x0A
--- @field public EXTERNAL_CIRCULATION number 0x0B
local fan_mode = {
  AUTO_LOW = 0x00,
  LOW = 0x01,
  AUTO_HIGH = 0x02,
  HIGH = 0x03,
  AUTO_MEDIUM = 0x04,
  MEDIUM = 0x05,
  CIRCULATION = 0x06,
  HUMIDITY = 0x07,
  LEFT_RIGHT = 0x08,
  UP_DOWN = 0x09,
  QUIET = 0x0A,
  EXTERNAL_CIRCULATION = 0x0B
}
ThermostatFanMode.fan_mode = fan_mode
ThermostatFanMode._reflect_fan_mode = zw._reflection_builder(ThermostatFanMode.fan_mode)


return ThermostatFanMode
