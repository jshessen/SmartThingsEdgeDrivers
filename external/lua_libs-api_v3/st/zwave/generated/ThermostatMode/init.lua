-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.ThermostatMode
--- @alias ThermostatMode st.zwave.CommandClass.ThermostatMode
---
--- Supported versions: 1,2,3
---
--- @field public SET number 0x01 - THERMOSTAT_MODE_SET command id
--- @field public GET number 0x02 - THERMOSTAT_MODE_GET command id
--- @field public REPORT number 0x03 - THERMOSTAT_MODE_REPORT command id
--- @field public SUPPORTED_GET number 0x04 - THERMOSTAT_MODE_SUPPORTED_GET command id
--- @field public SUPPORTED_REPORT number 0x05 - THERMOSTAT_MODE_SUPPORTED_REPORT command id
local ThermostatMode = {}
ThermostatMode.SET = 0x01
ThermostatMode.GET = 0x02
ThermostatMode.REPORT = 0x03
ThermostatMode.SUPPORTED_GET = 0x04
ThermostatMode.SUPPORTED_REPORT = 0x05

ThermostatMode._commands = {
  [ThermostatMode.SET] = "SET",
  [ThermostatMode.GET] = "GET",
  [ThermostatMode.REPORT] = "REPORT",
  [ThermostatMode.SUPPORTED_GET] = "SUPPORTED_GET",
  [ThermostatMode.SUPPORTED_REPORT] = "SUPPORTED_REPORT"
}

--- Instantiate a versioned instance of the ThermostatMode Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.ThermostatMode versioned command class instance
function ThermostatMode:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.THERMOSTAT_MODE][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(ThermostatMode, {
  __call = ThermostatMode.init
})

ThermostatMode._serialization_version = nil
ThermostatMode._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.THERMOSTAT_MODE] = {
  [1] = true,
  [2] = true,
  [3] = true
}

--- @class st.zwave.CommandClass.ThermostatMode.SetV1Args
--- @alias SetV1Args st.zwave.CommandClass.ThermostatMode.SetV1Args
--- @field public mode integer see :lua:class:`ThermostatMode.mode <st.zwave.CommandClass.ThermostatMode.mode>`
local SetV1Args = {}

--- @class st.zwave.CommandClass.ThermostatMode.SetV1:st.zwave.Command
--- @alias SetV1 st.zwave.CommandClass.ThermostatMode.SetV1
---
--- v1 and forward-compatible v2 THERMOSTAT_MODE_SET
---
--- @field public cmd_class number 0x40
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatMode.SetV1Args command-specific arguments
local SetV1 = {}
setmetatable(SetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 THERMOSTAT_MODE_SET object.
---
--- @param module st.zwave.CommandClass.ThermostatMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatMode.SetV1Args command-specific arguments
function SetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_MODE, ThermostatMode.SET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 THERMOSTAT_MODE_SET arguments.
---
--- @return string serialized payload
function SetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, args.mode)
  writer:write_bits(3, 0) -- reserved
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 THERMOSTAT_MODE_SET payload.
---
--- @return st.zwave.CommandClass.ThermostatMode.SetV1Args deserialized arguments
function SetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "mode")
  reader:read_bits(3) -- reserved
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SetV1
--- @return st.zwave.CommandClass.ThermostatMode.SetV1Args
function SetV1._defaults(self)
  local args = {}
  args.mode = self.args.mode or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SetV1
--- @return st.zwave.CommandClass.ThermostatMode.SetV1Args
function SetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SetV1
function SetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SetV1
function SetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.mode = function()
    return zw._reflect(
      ThermostatMode._reflect_mode,
      args.mode
    )
  end
end

--- @class st.zwave.CommandClass.ThermostatMode.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.ThermostatMode.GetV1Args
local GetV1Args = {}

--- @class st.zwave.CommandClass.ThermostatMode.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.ThermostatMode.GetV1
---
--- v1 and forward-compatible v2,v3 THERMOSTAT_MODE_GET
---
--- @field public cmd_class number 0x40
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatMode.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 THERMOSTAT_MODE_GET object.
---
--- @param module st.zwave.CommandClass.ThermostatMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatMode.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_MODE, ThermostatMode.GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 THERMOSTAT_MODE_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 THERMOSTAT_MODE_GET payload.
---
--- @return st.zwave.CommandClass.ThermostatMode.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.GetV1
--- @return st.zwave.CommandClass.ThermostatMode.GetV1Args
function GetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.GetV1
--- @return st.zwave.CommandClass.ThermostatMode.GetV1Args
function GetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatMode.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatMode.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatMode.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.ThermostatMode.ReportV1Args
--- @field public mode integer see :lua:class:`ThermostatMode.mode <st.zwave.CommandClass.ThermostatMode.mode>`
local ReportV1Args = {}

--- @class st.zwave.CommandClass.ThermostatMode.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.ThermostatMode.ReportV1
---
--- v1 and forward-compatible v2 THERMOSTAT_MODE_REPORT
---
--- @field public cmd_class number 0x40
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatMode.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 THERMOSTAT_MODE_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatMode.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_MODE, ThermostatMode.REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 THERMOSTAT_MODE_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, args.mode)
  writer:write_bits(3, 0) -- reserved
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 THERMOSTAT_MODE_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatMode.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "mode")
  reader:read_bits(3) -- reserved
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.ReportV1
--- @return st.zwave.CommandClass.ThermostatMode.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.mode = self.args.mode or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.ReportV1
--- @return st.zwave.CommandClass.ThermostatMode.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatMode.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatMode.ReportV1
function ReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.mode = function()
    return zw._reflect(
      ThermostatMode._reflect_mode,
      args.mode
    )
  end
end

--- @class st.zwave.CommandClass.ThermostatMode.SupportedGetV1Args
--- @alias SupportedGetV1Args st.zwave.CommandClass.ThermostatMode.SupportedGetV1Args
local SupportedGetV1Args = {}

--- @class st.zwave.CommandClass.ThermostatMode.SupportedGetV1:st.zwave.Command
--- @alias SupportedGetV1 st.zwave.CommandClass.ThermostatMode.SupportedGetV1
---
--- v1 and forward-compatible v2,v3 THERMOSTAT_MODE_SUPPORTED_GET
---
--- @field public cmd_class number 0x40
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatMode.SupportedGetV1Args command-specific arguments
local SupportedGetV1 = {}
setmetatable(SupportedGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 THERMOSTAT_MODE_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.ThermostatMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatMode.SupportedGetV1Args command-specific arguments
function SupportedGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_MODE, ThermostatMode.SUPPORTED_GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 THERMOSTAT_MODE_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function SupportedGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 THERMOSTAT_MODE_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.ThermostatMode.SupportedGetV1Args deserialized arguments
function SupportedGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SupportedGetV1
--- @return st.zwave.CommandClass.ThermostatMode.SupportedGetV1Args
function SupportedGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SupportedGetV1
--- @return st.zwave.CommandClass.ThermostatMode.SupportedGetV1Args
function SupportedGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SupportedGetV1
function SupportedGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SupportedGetV1
function SupportedGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatMode.SupportedReportV1Args
--- @alias SupportedReportV1Args st.zwave.CommandClass.ThermostatMode.SupportedReportV1Args
--- @field public off boolean
--- @field public heat boolean
--- @field public cool boolean
--- @field public auto boolean
--- @field public auxiliary_emergency_heat boolean
--- @field public resume boolean
--- @field public fan_only boolean
--- @field public furnace boolean
--- @field public dry_air boolean
--- @field public moist_air boolean
--- @field public auto_changeover boolean
local SupportedReportV1Args = {}

--- @class st.zwave.CommandClass.ThermostatMode.SupportedReportV1:st.zwave.Command
--- @alias SupportedReportV1 st.zwave.CommandClass.ThermostatMode.SupportedReportV1
---
--- v1 THERMOSTAT_MODE_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x40
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatMode.SupportedReportV1Args command-specific arguments
local SupportedReportV1 = {}
setmetatable(SupportedReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 THERMOSTAT_MODE_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatMode.SupportedReportV1Args command-specific arguments
function SupportedReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_MODE, ThermostatMode.SUPPORTED_REPORT, 1, args, ...)
end

--- Serialize v1 THERMOSTAT_MODE_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.off)
  writer:write_bool(args.heat)
  writer:write_bool(args.cool)
  writer:write_bool(args.auto)
  writer:write_bool(args.auxiliary_emergency_heat)
  writer:write_bool(args.resume)
  writer:write_bool(args.fan_only)
  writer:write_bool(args.furnace)
  writer:write_bool(args.dry_air)
  writer:write_bool(args.moist_air)
  writer:write_bool(args.auto_changeover)
  return writer.buf
end

--- Deserialize a v1 THERMOSTAT_MODE_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatMode.SupportedReportV1Args deserialized arguments
function SupportedReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("off")
  reader:read_bool("heat")
  reader:read_bool("cool")
  reader:read_bool("auto")
  reader:read_bool("auxiliary_emergency_heat")
  reader:read_bool("resume")
  reader:read_bool("fan_only")
  reader:read_bool("furnace")
  reader:read_bool("dry_air")
  reader:read_bool("moist_air")
  reader:read_bool("auto_changeover")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SupportedReportV1
--- @return st.zwave.CommandClass.ThermostatMode.SupportedReportV1Args
function SupportedReportV1._defaults(self)
  local args = {}
  args.off = self.args.off or false
  args.heat = self.args.heat or false
  args.cool = self.args.cool or false
  args.auto = self.args.auto or false
  args.auxiliary_emergency_heat = self.args.auxiliary_emergency_heat or false
  args.resume = self.args.resume or false
  args.fan_only = self.args.fan_only or false
  args.furnace = self.args.furnace or false
  args.dry_air = self.args.dry_air or false
  args.moist_air = self.args.moist_air or false
  args.auto_changeover = self.args.auto_changeover or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SupportedReportV1
--- @return st.zwave.CommandClass.ThermostatMode.SupportedReportV1Args
function SupportedReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SupportedReportV1
function SupportedReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SupportedReportV1
function SupportedReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatMode.SupportedReportV2Args
--- @alias SupportedReportV2Args st.zwave.CommandClass.ThermostatMode.SupportedReportV2Args
--- @field public off boolean
--- @field public heat boolean
--- @field public cool boolean
--- @field public auto boolean
--- @field public auxiliary_emergency_heat boolean
--- @field public resume boolean
--- @field public fan_only boolean
--- @field public furnace boolean
--- @field public dry_air boolean
--- @field public moist_air boolean
--- @field public auto_changeover boolean
--- @field public energy_save_heat boolean
--- @field public energy_save_cool boolean
--- @field public away boolean
local SupportedReportV2Args = {}

--- @class st.zwave.CommandClass.ThermostatMode.SupportedReportV2:st.zwave.Command
--- @alias SupportedReportV2 st.zwave.CommandClass.ThermostatMode.SupportedReportV2
---
--- v2 THERMOSTAT_MODE_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x40
--- @field public cmd_id number 0x05
--- @field public version number 2
--- @field public args st.zwave.CommandClass.ThermostatMode.SupportedReportV2Args command-specific arguments
local SupportedReportV2 = {}
setmetatable(SupportedReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 THERMOSTAT_MODE_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatMode.SupportedReportV2Args command-specific arguments
function SupportedReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_MODE, ThermostatMode.SUPPORTED_REPORT, 2, args, ...)
end

--- Serialize v2 THERMOSTAT_MODE_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.off)
  writer:write_bool(args.heat)
  writer:write_bool(args.cool)
  writer:write_bool(args.auto)
  writer:write_bool(args.auxiliary_emergency_heat)
  writer:write_bool(args.resume)
  writer:write_bool(args.fan_only)
  writer:write_bool(args.furnace)
  writer:write_bool(args.dry_air)
  writer:write_bool(args.moist_air)
  writer:write_bool(args.auto_changeover)
  writer:write_bool(args.energy_save_heat)
  writer:write_bool(args.energy_save_cool)
  writer:write_bool(args.away)
  return writer.buf
end

--- Deserialize a v2 THERMOSTAT_MODE_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatMode.SupportedReportV2Args deserialized arguments
function SupportedReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("off")
  reader:read_bool("heat")
  reader:read_bool("cool")
  reader:read_bool("auto")
  reader:read_bool("auxiliary_emergency_heat")
  reader:read_bool("resume")
  reader:read_bool("fan_only")
  reader:read_bool("furnace")
  reader:read_bool("dry_air")
  reader:read_bool("moist_air")
  reader:read_bool("auto_changeover")
  reader:read_bool("energy_save_heat")
  reader:read_bool("energy_save_cool")
  reader:read_bool("away")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SupportedReportV2
--- @return st.zwave.CommandClass.ThermostatMode.SupportedReportV2Args
function SupportedReportV2._defaults(self)
  local args = {}
  args.off = self.args.off or false
  args.heat = self.args.heat or false
  args.cool = self.args.cool or false
  args.auto = self.args.auto or false
  args.auxiliary_emergency_heat = self.args.auxiliary_emergency_heat or false
  args.resume = self.args.resume or false
  args.fan_only = self.args.fan_only or false
  args.furnace = self.args.furnace or false
  args.dry_air = self.args.dry_air or false
  args.moist_air = self.args.moist_air or false
  args.auto_changeover = self.args.auto_changeover or false
  args.energy_save_heat = self.args.energy_save_heat or false
  args.energy_save_cool = self.args.energy_save_cool or false
  args.away = self.args.away or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SupportedReportV2
--- @return st.zwave.CommandClass.ThermostatMode.SupportedReportV2Args
function SupportedReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SupportedReportV2
function SupportedReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SupportedReportV2
function SupportedReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatMode.SetV3Args
--- @alias SetV3Args st.zwave.CommandClass.ThermostatMode.SetV3Args
--- @field public mode integer see :lua:class:`ThermostatMode.mode <st.zwave.CommandClass.ThermostatMode.mode>`
--- @field public manufacturer_data string
local SetV3Args = {}

--- @class st.zwave.CommandClass.ThermostatMode.SetV3:st.zwave.Command
--- @alias SetV3 st.zwave.CommandClass.ThermostatMode.SetV3
---
--- v3 THERMOSTAT_MODE_SET
---
--- @field public cmd_class number 0x40
--- @field public cmd_id number 0x01
--- @field public version number 3
--- @field public args st.zwave.CommandClass.ThermostatMode.SetV3Args command-specific arguments
local SetV3 = {}
setmetatable(SetV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 THERMOSTAT_MODE_SET object.
---
--- @param module st.zwave.CommandClass.ThermostatMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatMode.SetV3Args command-specific arguments
function SetV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_MODE, ThermostatMode.SET, 3, args, ...)
end

--- Serialize v3 THERMOSTAT_MODE_SET arguments.
---
--- @return string serialized payload
function SetV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, args.mode)
  writer:write_bits(3, writer.length(args.manufacturer_data))
  writer:write_bytes(args.manufacturer_data)
  return writer.buf
end

--- Deserialize a v3 THERMOSTAT_MODE_SET payload.
---
--- @return st.zwave.CommandClass.ThermostatMode.SetV3Args deserialized arguments
function SetV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "mode")
  reader:read_bits(3, "no_of_manufacturer_data_fields")
  reader:read_bytes(reader.parsed.no_of_manufacturer_data_fields, "manufacturer_data")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SetV3
--- @return st.zwave.CommandClass.ThermostatMode.SetV3Args
function SetV3._defaults(self)
  local args = {}
  args.mode = self.args.mode or 0
  args.manufacturer_data = self.args.manufacturer_data or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SetV3
--- @return st.zwave.CommandClass.ThermostatMode.SetV3Args
function SetV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SetV3
function SetV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SetV3
function SetV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.mode = function()
    return zw._reflect(
      ThermostatMode._reflect_mode,
      args.mode
    )
  end
end

--- @class st.zwave.CommandClass.ThermostatMode.ReportV3Args
--- @alias ReportV3Args st.zwave.CommandClass.ThermostatMode.ReportV3Args
--- @field public mode integer see :lua:class:`ThermostatMode.mode <st.zwave.CommandClass.ThermostatMode.mode>`
--- @field public manufacturer_data string
local ReportV3Args = {}

--- @class st.zwave.CommandClass.ThermostatMode.ReportV3:st.zwave.Command
--- @alias ReportV3 st.zwave.CommandClass.ThermostatMode.ReportV3
---
--- v3 THERMOSTAT_MODE_REPORT
---
--- @field public cmd_class number 0x40
--- @field public cmd_id number 0x03
--- @field public version number 3
--- @field public args st.zwave.CommandClass.ThermostatMode.ReportV3Args command-specific arguments
local ReportV3 = {}
setmetatable(ReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 THERMOSTAT_MODE_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatMode.ReportV3Args command-specific arguments
function ReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_MODE, ThermostatMode.REPORT, 3, args, ...)
end

--- Serialize v3 THERMOSTAT_MODE_REPORT arguments.
---
--- @return string serialized payload
function ReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, args.mode)
  writer:write_bits(3, writer.length(args.manufacturer_data))
  writer:write_bytes(args.manufacturer_data)
  return writer.buf
end

--- Deserialize a v3 THERMOSTAT_MODE_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatMode.ReportV3Args deserialized arguments
function ReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "mode")
  reader:read_bits(3, "no_of_manufacturer_data_fields")
  reader:read_bytes(reader.parsed.no_of_manufacturer_data_fields, "manufacturer_data")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.ReportV3
--- @return st.zwave.CommandClass.ThermostatMode.ReportV3Args
function ReportV3._defaults(self)
  local args = {}
  args.mode = self.args.mode or 0
  args.manufacturer_data = self.args.manufacturer_data or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.ReportV3
--- @return st.zwave.CommandClass.ThermostatMode.ReportV3Args
function ReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatMode.ReportV3
function ReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatMode.ReportV3
function ReportV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.mode = function()
    return zw._reflect(
      ThermostatMode._reflect_mode,
      args.mode
    )
  end
end

--- @class st.zwave.CommandClass.ThermostatMode.SupportedReportV3Args
--- @alias SupportedReportV3Args st.zwave.CommandClass.ThermostatMode.SupportedReportV3Args
--- @field public off boolean
--- @field public heat boolean
--- @field public cool boolean
--- @field public auto boolean
--- @field public auxiliary_emergency_heat boolean
--- @field public resume boolean
--- @field public fan_only boolean
--- @field public furnace boolean
--- @field public dry_air boolean
--- @field public moist_air boolean
--- @field public auto_changeover boolean
--- @field public energy_save_heat boolean
--- @field public energy_save_cool boolean
--- @field public away boolean
--- @field public full_power boolean
--- @field public manufacturer_specifc boolean
local SupportedReportV3Args = {}

--- @class st.zwave.CommandClass.ThermostatMode.SupportedReportV3:st.zwave.Command
--- @alias SupportedReportV3 st.zwave.CommandClass.ThermostatMode.SupportedReportV3
---
--- v3 THERMOSTAT_MODE_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x40
--- @field public cmd_id number 0x05
--- @field public version number 3
--- @field public args st.zwave.CommandClass.ThermostatMode.SupportedReportV3Args command-specific arguments
local SupportedReportV3 = {}
setmetatable(SupportedReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 THERMOSTAT_MODE_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatMode.SupportedReportV3Args command-specific arguments
function SupportedReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_MODE, ThermostatMode.SUPPORTED_REPORT, 3, args, ...)
end

--- Serialize v3 THERMOSTAT_MODE_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.off)
  writer:write_bool(args.heat)
  writer:write_bool(args.cool)
  writer:write_bool(args.auto)
  writer:write_bool(args.auxiliary_emergency_heat)
  writer:write_bool(args.resume)
  writer:write_bool(args.fan_only)
  writer:write_bool(args.furnace)
  writer:write_bool(args.dry_air)
  writer:write_bool(args.moist_air)
  writer:write_bool(args.auto_changeover)
  writer:write_bool(args.energy_save_heat)
  writer:write_bool(args.energy_save_cool)
  writer:write_bool(args.away)
  writer:write_bool(false) -- reserved
  writer:write_bool(args.full_power)
  writer:write_bits(15, 0) -- reserved
  writer:write_bool(args.manufacturer_specifc)
  return writer.buf
end

--- Deserialize a v3 THERMOSTAT_MODE_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatMode.SupportedReportV3Args deserialized arguments
function SupportedReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("off")
  reader:read_bool("heat")
  reader:read_bool("cool")
  reader:read_bool("auto")
  reader:read_bool("auxiliary_emergency_heat")
  reader:read_bool("resume")
  reader:read_bool("fan_only")
  reader:read_bool("furnace")
  reader:read_bool("dry_air")
  reader:read_bool("moist_air")
  reader:read_bool("auto_changeover")
  reader:read_bool("energy_save_heat")
  reader:read_bool("energy_save_cool")
  reader:read_bool("away")
  reader:read_bool() -- reserved
  reader:read_bool("full_power")
  reader:bit_seek(15) -- reserved
  reader:read_bool("manufacturer_specifc")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SupportedReportV3
--- @return st.zwave.CommandClass.ThermostatMode.SupportedReportV3Args
function SupportedReportV3._defaults(self)
  local args = {}
  args.off = self.args.off or false
  args.heat = self.args.heat or false
  args.cool = self.args.cool or false
  args.auto = self.args.auto or false
  args.auxiliary_emergency_heat = self.args.auxiliary_emergency_heat or false
  args.resume = self.args.resume or false
  args.fan_only = self.args.fan_only or false
  args.furnace = self.args.furnace or false
  args.dry_air = self.args.dry_air or false
  args.moist_air = self.args.moist_air or false
  args.auto_changeover = self.args.auto_changeover or false
  args.energy_save_heat = self.args.energy_save_heat or false
  args.energy_save_cool = self.args.energy_save_cool or false
  args.away = self.args.away or false
  args.full_power = self.args.full_power or false
  args.manufacturer_specifc = self.args.manufacturer_specifc or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SupportedReportV3
--- @return st.zwave.CommandClass.ThermostatMode.SupportedReportV3Args
function SupportedReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SupportedReportV3
function SupportedReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatMode.SupportedReportV3
function SupportedReportV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatMode.Set
--- @alias _Set st.zwave.CommandClass.ThermostatMode.Set
---
--- Dynamically versioned THERMOSTAT_MODE_SET
---
--- Supported versions: 1,2,3; unique base versions: 1,3
---
--- @field public cmd_class number 0x40
--- @field public cmd_id number 0x01
--- @field public version number 1,3
--- @field public args st.zwave.CommandClass.ThermostatMode.SetV1Args|st.zwave.CommandClass.ThermostatMode.SetV3Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_MODE_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatMode.SetV1Args|st.zwave.CommandClass.ThermostatMode.SetV3Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatMode.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatMode.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatMode.Get
--- @alias _Get st.zwave.CommandClass.ThermostatMode.Get
---
--- Dynamically versioned THERMOSTAT_MODE_GET
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x40
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatMode.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_MODE_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatMode.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatMode.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatMode.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatMode.Report
--- @alias _Report st.zwave.CommandClass.ThermostatMode.Report
---
--- Dynamically versioned THERMOSTAT_MODE_REPORT
---
--- Supported versions: 1,2,3; unique base versions: 1,3
---
--- @field public cmd_class number 0x40
--- @field public cmd_id number 0x03
--- @field public version number 1,3
--- @field public args st.zwave.CommandClass.ThermostatMode.ReportV1Args|st.zwave.CommandClass.ThermostatMode.ReportV3Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_MODE_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatMode.ReportV1Args|st.zwave.CommandClass.ThermostatMode.ReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatMode.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatMode.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatMode.SupportedGet
--- @alias _SupportedGet st.zwave.CommandClass.ThermostatMode.SupportedGet
---
--- Dynamically versioned THERMOSTAT_MODE_SUPPORTED_GET
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x40
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatMode.SupportedGetV1Args
local _SupportedGet = {}
setmetatable(_SupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_MODE_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatMode.SupportedGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatMode.SupportedGet
function _SupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatMode.SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatMode.SupportedReport
--- @alias _SupportedReport st.zwave.CommandClass.ThermostatMode.SupportedReport
---
--- Dynamically versioned THERMOSTAT_MODE_SUPPORTED_REPORT
---
--- Supported versions: 1,2,3; unique base versions: 1,2,3
---
--- @field public cmd_class number 0x40
--- @field public cmd_id number 0x05
--- @field public version number 1,2,3
--- @field public args st.zwave.CommandClass.ThermostatMode.SupportedReportV1Args|st.zwave.CommandClass.ThermostatMode.SupportedReportV2Args|st.zwave.CommandClass.ThermostatMode.SupportedReportV3Args
local _SupportedReport = {}
setmetatable(_SupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_MODE_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatMode command class module instance
--- @param args st.zwave.CommandClass.ThermostatMode.SupportedReportV1Args|st.zwave.CommandClass.ThermostatMode.SupportedReportV2Args|st.zwave.CommandClass.ThermostatMode.SupportedReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatMode.SupportedReport
function _SupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatMode.SUPPORTED_REPORT, module._serialization_version, args, ...)
end

ThermostatMode.SetV1 = SetV1
ThermostatMode.GetV1 = GetV1
ThermostatMode.ReportV1 = ReportV1
ThermostatMode.SupportedGetV1 = SupportedGetV1
ThermostatMode.SupportedReportV1 = SupportedReportV1
ThermostatMode.SupportedReportV2 = SupportedReportV2
ThermostatMode.SetV3 = SetV3
ThermostatMode.ReportV3 = ReportV3
ThermostatMode.SupportedReportV3 = SupportedReportV3
ThermostatMode.Set = _Set
ThermostatMode.Get = _Get
ThermostatMode.Report = _Report
ThermostatMode.SupportedGet = _SupportedGet
ThermostatMode.SupportedReport = _SupportedReport

ThermostatMode._lut = {
  [0] = { -- dynamically versioned constructors
    [ThermostatMode.SET] = ThermostatMode.Set,
    [ThermostatMode.GET] = ThermostatMode.Get,
    [ThermostatMode.REPORT] = ThermostatMode.Report,
    [ThermostatMode.SUPPORTED_GET] = ThermostatMode.SupportedGet,
    [ThermostatMode.SUPPORTED_REPORT] = ThermostatMode.SupportedReport
  },
  [1] = { -- version 1
    [ThermostatMode.SET] = ThermostatMode.SetV1,
    [ThermostatMode.GET] = ThermostatMode.GetV1,
    [ThermostatMode.REPORT] = ThermostatMode.ReportV1,
    [ThermostatMode.SUPPORTED_GET] = ThermostatMode.SupportedGetV1,
    [ThermostatMode.SUPPORTED_REPORT] = ThermostatMode.SupportedReportV1
  },
  [2] = { -- version 2
    [ThermostatMode.SET] = ThermostatMode.SetV1,
    [ThermostatMode.GET] = ThermostatMode.GetV1,
    [ThermostatMode.REPORT] = ThermostatMode.ReportV1,
    [ThermostatMode.SUPPORTED_GET] = ThermostatMode.SupportedGetV1,
    [ThermostatMode.SUPPORTED_REPORT] = ThermostatMode.SupportedReportV2
  },
  [3] = { -- version 3
    [ThermostatMode.SET] = ThermostatMode.SetV3,
    [ThermostatMode.GET] = ThermostatMode.GetV1,
    [ThermostatMode.REPORT] = ThermostatMode.ReportV3,
    [ThermostatMode.SUPPORTED_GET] = ThermostatMode.SupportedGetV1,
    [ThermostatMode.SUPPORTED_REPORT] = ThermostatMode.SupportedReportV3
  }
}
--- @class st.zwave.CommandClass.ThermostatMode.mode
--- @alias mode st.zwave.CommandClass.ThermostatMode.mode
--- @field public OFF number 0x00
--- @field public HEAT number 0x01
--- @field public COOL number 0x02
--- @field public AUTO number 0x03
--- @field public AUXILIARY_HEAT number 0x04
--- @field public RESUME number 0x05
--- @field public FAN_ONLY number 0x06
--- @field public FURNACE number 0x07
--- @field public DRY_AIR number 0x08
--- @field public MOIST_AIR number 0x09
--- @field public AUTO_CHANGEOVER number 0x0A
--- @field public ENERGY_SAVE_HEAT number 0x0B
--- @field public ENERGY_SAVE_COOL number 0x0C
--- @field public AWAY number 0x0D
--- @field public FULL_POWER number 0x0F
--- @field public MANUFACTURER_SPECIFC number 0x1F
local mode = {
  OFF = 0x00,
  HEAT = 0x01,
  COOL = 0x02,
  AUTO = 0x03,
  AUXILIARY_HEAT = 0x04,
  RESUME = 0x05,
  FAN_ONLY = 0x06,
  FURNACE = 0x07,
  DRY_AIR = 0x08,
  MOIST_AIR = 0x09,
  AUTO_CHANGEOVER = 0x0A,
  ENERGY_SAVE_HEAT = 0x0B,
  ENERGY_SAVE_COOL = 0x0C,
  AWAY = 0x0D,
  FULL_POWER = 0x0F,
  MANUFACTURER_SPECIFC = 0x1F
}
ThermostatMode.mode = mode
ThermostatMode._reflect_mode = zw._reflection_builder(ThermostatMode.mode)


return ThermostatMode
