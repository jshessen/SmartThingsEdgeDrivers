-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.ThermostatOperatingState
--- @alias ThermostatOperatingState st.zwave.CommandClass.ThermostatOperatingState
---
--- Supported versions: 1,2
---
--- @field public LOGGING_SUPPORTED_GET number 0x01 - THERMOSTAT_OPERATING_STATE_LOGGING_SUPPORTED_GET command id
--- @field public GET number 0x02 - THERMOSTAT_OPERATING_STATE_GET command id
--- @field public REPORT number 0x03 - THERMOSTAT_OPERATING_STATE_REPORT command id
--- @field public THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT number 0x04 - THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT command id
--- @field public LOGGING_GET number 0x05 - THERMOSTAT_OPERATING_STATE_LOGGING_GET command id
--- @field public LOGGING_REPORT number 0x06 - THERMOSTAT_OPERATING_STATE_LOGGING_REPORT command id
local ThermostatOperatingState = {}
ThermostatOperatingState.LOGGING_SUPPORTED_GET = 0x01
ThermostatOperatingState.GET = 0x02
ThermostatOperatingState.REPORT = 0x03
ThermostatOperatingState.THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT = 0x04
ThermostatOperatingState.LOGGING_GET = 0x05
ThermostatOperatingState.LOGGING_REPORT = 0x06

ThermostatOperatingState._commands = {
  [ThermostatOperatingState.LOGGING_SUPPORTED_GET] = "LOGGING_SUPPORTED_GET",
  [ThermostatOperatingState.GET] = "GET",
  [ThermostatOperatingState.REPORT] = "REPORT",
  [ThermostatOperatingState.THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT] = "THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT",
  [ThermostatOperatingState.LOGGING_GET] = "LOGGING_GET",
  [ThermostatOperatingState.LOGGING_REPORT] = "LOGGING_REPORT"
}

--- Instantiate a versioned instance of the ThermostatOperatingState Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.ThermostatOperatingState versioned command class instance
function ThermostatOperatingState:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.THERMOSTAT_OPERATING_STATE][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(ThermostatOperatingState, {
  __call = ThermostatOperatingState.init
})

ThermostatOperatingState._serialization_version = nil
ThermostatOperatingState._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.THERMOSTAT_OPERATING_STATE] = {
  [1] = true,
  [2] = true
}

--- @class st.zwave.CommandClass.ThermostatOperatingState.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.ThermostatOperatingState.GetV1Args
local GetV1Args = {}

--- @class st.zwave.CommandClass.ThermostatOperatingState.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.ThermostatOperatingState.GetV1
---
--- v1 and forward-compatible v2 THERMOSTAT_OPERATING_STATE_GET
---
--- @field public cmd_class number 0x42
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatOperatingState.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 THERMOSTAT_OPERATING_STATE_GET object.
---
--- @param module st.zwave.CommandClass.ThermostatOperatingState command class module instance
--- @param args st.zwave.CommandClass.ThermostatOperatingState.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_OPERATING_STATE, ThermostatOperatingState.GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 THERMOSTAT_OPERATING_STATE_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 THERMOSTAT_OPERATING_STATE_GET payload.
---
--- @return st.zwave.CommandClass.ThermostatOperatingState.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.GetV1
--- @return st.zwave.CommandClass.ThermostatOperatingState.GetV1Args
function GetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.GetV1
--- @return st.zwave.CommandClass.ThermostatOperatingState.GetV1Args
function GetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatOperatingState.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.ThermostatOperatingState.ReportV1Args
--- @field public operating_state integer see :lua:class:`ThermostatOperatingState.operating_state <st.zwave.CommandClass.ThermostatOperatingState.operating_state>`
local ReportV1Args = {}

--- @class st.zwave.CommandClass.ThermostatOperatingState.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.ThermostatOperatingState.ReportV1
---
--- v1 and forward-compatible v2 THERMOSTAT_OPERATING_STATE_REPORT
---
--- @field public cmd_class number 0x42
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatOperatingState.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 THERMOSTAT_OPERATING_STATE_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatOperatingState command class module instance
--- @param args st.zwave.CommandClass.ThermostatOperatingState.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_OPERATING_STATE, ThermostatOperatingState.REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 THERMOSTAT_OPERATING_STATE_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(4, args.operating_state)
  writer:write_bits(4, 0) -- reserved
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 THERMOSTAT_OPERATING_STATE_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatOperatingState.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(4, "operating_state")
  reader:read_bits(4) -- reserved
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.ReportV1
--- @return st.zwave.CommandClass.ThermostatOperatingState.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.operating_state = self.args.operating_state or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.ReportV1
--- @return st.zwave.CommandClass.ThermostatOperatingState.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.ReportV1
function ReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.operating_state = function()
    return zw._reflect(
      ThermostatOperatingState._reflect_operating_state,
      args.operating_state
    )
  end
end

--- @class st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGetV2Args
--- @alias LoggingSupportedGetV2Args st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGetV2Args
local LoggingSupportedGetV2Args = {}

--- @class st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGetV2:st.zwave.Command
--- @alias LoggingSupportedGetV2 st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGetV2
---
--- v2 THERMOSTAT_OPERATING_STATE_LOGGING_SUPPORTED_GET
---
--- @field public cmd_class number 0x42
--- @field public cmd_id number 0x01
--- @field public version number 2
--- @field public args st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGetV2Args command-specific arguments
local LoggingSupportedGetV2 = {}
setmetatable(LoggingSupportedGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 THERMOSTAT_OPERATING_STATE_LOGGING_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.ThermostatOperatingState command class module instance
--- @param args st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGetV2Args command-specific arguments
function LoggingSupportedGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_OPERATING_STATE, ThermostatOperatingState.LOGGING_SUPPORTED_GET, 2, args, ...)
end

--- Serialize v2 THERMOSTAT_OPERATING_STATE_LOGGING_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function LoggingSupportedGetV2:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v2 THERMOSTAT_OPERATING_STATE_LOGGING_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGetV2Args deserialized arguments
function LoggingSupportedGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGetV2
--- @return st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGetV2Args
function LoggingSupportedGetV2._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGetV2
--- @return st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGetV2Args
function LoggingSupportedGetV2._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGetV2
function LoggingSupportedGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGetV2
function LoggingSupportedGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2Args
--- @alias ThermostatOperatingLoggingSupportedReportV2Args st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2Args
--- @field public idle boolean
--- @field public heating boolean
--- @field public cooling boolean
--- @field public fan_only boolean
--- @field public pending_heat boolean
--- @field public pending_cool boolean
--- @field public vent_economizer boolean
--- @field public aux_heating boolean
--- @field public second_stage_heating boolean
--- @field public second_stage_cooling boolean
--- @field public second_stage_aux_heat boolean
--- @field public third_stage_aux_heat boolean
local ThermostatOperatingLoggingSupportedReportV2Args = {}

--- @class st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2:st.zwave.Command
--- @alias ThermostatOperatingLoggingSupportedReportV2 st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2
---
--- v2 THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x42
--- @field public cmd_id number 0x04
--- @field public version number 2
--- @field public args st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2Args command-specific arguments
local ThermostatOperatingLoggingSupportedReportV2 = {}
setmetatable(ThermostatOperatingLoggingSupportedReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatOperatingState command class module instance
--- @param args st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2Args command-specific arguments
function ThermostatOperatingLoggingSupportedReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_OPERATING_STATE, ThermostatOperatingState.THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT, 2, args, ...)
end

--- Serialize v2 THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function ThermostatOperatingLoggingSupportedReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.idle)
  writer:write_bool(args.heating)
  writer:write_bool(args.cooling)
  writer:write_bool(args.fan_only)
  writer:write_bool(args.pending_heat)
  writer:write_bool(args.pending_cool)
  writer:write_bool(args.vent_economizer)
  writer:write_bool(args.aux_heating)
  writer:write_bool(args.second_stage_heating)
  writer:write_bool(args.second_stage_cooling)
  writer:write_bool(args.second_stage_aux_heat)
  writer:write_bool(args.third_stage_aux_heat)
  return writer.buf
end

--- Deserialize a v2 THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2Args deserialized arguments
function ThermostatOperatingLoggingSupportedReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("idle")
  reader:read_bool("heating")
  reader:read_bool("cooling")
  reader:read_bool("fan_only")
  reader:read_bool("pending_heat")
  reader:read_bool("pending_cool")
  reader:read_bool("vent_economizer")
  reader:read_bool("aux_heating")
  reader:read_bool("second_stage_heating")
  reader:read_bool("second_stage_cooling")
  reader:read_bool("second_stage_aux_heat")
  reader:read_bool("third_stage_aux_heat")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2
--- @return st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2Args
function ThermostatOperatingLoggingSupportedReportV2._defaults(self)
  local args = {}
  args.idle = self.args.idle or false
  args.heating = self.args.heating or false
  args.cooling = self.args.cooling or false
  args.fan_only = self.args.fan_only or false
  args.pending_heat = self.args.pending_heat or false
  args.pending_cool = self.args.pending_cool or false
  args.vent_economizer = self.args.vent_economizer or false
  args.aux_heating = self.args.aux_heating or false
  args.second_stage_heating = self.args.second_stage_heating or false
  args.second_stage_cooling = self.args.second_stage_cooling or false
  args.second_stage_aux_heat = self.args.second_stage_aux_heat or false
  args.third_stage_aux_heat = self.args.third_stage_aux_heat or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2
--- @return st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2Args
function ThermostatOperatingLoggingSupportedReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2
function ThermostatOperatingLoggingSupportedReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2
function ThermostatOperatingLoggingSupportedReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatOperatingState.LoggingGetV2Args
--- @alias LoggingGetV2Args st.zwave.CommandClass.ThermostatOperatingState.LoggingGetV2Args
--- @field public idle boolean
--- @field public heating boolean
--- @field public cooling boolean
--- @field public fan_only boolean
--- @field public pending_heat boolean
--- @field public pending_cool boolean
--- @field public vent_economizer boolean
--- @field public aux_heating boolean
--- @field public second_stage_heating boolean
--- @field public second_stage_cooling boolean
--- @field public second_stage_aux_heat boolean
--- @field public third_stage_aux_heat boolean
local LoggingGetV2Args = {}

--- @class st.zwave.CommandClass.ThermostatOperatingState.LoggingGetV2:st.zwave.Command
--- @alias LoggingGetV2 st.zwave.CommandClass.ThermostatOperatingState.LoggingGetV2
---
--- v2 THERMOSTAT_OPERATING_STATE_LOGGING_GET
---
--- @field public cmd_class number 0x42
--- @field public cmd_id number 0x05
--- @field public version number 2
--- @field public args st.zwave.CommandClass.ThermostatOperatingState.LoggingGetV2Args command-specific arguments
local LoggingGetV2 = {}
setmetatable(LoggingGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 THERMOSTAT_OPERATING_STATE_LOGGING_GET object.
---
--- @param module st.zwave.CommandClass.ThermostatOperatingState command class module instance
--- @param args st.zwave.CommandClass.ThermostatOperatingState.LoggingGetV2Args command-specific arguments
function LoggingGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_OPERATING_STATE, ThermostatOperatingState.LOGGING_GET, 2, args, ...)
end

--- Serialize v2 THERMOSTAT_OPERATING_STATE_LOGGING_GET arguments.
---
--- @return string serialized payload
function LoggingGetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.idle)
  writer:write_bool(args.heating)
  writer:write_bool(args.cooling)
  writer:write_bool(args.fan_only)
  writer:write_bool(args.pending_heat)
  writer:write_bool(args.pending_cool)
  writer:write_bool(args.vent_economizer)
  writer:write_bool(args.aux_heating)
  writer:write_bool(args.second_stage_heating)
  writer:write_bool(args.second_stage_cooling)
  writer:write_bool(args.second_stage_aux_heat)
  writer:write_bool(args.third_stage_aux_heat)
  return writer.buf
end

--- Deserialize a v2 THERMOSTAT_OPERATING_STATE_LOGGING_GET payload.
---
--- @return st.zwave.CommandClass.ThermostatOperatingState.LoggingGetV2Args deserialized arguments
function LoggingGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("idle")
  reader:read_bool("heating")
  reader:read_bool("cooling")
  reader:read_bool("fan_only")
  reader:read_bool("pending_heat")
  reader:read_bool("pending_cool")
  reader:read_bool("vent_economizer")
  reader:read_bool("aux_heating")
  reader:read_bool("second_stage_heating")
  reader:read_bool("second_stage_cooling")
  reader:read_bool("second_stage_aux_heat")
  reader:read_bool("third_stage_aux_heat")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.LoggingGetV2
--- @return st.zwave.CommandClass.ThermostatOperatingState.LoggingGetV2Args
function LoggingGetV2._defaults(self)
  local args = {}
  args.idle = self.args.idle or false
  args.heating = self.args.heating or false
  args.cooling = self.args.cooling or false
  args.fan_only = self.args.fan_only or false
  args.pending_heat = self.args.pending_heat or false
  args.pending_cool = self.args.pending_cool or false
  args.vent_economizer = self.args.vent_economizer or false
  args.aux_heating = self.args.aux_heating or false
  args.second_stage_heating = self.args.second_stage_heating or false
  args.second_stage_cooling = self.args.second_stage_cooling or false
  args.second_stage_aux_heat = self.args.second_stage_aux_heat or false
  args.third_stage_aux_heat = self.args.third_stage_aux_heat or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.LoggingGetV2
--- @return st.zwave.CommandClass.ThermostatOperatingState.LoggingGetV2Args
function LoggingGetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.LoggingGetV2
function LoggingGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.LoggingGetV2
function LoggingGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2ArgsVg1
--- @alias LoggingReportV2ArgsVg1 st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2ArgsVg1
--- @field public operating_state_log_type integer [0,15]
--- @field public usage_today_hours integer [0,255]
--- @field public usage_today_minutes integer [0,255]
--- @field public usage_yesterday_hours integer [0,255]
--- @field public usage_yesterday_minutes integer [0,255]
local LoggingReportV2ArgsVg1 = {}

--- @class st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2Args
--- @alias LoggingReportV2Args st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2Args
--- @field public reports_to_follow integer [0,255]
--- @field public vg1 st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2ArgsVg1[]
local LoggingReportV2Args = {}

--- @class st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2:st.zwave.Command
--- @alias LoggingReportV2 st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2
---
--- v2 THERMOSTAT_OPERATING_STATE_LOGGING_REPORT
---
--- @field public cmd_class number 0x42
--- @field public cmd_id number 0x06
--- @field public version number 2
--- @field public args st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2Args command-specific arguments
local LoggingReportV2 = {}
setmetatable(LoggingReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 THERMOSTAT_OPERATING_STATE_LOGGING_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatOperatingState command class module instance
--- @param args st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2Args command-specific arguments
function LoggingReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_OPERATING_STATE, ThermostatOperatingState.LOGGING_REPORT, 2, args, ...)
end

--- Serialize v2 THERMOSTAT_OPERATING_STATE_LOGGING_REPORT arguments.
---
--- @return string serialized payload
function LoggingReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.reports_to_follow)
  for i=1,writer.length(args.vg1) do
    writer:write_bits(4, args.vg1[i].operating_state_log_type)
    writer:write_bits(4, 0) -- reserved
    writer:write_u8(args.vg1[i].usage_today_hours)
    writer:write_u8(args.vg1[i].usage_today_minutes)
    writer:write_u8(args.vg1[i].usage_yesterday_hours)
    writer:write_u8(args.vg1[i].usage_yesterday_minutes)
  end
  return writer.buf
end

--- Deserialize a v2 THERMOSTAT_OPERATING_STATE_LOGGING_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2Args deserialized arguments
function LoggingReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("reports_to_follow")
  reader.parsed.vg1 = {}
  while reader:remain() > 0 do
    local i = #reader.parsed.vg1 + 1
    reader.parsed.vg1[i] = {}
    reader:read_bits(4, "operating_state_log_type", reader.parsed.vg1[i])
    reader:read_bits(4) -- reserved
    reader:read_u8("usage_today_hours", reader.parsed.vg1[i])
    reader:read_u8("usage_today_minutes", reader.parsed.vg1[i])
    reader:read_u8("usage_yesterday_hours", reader.parsed.vg1[i])
    reader:read_u8("usage_yesterday_minutes", reader.parsed.vg1[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2
--- @return st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2Args
function LoggingReportV2._defaults(self)
  local args = {}
  args.reports_to_follow = self.args.reports_to_follow or 0
  args.vg1 = self.args.vg1 or {}
  for i=1,buf.Writer.length(args.vg1) do
    args.vg1[i] = args.vg1[i] or {}
    args.vg1[i].operating_state_log_type = self.args.vg1[i].operating_state_log_type or 0
    args.vg1[i].usage_today_hours = self.args.vg1[i].usage_today_hours or 0
    args.vg1[i].usage_today_minutes = self.args.vg1[i].usage_today_minutes or 0
    args.vg1[i].usage_yesterday_hours = self.args.vg1[i].usage_yesterday_hours or 0
    args.vg1[i].usage_yesterday_minutes = self.args.vg1[i].usage_yesterday_minutes or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2
--- @return st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2Args
function LoggingReportV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.vg1) do
    args.vg1[i] = args.vg1[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2
function LoggingReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2
function LoggingReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatOperatingState.Get
--- @alias _Get st.zwave.CommandClass.ThermostatOperatingState.Get
---
--- Dynamically versioned THERMOSTAT_OPERATING_STATE_GET
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x42
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatOperatingState.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_OPERATING_STATE_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatOperatingState command class module instance
--- @param args st.zwave.CommandClass.ThermostatOperatingState.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatOperatingState.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatOperatingState.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatOperatingState.Report
--- @alias _Report st.zwave.CommandClass.ThermostatOperatingState.Report
---
--- Dynamically versioned THERMOSTAT_OPERATING_STATE_REPORT
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x42
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatOperatingState.ReportV1Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_OPERATING_STATE_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatOperatingState command class module instance
--- @param args st.zwave.CommandClass.ThermostatOperatingState.ReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatOperatingState.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatOperatingState.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGet
--- @alias _LoggingSupportedGet st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGet
---
--- Dynamically versioned THERMOSTAT_OPERATING_STATE_LOGGING_SUPPORTED_GET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x42
--- @field public cmd_id number 0x01
--- @field public version number 2
--- @field public args st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGetV2Args
local _LoggingSupportedGet = {}
setmetatable(_LoggingSupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_OPERATING_STATE_LOGGING_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatOperatingState command class module instance
--- @param args st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatOperatingState.LoggingSupportedGet
function _LoggingSupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatOperatingState.LOGGING_SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReport
--- @alias _ThermostatOperatingLoggingSupportedReport st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReport
---
--- Dynamically versioned THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x42
--- @field public cmd_id number 0x04
--- @field public version number 2
--- @field public args st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2Args
local _ThermostatOperatingLoggingSupportedReport = {}
setmetatable(_ThermostatOperatingLoggingSupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatOperatingState command class module instance
--- @param args st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatOperatingState.ThermostatOperatingLoggingSupportedReport
function _ThermostatOperatingLoggingSupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatOperatingState.THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatOperatingState.LoggingGet
--- @alias _LoggingGet st.zwave.CommandClass.ThermostatOperatingState.LoggingGet
---
--- Dynamically versioned THERMOSTAT_OPERATING_STATE_LOGGING_GET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x42
--- @field public cmd_id number 0x05
--- @field public version number 2
--- @field public args st.zwave.CommandClass.ThermostatOperatingState.LoggingGetV2Args
local _LoggingGet = {}
setmetatable(_LoggingGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_OPERATING_STATE_LOGGING_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatOperatingState command class module instance
--- @param args st.zwave.CommandClass.ThermostatOperatingState.LoggingGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatOperatingState.LoggingGet
function _LoggingGet:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatOperatingState.LOGGING_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatOperatingState.LoggingReport
--- @alias _LoggingReport st.zwave.CommandClass.ThermostatOperatingState.LoggingReport
---
--- Dynamically versioned THERMOSTAT_OPERATING_STATE_LOGGING_REPORT
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x42
--- @field public cmd_id number 0x06
--- @field public version number 2
--- @field public args st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2Args
local _LoggingReport = {}
setmetatable(_LoggingReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_OPERATING_STATE_LOGGING_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatOperatingState command class module instance
--- @param args st.zwave.CommandClass.ThermostatOperatingState.LoggingReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatOperatingState.LoggingReport
function _LoggingReport:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatOperatingState.LOGGING_REPORT, module._serialization_version, args, ...)
end

ThermostatOperatingState.GetV1 = GetV1
ThermostatOperatingState.ReportV1 = ReportV1
ThermostatOperatingState.LoggingSupportedGetV2 = LoggingSupportedGetV2
ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2 = ThermostatOperatingLoggingSupportedReportV2
ThermostatOperatingState.LoggingGetV2 = LoggingGetV2
ThermostatOperatingState.LoggingReportV2 = LoggingReportV2
ThermostatOperatingState.Get = _Get
ThermostatOperatingState.Report = _Report
ThermostatOperatingState.LoggingSupportedGet = _LoggingSupportedGet
ThermostatOperatingState.ThermostatOperatingLoggingSupportedReport = _ThermostatOperatingLoggingSupportedReport
ThermostatOperatingState.LoggingGet = _LoggingGet
ThermostatOperatingState.LoggingReport = _LoggingReport

ThermostatOperatingState._lut = {
  [0] = { -- dynamically versioned constructors
    [ThermostatOperatingState.LOGGING_SUPPORTED_GET] = ThermostatOperatingState.LoggingSupportedGet,
    [ThermostatOperatingState.GET] = ThermostatOperatingState.Get,
    [ThermostatOperatingState.REPORT] = ThermostatOperatingState.Report,
    [ThermostatOperatingState.THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT] = ThermostatOperatingState.ThermostatOperatingLoggingSupportedReport,
    [ThermostatOperatingState.LOGGING_GET] = ThermostatOperatingState.LoggingGet,
    [ThermostatOperatingState.LOGGING_REPORT] = ThermostatOperatingState.LoggingReport
  },
  [1] = { -- version 1
    [ThermostatOperatingState.GET] = ThermostatOperatingState.GetV1,
    [ThermostatOperatingState.REPORT] = ThermostatOperatingState.ReportV1
  },
  [2] = { -- version 2
    [ThermostatOperatingState.LOGGING_SUPPORTED_GET] = ThermostatOperatingState.LoggingSupportedGetV2,
    [ThermostatOperatingState.GET] = ThermostatOperatingState.GetV1,
    [ThermostatOperatingState.REPORT] = ThermostatOperatingState.ReportV1,
    [ThermostatOperatingState.THERMOSTAT_OPERATING_LOGGING_SUPPORTED_REPORT] = ThermostatOperatingState.ThermostatOperatingLoggingSupportedReportV2,
    [ThermostatOperatingState.LOGGING_GET] = ThermostatOperatingState.LoggingGetV2,
    [ThermostatOperatingState.LOGGING_REPORT] = ThermostatOperatingState.LoggingReportV2
  }
}
--- @class st.zwave.CommandClass.ThermostatOperatingState.operating_state
--- @alias operating_state st.zwave.CommandClass.ThermostatOperatingState.operating_state
--- @field public IDLE number 0x00
--- @field public HEATING number 0x01
--- @field public COOLING number 0x02
--- @field public FAN_ONLY number 0x03
--- @field public PENDING_HEAT number 0x04
--- @field public PENDING_COOL number 0x05
--- @field public VENT_ECONOMIZER number 0x06
--- @field public AUX_HEATING number 0x07
--- @field public SECOND_STAGE_HEATING number 0x08
--- @field public SECOND_STAGE_COOLING number 0x09
--- @field public SECOND_STAGE_AUX_HEAT number 0x0A
--- @field public THIRD_STAGE_AUX_HEAT number 0x0B
local operating_state = {
  IDLE = 0x00,
  HEATING = 0x01,
  COOLING = 0x02,
  FAN_ONLY = 0x03,
  PENDING_HEAT = 0x04,
  PENDING_COOL = 0x05,
  VENT_ECONOMIZER = 0x06,
  AUX_HEATING = 0x07,
  SECOND_STAGE_HEATING = 0x08,
  SECOND_STAGE_COOLING = 0x09,
  SECOND_STAGE_AUX_HEAT = 0x0A,
  THIRD_STAGE_AUX_HEAT = 0x0B
}
ThermostatOperatingState.operating_state = operating_state
ThermostatOperatingState._reflect_operating_state = zw._reflection_builder(ThermostatOperatingState.operating_state)


return ThermostatOperatingState
