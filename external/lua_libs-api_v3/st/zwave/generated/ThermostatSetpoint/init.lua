-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.ThermostatSetpoint
--- @alias ThermostatSetpoint st.zwave.CommandClass.ThermostatSetpoint
---
--- Supported versions: 1,2,3
---
--- @field public SET number 0x01 - THERMOSTAT_SETPOINT_SET command id
--- @field public GET number 0x02 - THERMOSTAT_SETPOINT_GET command id
--- @field public REPORT number 0x03 - THERMOSTAT_SETPOINT_REPORT command id
--- @field public SUPPORTED_GET number 0x04 - THERMOSTAT_SETPOINT_SUPPORTED_GET command id
--- @field public SUPPORTED_REPORT number 0x05 - THERMOSTAT_SETPOINT_SUPPORTED_REPORT command id
--- @field public CAPABILITIES_GET number 0x09 - THERMOSTAT_SETPOINT_CAPABILITIES_GET command id
--- @field public CAPABILITIES_REPORT number 0x0A - THERMOSTAT_SETPOINT_CAPABILITIES_REPORT command id
local ThermostatSetpoint = {}
ThermostatSetpoint.SET = 0x01
ThermostatSetpoint.GET = 0x02
ThermostatSetpoint.REPORT = 0x03
ThermostatSetpoint.SUPPORTED_GET = 0x04
ThermostatSetpoint.SUPPORTED_REPORT = 0x05
ThermostatSetpoint.CAPABILITIES_GET = 0x09
ThermostatSetpoint.CAPABILITIES_REPORT = 0x0A

ThermostatSetpoint._commands = {
  [ThermostatSetpoint.SET] = "SET",
  [ThermostatSetpoint.GET] = "GET",
  [ThermostatSetpoint.REPORT] = "REPORT",
  [ThermostatSetpoint.SUPPORTED_GET] = "SUPPORTED_GET",
  [ThermostatSetpoint.SUPPORTED_REPORT] = "SUPPORTED_REPORT",
  [ThermostatSetpoint.CAPABILITIES_GET] = "CAPABILITIES_GET",
  [ThermostatSetpoint.CAPABILITIES_REPORT] = "CAPABILITIES_REPORT"
}

--- Instantiate a versioned instance of the ThermostatSetpoint Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.ThermostatSetpoint versioned command class instance
function ThermostatSetpoint:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.THERMOSTAT_SETPOINT][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(ThermostatSetpoint, {
  __call = ThermostatSetpoint.init
})

ThermostatSetpoint._serialization_version = nil
ThermostatSetpoint._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.THERMOSTAT_SETPOINT] = {
  [1] = true,
  [2] = true,
  [3] = true
}

--- @class st.zwave.CommandClass.ThermostatSetpoint.SetV1Args
--- @alias SetV1Args st.zwave.CommandClass.ThermostatSetpoint.SetV1Args
--- @field public setpoint_type integer see :lua:class:`ThermostatSetpoint.setpoint_type <st.zwave.CommandClass.ThermostatSetpoint.setpoint_type>`
--- @field public size integer [0,7]
--- @field public scale integer see :lua:class:`ThermostatSetpoint.scale <st.zwave.CommandClass.ThermostatSetpoint.scale>`
--- @field public precision integer [0,7]
--- @field public value number [-2147483648,2147483647]
local SetV1Args = {}

--- @class st.zwave.CommandClass.ThermostatSetpoint.SetV1:st.zwave.Command
--- @alias SetV1 st.zwave.CommandClass.ThermostatSetpoint.SetV1
---
--- v1 and forward-compatible v2,v3 THERMOSTAT_SETPOINT_SET
---
--- @field public cmd_class number 0x43
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatSetpoint.SetV1Args command-specific arguments
local SetV1 = {}
setmetatable(SetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 THERMOSTAT_SETPOINT_SET object.
---
--- @param module st.zwave.CommandClass.ThermostatSetpoint command class module instance
--- @param args st.zwave.CommandClass.ThermostatSetpoint.SetV1Args command-specific arguments
function SetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_SETPOINT, ThermostatSetpoint.SET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 THERMOSTAT_SETPOINT_SET arguments.
---
--- @return string serialized payload
function SetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(4, args.setpoint_type)
  writer:write_bits(4, 0) -- reserved
  writer:write_bits(3, args.size or writer.size(args.value))
  writer:write_bits(2, args.scale)
  writer:write_bits(3, args.precision or writer.precision(args.value))
  writer:write_vfloat(args.size or writer.size(args.value), args.precision or writer.precision(args.value), args.value)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 THERMOSTAT_SETPOINT_SET payload.
---
--- @return st.zwave.CommandClass.ThermostatSetpoint.SetV1Args deserialized arguments
function SetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(4, "setpoint_type")
  reader:read_bits(4) -- reserved
  reader:read_bits(3, "size")
  reader:read_bits(2, "scale")
  reader:read_bits(3, "precision")
  reader:read_vfloat(reader.parsed.size, reader.parsed.precision, "value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SetV1
--- @return st.zwave.CommandClass.ThermostatSetpoint.SetV1Args
function SetV1._defaults(self)
  local args = {}
  args.setpoint_type = self.args.setpoint_type or 0
  args.scale = self.args.scale or 0
  args.value = self.args.value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SetV1
--- @return st.zwave.CommandClass.ThermostatSetpoint.SetV1Args
function SetV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.size = args.size or writer.size(args.value)
  args.precision = args.precision or writer.precision(args.value)
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SetV1
function SetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SetV1
function SetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.setpoint_type = function()
    return zw._reflect(
      ThermostatSetpoint._reflect_setpoint_type,
      args.setpoint_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.scale = function()
    return zw._reflect(
      ThermostatSetpoint._reflect_scale,
      args.scale
    )
  end
end

--- @class st.zwave.CommandClass.ThermostatSetpoint.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.ThermostatSetpoint.GetV1Args
--- @field public setpoint_type integer see :lua:class:`ThermostatSetpoint.setpoint_type <st.zwave.CommandClass.ThermostatSetpoint.setpoint_type>`
local GetV1Args = {}

--- @class st.zwave.CommandClass.ThermostatSetpoint.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.ThermostatSetpoint.GetV1
---
--- v1 and forward-compatible v2,v3 THERMOSTAT_SETPOINT_GET
---
--- @field public cmd_class number 0x43
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatSetpoint.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 THERMOSTAT_SETPOINT_GET object.
---
--- @param module st.zwave.CommandClass.ThermostatSetpoint command class module instance
--- @param args st.zwave.CommandClass.ThermostatSetpoint.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_SETPOINT, ThermostatSetpoint.GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 THERMOSTAT_SETPOINT_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(4, args.setpoint_type)
  writer:write_bits(4, 0) -- reserved
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 THERMOSTAT_SETPOINT_GET payload.
---
--- @return st.zwave.CommandClass.ThermostatSetpoint.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(4, "setpoint_type")
  reader:read_bits(4) -- reserved
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.GetV1
--- @return st.zwave.CommandClass.ThermostatSetpoint.GetV1Args
function GetV1._defaults(self)
  local args = {}
  args.setpoint_type = self.args.setpoint_type or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.GetV1
--- @return st.zwave.CommandClass.ThermostatSetpoint.GetV1Args
function GetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.GetV1
function GetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.setpoint_type = function()
    return zw._reflect(
      ThermostatSetpoint._reflect_setpoint_type,
      args.setpoint_type
    )
  end
end

--- @class st.zwave.CommandClass.ThermostatSetpoint.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.ThermostatSetpoint.ReportV1Args
--- @field public setpoint_type integer see :lua:class:`ThermostatSetpoint.setpoint_type <st.zwave.CommandClass.ThermostatSetpoint.setpoint_type>`
--- @field public size integer [0,7]
--- @field public scale integer see :lua:class:`ThermostatSetpoint.scale <st.zwave.CommandClass.ThermostatSetpoint.scale>`
--- @field public precision integer [0,7]
--- @field public value number [-2147483648,2147483647]
local ReportV1Args = {}

--- @class st.zwave.CommandClass.ThermostatSetpoint.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.ThermostatSetpoint.ReportV1
---
--- v1 and forward-compatible v2,v3 THERMOSTAT_SETPOINT_REPORT
---
--- @field public cmd_class number 0x43
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatSetpoint.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 THERMOSTAT_SETPOINT_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatSetpoint command class module instance
--- @param args st.zwave.CommandClass.ThermostatSetpoint.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_SETPOINT, ThermostatSetpoint.REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 THERMOSTAT_SETPOINT_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(4, args.setpoint_type)
  writer:write_bits(4, 0) -- reserved
  writer:write_bits(3, args.size or writer.size(args.value))
  writer:write_bits(2, args.scale)
  writer:write_bits(3, args.precision or writer.precision(args.value))
  writer:write_vfloat(args.size or writer.size(args.value), args.precision or writer.precision(args.value), args.value)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 THERMOSTAT_SETPOINT_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatSetpoint.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(4, "setpoint_type")
  reader:read_bits(4) -- reserved
  reader:read_bits(3, "size")
  reader:read_bits(2, "scale")
  reader:read_bits(3, "precision")
  reader:read_vfloat(reader.parsed.size, reader.parsed.precision, "value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.ReportV1
--- @return st.zwave.CommandClass.ThermostatSetpoint.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.setpoint_type = self.args.setpoint_type or 0
  args.scale = self.args.scale or 0
  args.value = self.args.value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.ReportV1
--- @return st.zwave.CommandClass.ThermostatSetpoint.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.size = args.size or writer.size(args.value)
  args.precision = args.precision or writer.precision(args.value)
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.ReportV1
function ReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.setpoint_type = function()
    return zw._reflect(
      ThermostatSetpoint._reflect_setpoint_type,
      args.setpoint_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.scale = function()
    return zw._reflect(
      ThermostatSetpoint._reflect_scale,
      args.scale
    )
  end
end

--- @class st.zwave.CommandClass.ThermostatSetpoint.SupportedGetV1Args
--- @alias SupportedGetV1Args st.zwave.CommandClass.ThermostatSetpoint.SupportedGetV1Args
local SupportedGetV1Args = {}

--- @class st.zwave.CommandClass.ThermostatSetpoint.SupportedGetV1:st.zwave.Command
--- @alias SupportedGetV1 st.zwave.CommandClass.ThermostatSetpoint.SupportedGetV1
---
--- v1 and forward-compatible v2,v3 THERMOSTAT_SETPOINT_SUPPORTED_GET
---
--- @field public cmd_class number 0x43
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatSetpoint.SupportedGetV1Args command-specific arguments
local SupportedGetV1 = {}
setmetatable(SupportedGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 THERMOSTAT_SETPOINT_SUPPORTED_GET object.
---
--- @param module st.zwave.CommandClass.ThermostatSetpoint command class module instance
--- @param args st.zwave.CommandClass.ThermostatSetpoint.SupportedGetV1Args command-specific arguments
function SupportedGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_SETPOINT, ThermostatSetpoint.SUPPORTED_GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 THERMOSTAT_SETPOINT_SUPPORTED_GET arguments.
---
--- @return string serialized payload
function SupportedGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 THERMOSTAT_SETPOINT_SUPPORTED_GET payload.
---
--- @return st.zwave.CommandClass.ThermostatSetpoint.SupportedGetV1Args deserialized arguments
function SupportedGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SupportedGetV1
--- @return st.zwave.CommandClass.ThermostatSetpoint.SupportedGetV1Args
function SupportedGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SupportedGetV1
--- @return st.zwave.CommandClass.ThermostatSetpoint.SupportedGetV1Args
function SupportedGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SupportedGetV1
function SupportedGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SupportedGetV1
function SupportedGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV1Args
--- @alias SupportedReportV1Args st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV1Args
--- @field public none boolean
--- @field public heating boolean
--- @field public cooling boolean
--- @field public furnace boolean
--- @field public dry_air boolean
--- @field public moist_air boolean
--- @field public auto_changeover boolean
local SupportedReportV1Args = {}

--- @class st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV1:st.zwave.Command
--- @alias SupportedReportV1 st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV1
---
--- v1 THERMOSTAT_SETPOINT_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x43
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV1Args command-specific arguments
local SupportedReportV1 = {}
setmetatable(SupportedReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 THERMOSTAT_SETPOINT_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatSetpoint command class module instance
--- @param args st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV1Args command-specific arguments
function SupportedReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_SETPOINT, ThermostatSetpoint.SUPPORTED_REPORT, 1, args, ...)
end

--- Serialize v1 THERMOSTAT_SETPOINT_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.none)
  writer:write_bool(args.heating)
  writer:write_bool(args.cooling)
  writer:write_bits(4, 0) -- reserved
  writer:write_bool(args.furnace)
  writer:write_bool(args.dry_air)
  writer:write_bool(args.moist_air)
  writer:write_bool(args.auto_changeover)
  return writer.buf
end

--- Deserialize a v1 THERMOSTAT_SETPOINT_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV1Args deserialized arguments
function SupportedReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("none")
  reader:read_bool("heating")
  reader:read_bool("cooling")
  reader:bit_seek(4) -- reserved
  reader:read_bool("furnace")
  reader:read_bool("dry_air")
  reader:read_bool("moist_air")
  reader:read_bool("auto_changeover")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV1
--- @return st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV1Args
function SupportedReportV1._defaults(self)
  local args = {}
  args.none = self.args.none or false
  args.heating = self.args.heating or false
  args.cooling = self.args.cooling or false
  args.furnace = self.args.furnace or false
  args.dry_air = self.args.dry_air or false
  args.moist_air = self.args.moist_air or false
  args.auto_changeover = self.args.auto_changeover or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV1
--- @return st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV1Args
function SupportedReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV1
function SupportedReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV1
function SupportedReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV2Args
--- @alias SupportedReportV2Args st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV2Args
--- @field public none boolean
--- @field public heating boolean
--- @field public cooling boolean
--- @field public furnace boolean
--- @field public dry_air boolean
--- @field public moist_air boolean
--- @field public auto_changeover boolean
--- @field public energy_save_heating boolean
--- @field public energy_save_cooling boolean
--- @field public away_heating boolean
local SupportedReportV2Args = {}

--- @class st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV2:st.zwave.Command
--- @alias SupportedReportV2 st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV2
---
--- v2 THERMOSTAT_SETPOINT_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x43
--- @field public cmd_id number 0x05
--- @field public version number 2
--- @field public args st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV2Args command-specific arguments
local SupportedReportV2 = {}
setmetatable(SupportedReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 THERMOSTAT_SETPOINT_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatSetpoint command class module instance
--- @param args st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV2Args command-specific arguments
function SupportedReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_SETPOINT, ThermostatSetpoint.SUPPORTED_REPORT, 2, args, ...)
end

--- Serialize v2 THERMOSTAT_SETPOINT_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.none)
  writer:write_bool(args.heating)
  writer:write_bool(args.cooling)
  writer:write_bits(4, 0) -- reserved
  writer:write_bool(args.furnace)
  writer:write_bool(args.dry_air)
  writer:write_bool(args.moist_air)
  writer:write_bool(args.auto_changeover)
  writer:write_bool(args.energy_save_heating)
  writer:write_bool(args.energy_save_cooling)
  writer:write_bool(args.away_heating)
  return writer.buf
end

--- Deserialize a v2 THERMOSTAT_SETPOINT_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV2Args deserialized arguments
function SupportedReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("none")
  reader:read_bool("heating")
  reader:read_bool("cooling")
  reader:bit_seek(4) -- reserved
  reader:read_bool("furnace")
  reader:read_bool("dry_air")
  reader:read_bool("moist_air")
  reader:read_bool("auto_changeover")
  reader:read_bool("energy_save_heating")
  reader:read_bool("energy_save_cooling")
  reader:read_bool("away_heating")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV2
--- @return st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV2Args
function SupportedReportV2._defaults(self)
  local args = {}
  args.none = self.args.none or false
  args.heating = self.args.heating or false
  args.cooling = self.args.cooling or false
  args.furnace = self.args.furnace or false
  args.dry_air = self.args.dry_air or false
  args.moist_air = self.args.moist_air or false
  args.auto_changeover = self.args.auto_changeover or false
  args.energy_save_heating = self.args.energy_save_heating or false
  args.energy_save_cooling = self.args.energy_save_cooling or false
  args.away_heating = self.args.away_heating or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV2
--- @return st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV2Args
function SupportedReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV2
function SupportedReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV2
function SupportedReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV3Args
--- @alias SupportedReportV3Args st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV3Args
--- @field public none boolean
--- @field public heating boolean
--- @field public cooling boolean
--- @field public furnace boolean
--- @field public dry_air boolean
--- @field public moist_air boolean
--- @field public auto_changeover boolean
--- @field public energy_save_heating boolean
--- @field public energy_save_cooling boolean
--- @field public away_heating boolean
--- @field public away_cooling boolean
--- @field public full_power boolean
local SupportedReportV3Args = {}

--- @class st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV3:st.zwave.Command
--- @alias SupportedReportV3 st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV3
---
--- v3 THERMOSTAT_SETPOINT_SUPPORTED_REPORT
---
--- @field public cmd_class number 0x43
--- @field public cmd_id number 0x05
--- @field public version number 3
--- @field public args st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV3Args command-specific arguments
local SupportedReportV3 = {}
setmetatable(SupportedReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 THERMOSTAT_SETPOINT_SUPPORTED_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatSetpoint command class module instance
--- @param args st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV3Args command-specific arguments
function SupportedReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_SETPOINT, ThermostatSetpoint.SUPPORTED_REPORT, 3, args, ...)
end

--- Serialize v3 THERMOSTAT_SETPOINT_SUPPORTED_REPORT arguments.
---
--- @return string serialized payload
function SupportedReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.none)
  writer:write_bool(args.heating)
  writer:write_bool(args.cooling)
  writer:write_bits(4, 0) -- reserved
  writer:write_bool(args.furnace)
  writer:write_bool(args.dry_air)
  writer:write_bool(args.moist_air)
  writer:write_bool(args.auto_changeover)
  writer:write_bool(args.energy_save_heating)
  writer:write_bool(args.energy_save_cooling)
  writer:write_bool(args.away_heating)
  writer:write_bool(args.away_cooling)
  writer:write_bool(args.full_power)
  return writer.buf
end

--- Deserialize a v3 THERMOSTAT_SETPOINT_SUPPORTED_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV3Args deserialized arguments
function SupportedReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("none")
  reader:read_bool("heating")
  reader:read_bool("cooling")
  reader:bit_seek(4) -- reserved
  reader:read_bool("furnace")
  reader:read_bool("dry_air")
  reader:read_bool("moist_air")
  reader:read_bool("auto_changeover")
  reader:read_bool("energy_save_heating")
  reader:read_bool("energy_save_cooling")
  reader:read_bool("away_heating")
  reader:read_bool("away_cooling")
  reader:read_bool("full_power")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV3
--- @return st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV3Args
function SupportedReportV3._defaults(self)
  local args = {}
  args.none = self.args.none or false
  args.heating = self.args.heating or false
  args.cooling = self.args.cooling or false
  args.furnace = self.args.furnace or false
  args.dry_air = self.args.dry_air or false
  args.moist_air = self.args.moist_air or false
  args.auto_changeover = self.args.auto_changeover or false
  args.energy_save_heating = self.args.energy_save_heating or false
  args.energy_save_cooling = self.args.energy_save_cooling or false
  args.away_heating = self.args.away_heating or false
  args.away_cooling = self.args.away_cooling or false
  args.full_power = self.args.full_power or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV3
--- @return st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV3Args
function SupportedReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV3
function SupportedReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV3
function SupportedReportV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGetV3Args
--- @alias CapabilitiesGetV3Args st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGetV3Args
--- @field public setpoint_type integer see :lua:class:`ThermostatSetpoint.setpoint_type <st.zwave.CommandClass.ThermostatSetpoint.setpoint_type>`
local CapabilitiesGetV3Args = {}

--- @class st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGetV3:st.zwave.Command
--- @alias CapabilitiesGetV3 st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGetV3
---
--- v3 THERMOSTAT_SETPOINT_CAPABILITIES_GET
---
--- @field public cmd_class number 0x43
--- @field public cmd_id number 0x09
--- @field public version number 3
--- @field public args st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGetV3Args command-specific arguments
local CapabilitiesGetV3 = {}
setmetatable(CapabilitiesGetV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 THERMOSTAT_SETPOINT_CAPABILITIES_GET object.
---
--- @param module st.zwave.CommandClass.ThermostatSetpoint command class module instance
--- @param args st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGetV3Args command-specific arguments
function CapabilitiesGetV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_SETPOINT, ThermostatSetpoint.CAPABILITIES_GET, 3, args, ...)
end

--- Serialize v3 THERMOSTAT_SETPOINT_CAPABILITIES_GET arguments.
---
--- @return string serialized payload
function CapabilitiesGetV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(4, args.setpoint_type)
  writer:write_bits(4, 0) -- reserved
  return writer.buf
end

--- Deserialize a v3 THERMOSTAT_SETPOINT_CAPABILITIES_GET payload.
---
--- @return st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGetV3Args deserialized arguments
function CapabilitiesGetV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(4, "setpoint_type")
  reader:read_bits(4) -- reserved
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGetV3
--- @return st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGetV3Args
function CapabilitiesGetV3._defaults(self)
  local args = {}
  args.setpoint_type = self.args.setpoint_type or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGetV3
--- @return st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGetV3Args
function CapabilitiesGetV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGetV3
function CapabilitiesGetV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGetV3
function CapabilitiesGetV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.setpoint_type = function()
    return zw._reflect(
      ThermostatSetpoint._reflect_setpoint_type,
      args.setpoint_type
    )
  end
end

--- @class st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReportV3Args
--- @alias CapabilitiesReportV3Args st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReportV3Args
--- @field public setpoint_type integer see :lua:class:`ThermostatSetpoint.setpoint_type <st.zwave.CommandClass.ThermostatSetpoint.setpoint_type>`
--- @field public size1 integer [0,7]
--- @field public scale1 integer see :lua:class:`ThermostatSetpoint.scale <st.zwave.CommandClass.ThermostatSetpoint.scale>`
--- @field public precision1 integer [0,7]
--- @field public min_value number [-2147483648,2147483647]
--- @field public size2 integer [0,7]
--- @field public scale2 integer see :lua:class:`ThermostatSetpoint.scale <st.zwave.CommandClass.ThermostatSetpoint.scale>`
--- @field public precision2 integer [0,7]
--- @field public max_value number [-2147483648,2147483647]
local CapabilitiesReportV3Args = {}

--- @class st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReportV3:st.zwave.Command
--- @alias CapabilitiesReportV3 st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReportV3
---
--- v3 THERMOSTAT_SETPOINT_CAPABILITIES_REPORT
---
--- @field public cmd_class number 0x43
--- @field public cmd_id number 0x0A
--- @field public version number 3
--- @field public args st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReportV3Args command-specific arguments
local CapabilitiesReportV3 = {}
setmetatable(CapabilitiesReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 THERMOSTAT_SETPOINT_CAPABILITIES_REPORT object.
---
--- @param module st.zwave.CommandClass.ThermostatSetpoint command class module instance
--- @param args st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReportV3Args command-specific arguments
function CapabilitiesReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.THERMOSTAT_SETPOINT, ThermostatSetpoint.CAPABILITIES_REPORT, 3, args, ...)
end

--- Serialize v3 THERMOSTAT_SETPOINT_CAPABILITIES_REPORT arguments.
---
--- @return string serialized payload
function CapabilitiesReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(4, args.setpoint_type)
  writer:write_bits(4, 0) -- reserved
  writer:write_bits(3, args.size1 or writer.size(args.min_value))
  writer:write_bits(2, args.scale1)
  writer:write_bits(3, args.precision1 or writer.precision(args.min_value))
  writer:write_vfloat(args.size1 or writer.size(args.min_value), args.precision1 or writer.precision(args.min_value), args.min_value)
  writer:write_bits(3, args.size2 or writer.size(args.max_value))
  writer:write_bits(2, args.scale2)
  writer:write_bits(3, args.precision2 or writer.precision(args.max_value))
  writer:write_vfloat(args.size2 or writer.size(args.max_value), args.precision2 or writer.precision(args.max_value), args.max_value)
  return writer.buf
end

--- Deserialize a v3 THERMOSTAT_SETPOINT_CAPABILITIES_REPORT payload.
---
--- @return st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReportV3Args deserialized arguments
function CapabilitiesReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(4, "setpoint_type")
  reader:read_bits(4) -- reserved
  reader:read_bits(3, "size1")
  reader:read_bits(2, "scale1")
  reader:read_bits(3, "precision1")
  reader:read_vfloat(reader.parsed.size1, reader.parsed.precision1, "min_value")
  reader:read_bits(3, "size2")
  reader:read_bits(2, "scale2")
  reader:read_bits(3, "precision2")
  reader:read_vfloat(reader.parsed.size2, reader.parsed.precision2, "max_value")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReportV3
--- @return st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReportV3Args
function CapabilitiesReportV3._defaults(self)
  local args = {}
  args.setpoint_type = self.args.setpoint_type or 0
  args.scale1 = self.args.scale1 or 0
  args.min_value = self.args.min_value or 0
  args.scale2 = self.args.scale2 or 0
  args.max_value = self.args.max_value or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReportV3
--- @return st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReportV3Args
function CapabilitiesReportV3._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  args.size1 = args.size1 or writer.size(args.min_value)
  args.precision1 = args.precision1 or writer.precision(args.min_value)
  args.size2 = args.size2 or writer.size(args.max_value)
  args.precision2 = args.precision2 or writer.precision(args.max_value)
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReportV3
function CapabilitiesReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReportV3
function CapabilitiesReportV3._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.setpoint_type = function()
    return zw._reflect(
      ThermostatSetpoint._reflect_setpoint_type,
      args.setpoint_type
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.scale1 = function()
    return zw._reflect(
      ThermostatSetpoint._reflect_scale,
      args.scale1
    )
  end
  args._reflect = args._reflect or {}
  args._reflect.scale2 = function()
    return zw._reflect(
      ThermostatSetpoint._reflect_scale,
      args.scale2
    )
  end
end

--- @class st.zwave.CommandClass.ThermostatSetpoint.Set
--- @alias _Set st.zwave.CommandClass.ThermostatSetpoint.Set
---
--- Dynamically versioned THERMOSTAT_SETPOINT_SET
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x43
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatSetpoint.SetV1Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_SETPOINT_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatSetpoint command class module instance
--- @param args st.zwave.CommandClass.ThermostatSetpoint.SetV1Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatSetpoint.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatSetpoint.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatSetpoint.Get
--- @alias _Get st.zwave.CommandClass.ThermostatSetpoint.Get
---
--- Dynamically versioned THERMOSTAT_SETPOINT_GET
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x43
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatSetpoint.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_SETPOINT_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatSetpoint command class module instance
--- @param args st.zwave.CommandClass.ThermostatSetpoint.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatSetpoint.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatSetpoint.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatSetpoint.Report
--- @alias _Report st.zwave.CommandClass.ThermostatSetpoint.Report
---
--- Dynamically versioned THERMOSTAT_SETPOINT_REPORT
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x43
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatSetpoint.ReportV1Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_SETPOINT_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatSetpoint command class module instance
--- @param args st.zwave.CommandClass.ThermostatSetpoint.ReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatSetpoint.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatSetpoint.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatSetpoint.SupportedGet
--- @alias _SupportedGet st.zwave.CommandClass.ThermostatSetpoint.SupportedGet
---
--- Dynamically versioned THERMOSTAT_SETPOINT_SUPPORTED_GET
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x43
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.ThermostatSetpoint.SupportedGetV1Args
local _SupportedGet = {}
setmetatable(_SupportedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_SETPOINT_SUPPORTED_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatSetpoint command class module instance
--- @param args st.zwave.CommandClass.ThermostatSetpoint.SupportedGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatSetpoint.SupportedGet
function _SupportedGet:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatSetpoint.SUPPORTED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatSetpoint.SupportedReport
--- @alias _SupportedReport st.zwave.CommandClass.ThermostatSetpoint.SupportedReport
---
--- Dynamically versioned THERMOSTAT_SETPOINT_SUPPORTED_REPORT
---
--- Supported versions: 1,2,3; unique base versions: 1,2,3
---
--- @field public cmd_class number 0x43
--- @field public cmd_id number 0x05
--- @field public version number 1,2,3
--- @field public args st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV1Args|st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV2Args|st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV3Args
local _SupportedReport = {}
setmetatable(_SupportedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_SETPOINT_SUPPORTED_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatSetpoint command class module instance
--- @param args st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV1Args|st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV2Args|st.zwave.CommandClass.ThermostatSetpoint.SupportedReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatSetpoint.SupportedReport
function _SupportedReport:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatSetpoint.SUPPORTED_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGet
--- @alias _CapabilitiesGet st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGet
---
--- Dynamically versioned THERMOSTAT_SETPOINT_CAPABILITIES_GET
---
--- Supported versions: 3; unique base versions: 3
---
--- @field public cmd_class number 0x43
--- @field public cmd_id number 0x09
--- @field public version number 3
--- @field public args st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGetV3Args
local _CapabilitiesGet = {}
setmetatable(_CapabilitiesGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_SETPOINT_CAPABILITIES_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatSetpoint command class module instance
--- @param args st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGetV3Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesGet
function _CapabilitiesGet:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatSetpoint.CAPABILITIES_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReport
--- @alias _CapabilitiesReport st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReport
---
--- Dynamically versioned THERMOSTAT_SETPOINT_CAPABILITIES_REPORT
---
--- Supported versions: 3; unique base versions: 3
---
--- @field public cmd_class number 0x43
--- @field public cmd_id number 0x0A
--- @field public version number 3
--- @field public args st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReportV3Args
local _CapabilitiesReport = {}
setmetatable(_CapabilitiesReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a THERMOSTAT_SETPOINT_CAPABILITIES_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.ThermostatSetpoint command class module instance
--- @param args st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.ThermostatSetpoint.CapabilitiesReport
function _CapabilitiesReport:construct(module, args, ...)
  return zw.Command._construct(module, ThermostatSetpoint.CAPABILITIES_REPORT, module._serialization_version, args, ...)
end

ThermostatSetpoint.SetV1 = SetV1
ThermostatSetpoint.GetV1 = GetV1
ThermostatSetpoint.ReportV1 = ReportV1
ThermostatSetpoint.SupportedGetV1 = SupportedGetV1
ThermostatSetpoint.SupportedReportV1 = SupportedReportV1
ThermostatSetpoint.SupportedReportV2 = SupportedReportV2
ThermostatSetpoint.SupportedReportV3 = SupportedReportV3
ThermostatSetpoint.CapabilitiesGetV3 = CapabilitiesGetV3
ThermostatSetpoint.CapabilitiesReportV3 = CapabilitiesReportV3
ThermostatSetpoint.Set = _Set
ThermostatSetpoint.Get = _Get
ThermostatSetpoint.Report = _Report
ThermostatSetpoint.SupportedGet = _SupportedGet
ThermostatSetpoint.SupportedReport = _SupportedReport
ThermostatSetpoint.CapabilitiesGet = _CapabilitiesGet
ThermostatSetpoint.CapabilitiesReport = _CapabilitiesReport

ThermostatSetpoint._lut = {
  [0] = { -- dynamically versioned constructors
    [ThermostatSetpoint.SET] = ThermostatSetpoint.Set,
    [ThermostatSetpoint.GET] = ThermostatSetpoint.Get,
    [ThermostatSetpoint.REPORT] = ThermostatSetpoint.Report,
    [ThermostatSetpoint.SUPPORTED_GET] = ThermostatSetpoint.SupportedGet,
    [ThermostatSetpoint.SUPPORTED_REPORT] = ThermostatSetpoint.SupportedReport,
    [ThermostatSetpoint.CAPABILITIES_GET] = ThermostatSetpoint.CapabilitiesGet,
    [ThermostatSetpoint.CAPABILITIES_REPORT] = ThermostatSetpoint.CapabilitiesReport
  },
  [1] = { -- version 1
    [ThermostatSetpoint.SET] = ThermostatSetpoint.SetV1,
    [ThermostatSetpoint.GET] = ThermostatSetpoint.GetV1,
    [ThermostatSetpoint.REPORT] = ThermostatSetpoint.ReportV1,
    [ThermostatSetpoint.SUPPORTED_GET] = ThermostatSetpoint.SupportedGetV1,
    [ThermostatSetpoint.SUPPORTED_REPORT] = ThermostatSetpoint.SupportedReportV1
  },
  [2] = { -- version 2
    [ThermostatSetpoint.SET] = ThermostatSetpoint.SetV1,
    [ThermostatSetpoint.GET] = ThermostatSetpoint.GetV1,
    [ThermostatSetpoint.REPORT] = ThermostatSetpoint.ReportV1,
    [ThermostatSetpoint.SUPPORTED_GET] = ThermostatSetpoint.SupportedGetV1,
    [ThermostatSetpoint.SUPPORTED_REPORT] = ThermostatSetpoint.SupportedReportV2
  },
  [3] = { -- version 3
    [ThermostatSetpoint.SET] = ThermostatSetpoint.SetV1,
    [ThermostatSetpoint.GET] = ThermostatSetpoint.GetV1,
    [ThermostatSetpoint.REPORT] = ThermostatSetpoint.ReportV1,
    [ThermostatSetpoint.SUPPORTED_GET] = ThermostatSetpoint.SupportedGetV1,
    [ThermostatSetpoint.SUPPORTED_REPORT] = ThermostatSetpoint.SupportedReportV3,
    [ThermostatSetpoint.CAPABILITIES_GET] = ThermostatSetpoint.CapabilitiesGetV3,
    [ThermostatSetpoint.CAPABILITIES_REPORT] = ThermostatSetpoint.CapabilitiesReportV3
  }
}
--- @class st.zwave.CommandClass.ThermostatSetpoint.scale
--- @alias scale st.zwave.CommandClass.ThermostatSetpoint.scale
--- @field public CELSIUS number 0x00
--- @field public FAHRENHEIT number 0x01
local scale = {
  CELSIUS = 0x00,
  FAHRENHEIT = 0x01
}
ThermostatSetpoint.scale = scale
ThermostatSetpoint._reflect_scale = zw._reflection_builder(ThermostatSetpoint.scale)

--- @class st.zwave.CommandClass.ThermostatSetpoint.setpoint_type
--- @alias setpoint_type st.zwave.CommandClass.ThermostatSetpoint.setpoint_type
--- @field public HEATING_1 number 0x01
--- @field public COOLING_1 number 0x02
--- @field public FURNACE number 0x07
--- @field public DRY_AIR number 0x08
--- @field public MOIST_AIR number 0x09
--- @field public AUTO_CHANGEOVER number 0x0A
--- @field public ENERGY_SAVE_HEATING number 0x0B
--- @field public ENERGY_SAVE_COOLING number 0x0C
--- @field public AWAY_HEATING number 0x0D
--- @field public AWAY_COOLING number 0x0E
--- @field public FULL_POWER number 0x0F
local setpoint_type = {
  HEATING_1 = 0x01,
  COOLING_1 = 0x02,
  FURNACE = 0x07,
  DRY_AIR = 0x08,
  MOIST_AIR = 0x09,
  AUTO_CHANGEOVER = 0x0A,
  ENERGY_SAVE_HEATING = 0x0B,
  ENERGY_SAVE_COOLING = 0x0C,
  AWAY_HEATING = 0x0D,
  AWAY_COOLING = 0x0E,
  FULL_POWER = 0x0F
}
ThermostatSetpoint.setpoint_type = setpoint_type
ThermostatSetpoint._reflect_setpoint_type = zw._reflection_builder(ThermostatSetpoint.setpoint_type)


return ThermostatSetpoint
