-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.UserCode
--- @alias UserCode st.zwave.CommandClass.UserCode
---
--- Supported versions: 1,2
---
--- @field public SET number 0x01 - USER_CODE_SET command id
--- @field public GET number 0x02 - USER_CODE_GET command id
--- @field public REPORT number 0x03 - USER_CODE_REPORT command id
--- @field public USERS_NUMBER_GET number 0x04 - USERS_NUMBER_GET command id
--- @field public USERS_NUMBER_REPORT number 0x05 - USERS_NUMBER_REPORT command id
--- @field public CAPABILITIES_GET number 0x06 - USER_CODE_CAPABILITIES_GET command id
--- @field public CAPABILITIES_REPORT number 0x07 - USER_CODE_CAPABILITIES_REPORT command id
--- @field public KEYPAD_MODE_SET number 0x08 - USER_CODE_KEYPAD_MODE_SET command id
--- @field public KEYPAD_MODE_GET number 0x09 - USER_CODE_KEYPAD_MODE_GET command id
--- @field public KEYPAD_MODE_REPORT number 0x0A - USER_CODE_KEYPAD_MODE_REPORT command id
--- @field public EXTENDED_SET number 0x0B - EXTENDED_USER_CODE_SET command id
--- @field public EXTENDED_GET number 0x0C - EXTENDED_USER_CODE_GET command id
--- @field public EXTENDED_REPORT number 0x0D - EXTENDED_USER_CODE_REPORT command id
--- @field public MASTER_CODE_SET number 0x0E - MASTER_CODE_SET command id
--- @field public MASTER_CODE_GET number 0x0F - MASTER_CODE_GET command id
--- @field public MASTER_CODE_REPORT number 0x10 - MASTER_CODE_REPORT command id
--- @field public CHECKSUM_GET number 0x11 - USER_CODE_CHECKSUM_GET command id
--- @field public CHECKSUM_REPORT number 0x12 - USER_CODE_CHECKSUM_REPORT command id
local UserCode = {}
UserCode.SET = 0x01
UserCode.GET = 0x02
UserCode.REPORT = 0x03
UserCode.USERS_NUMBER_GET = 0x04
UserCode.USERS_NUMBER_REPORT = 0x05
UserCode.CAPABILITIES_GET = 0x06
UserCode.CAPABILITIES_REPORT = 0x07
UserCode.KEYPAD_MODE_SET = 0x08
UserCode.KEYPAD_MODE_GET = 0x09
UserCode.KEYPAD_MODE_REPORT = 0x0A
UserCode.EXTENDED_SET = 0x0B
UserCode.EXTENDED_GET = 0x0C
UserCode.EXTENDED_REPORT = 0x0D
UserCode.MASTER_CODE_SET = 0x0E
UserCode.MASTER_CODE_GET = 0x0F
UserCode.MASTER_CODE_REPORT = 0x10
UserCode.CHECKSUM_GET = 0x11
UserCode.CHECKSUM_REPORT = 0x12

UserCode._commands = {
  [UserCode.SET] = "SET",
  [UserCode.GET] = "GET",
  [UserCode.REPORT] = "REPORT",
  [UserCode.USERS_NUMBER_GET] = "USERS_NUMBER_GET",
  [UserCode.USERS_NUMBER_REPORT] = "USERS_NUMBER_REPORT",
  [UserCode.CAPABILITIES_GET] = "CAPABILITIES_GET",
  [UserCode.CAPABILITIES_REPORT] = "CAPABILITIES_REPORT",
  [UserCode.KEYPAD_MODE_SET] = "KEYPAD_MODE_SET",
  [UserCode.KEYPAD_MODE_GET] = "KEYPAD_MODE_GET",
  [UserCode.KEYPAD_MODE_REPORT] = "KEYPAD_MODE_REPORT",
  [UserCode.EXTENDED_SET] = "EXTENDED_SET",
  [UserCode.EXTENDED_GET] = "EXTENDED_GET",
  [UserCode.EXTENDED_REPORT] = "EXTENDED_REPORT",
  [UserCode.MASTER_CODE_SET] = "MASTER_CODE_SET",
  [UserCode.MASTER_CODE_GET] = "MASTER_CODE_GET",
  [UserCode.MASTER_CODE_REPORT] = "MASTER_CODE_REPORT",
  [UserCode.CHECKSUM_GET] = "CHECKSUM_GET",
  [UserCode.CHECKSUM_REPORT] = "CHECKSUM_REPORT"
}

--- Instantiate a versioned instance of the UserCode Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.UserCode versioned command class instance
function UserCode:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.USER_CODE][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(UserCode, {
  __call = UserCode.init
})

UserCode._serialization_version = nil
UserCode._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.USER_CODE] = {
  [1] = true,
  [2] = true
}

--- @class st.zwave.CommandClass.UserCode.SetV1Args
--- @alias SetV1Args st.zwave.CommandClass.UserCode.SetV1Args
--- @field public user_identifier integer [0,255]
--- @field public user_id_status integer see :lua:class:`UserCode.user_id_status <st.zwave.CommandClass.UserCode.user_id_status>`
--- @field public user_code string
local SetV1Args = {}

--- @class st.zwave.CommandClass.UserCode.SetV1:st.zwave.Command
--- @alias SetV1 st.zwave.CommandClass.UserCode.SetV1
---
--- v1 and forward-compatible v2 USER_CODE_SET
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.UserCode.SetV1Args command-specific arguments
local SetV1 = {}
setmetatable(SetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 USER_CODE_SET object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.SetV1Args command-specific arguments
function SetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.SET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 USER_CODE_SET arguments.
---
--- @return string serialized payload
function SetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.user_identifier)
  writer:write_u8(args.user_id_status)
  writer:write_bytes(args.user_code)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 USER_CODE_SET payload.
---
--- @return st.zwave.CommandClass.UserCode.SetV1Args deserialized arguments
function SetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("user_identifier")
  reader:read_u8("user_id_status")
  reader:read_bytes(reader:remain(), "user_code")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.SetV1
--- @return st.zwave.CommandClass.UserCode.SetV1Args
function SetV1._defaults(self)
  local args = {}
  args.user_identifier = self.args.user_identifier or 0
  args.user_id_status = self.args.user_id_status or 0
  args.user_code = self.args.user_code or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.SetV1
--- @return st.zwave.CommandClass.UserCode.SetV1Args
function SetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.SetV1
function SetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.SetV1
function SetV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.user_id_status = function()
    return zw._reflect(
      UserCode._reflect_user_id_status,
      args.user_id_status
    )
  end
end

--- @class st.zwave.CommandClass.UserCode.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.UserCode.GetV1Args
--- @field public user_identifier integer [0,255]
local GetV1Args = {}

--- @class st.zwave.CommandClass.UserCode.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.UserCode.GetV1
---
--- v1 and forward-compatible v2 USER_CODE_GET
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.UserCode.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 USER_CODE_GET object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 USER_CODE_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.user_identifier)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 USER_CODE_GET payload.
---
--- @return st.zwave.CommandClass.UserCode.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("user_identifier")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.GetV1
--- @return st.zwave.CommandClass.UserCode.GetV1Args
function GetV1._defaults(self)
  local args = {}
  args.user_identifier = self.args.user_identifier or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.GetV1
--- @return st.zwave.CommandClass.UserCode.GetV1Args
function GetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.UserCode.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.UserCode.ReportV1Args
--- @field public user_identifier integer [0,255]
--- @field public user_id_status integer see :lua:class:`UserCode.user_id_status <st.zwave.CommandClass.UserCode.user_id_status>`
--- @field public user_code string
local ReportV1Args = {}

--- @class st.zwave.CommandClass.UserCode.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.UserCode.ReportV1
---
--- v1 and forward-compatible v2 USER_CODE_REPORT
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.UserCode.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 USER_CODE_REPORT object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 USER_CODE_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.user_identifier)
  writer:write_u8(args.user_id_status)
  writer:write_bytes(args.user_code)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 USER_CODE_REPORT payload.
---
--- @return st.zwave.CommandClass.UserCode.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("user_identifier")
  reader:read_u8("user_id_status")
  reader:read_bytes(reader:remain(), "user_code")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.ReportV1
--- @return st.zwave.CommandClass.UserCode.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.user_identifier = self.args.user_identifier or 0
  args.user_id_status = self.args.user_id_status or 0
  args.user_code = self.args.user_code or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.ReportV1
--- @return st.zwave.CommandClass.UserCode.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.ReportV1
function ReportV1._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.user_id_status = function()
    return zw._reflect(
      UserCode._reflect_user_id_status,
      args.user_id_status
    )
  end
end

--- @class st.zwave.CommandClass.UserCode.UsersNumberGetV1Args
--- @alias UsersNumberGetV1Args st.zwave.CommandClass.UserCode.UsersNumberGetV1Args
local UsersNumberGetV1Args = {}

--- @class st.zwave.CommandClass.UserCode.UsersNumberGetV1:st.zwave.Command
--- @alias UsersNumberGetV1 st.zwave.CommandClass.UserCode.UsersNumberGetV1
---
--- v1 and forward-compatible v2 USERS_NUMBER_GET
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.UserCode.UsersNumberGetV1Args command-specific arguments
local UsersNumberGetV1 = {}
setmetatable(UsersNumberGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2 USERS_NUMBER_GET object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.UsersNumberGetV1Args command-specific arguments
function UsersNumberGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.USERS_NUMBER_GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2 USERS_NUMBER_GET arguments.
---
--- @return string serialized payload
function UsersNumberGetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2 USERS_NUMBER_GET payload.
---
--- @return st.zwave.CommandClass.UserCode.UsersNumberGetV1Args deserialized arguments
function UsersNumberGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.UsersNumberGetV1
--- @return st.zwave.CommandClass.UserCode.UsersNumberGetV1Args
function UsersNumberGetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.UsersNumberGetV1
--- @return st.zwave.CommandClass.UserCode.UsersNumberGetV1Args
function UsersNumberGetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.UsersNumberGetV1
function UsersNumberGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.UsersNumberGetV1
function UsersNumberGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.UserCode.UsersNumberReportV1Args
--- @alias UsersNumberReportV1Args st.zwave.CommandClass.UserCode.UsersNumberReportV1Args
--- @field public supported_users integer [0,255]
local UsersNumberReportV1Args = {}

--- @class st.zwave.CommandClass.UserCode.UsersNumberReportV1:st.zwave.Command
--- @alias UsersNumberReportV1 st.zwave.CommandClass.UserCode.UsersNumberReportV1
---
--- v1 USERS_NUMBER_REPORT
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x05
--- @field public version number 1
--- @field public args st.zwave.CommandClass.UserCode.UsersNumberReportV1Args command-specific arguments
local UsersNumberReportV1 = {}
setmetatable(UsersNumberReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 USERS_NUMBER_REPORT object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.UsersNumberReportV1Args command-specific arguments
function UsersNumberReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.USERS_NUMBER_REPORT, 1, args, ...)
end

--- Serialize v1 USERS_NUMBER_REPORT arguments.
---
--- @return string serialized payload
function UsersNumberReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.supported_users)
  return writer.buf
end

--- Deserialize a v1 USERS_NUMBER_REPORT payload.
---
--- @return st.zwave.CommandClass.UserCode.UsersNumberReportV1Args deserialized arguments
function UsersNumberReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("supported_users")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.UsersNumberReportV1
--- @return st.zwave.CommandClass.UserCode.UsersNumberReportV1Args
function UsersNumberReportV1._defaults(self)
  local args = {}
  args.supported_users = self.args.supported_users or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.UsersNumberReportV1
--- @return st.zwave.CommandClass.UserCode.UsersNumberReportV1Args
function UsersNumberReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.UsersNumberReportV1
function UsersNumberReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.UsersNumberReportV1
function UsersNumberReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.UserCode.UsersNumberReportV2Args
--- @alias UsersNumberReportV2Args st.zwave.CommandClass.UserCode.UsersNumberReportV2Args
--- @field public supported_users integer [0,255]
--- @field public extended_supported_users integer [0,65535]
local UsersNumberReportV2Args = {}

--- @class st.zwave.CommandClass.UserCode.UsersNumberReportV2:st.zwave.Command
--- @alias UsersNumberReportV2 st.zwave.CommandClass.UserCode.UsersNumberReportV2
---
--- v2 USERS_NUMBER_REPORT
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x05
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.UsersNumberReportV2Args command-specific arguments
local UsersNumberReportV2 = {}
setmetatable(UsersNumberReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 USERS_NUMBER_REPORT object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.UsersNumberReportV2Args command-specific arguments
function UsersNumberReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.USERS_NUMBER_REPORT, 2, args, ...)
end

--- Serialize v2 USERS_NUMBER_REPORT arguments.
---
--- @return string serialized payload
function UsersNumberReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.supported_users)
  writer:write_be_u16(args.extended_supported_users)
  return writer.buf
end

--- Deserialize a v2 USERS_NUMBER_REPORT payload.
---
--- @return st.zwave.CommandClass.UserCode.UsersNumberReportV2Args deserialized arguments
function UsersNumberReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("supported_users")
  reader:read_be_u16("extended_supported_users")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.UsersNumberReportV2
--- @return st.zwave.CommandClass.UserCode.UsersNumberReportV2Args
function UsersNumberReportV2._defaults(self)
  local args = {}
  args.supported_users = self.args.supported_users or 0
  args.extended_supported_users = self.args.extended_supported_users or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.UsersNumberReportV2
--- @return st.zwave.CommandClass.UserCode.UsersNumberReportV2Args
function UsersNumberReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.UsersNumberReportV2
function UsersNumberReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.UsersNumberReportV2
function UsersNumberReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.UserCode.CapabilitiesGetV2Args
--- @alias CapabilitiesGetV2Args st.zwave.CommandClass.UserCode.CapabilitiesGetV2Args
local CapabilitiesGetV2Args = {}

--- @class st.zwave.CommandClass.UserCode.CapabilitiesGetV2:st.zwave.Command
--- @alias CapabilitiesGetV2 st.zwave.CommandClass.UserCode.CapabilitiesGetV2
---
--- v2 USER_CODE_CAPABILITIES_GET
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x06
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.CapabilitiesGetV2Args command-specific arguments
local CapabilitiesGetV2 = {}
setmetatable(CapabilitiesGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 USER_CODE_CAPABILITIES_GET object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.CapabilitiesGetV2Args command-specific arguments
function CapabilitiesGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.CAPABILITIES_GET, 2, args, ...)
end

--- Serialize v2 USER_CODE_CAPABILITIES_GET arguments.
---
--- @return string serialized payload
function CapabilitiesGetV2:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v2 USER_CODE_CAPABILITIES_GET payload.
---
--- @return st.zwave.CommandClass.UserCode.CapabilitiesGetV2Args deserialized arguments
function CapabilitiesGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.CapabilitiesGetV2
--- @return st.zwave.CommandClass.UserCode.CapabilitiesGetV2Args
function CapabilitiesGetV2._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.CapabilitiesGetV2
--- @return st.zwave.CommandClass.UserCode.CapabilitiesGetV2Args
function CapabilitiesGetV2._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.CapabilitiesGetV2
function CapabilitiesGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.CapabilitiesGetV2
function CapabilitiesGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.UserCode.CapabilitiesReportV2Args
--- @alias CapabilitiesReportV2Args st.zwave.CommandClass.UserCode.CapabilitiesReportV2Args
--- @field public mcd_support boolean
--- @field public mc_support boolean
--- @field public supported_user_id_status_bit_mask string
--- @field public mucs_support boolean
--- @field public mucr_support boolean
--- @field public ucc_support boolean
--- @field public supported_keypad_modes_bit_mask string
--- @field public supported_keys_bit_mask string
local CapabilitiesReportV2Args = {}

--- @class st.zwave.CommandClass.UserCode.CapabilitiesReportV2:st.zwave.Command
--- @alias CapabilitiesReportV2 st.zwave.CommandClass.UserCode.CapabilitiesReportV2
---
--- v2 USER_CODE_CAPABILITIES_REPORT
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x07
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.CapabilitiesReportV2Args command-specific arguments
local CapabilitiesReportV2 = {}
setmetatable(CapabilitiesReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 USER_CODE_CAPABILITIES_REPORT object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.CapabilitiesReportV2Args command-specific arguments
function CapabilitiesReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.CAPABILITIES_REPORT, 2, args, ...)
end

--- Serialize v2 USER_CODE_CAPABILITIES_REPORT arguments.
---
--- @return string serialized payload
function CapabilitiesReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(5, writer.length(args.supported_user_id_status_bit_mask))
  writer:write_bool(false) -- reserved1
  writer:write_bool(args.mcd_support)
  writer:write_bool(args.mc_support)
  writer:write_bytes(args.supported_user_id_status_bit_mask)
  writer:write_bits(5, writer.length(args.supported_keypad_modes_bit_mask))
  writer:write_bool(args.mucs_support)
  writer:write_bool(args.mucr_support)
  writer:write_bool(args.ucc_support)
  writer:write_bytes(args.supported_keypad_modes_bit_mask)
  writer:write_bits(5, writer.length(args.supported_keys_bit_mask))
  writer:write_bits(3, 0) -- reserved2
  writer:write_bytes(args.supported_keys_bit_mask)
  return writer.buf
end

--- Deserialize a v2 USER_CODE_CAPABILITIES_REPORT payload.
---
--- @return st.zwave.CommandClass.UserCode.CapabilitiesReportV2Args deserialized arguments
function CapabilitiesReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(5, "supported_user_id_status_bit_mask_length")
  reader:read_bool() -- reserved1
  reader:read_bool("mcd_support")
  reader:read_bool("mc_support")
  reader:read_bytes(reader.parsed.supported_user_id_status_bit_mask_length, "supported_user_id_status_bit_mask")
  reader:read_bits(5, "supported_keypad_modes_bit_mask_length")
  reader:read_bool("mucs_support")
  reader:read_bool("mucr_support")
  reader:read_bool("ucc_support")
  reader:read_bytes(reader.parsed.supported_keypad_modes_bit_mask_length, "supported_keypad_modes_bit_mask")
  reader:read_bits(5, "supported_keys_bit_mask_length")
  reader:read_bits(3) -- reserved2
  reader:read_bytes(reader.parsed.supported_keys_bit_mask_length, "supported_keys_bit_mask")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.CapabilitiesReportV2
--- @return st.zwave.CommandClass.UserCode.CapabilitiesReportV2Args
function CapabilitiesReportV2._defaults(self)
  local args = {}
  args.mcd_support = self.args.mcd_support or false
  args.mc_support = self.args.mc_support or false
  args.supported_user_id_status_bit_mask = self.args.supported_user_id_status_bit_mask or ""
  args.mucs_support = self.args.mucs_support or false
  args.mucr_support = self.args.mucr_support or false
  args.ucc_support = self.args.ucc_support or false
  args.supported_keypad_modes_bit_mask = self.args.supported_keypad_modes_bit_mask or ""
  args.supported_keys_bit_mask = self.args.supported_keys_bit_mask or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.CapabilitiesReportV2
--- @return st.zwave.CommandClass.UserCode.CapabilitiesReportV2Args
function CapabilitiesReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.CapabilitiesReportV2
function CapabilitiesReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.CapabilitiesReportV2
function CapabilitiesReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.UserCode.KeypadModeSetV2Args
--- @alias KeypadModeSetV2Args st.zwave.CommandClass.UserCode.KeypadModeSetV2Args
--- @field public keypad_mode integer see :lua:class:`UserCode.keypad_mode <st.zwave.CommandClass.UserCode.keypad_mode>`
local KeypadModeSetV2Args = {}

--- @class st.zwave.CommandClass.UserCode.KeypadModeSetV2:st.zwave.Command
--- @alias KeypadModeSetV2 st.zwave.CommandClass.UserCode.KeypadModeSetV2
---
--- v2 USER_CODE_KEYPAD_MODE_SET
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x08
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.KeypadModeSetV2Args command-specific arguments
local KeypadModeSetV2 = {}
setmetatable(KeypadModeSetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 USER_CODE_KEYPAD_MODE_SET object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.KeypadModeSetV2Args command-specific arguments
function KeypadModeSetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.KEYPAD_MODE_SET, 2, args, ...)
end

--- Serialize v2 USER_CODE_KEYPAD_MODE_SET arguments.
---
--- @return string serialized payload
function KeypadModeSetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.keypad_mode)
  return writer.buf
end

--- Deserialize a v2 USER_CODE_KEYPAD_MODE_SET payload.
---
--- @return st.zwave.CommandClass.UserCode.KeypadModeSetV2Args deserialized arguments
function KeypadModeSetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("keypad_mode")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.KeypadModeSetV2
--- @return st.zwave.CommandClass.UserCode.KeypadModeSetV2Args
function KeypadModeSetV2._defaults(self)
  local args = {}
  args.keypad_mode = self.args.keypad_mode or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.KeypadModeSetV2
--- @return st.zwave.CommandClass.UserCode.KeypadModeSetV2Args
function KeypadModeSetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.KeypadModeSetV2
function KeypadModeSetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.KeypadModeSetV2
function KeypadModeSetV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.keypad_mode = function()
    return zw._reflect(
      UserCode._reflect_keypad_mode,
      args.keypad_mode
    )
  end
end

--- @class st.zwave.CommandClass.UserCode.KeypadModeGetV2Args
--- @alias KeypadModeGetV2Args st.zwave.CommandClass.UserCode.KeypadModeGetV2Args
local KeypadModeGetV2Args = {}

--- @class st.zwave.CommandClass.UserCode.KeypadModeGetV2:st.zwave.Command
--- @alias KeypadModeGetV2 st.zwave.CommandClass.UserCode.KeypadModeGetV2
---
--- v2 USER_CODE_KEYPAD_MODE_GET
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x09
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.KeypadModeGetV2Args command-specific arguments
local KeypadModeGetV2 = {}
setmetatable(KeypadModeGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 USER_CODE_KEYPAD_MODE_GET object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.KeypadModeGetV2Args command-specific arguments
function KeypadModeGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.KEYPAD_MODE_GET, 2, args, ...)
end

--- Serialize v2 USER_CODE_KEYPAD_MODE_GET arguments.
---
--- @return string serialized payload
function KeypadModeGetV2:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v2 USER_CODE_KEYPAD_MODE_GET payload.
---
--- @return st.zwave.CommandClass.UserCode.KeypadModeGetV2Args deserialized arguments
function KeypadModeGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.KeypadModeGetV2
--- @return st.zwave.CommandClass.UserCode.KeypadModeGetV2Args
function KeypadModeGetV2._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.KeypadModeGetV2
--- @return st.zwave.CommandClass.UserCode.KeypadModeGetV2Args
function KeypadModeGetV2._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.KeypadModeGetV2
function KeypadModeGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.KeypadModeGetV2
function KeypadModeGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.UserCode.KeypadModeReportV2Args
--- @alias KeypadModeReportV2Args st.zwave.CommandClass.UserCode.KeypadModeReportV2Args
--- @field public keypad_mode integer see :lua:class:`UserCode.keypad_mode <st.zwave.CommandClass.UserCode.keypad_mode>`
local KeypadModeReportV2Args = {}

--- @class st.zwave.CommandClass.UserCode.KeypadModeReportV2:st.zwave.Command
--- @alias KeypadModeReportV2 st.zwave.CommandClass.UserCode.KeypadModeReportV2
---
--- v2 USER_CODE_KEYPAD_MODE_REPORT
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x0A
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.KeypadModeReportV2Args command-specific arguments
local KeypadModeReportV2 = {}
setmetatable(KeypadModeReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 USER_CODE_KEYPAD_MODE_REPORT object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.KeypadModeReportV2Args command-specific arguments
function KeypadModeReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.KEYPAD_MODE_REPORT, 2, args, ...)
end

--- Serialize v2 USER_CODE_KEYPAD_MODE_REPORT arguments.
---
--- @return string serialized payload
function KeypadModeReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.keypad_mode)
  return writer.buf
end

--- Deserialize a v2 USER_CODE_KEYPAD_MODE_REPORT payload.
---
--- @return st.zwave.CommandClass.UserCode.KeypadModeReportV2Args deserialized arguments
function KeypadModeReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("keypad_mode")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.KeypadModeReportV2
--- @return st.zwave.CommandClass.UserCode.KeypadModeReportV2Args
function KeypadModeReportV2._defaults(self)
  local args = {}
  args.keypad_mode = self.args.keypad_mode or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.KeypadModeReportV2
--- @return st.zwave.CommandClass.UserCode.KeypadModeReportV2Args
function KeypadModeReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.KeypadModeReportV2
function KeypadModeReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.KeypadModeReportV2
function KeypadModeReportV2._set_reflectors(self)
  local args = self.args
  args._reflect = args._reflect or {}
  args._reflect.keypad_mode = function()
    return zw._reflect(
      UserCode._reflect_keypad_mode,
      args.keypad_mode
    )
  end
end

--- @class st.zwave.CommandClass.UserCode.ExtendedSetV2ArgsUserCodes
--- @alias ExtendedSetV2ArgsUserCodes st.zwave.CommandClass.UserCode.ExtendedSetV2ArgsUserCodes
--- @field public user_identifier integer [0,65535]
--- @field public user_id_status integer see :lua:class:`UserCode.user_id_status <st.zwave.CommandClass.UserCode.user_id_status>`
--- @field public user_code string
local ExtendedSetV2ArgsUserCodes = {}

--- @class st.zwave.CommandClass.UserCode.ExtendedSetV2Args
--- @alias ExtendedSetV2Args st.zwave.CommandClass.UserCode.ExtendedSetV2Args
--- @field public user_codes st.zwave.CommandClass.UserCode.ExtendedSetV2ArgsUserCodes[]
local ExtendedSetV2Args = {}

--- @class st.zwave.CommandClass.UserCode.ExtendedSetV2:st.zwave.Command
--- @alias ExtendedSetV2 st.zwave.CommandClass.UserCode.ExtendedSetV2
---
--- v2 EXTENDED_USER_CODE_SET
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x0B
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.ExtendedSetV2Args command-specific arguments
local ExtendedSetV2 = {}
setmetatable(ExtendedSetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 EXTENDED_USER_CODE_SET object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.ExtendedSetV2Args command-specific arguments
function ExtendedSetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.EXTENDED_SET, 2, args, ...)
end

--- Serialize v2 EXTENDED_USER_CODE_SET arguments.
---
--- @return string serialized payload
function ExtendedSetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(writer.length(args.user_codes))
  for i=1,writer.length(args.user_codes) do
    writer:write_be_u16(args.user_codes[i].user_identifier)
    writer:write_u8(args.user_codes[i].user_id_status)
    writer:write_bits(4, writer.length(args.user_codes[i].user_code))
    writer:write_bits(4, 0) -- reserved
    writer:write_bytes(args.user_codes[i].user_code)
  end
  return writer.buf
end

--- Deserialize a v2 EXTENDED_USER_CODE_SET payload.
---
--- @return st.zwave.CommandClass.UserCode.ExtendedSetV2Args deserialized arguments
function ExtendedSetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("number_of_user_codes")
  reader.parsed.user_codes = {}
  for i=1,reader.parsed.number_of_user_codes do
    reader.parsed.user_codes[i] = {}
    reader:read_be_u16("user_identifier", reader.parsed.user_codes[i])
    reader:read_u8("user_id_status", reader.parsed.user_codes[i])
    reader:read_bits(4, "user_code_length", reader.parsed.user_codes[i])
    reader:read_bits(4) -- reserved
    reader:read_bytes(reader.parsed.user_codes[i].user_code_length, "user_code", reader.parsed.user_codes[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.ExtendedSetV2
--- @return st.zwave.CommandClass.UserCode.ExtendedSetV2Args
function ExtendedSetV2._defaults(self)
  local args = {}
  args.user_codes = self.args.user_codes or {}
  for i=1,buf.Writer.length(args.user_codes) do
    args.user_codes[i] = args.user_codes[i] or {}
    args.user_codes[i].user_identifier = self.args.user_codes[i].user_identifier or 0
    args.user_codes[i].user_id_status = self.args.user_codes[i].user_id_status or 0
    args.user_codes[i].user_code = self.args.user_codes[i].user_code or ""
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.ExtendedSetV2
--- @return st.zwave.CommandClass.UserCode.ExtendedSetV2Args
function ExtendedSetV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.user_codes) do
    args.user_codes[i] = args.user_codes[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.ExtendedSetV2
function ExtendedSetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.ExtendedSetV2
function ExtendedSetV2._set_reflectors(self)
  local args = self.args
  for i=1,buf.Writer.length(args.user_codes) do
    args.user_codes[i]._reflect = args.user_codes[i]._reflect or {}
    args.user_codes[i]._reflect.user_id_status = function()
      return zw._reflect(
        UserCode._reflect_user_id_status,
        args.user_codes[i].user_id_status
      )
    end
  end
end

--- @class st.zwave.CommandClass.UserCode.ExtendedGetV2Args
--- @alias ExtendedGetV2Args st.zwave.CommandClass.UserCode.ExtendedGetV2Args
--- @field public user_identifier integer [0,65535]
--- @field public report_more boolean
local ExtendedGetV2Args = {}

--- @class st.zwave.CommandClass.UserCode.ExtendedGetV2:st.zwave.Command
--- @alias ExtendedGetV2 st.zwave.CommandClass.UserCode.ExtendedGetV2
---
--- v2 EXTENDED_USER_CODE_GET
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x0C
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.ExtendedGetV2Args command-specific arguments
local ExtendedGetV2 = {}
setmetatable(ExtendedGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 EXTENDED_USER_CODE_GET object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.ExtendedGetV2Args command-specific arguments
function ExtendedGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.EXTENDED_GET, 2, args, ...)
end

--- Serialize v2 EXTENDED_USER_CODE_GET arguments.
---
--- @return string serialized payload
function ExtendedGetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_be_u16(args.user_identifier)
  writer:write_bool(args.report_more)
  writer:write_bits(7, 0) -- reserved
  return writer.buf
end

--- Deserialize a v2 EXTENDED_USER_CODE_GET payload.
---
--- @return st.zwave.CommandClass.UserCode.ExtendedGetV2Args deserialized arguments
function ExtendedGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_be_u16("user_identifier")
  reader:read_bool("report_more")
  reader:read_bits(7) -- reserved
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.ExtendedGetV2
--- @return st.zwave.CommandClass.UserCode.ExtendedGetV2Args
function ExtendedGetV2._defaults(self)
  local args = {}
  args.user_identifier = self.args.user_identifier or 0
  args.report_more = self.args.report_more or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.ExtendedGetV2
--- @return st.zwave.CommandClass.UserCode.ExtendedGetV2Args
function ExtendedGetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.ExtendedGetV2
function ExtendedGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.ExtendedGetV2
function ExtendedGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.UserCode.ExtendedReportV2ArgsUserCodes
--- @alias ExtendedReportV2ArgsUserCodes st.zwave.CommandClass.UserCode.ExtendedReportV2ArgsUserCodes
--- @field public user_identifier integer [0,65535]
--- @field public user_id_status integer see :lua:class:`UserCode.user_id_status <st.zwave.CommandClass.UserCode.user_id_status>`
--- @field public user_code string
local ExtendedReportV2ArgsUserCodes = {}

--- @class st.zwave.CommandClass.UserCode.ExtendedReportV2Args
--- @alias ExtendedReportV2Args st.zwave.CommandClass.UserCode.ExtendedReportV2Args
--- @field public user_codes st.zwave.CommandClass.UserCode.ExtendedReportV2ArgsUserCodes[]
--- @field public next_user_identifier integer [0,65535]
local ExtendedReportV2Args = {}

--- @class st.zwave.CommandClass.UserCode.ExtendedReportV2:st.zwave.Command
--- @alias ExtendedReportV2 st.zwave.CommandClass.UserCode.ExtendedReportV2
---
--- v2 EXTENDED_USER_CODE_REPORT
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x0D
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.ExtendedReportV2Args command-specific arguments
local ExtendedReportV2 = {}
setmetatable(ExtendedReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 EXTENDED_USER_CODE_REPORT object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.ExtendedReportV2Args command-specific arguments
function ExtendedReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.EXTENDED_REPORT, 2, args, ...)
end

--- Serialize v2 EXTENDED_USER_CODE_REPORT arguments.
---
--- @return string serialized payload
function ExtendedReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(writer.length(args.user_codes))
  for i=1,writer.length(args.user_codes) do
    writer:write_be_u16(args.user_codes[i].user_identifier)
    writer:write_u8(args.user_codes[i].user_id_status)
    writer:write_bits(4, writer.length(args.user_codes[i].user_code))
    writer:write_bits(4, 0) -- reserved
    writer:write_bytes(args.user_codes[i].user_code)
  end
  writer:write_be_u16(args.next_user_identifier)
  return writer.buf
end

--- Deserialize a v2 EXTENDED_USER_CODE_REPORT payload.
---
--- @return st.zwave.CommandClass.UserCode.ExtendedReportV2Args deserialized arguments
function ExtendedReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("number_of_user_codes")
  reader.parsed.user_codes = {}
  for i=1,reader.parsed.number_of_user_codes do
    reader.parsed.user_codes[i] = {}
    reader:read_be_u16("user_identifier", reader.parsed.user_codes[i])
    reader:read_u8("user_id_status", reader.parsed.user_codes[i])
    reader:read_bits(4, "user_code_length", reader.parsed.user_codes[i])
    reader:read_bits(4) -- reserved
    reader:read_bytes(reader.parsed.user_codes[i].user_code_length, "user_code", reader.parsed.user_codes[i])
  end
  reader:read_be_u16("next_user_identifier")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.ExtendedReportV2
--- @return st.zwave.CommandClass.UserCode.ExtendedReportV2Args
function ExtendedReportV2._defaults(self)
  local args = {}
  args.user_codes = self.args.user_codes or {}
  for i=1,buf.Writer.length(args.user_codes) do
    args.user_codes[i] = args.user_codes[i] or {}
    args.user_codes[i].user_identifier = self.args.user_codes[i].user_identifier or 0
    args.user_codes[i].user_id_status = self.args.user_codes[i].user_id_status or 0
    args.user_codes[i].user_code = self.args.user_codes[i].user_code or ""
  end
  args.next_user_identifier = self.args.next_user_identifier or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.ExtendedReportV2
--- @return st.zwave.CommandClass.UserCode.ExtendedReportV2Args
function ExtendedReportV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.user_codes) do
    args.user_codes[i] = args.user_codes[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.ExtendedReportV2
function ExtendedReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.ExtendedReportV2
function ExtendedReportV2._set_reflectors(self)
  local args = self.args
  for i=1,buf.Writer.length(args.user_codes) do
    args.user_codes[i]._reflect = args.user_codes[i]._reflect or {}
    args.user_codes[i]._reflect.user_id_status = function()
      return zw._reflect(
        UserCode._reflect_user_id_status,
        args.user_codes[i].user_id_status
      )
    end
  end
end

--- @class st.zwave.CommandClass.UserCode.MasterCodeSetV2Args
--- @alias MasterCodeSetV2Args st.zwave.CommandClass.UserCode.MasterCodeSetV2Args
--- @field public master_code string
local MasterCodeSetV2Args = {}

--- @class st.zwave.CommandClass.UserCode.MasterCodeSetV2:st.zwave.Command
--- @alias MasterCodeSetV2 st.zwave.CommandClass.UserCode.MasterCodeSetV2
---
--- v2 MASTER_CODE_SET
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x0E
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.MasterCodeSetV2Args command-specific arguments
local MasterCodeSetV2 = {}
setmetatable(MasterCodeSetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 MASTER_CODE_SET object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.MasterCodeSetV2Args command-specific arguments
function MasterCodeSetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.MASTER_CODE_SET, 2, args, ...)
end

--- Serialize v2 MASTER_CODE_SET arguments.
---
--- @return string serialized payload
function MasterCodeSetV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(4, writer.length(args.master_code))
  writer:write_bits(4, 0) -- reserved
  writer:write_bytes(args.master_code)
  return writer.buf
end

--- Deserialize a v2 MASTER_CODE_SET payload.
---
--- @return st.zwave.CommandClass.UserCode.MasterCodeSetV2Args deserialized arguments
function MasterCodeSetV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(4, "master_code_length")
  reader:read_bits(4) -- reserved
  reader:read_bytes(reader.parsed.master_code_length, "master_code")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.MasterCodeSetV2
--- @return st.zwave.CommandClass.UserCode.MasterCodeSetV2Args
function MasterCodeSetV2._defaults(self)
  local args = {}
  args.master_code = self.args.master_code or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.MasterCodeSetV2
--- @return st.zwave.CommandClass.UserCode.MasterCodeSetV2Args
function MasterCodeSetV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.MasterCodeSetV2
function MasterCodeSetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.MasterCodeSetV2
function MasterCodeSetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.UserCode.MasterCodeGetV2Args
--- @alias MasterCodeGetV2Args st.zwave.CommandClass.UserCode.MasterCodeGetV2Args
local MasterCodeGetV2Args = {}

--- @class st.zwave.CommandClass.UserCode.MasterCodeGetV2:st.zwave.Command
--- @alias MasterCodeGetV2 st.zwave.CommandClass.UserCode.MasterCodeGetV2
---
--- v2 MASTER_CODE_GET
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x0F
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.MasterCodeGetV2Args command-specific arguments
local MasterCodeGetV2 = {}
setmetatable(MasterCodeGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 MASTER_CODE_GET object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.MasterCodeGetV2Args command-specific arguments
function MasterCodeGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.MASTER_CODE_GET, 2, args, ...)
end

--- Serialize v2 MASTER_CODE_GET arguments.
---
--- @return string serialized payload
function MasterCodeGetV2:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v2 MASTER_CODE_GET payload.
---
--- @return st.zwave.CommandClass.UserCode.MasterCodeGetV2Args deserialized arguments
function MasterCodeGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.MasterCodeGetV2
--- @return st.zwave.CommandClass.UserCode.MasterCodeGetV2Args
function MasterCodeGetV2._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.MasterCodeGetV2
--- @return st.zwave.CommandClass.UserCode.MasterCodeGetV2Args
function MasterCodeGetV2._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.MasterCodeGetV2
function MasterCodeGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.MasterCodeGetV2
function MasterCodeGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.UserCode.MasterCodeReportV2Args
--- @alias MasterCodeReportV2Args st.zwave.CommandClass.UserCode.MasterCodeReportV2Args
--- @field public master_code string
local MasterCodeReportV2Args = {}

--- @class st.zwave.CommandClass.UserCode.MasterCodeReportV2:st.zwave.Command
--- @alias MasterCodeReportV2 st.zwave.CommandClass.UserCode.MasterCodeReportV2
---
--- v2 MASTER_CODE_REPORT
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x10
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.MasterCodeReportV2Args command-specific arguments
local MasterCodeReportV2 = {}
setmetatable(MasterCodeReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 MASTER_CODE_REPORT object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.MasterCodeReportV2Args command-specific arguments
function MasterCodeReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.MASTER_CODE_REPORT, 2, args, ...)
end

--- Serialize v2 MASTER_CODE_REPORT arguments.
---
--- @return string serialized payload
function MasterCodeReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bits(4, writer.length(args.master_code))
  writer:write_bits(4, 0) -- reserved
  writer:write_bytes(args.master_code)
  return writer.buf
end

--- Deserialize a v2 MASTER_CODE_REPORT payload.
---
--- @return st.zwave.CommandClass.UserCode.MasterCodeReportV2Args deserialized arguments
function MasterCodeReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bits(4, "master_code_length")
  reader:read_bits(4) -- reserved
  reader:read_bytes(reader.parsed.master_code_length, "master_code")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.MasterCodeReportV2
--- @return st.zwave.CommandClass.UserCode.MasterCodeReportV2Args
function MasterCodeReportV2._defaults(self)
  local args = {}
  args.master_code = self.args.master_code or ""
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.MasterCodeReportV2
--- @return st.zwave.CommandClass.UserCode.MasterCodeReportV2Args
function MasterCodeReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.MasterCodeReportV2
function MasterCodeReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.MasterCodeReportV2
function MasterCodeReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.UserCode.ChecksumGetV2Args
--- @alias ChecksumGetV2Args st.zwave.CommandClass.UserCode.ChecksumGetV2Args
local ChecksumGetV2Args = {}

--- @class st.zwave.CommandClass.UserCode.ChecksumGetV2:st.zwave.Command
--- @alias ChecksumGetV2 st.zwave.CommandClass.UserCode.ChecksumGetV2
---
--- v2 USER_CODE_CHECKSUM_GET
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x11
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.ChecksumGetV2Args command-specific arguments
local ChecksumGetV2 = {}
setmetatable(ChecksumGetV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 USER_CODE_CHECKSUM_GET object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.ChecksumGetV2Args command-specific arguments
function ChecksumGetV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.CHECKSUM_GET, 2, args, ...)
end

--- Serialize v2 USER_CODE_CHECKSUM_GET arguments.
---
--- @return string serialized payload
function ChecksumGetV2:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v2 USER_CODE_CHECKSUM_GET payload.
---
--- @return st.zwave.CommandClass.UserCode.ChecksumGetV2Args deserialized arguments
function ChecksumGetV2:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.ChecksumGetV2
--- @return st.zwave.CommandClass.UserCode.ChecksumGetV2Args
function ChecksumGetV2._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.ChecksumGetV2
--- @return st.zwave.CommandClass.UserCode.ChecksumGetV2Args
function ChecksumGetV2._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.ChecksumGetV2
function ChecksumGetV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.ChecksumGetV2
function ChecksumGetV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.UserCode.ChecksumReportV2Args
--- @alias ChecksumReportV2Args st.zwave.CommandClass.UserCode.ChecksumReportV2Args
--- @field public user_code_checksum integer [0,65535]
local ChecksumReportV2Args = {}

--- @class st.zwave.CommandClass.UserCode.ChecksumReportV2:st.zwave.Command
--- @alias ChecksumReportV2 st.zwave.CommandClass.UserCode.ChecksumReportV2
---
--- v2 USER_CODE_CHECKSUM_REPORT
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x12
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.ChecksumReportV2Args command-specific arguments
local ChecksumReportV2 = {}
setmetatable(ChecksumReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 USER_CODE_CHECKSUM_REPORT object.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.ChecksumReportV2Args command-specific arguments
function ChecksumReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.USER_CODE, UserCode.CHECKSUM_REPORT, 2, args, ...)
end

--- Serialize v2 USER_CODE_CHECKSUM_REPORT arguments.
---
--- @return string serialized payload
function ChecksumReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_be_u16(args.user_code_checksum)
  return writer.buf
end

--- Deserialize a v2 USER_CODE_CHECKSUM_REPORT payload.
---
--- @return st.zwave.CommandClass.UserCode.ChecksumReportV2Args deserialized arguments
function ChecksumReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_be_u16("user_code_checksum")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.UserCode.ChecksumReportV2
--- @return st.zwave.CommandClass.UserCode.ChecksumReportV2Args
function ChecksumReportV2._defaults(self)
  local args = {}
  args.user_code_checksum = self.args.user_code_checksum or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.UserCode.ChecksumReportV2
--- @return st.zwave.CommandClass.UserCode.ChecksumReportV2Args
function ChecksumReportV2._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.UserCode.ChecksumReportV2
function ChecksumReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.UserCode.ChecksumReportV2
function ChecksumReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.UserCode.Set
--- @alias _Set st.zwave.CommandClass.UserCode.Set
---
--- Dynamically versioned USER_CODE_SET
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x01
--- @field public version number 1
--- @field public args st.zwave.CommandClass.UserCode.SetV1Args
local _Set = {}
setmetatable(_Set, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an USER_CODE_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.SetV1Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.Set
function _Set:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.Get
--- @alias _Get st.zwave.CommandClass.UserCode.Get
---
--- Dynamically versioned USER_CODE_GET
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x02
--- @field public version number 1
--- @field public args st.zwave.CommandClass.UserCode.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an USER_CODE_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.Report
--- @alias _Report st.zwave.CommandClass.UserCode.Report
---
--- Dynamically versioned USER_CODE_REPORT
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x03
--- @field public version number 1
--- @field public args st.zwave.CommandClass.UserCode.ReportV1Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an USER_CODE_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.ReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.UsersNumberGet
--- @alias _UsersNumberGet st.zwave.CommandClass.UserCode.UsersNumberGet
---
--- Dynamically versioned USERS_NUMBER_GET
---
--- Supported versions: 1,2; unique base versions: 1
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x04
--- @field public version number 1
--- @field public args st.zwave.CommandClass.UserCode.UsersNumberGetV1Args
local _UsersNumberGet = {}
setmetatable(_UsersNumberGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an USERS_NUMBER_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.UsersNumberGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.UsersNumberGet
function _UsersNumberGet:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.USERS_NUMBER_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.UsersNumberReport
--- @alias _UsersNumberReport st.zwave.CommandClass.UserCode.UsersNumberReport
---
--- Dynamically versioned USERS_NUMBER_REPORT
---
--- Supported versions: 1,2; unique base versions: 1,2
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x05
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.UserCode.UsersNumberReportV1Args|st.zwave.CommandClass.UserCode.UsersNumberReportV2Args
local _UsersNumberReport = {}
setmetatable(_UsersNumberReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an USERS_NUMBER_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.UsersNumberReportV1Args|st.zwave.CommandClass.UserCode.UsersNumberReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.UsersNumberReport
function _UsersNumberReport:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.USERS_NUMBER_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.CapabilitiesGet
--- @alias _CapabilitiesGet st.zwave.CommandClass.UserCode.CapabilitiesGet
---
--- Dynamically versioned USER_CODE_CAPABILITIES_GET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x06
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.CapabilitiesGetV2Args
local _CapabilitiesGet = {}
setmetatable(_CapabilitiesGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an USER_CODE_CAPABILITIES_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.CapabilitiesGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.CapabilitiesGet
function _CapabilitiesGet:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.CAPABILITIES_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.CapabilitiesReport
--- @alias _CapabilitiesReport st.zwave.CommandClass.UserCode.CapabilitiesReport
---
--- Dynamically versioned USER_CODE_CAPABILITIES_REPORT
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x07
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.CapabilitiesReportV2Args
local _CapabilitiesReport = {}
setmetatable(_CapabilitiesReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an USER_CODE_CAPABILITIES_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.CapabilitiesReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.CapabilitiesReport
function _CapabilitiesReport:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.CAPABILITIES_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.KeypadModeSet
--- @alias _KeypadModeSet st.zwave.CommandClass.UserCode.KeypadModeSet
---
--- Dynamically versioned USER_CODE_KEYPAD_MODE_SET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x08
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.KeypadModeSetV2Args
local _KeypadModeSet = {}
setmetatable(_KeypadModeSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an USER_CODE_KEYPAD_MODE_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.KeypadModeSetV2Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.KeypadModeSet
function _KeypadModeSet:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.KEYPAD_MODE_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.KeypadModeGet
--- @alias _KeypadModeGet st.zwave.CommandClass.UserCode.KeypadModeGet
---
--- Dynamically versioned USER_CODE_KEYPAD_MODE_GET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x09
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.KeypadModeGetV2Args
local _KeypadModeGet = {}
setmetatable(_KeypadModeGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an USER_CODE_KEYPAD_MODE_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.KeypadModeGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.KeypadModeGet
function _KeypadModeGet:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.KEYPAD_MODE_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.KeypadModeReport
--- @alias _KeypadModeReport st.zwave.CommandClass.UserCode.KeypadModeReport
---
--- Dynamically versioned USER_CODE_KEYPAD_MODE_REPORT
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x0A
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.KeypadModeReportV2Args
local _KeypadModeReport = {}
setmetatable(_KeypadModeReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an USER_CODE_KEYPAD_MODE_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.KeypadModeReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.KeypadModeReport
function _KeypadModeReport:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.KEYPAD_MODE_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.ExtendedSet
--- @alias _ExtendedSet st.zwave.CommandClass.UserCode.ExtendedSet
---
--- Dynamically versioned EXTENDED_USER_CODE_SET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x0B
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.ExtendedSetV2Args
local _ExtendedSet = {}
setmetatable(_ExtendedSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an EXTENDED_USER_CODE_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.ExtendedSetV2Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.ExtendedSet
function _ExtendedSet:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.EXTENDED_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.ExtendedGet
--- @alias _ExtendedGet st.zwave.CommandClass.UserCode.ExtendedGet
---
--- Dynamically versioned EXTENDED_USER_CODE_GET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x0C
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.ExtendedGetV2Args
local _ExtendedGet = {}
setmetatable(_ExtendedGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an EXTENDED_USER_CODE_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.ExtendedGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.ExtendedGet
function _ExtendedGet:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.EXTENDED_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.ExtendedReport
--- @alias _ExtendedReport st.zwave.CommandClass.UserCode.ExtendedReport
---
--- Dynamically versioned EXTENDED_USER_CODE_REPORT
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x0D
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.ExtendedReportV2Args
local _ExtendedReport = {}
setmetatable(_ExtendedReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an EXTENDED_USER_CODE_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.ExtendedReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.ExtendedReport
function _ExtendedReport:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.EXTENDED_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.MasterCodeSet
--- @alias _MasterCodeSet st.zwave.CommandClass.UserCode.MasterCodeSet
---
--- Dynamically versioned MASTER_CODE_SET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x0E
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.MasterCodeSetV2Args
local _MasterCodeSet = {}
setmetatable(_MasterCodeSet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MASTER_CODE_SET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.MasterCodeSetV2Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.MasterCodeSet
function _MasterCodeSet:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.MASTER_CODE_SET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.MasterCodeGet
--- @alias _MasterCodeGet st.zwave.CommandClass.UserCode.MasterCodeGet
---
--- Dynamically versioned MASTER_CODE_GET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x0F
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.MasterCodeGetV2Args
local _MasterCodeGet = {}
setmetatable(_MasterCodeGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MASTER_CODE_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.MasterCodeGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.MasterCodeGet
function _MasterCodeGet:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.MASTER_CODE_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.MasterCodeReport
--- @alias _MasterCodeReport st.zwave.CommandClass.UserCode.MasterCodeReport
---
--- Dynamically versioned MASTER_CODE_REPORT
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x10
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.MasterCodeReportV2Args
local _MasterCodeReport = {}
setmetatable(_MasterCodeReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a MASTER_CODE_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.MasterCodeReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.MasterCodeReport
function _MasterCodeReport:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.MASTER_CODE_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.ChecksumGet
--- @alias _ChecksumGet st.zwave.CommandClass.UserCode.ChecksumGet
---
--- Dynamically versioned USER_CODE_CHECKSUM_GET
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x11
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.ChecksumGetV2Args
local _ChecksumGet = {}
setmetatable(_ChecksumGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an USER_CODE_CHECKSUM_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.ChecksumGetV2Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.ChecksumGet
function _ChecksumGet:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.CHECKSUM_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.UserCode.ChecksumReport
--- @alias _ChecksumReport st.zwave.CommandClass.UserCode.ChecksumReport
---
--- Dynamically versioned USER_CODE_CHECKSUM_REPORT
---
--- Supported versions: 2; unique base versions: 2
---
--- @field public cmd_class number 0x63
--- @field public cmd_id number 0x12
--- @field public version number 2
--- @field public args st.zwave.CommandClass.UserCode.ChecksumReportV2Args
local _ChecksumReport = {}
setmetatable(_ChecksumReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct an USER_CODE_CHECKSUM_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.UserCode command class module instance
--- @param args st.zwave.CommandClass.UserCode.ChecksumReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.UserCode.ChecksumReport
function _ChecksumReport:construct(module, args, ...)
  return zw.Command._construct(module, UserCode.CHECKSUM_REPORT, module._serialization_version, args, ...)
end

UserCode.SetV1 = SetV1
UserCode.GetV1 = GetV1
UserCode.ReportV1 = ReportV1
UserCode.UsersNumberGetV1 = UsersNumberGetV1
UserCode.UsersNumberReportV1 = UsersNumberReportV1
UserCode.UsersNumberReportV2 = UsersNumberReportV2
UserCode.CapabilitiesGetV2 = CapabilitiesGetV2
UserCode.CapabilitiesReportV2 = CapabilitiesReportV2
UserCode.KeypadModeSetV2 = KeypadModeSetV2
UserCode.KeypadModeGetV2 = KeypadModeGetV2
UserCode.KeypadModeReportV2 = KeypadModeReportV2
UserCode.ExtendedSetV2 = ExtendedSetV2
UserCode.ExtendedGetV2 = ExtendedGetV2
UserCode.ExtendedReportV2 = ExtendedReportV2
UserCode.MasterCodeSetV2 = MasterCodeSetV2
UserCode.MasterCodeGetV2 = MasterCodeGetV2
UserCode.MasterCodeReportV2 = MasterCodeReportV2
UserCode.ChecksumGetV2 = ChecksumGetV2
UserCode.ChecksumReportV2 = ChecksumReportV2
UserCode.Set = _Set
UserCode.Get = _Get
UserCode.Report = _Report
UserCode.UsersNumberGet = _UsersNumberGet
UserCode.UsersNumberReport = _UsersNumberReport
UserCode.CapabilitiesGet = _CapabilitiesGet
UserCode.CapabilitiesReport = _CapabilitiesReport
UserCode.KeypadModeSet = _KeypadModeSet
UserCode.KeypadModeGet = _KeypadModeGet
UserCode.KeypadModeReport = _KeypadModeReport
UserCode.ExtendedSet = _ExtendedSet
UserCode.ExtendedGet = _ExtendedGet
UserCode.ExtendedReport = _ExtendedReport
UserCode.MasterCodeSet = _MasterCodeSet
UserCode.MasterCodeGet = _MasterCodeGet
UserCode.MasterCodeReport = _MasterCodeReport
UserCode.ChecksumGet = _ChecksumGet
UserCode.ChecksumReport = _ChecksumReport

UserCode._lut = {
  [0] = { -- dynamically versioned constructors
    [UserCode.SET] = UserCode.Set,
    [UserCode.GET] = UserCode.Get,
    [UserCode.REPORT] = UserCode.Report,
    [UserCode.USERS_NUMBER_GET] = UserCode.UsersNumberGet,
    [UserCode.USERS_NUMBER_REPORT] = UserCode.UsersNumberReport,
    [UserCode.CAPABILITIES_GET] = UserCode.CapabilitiesGet,
    [UserCode.CAPABILITIES_REPORT] = UserCode.CapabilitiesReport,
    [UserCode.KEYPAD_MODE_SET] = UserCode.KeypadModeSet,
    [UserCode.KEYPAD_MODE_GET] = UserCode.KeypadModeGet,
    [UserCode.KEYPAD_MODE_REPORT] = UserCode.KeypadModeReport,
    [UserCode.EXTENDED_SET] = UserCode.ExtendedSet,
    [UserCode.EXTENDED_GET] = UserCode.ExtendedGet,
    [UserCode.EXTENDED_REPORT] = UserCode.ExtendedReport,
    [UserCode.MASTER_CODE_SET] = UserCode.MasterCodeSet,
    [UserCode.MASTER_CODE_GET] = UserCode.MasterCodeGet,
    [UserCode.MASTER_CODE_REPORT] = UserCode.MasterCodeReport,
    [UserCode.CHECKSUM_GET] = UserCode.ChecksumGet,
    [UserCode.CHECKSUM_REPORT] = UserCode.ChecksumReport
  },
  [1] = { -- version 1
    [UserCode.SET] = UserCode.SetV1,
    [UserCode.GET] = UserCode.GetV1,
    [UserCode.REPORT] = UserCode.ReportV1,
    [UserCode.USERS_NUMBER_GET] = UserCode.UsersNumberGetV1,
    [UserCode.USERS_NUMBER_REPORT] = UserCode.UsersNumberReportV1
  },
  [2] = { -- version 2
    [UserCode.SET] = UserCode.SetV1,
    [UserCode.GET] = UserCode.GetV1,
    [UserCode.REPORT] = UserCode.ReportV1,
    [UserCode.USERS_NUMBER_GET] = UserCode.UsersNumberGetV1,
    [UserCode.USERS_NUMBER_REPORT] = UserCode.UsersNumberReportV2,
    [UserCode.CAPABILITIES_GET] = UserCode.CapabilitiesGetV2,
    [UserCode.CAPABILITIES_REPORT] = UserCode.CapabilitiesReportV2,
    [UserCode.KEYPAD_MODE_SET] = UserCode.KeypadModeSetV2,
    [UserCode.KEYPAD_MODE_GET] = UserCode.KeypadModeGetV2,
    [UserCode.KEYPAD_MODE_REPORT] = UserCode.KeypadModeReportV2,
    [UserCode.EXTENDED_SET] = UserCode.ExtendedSetV2,
    [UserCode.EXTENDED_GET] = UserCode.ExtendedGetV2,
    [UserCode.EXTENDED_REPORT] = UserCode.ExtendedReportV2,
    [UserCode.MASTER_CODE_SET] = UserCode.MasterCodeSetV2,
    [UserCode.MASTER_CODE_GET] = UserCode.MasterCodeGetV2,
    [UserCode.MASTER_CODE_REPORT] = UserCode.MasterCodeReportV2,
    [UserCode.CHECKSUM_GET] = UserCode.ChecksumGetV2,
    [UserCode.CHECKSUM_REPORT] = UserCode.ChecksumReportV2
  }
}
--- @class st.zwave.CommandClass.UserCode.keypad_mode
--- @alias keypad_mode st.zwave.CommandClass.UserCode.keypad_mode
--- @field public NORMAL_MODE number 0x00
--- @field public VACATION_MODE number 0x01
--- @field public PRIVACY_MODE number 0x02
--- @field public LOCKED_OUT_MODE number 0x03
local keypad_mode = {
  NORMAL_MODE = 0x00,
  VACATION_MODE = 0x01,
  PRIVACY_MODE = 0x02,
  LOCKED_OUT_MODE = 0x03
}
UserCode.keypad_mode = keypad_mode
UserCode._reflect_keypad_mode = zw._reflection_builder(UserCode.keypad_mode)

--- @class st.zwave.CommandClass.UserCode.user_id_status
--- @alias user_id_status st.zwave.CommandClass.UserCode.user_id_status
--- @field public AVAILABLE number 0x00
--- @field public ENABLED_GRANT_ACCESS number 0x01
--- @field public DISABLED number 0x02
--- @field public MESSAGING number 0x03
--- @field public PASSAGE_MODE number 0x04
--- @field public STATUS_NOT_AVAILABLE number 0xFE
local user_id_status = {
  AVAILABLE = 0x00,
  ENABLED_GRANT_ACCESS = 0x01,
  DISABLED = 0x02,
  MESSAGING = 0x03,
  PASSAGE_MODE = 0x04,
  STATUS_NOT_AVAILABLE = 0xFE
}
UserCode.user_id_status = user_id_status
UserCode._reflect_user_id_status = zw._reflection_builder(UserCode.user_id_status)


return UserCode
