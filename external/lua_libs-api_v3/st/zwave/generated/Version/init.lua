-- Copyright 2023 SmartThings
--
-- Licensed under the Apache License, Version 2.0 (the "License");
-- you may not use this file except in compliance with the License.
-- You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS,
-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-- See the License for the specific language governing permissions and
-- limitations under the License.

-- THIS CODE IS AUTOMATICALLY GENERATED BY zwave_lib_generator/gen.py.  DO NOT HAND EDIT.
--
-- Generator script revision: b'b65edec6f2fbd53d4aeed6ab08ac6f3b5ae73520'
-- Protocol definition XML version: 2.7.4

local zw = require "st.zwave"
local buf = require "st.zwave.utils.buf"
local utils = require "st.utils"

--- @class st.zwave.CommandClass.Version
--- @alias Version st.zwave.CommandClass.Version
---
--- Supported versions: 1,2,3
---
--- @field public GET number 0x11 - VERSION_GET command id
--- @field public REPORT number 0x12 - VERSION_REPORT command id
--- @field public COMMAND_CLASS_GET number 0x13 - VERSION_COMMAND_CLASS_GET command id
--- @field public COMMAND_CLASS_REPORT number 0x14 - VERSION_COMMAND_CLASS_REPORT command id
--- @field public CAPABILITIES_GET number 0x15 - VERSION_CAPABILITIES_GET command id
--- @field public CAPABILITIES_REPORT number 0x16 - VERSION_CAPABILITIES_REPORT command id
--- @field public ZWAVE_SOFTWARE_GET number 0x17 - VERSION_ZWAVE_SOFTWARE_GET command id
--- @field public ZWAVE_SOFTWARE_REPORT number 0x18 - VERSION_ZWAVE_SOFTWARE_REPORT command id
local Version = {}
Version.GET = 0x11
Version.REPORT = 0x12
Version.COMMAND_CLASS_GET = 0x13
Version.COMMAND_CLASS_REPORT = 0x14
Version.CAPABILITIES_GET = 0x15
Version.CAPABILITIES_REPORT = 0x16
Version.ZWAVE_SOFTWARE_GET = 0x17
Version.ZWAVE_SOFTWARE_REPORT = 0x18

Version._commands = {
  [Version.GET] = "GET",
  [Version.REPORT] = "REPORT",
  [Version.COMMAND_CLASS_GET] = "COMMAND_CLASS_GET",
  [Version.COMMAND_CLASS_REPORT] = "COMMAND_CLASS_REPORT",
  [Version.CAPABILITIES_GET] = "CAPABILITIES_GET",
  [Version.CAPABILITIES_REPORT] = "CAPABILITIES_REPORT",
  [Version.ZWAVE_SOFTWARE_GET] = "ZWAVE_SOFTWARE_GET",
  [Version.ZWAVE_SOFTWARE_REPORT] = "ZWAVE_SOFTWARE_REPORT"
}

--- Instantiate a versioned instance of the Version Command Class module, optionally setting strict to require explicit passing of all parameters to constructors.
---
--- @param params st.zwave.CommandClass.Params command class instance parameters
--- @return st.zwave.CommandClass.Version versioned command class instance
function Version:init(params)
  local version = params and params.version or nil
  if (params or {}).strict ~= nil then
  local strict = params.strict
  else
  local strict = true -- default
  end
  local strict = params and params.strict or nil
  assert(version == nil or zw._versions[zw.VERSION][version] ~= nil, "unsupported version")
  assert(strict == nil or type(strict) == "boolean", "strict must be a boolean")
  local mt = {
    __index = self
  }
  local instance = setmetatable({}, mt)
  instance._serialization_version = version
  instance._strict = strict
  return instance
end

setmetatable(Version, {
  __call = Version.init
})

Version._serialization_version = nil
Version._strict = false
zw._deserialization_versions = zw.deserialization_versions or {}
zw._versions = zw._versions or {}
setmetatable(zw._deserialization_versions, { __index = zw._versions })
zw._versions[zw.VERSION] = {
  [1] = true,
  [2] = true,
  [3] = true
}

--- @class st.zwave.CommandClass.Version.GetV1Args
--- @alias GetV1Args st.zwave.CommandClass.Version.GetV1Args
local GetV1Args = {}

--- @class st.zwave.CommandClass.Version.GetV1:st.zwave.Command
--- @alias GetV1 st.zwave.CommandClass.Version.GetV1
---
--- v1 and forward-compatible v2,v3 VERSION_GET
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x11
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Version.GetV1Args command-specific arguments
local GetV1 = {}
setmetatable(GetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 VERSION_GET object.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.GetV1Args command-specific arguments
function GetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.VERSION, Version.GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 VERSION_GET arguments.
---
--- @return string serialized payload
function GetV1:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 VERSION_GET payload.
---
--- @return st.zwave.CommandClass.Version.GetV1Args deserialized arguments
function GetV1:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Version.GetV1
--- @return st.zwave.CommandClass.Version.GetV1Args
function GetV1._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Version.GetV1
--- @return st.zwave.CommandClass.Version.GetV1Args
function GetV1._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Version.GetV1
function GetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Version.GetV1
function GetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Version.ReportV1Args
--- @alias ReportV1Args st.zwave.CommandClass.Version.ReportV1Args
--- @field public z_wave_library_type integer [0,255]
--- @field public z_wave_protocol_version integer [0,255]
--- @field public z_wave_protocol_sub_version integer [0,255]
--- @field public application_version integer [0,255]
--- @field public application_sub_version integer [0,255]
local ReportV1Args = {}

--- @class st.zwave.CommandClass.Version.ReportV1:st.zwave.Command
--- @alias ReportV1 st.zwave.CommandClass.Version.ReportV1
---
--- v1 VERSION_REPORT
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x12
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Version.ReportV1Args command-specific arguments
local ReportV1 = {}
setmetatable(ReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 VERSION_REPORT object.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.ReportV1Args command-specific arguments
function ReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.VERSION, Version.REPORT, 1, args, ...)
end

--- Serialize v1 VERSION_REPORT arguments.
---
--- @return string serialized payload
function ReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.z_wave_library_type)
  writer:write_u8(args.z_wave_protocol_version)
  writer:write_u8(args.z_wave_protocol_sub_version)
  writer:write_u8(args.application_version)
  writer:write_u8(args.application_sub_version)
  return writer.buf
end

--- Deserialize a v1 VERSION_REPORT payload.
---
--- @return st.zwave.CommandClass.Version.ReportV1Args deserialized arguments
function ReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("z_wave_library_type")
  reader:read_u8("z_wave_protocol_version")
  reader:read_u8("z_wave_protocol_sub_version")
  reader:read_u8("application_version")
  reader:read_u8("application_sub_version")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Version.ReportV1
--- @return st.zwave.CommandClass.Version.ReportV1Args
function ReportV1._defaults(self)
  local args = {}
  args.z_wave_library_type = self.args.z_wave_library_type or 0
  args.z_wave_protocol_version = self.args.z_wave_protocol_version or 0
  args.z_wave_protocol_sub_version = self.args.z_wave_protocol_sub_version or 0
  args.application_version = self.args.application_version or 0
  args.application_sub_version = self.args.application_sub_version or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Version.ReportV1
--- @return st.zwave.CommandClass.Version.ReportV1Args
function ReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Version.ReportV1
function ReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Version.ReportV1
function ReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Version.CommandClassGetV1Args
--- @alias CommandClassGetV1Args st.zwave.CommandClass.Version.CommandClassGetV1Args
--- @field public requested_command_class integer
local CommandClassGetV1Args = {}

--- @class st.zwave.CommandClass.Version.CommandClassGetV1:st.zwave.Command
--- @alias CommandClassGetV1 st.zwave.CommandClass.Version.CommandClassGetV1
---
--- v1 and forward-compatible v2,v3 VERSION_COMMAND_CLASS_GET
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x13
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Version.CommandClassGetV1Args command-specific arguments
local CommandClassGetV1 = {}
setmetatable(CommandClassGetV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 VERSION_COMMAND_CLASS_GET object.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.CommandClassGetV1Args command-specific arguments
function CommandClassGetV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.VERSION, Version.COMMAND_CLASS_GET, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 VERSION_COMMAND_CLASS_GET arguments.
---
--- @return string serialized payload
function CommandClassGetV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_cmd_class(args.requested_command_class)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 VERSION_COMMAND_CLASS_GET payload.
---
--- @return st.zwave.CommandClass.Version.CommandClassGetV1Args deserialized arguments
function CommandClassGetV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_cmd_class("requested_command_class")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Version.CommandClassGetV1
--- @return st.zwave.CommandClass.Version.CommandClassGetV1Args
function CommandClassGetV1._defaults(self)
  local args = {}
  args.requested_command_class = self.args.requested_command_class or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Version.CommandClassGetV1
--- @return st.zwave.CommandClass.Version.CommandClassGetV1Args
function CommandClassGetV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Version.CommandClassGetV1
function CommandClassGetV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Version.CommandClassGetV1
function CommandClassGetV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Version.CommandClassReportV1Args
--- @alias CommandClassReportV1Args st.zwave.CommandClass.Version.CommandClassReportV1Args
--- @field public requested_command_class integer
--- @field public command_class_version integer [0,255]
local CommandClassReportV1Args = {}

--- @class st.zwave.CommandClass.Version.CommandClassReportV1:st.zwave.Command
--- @alias CommandClassReportV1 st.zwave.CommandClass.Version.CommandClassReportV1
---
--- v1 and forward-compatible v2,v3 VERSION_COMMAND_CLASS_REPORT
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x14
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Version.CommandClassReportV1Args command-specific arguments
local CommandClassReportV1 = {}
setmetatable(CommandClassReportV1, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v1 and forward-compatible v2,v3 VERSION_COMMAND_CLASS_REPORT object.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.CommandClassReportV1Args command-specific arguments
function CommandClassReportV1:init(module, args, ...)
  zw.Command._parse(self, module, zw.VERSION, Version.COMMAND_CLASS_REPORT, 1, args, ...)
end

--- Serialize v1 or forward-compatible v2,v3 VERSION_COMMAND_CLASS_REPORT arguments.
---
--- @return string serialized payload
function CommandClassReportV1:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_cmd_class(args.requested_command_class)
  writer:write_u8(args.command_class_version)
  return writer.buf
end

--- Deserialize a v1 or forward-compatible v2,v3 VERSION_COMMAND_CLASS_REPORT payload.
---
--- @return st.zwave.CommandClass.Version.CommandClassReportV1Args deserialized arguments
function CommandClassReportV1:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_cmd_class("requested_command_class")
  reader:read_u8("command_class_version")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Version.CommandClassReportV1
--- @return st.zwave.CommandClass.Version.CommandClassReportV1Args
function CommandClassReportV1._defaults(self)
  local args = {}
  args.requested_command_class = self.args.requested_command_class or 0
  args.command_class_version = self.args.command_class_version or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Version.CommandClassReportV1
--- @return st.zwave.CommandClass.Version.CommandClassReportV1Args
function CommandClassReportV1._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Version.CommandClassReportV1
function CommandClassReportV1._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Version.CommandClassReportV1
function CommandClassReportV1._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Version.ReportV2ArgsFirmwareTargets
--- @alias ReportV2ArgsFirmwareTargets st.zwave.CommandClass.Version.ReportV2ArgsFirmwareTargets
--- @field public firmware_version integer [0,255]
--- @field public firmware_sub_version integer [0,255]
local ReportV2ArgsFirmwareTargets = {}

--- @class st.zwave.CommandClass.Version.ReportV2Args
--- @alias ReportV2Args st.zwave.CommandClass.Version.ReportV2Args
--- @field public z_wave_library_type integer [0,255]
--- @field public z_wave_protocol_version integer [0,255]
--- @field public z_wave_protocol_sub_version integer [0,255]
--- @field public firmware_0_version integer [0,255]
--- @field public firmware_0_sub_version integer [0,255]
--- @field public hardware_version integer [0,255]
--- @field public firmware_targets st.zwave.CommandClass.Version.ReportV2ArgsFirmwareTargets[]
local ReportV2Args = {}

--- @class st.zwave.CommandClass.Version.ReportV2:st.zwave.Command
--- @alias ReportV2 st.zwave.CommandClass.Version.ReportV2
---
--- v2 and forward-compatible v3 VERSION_REPORT
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x12
--- @field public version number 2
--- @field public args st.zwave.CommandClass.Version.ReportV2Args command-specific arguments
local ReportV2 = {}
setmetatable(ReportV2, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v2 and forward-compatible v3 VERSION_REPORT object.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.ReportV2Args command-specific arguments
function ReportV2:init(module, args, ...)
  zw.Command._parse(self, module, zw.VERSION, Version.REPORT, 2, args, ...)
end

--- Serialize v2 or forward-compatible v3 VERSION_REPORT arguments.
---
--- @return string serialized payload
function ReportV2:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_u8(args.z_wave_library_type)
  writer:write_u8(args.z_wave_protocol_version)
  writer:write_u8(args.z_wave_protocol_sub_version)
  writer:write_u8(args.firmware_0_version)
  writer:write_u8(args.firmware_0_sub_version)
  writer:write_u8(args.hardware_version)
  writer:write_u8(writer.length(args.firmware_targets))
  for i=1,writer.length(args.firmware_targets) do
    writer:write_u8(args.firmware_targets[i].firmware_version)
    writer:write_u8(args.firmware_targets[i].firmware_sub_version)
  end
  return writer.buf
end

--- Deserialize a v2 or forward-compatible v3 VERSION_REPORT payload.
---
--- @return st.zwave.CommandClass.Version.ReportV2Args deserialized arguments
function ReportV2:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_u8("z_wave_library_type")
  reader:read_u8("z_wave_protocol_version")
  reader:read_u8("z_wave_protocol_sub_version")
  reader:read_u8("firmware_0_version")
  reader:read_u8("firmware_0_sub_version")
  reader:read_u8("hardware_version")
  reader:read_u8("number_of_firmware_targets")
  reader.parsed.firmware_targets = {}
  for i=1,reader.parsed.number_of_firmware_targets do
    reader.parsed.firmware_targets[i] = {}
    reader:read_u8("firmware_version", reader.parsed.firmware_targets[i])
    reader:read_u8("firmware_sub_version", reader.parsed.firmware_targets[i])
  end
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Version.ReportV2
--- @return st.zwave.CommandClass.Version.ReportV2Args
function ReportV2._defaults(self)
  local args = {}
  args.z_wave_library_type = self.args.z_wave_library_type or 0
  args.z_wave_protocol_version = self.args.z_wave_protocol_version or 0
  args.z_wave_protocol_sub_version = self.args.z_wave_protocol_sub_version or 0
  args.firmware_0_version = self.args.firmware_0_version or 0
  args.firmware_0_sub_version = self.args.firmware_0_sub_version or 0
  args.hardware_version = self.args.hardware_version or 0
  args.firmware_targets = self.args.firmware_targets or {}
  for i=1,buf.Writer.length(args.firmware_targets) do
    args.firmware_targets[i] = args.firmware_targets[i] or {}
    args.firmware_targets[i].firmware_version = self.args.firmware_targets[i].firmware_version or 0
    args.firmware_targets[i].firmware_sub_version = self.args.firmware_targets[i].firmware_sub_version or 0
  end
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Version.ReportV2
--- @return st.zwave.CommandClass.Version.ReportV2Args
function ReportV2._template(self)
  local args = self:_defaults()
  local writer = buf.Writer()
  for i=1,buf.Writer.length(args.firmware_targets) do
    args.firmware_targets[i] = args.firmware_targets[i] or {}
  end
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Version.ReportV2
function ReportV2._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Version.ReportV2
function ReportV2._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Version.CapabilitiesGetV3Args
--- @alias CapabilitiesGetV3Args st.zwave.CommandClass.Version.CapabilitiesGetV3Args
local CapabilitiesGetV3Args = {}

--- @class st.zwave.CommandClass.Version.CapabilitiesGetV3:st.zwave.Command
--- @alias CapabilitiesGetV3 st.zwave.CommandClass.Version.CapabilitiesGetV3
---
--- v3 VERSION_CAPABILITIES_GET
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x15
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Version.CapabilitiesGetV3Args command-specific arguments
local CapabilitiesGetV3 = {}
setmetatable(CapabilitiesGetV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 VERSION_CAPABILITIES_GET object.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.CapabilitiesGetV3Args command-specific arguments
function CapabilitiesGetV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.VERSION, Version.CAPABILITIES_GET, 3, args, ...)
end

--- Serialize v3 VERSION_CAPABILITIES_GET arguments.
---
--- @return string serialized payload
function CapabilitiesGetV3:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v3 VERSION_CAPABILITIES_GET payload.
---
--- @return st.zwave.CommandClass.Version.CapabilitiesGetV3Args deserialized arguments
function CapabilitiesGetV3:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Version.CapabilitiesGetV3
--- @return st.zwave.CommandClass.Version.CapabilitiesGetV3Args
function CapabilitiesGetV3._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Version.CapabilitiesGetV3
--- @return st.zwave.CommandClass.Version.CapabilitiesGetV3Args
function CapabilitiesGetV3._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Version.CapabilitiesGetV3
function CapabilitiesGetV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Version.CapabilitiesGetV3
function CapabilitiesGetV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Version.CapabilitiesReportV3Args
--- @alias CapabilitiesReportV3Args st.zwave.CommandClass.Version.CapabilitiesReportV3Args
--- @field public version boolean
--- @field public command_class boolean
--- @field public z_wave_software boolean
local CapabilitiesReportV3Args = {}

--- @class st.zwave.CommandClass.Version.CapabilitiesReportV3:st.zwave.Command
--- @alias CapabilitiesReportV3 st.zwave.CommandClass.Version.CapabilitiesReportV3
---
--- v3 VERSION_CAPABILITIES_REPORT
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x16
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Version.CapabilitiesReportV3Args command-specific arguments
local CapabilitiesReportV3 = {}
setmetatable(CapabilitiesReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 VERSION_CAPABILITIES_REPORT object.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.CapabilitiesReportV3Args command-specific arguments
function CapabilitiesReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.VERSION, Version.CAPABILITIES_REPORT, 3, args, ...)
end

--- Serialize v3 VERSION_CAPABILITIES_REPORT arguments.
---
--- @return string serialized payload
function CapabilitiesReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_bool(args.version)
  writer:write_bool(args.command_class)
  writer:write_bool(args.z_wave_software)
  writer:write_bits(5, 0) -- reserved1
  return writer.buf
end

--- Deserialize a v3 VERSION_CAPABILITIES_REPORT payload.
---
--- @return st.zwave.CommandClass.Version.CapabilitiesReportV3Args deserialized arguments
function CapabilitiesReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_bool("version")
  reader:read_bool("command_class")
  reader:read_bool("z_wave_software")
  reader:read_bits(5) -- reserved1
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Version.CapabilitiesReportV3
--- @return st.zwave.CommandClass.Version.CapabilitiesReportV3Args
function CapabilitiesReportV3._defaults(self)
  local args = {}
  args.version = self.args.version or false
  args.command_class = self.args.command_class or false
  args.z_wave_software = self.args.z_wave_software or false
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Version.CapabilitiesReportV3
--- @return st.zwave.CommandClass.Version.CapabilitiesReportV3Args
function CapabilitiesReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Version.CapabilitiesReportV3
function CapabilitiesReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Version.CapabilitiesReportV3
function CapabilitiesReportV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Version.ZwaveSoftwareGetV3Args
--- @alias ZwaveSoftwareGetV3Args st.zwave.CommandClass.Version.ZwaveSoftwareGetV3Args
local ZwaveSoftwareGetV3Args = {}

--- @class st.zwave.CommandClass.Version.ZwaveSoftwareGetV3:st.zwave.Command
--- @alias ZwaveSoftwareGetV3 st.zwave.CommandClass.Version.ZwaveSoftwareGetV3
---
--- v3 VERSION_ZWAVE_SOFTWARE_GET
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x17
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Version.ZwaveSoftwareGetV3Args command-specific arguments
local ZwaveSoftwareGetV3 = {}
setmetatable(ZwaveSoftwareGetV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 VERSION_ZWAVE_SOFTWARE_GET object.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.ZwaveSoftwareGetV3Args command-specific arguments
function ZwaveSoftwareGetV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.VERSION, Version.ZWAVE_SOFTWARE_GET, 3, args, ...)
end

--- Serialize v3 VERSION_ZWAVE_SOFTWARE_GET arguments.
---
--- @return string serialized payload
function ZwaveSoftwareGetV3:serialize()
  local writer = buf.Writer()
  return writer.buf
end

--- Deserialize a v3 VERSION_ZWAVE_SOFTWARE_GET payload.
---
--- @return st.zwave.CommandClass.Version.ZwaveSoftwareGetV3Args deserialized arguments
function ZwaveSoftwareGetV3:deserialize()
  local reader = buf.Reader(self.payload)
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Version.ZwaveSoftwareGetV3
--- @return st.zwave.CommandClass.Version.ZwaveSoftwareGetV3Args
function ZwaveSoftwareGetV3._defaults(self)
  return {}
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Version.ZwaveSoftwareGetV3
--- @return st.zwave.CommandClass.Version.ZwaveSoftwareGetV3Args
function ZwaveSoftwareGetV3._template(self)
  return {}
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Version.ZwaveSoftwareGetV3
function ZwaveSoftwareGetV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Version.ZwaveSoftwareGetV3
function ZwaveSoftwareGetV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Version.ZwaveSoftwareReportV3Args
--- @alias ZwaveSoftwareReportV3Args st.zwave.CommandClass.Version.ZwaveSoftwareReportV3Args
--- @field public sdk_version integer [0,16777215]
--- @field public application_framework_api_version integer [0,16777215]
--- @field public application_framework_build_number integer [0,65535]
--- @field public host_interface_version integer [0,16777215]
--- @field public host_interface_build_number integer [0,65535]
--- @field public z_wave_protocol_version integer [0,16777215]
--- @field public z_wave_protocol_build_number integer [0,65535]
--- @field public application_version integer [0,16777215]
--- @field public application_build_number integer [0,65535]
local ZwaveSoftwareReportV3Args = {}

--- @class st.zwave.CommandClass.Version.ZwaveSoftwareReportV3:st.zwave.Command
--- @alias ZwaveSoftwareReportV3 st.zwave.CommandClass.Version.ZwaveSoftwareReportV3
---
--- v3 VERSION_ZWAVE_SOFTWARE_REPORT
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x18
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Version.ZwaveSoftwareReportV3Args command-specific arguments
local ZwaveSoftwareReportV3 = {}
setmetatable(ZwaveSoftwareReportV3, {
  __index = zw.Command,
  __call = function(cls, self, ...)
    local mt = {
      __index = function(tbl, key)
        if key == "payload" then
          return tbl:serialize()
        else
          return cls[key]
        end
      end,
      __tostring = zw.Command.pretty_print,
      __eq = zw.Command.equals
    }
    local instance = setmetatable({}, mt)
    instance:init(self, ...)
    return instance
  end,
})

--- Initialize a v3 VERSION_ZWAVE_SOFTWARE_REPORT object.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.ZwaveSoftwareReportV3Args command-specific arguments
function ZwaveSoftwareReportV3:init(module, args, ...)
  zw.Command._parse(self, module, zw.VERSION, Version.ZWAVE_SOFTWARE_REPORT, 3, args, ...)
end

--- Serialize v3 VERSION_ZWAVE_SOFTWARE_REPORT arguments.
---
--- @return string serialized payload
function ZwaveSoftwareReportV3:serialize()
  local writer = buf.Writer()
  local args = self.args
  writer:write_be_u24(args.sdk_version)
  writer:write_be_u24(args.application_framework_api_version)
  writer:write_be_u16(args.application_framework_build_number)
  writer:write_be_u24(args.host_interface_version)
  writer:write_be_u16(args.host_interface_build_number)
  writer:write_be_u24(args.z_wave_protocol_version)
  writer:write_be_u16(args.z_wave_protocol_build_number)
  writer:write_be_u24(args.application_version)
  writer:write_be_u16(args.application_build_number)
  return writer.buf
end

--- Deserialize a v3 VERSION_ZWAVE_SOFTWARE_REPORT payload.
---
--- @return st.zwave.CommandClass.Version.ZwaveSoftwareReportV3Args deserialized arguments
function ZwaveSoftwareReportV3:deserialize()
  local reader = buf.Reader(self.payload)
  reader:read_be_u24("sdk_version")
  reader:read_be_u24("application_framework_api_version")
  reader:read_be_u16("application_framework_build_number")
  reader:read_be_u24("host_interface_version")
  reader:read_be_u16("host_interface_build_number")
  reader:read_be_u24("z_wave_protocol_version")
  reader:read_be_u16("z_wave_protocol_build_number")
  reader:read_be_u24("application_version")
  reader:read_be_u16("application_build_number")
  return reader.parsed
end

--- Return a deep copy of self.args, merging defaults for unset, but required parameters.
---
--- @param self st.zwave.CommandClass.Version.ZwaveSoftwareReportV3
--- @return st.zwave.CommandClass.Version.ZwaveSoftwareReportV3Args
function ZwaveSoftwareReportV3._defaults(self)
  local args = {}
  args.sdk_version = self.args.sdk_version or 0
  args.application_framework_api_version = self.args.application_framework_api_version or 0
  args.application_framework_build_number = self.args.application_framework_build_number or 0
  args.host_interface_version = self.args.host_interface_version or 0
  args.host_interface_build_number = self.args.host_interface_build_number or 0
  args.z_wave_protocol_version = self.args.z_wave_protocol_version or 0
  args.z_wave_protocol_build_number = self.args.z_wave_protocol_build_number or 0
  args.application_version = self.args.application_version or 0
  args.application_build_number = self.args.application_build_number or 0
  return args
end

--- Return a deep copy of self.args, merging defaults for all unset parameters.
---
--- @param self st.zwave.CommandClass.Version.ZwaveSoftwareReportV3
--- @return st.zwave.CommandClass.Version.ZwaveSoftwareReportV3Args
function ZwaveSoftwareReportV3._template(self)
  local args = self:_defaults()
  return args
end

--- Set defaults for any required, but unset arguments.
---
--- @param self st.zwave.CommandClass.Version.ZwaveSoftwareReportV3
function ZwaveSoftwareReportV3._set_defaults(self)
  local defaults = self:_defaults()
  utils.merge(self.args, defaults)
end

--- Set const reflectors to allow enum stringification.
---
--- @param self st.zwave.CommandClass.Version.ZwaveSoftwareReportV3
function ZwaveSoftwareReportV3._set_reflectors(self)
end

--- @class st.zwave.CommandClass.Version.Get
--- @alias _Get st.zwave.CommandClass.Version.Get
---
--- Dynamically versioned VERSION_GET
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x11
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Version.GetV1Args
local _Get = {}
setmetatable(_Get, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a VERSION_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.GetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Version.Get
function _Get:construct(module, args, ...)
  return zw.Command._construct(module, Version.GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Version.Report
--- @alias _Report st.zwave.CommandClass.Version.Report
---
--- Dynamically versioned VERSION_REPORT
---
--- Supported versions: 1,2,3; unique base versions: 1,2
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x12
--- @field public version number 1,2
--- @field public args st.zwave.CommandClass.Version.ReportV1Args|st.zwave.CommandClass.Version.ReportV2Args
local _Report = {}
setmetatable(_Report, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a VERSION_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.ReportV1Args|st.zwave.CommandClass.Version.ReportV2Args command-specific arguments
--- @return st.zwave.CommandClass.Version.Report
function _Report:construct(module, args, ...)
  return zw.Command._construct(module, Version.REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Version.CommandClassGet
--- @alias _CommandClassGet st.zwave.CommandClass.Version.CommandClassGet
---
--- Dynamically versioned VERSION_COMMAND_CLASS_GET
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x13
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Version.CommandClassGetV1Args
local _CommandClassGet = {}
setmetatable(_CommandClassGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a VERSION_COMMAND_CLASS_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.CommandClassGetV1Args command-specific arguments
--- @return st.zwave.CommandClass.Version.CommandClassGet
function _CommandClassGet:construct(module, args, ...)
  return zw.Command._construct(module, Version.COMMAND_CLASS_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Version.CommandClassReport
--- @alias _CommandClassReport st.zwave.CommandClass.Version.CommandClassReport
---
--- Dynamically versioned VERSION_COMMAND_CLASS_REPORT
---
--- Supported versions: 1,2,3; unique base versions: 1
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x14
--- @field public version number 1
--- @field public args st.zwave.CommandClass.Version.CommandClassReportV1Args
local _CommandClassReport = {}
setmetatable(_CommandClassReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a VERSION_COMMAND_CLASS_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.CommandClassReportV1Args command-specific arguments
--- @return st.zwave.CommandClass.Version.CommandClassReport
function _CommandClassReport:construct(module, args, ...)
  return zw.Command._construct(module, Version.COMMAND_CLASS_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Version.CapabilitiesGet
--- @alias _CapabilitiesGet st.zwave.CommandClass.Version.CapabilitiesGet
---
--- Dynamically versioned VERSION_CAPABILITIES_GET
---
--- Supported versions: 3; unique base versions: 3
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x15
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Version.CapabilitiesGetV3Args
local _CapabilitiesGet = {}
setmetatable(_CapabilitiesGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a VERSION_CAPABILITIES_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.CapabilitiesGetV3Args command-specific arguments
--- @return st.zwave.CommandClass.Version.CapabilitiesGet
function _CapabilitiesGet:construct(module, args, ...)
  return zw.Command._construct(module, Version.CAPABILITIES_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Version.CapabilitiesReport
--- @alias _CapabilitiesReport st.zwave.CommandClass.Version.CapabilitiesReport
---
--- Dynamically versioned VERSION_CAPABILITIES_REPORT
---
--- Supported versions: 3; unique base versions: 3
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x16
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Version.CapabilitiesReportV3Args
local _CapabilitiesReport = {}
setmetatable(_CapabilitiesReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a VERSION_CAPABILITIES_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.CapabilitiesReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.Version.CapabilitiesReport
function _CapabilitiesReport:construct(module, args, ...)
  return zw.Command._construct(module, Version.CAPABILITIES_REPORT, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Version.ZwaveSoftwareGet
--- @alias _ZwaveSoftwareGet st.zwave.CommandClass.Version.ZwaveSoftwareGet
---
--- Dynamically versioned VERSION_ZWAVE_SOFTWARE_GET
---
--- Supported versions: 3; unique base versions: 3
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x17
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Version.ZwaveSoftwareGetV3Args
local _ZwaveSoftwareGet = {}
setmetatable(_ZwaveSoftwareGet, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a VERSION_ZWAVE_SOFTWARE_GET object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.ZwaveSoftwareGetV3Args command-specific arguments
--- @return st.zwave.CommandClass.Version.ZwaveSoftwareGet
function _ZwaveSoftwareGet:construct(module, args, ...)
  return zw.Command._construct(module, Version.ZWAVE_SOFTWARE_GET, module._serialization_version, args, ...)
end

--- @class st.zwave.CommandClass.Version.ZwaveSoftwareReport
--- @alias _ZwaveSoftwareReport st.zwave.CommandClass.Version.ZwaveSoftwareReport
---
--- Dynamically versioned VERSION_ZWAVE_SOFTWARE_REPORT
---
--- Supported versions: 3; unique base versions: 3
---
--- @field public cmd_class number 0x86
--- @field public cmd_id number 0x18
--- @field public version number 3
--- @field public args st.zwave.CommandClass.Version.ZwaveSoftwareReportV3Args
local _ZwaveSoftwareReport = {}
setmetatable(_ZwaveSoftwareReport, {
  __call = function(cls, self, ...)
    return cls:construct(self, ...)
  end,
})

--- Construct a VERSION_ZWAVE_SOFTWARE_REPORT object at the module instance serialization version.
---
--- @param module st.zwave.CommandClass.Version command class module instance
--- @param args st.zwave.CommandClass.Version.ZwaveSoftwareReportV3Args command-specific arguments
--- @return st.zwave.CommandClass.Version.ZwaveSoftwareReport
function _ZwaveSoftwareReport:construct(module, args, ...)
  return zw.Command._construct(module, Version.ZWAVE_SOFTWARE_REPORT, module._serialization_version, args, ...)
end

Version.GetV1 = GetV1
Version.ReportV1 = ReportV1
Version.CommandClassGetV1 = CommandClassGetV1
Version.CommandClassReportV1 = CommandClassReportV1
Version.ReportV2 = ReportV2
Version.CapabilitiesGetV3 = CapabilitiesGetV3
Version.CapabilitiesReportV3 = CapabilitiesReportV3
Version.ZwaveSoftwareGetV3 = ZwaveSoftwareGetV3
Version.ZwaveSoftwareReportV3 = ZwaveSoftwareReportV3
Version.Get = _Get
Version.Report = _Report
Version.CommandClassGet = _CommandClassGet
Version.CommandClassReport = _CommandClassReport
Version.CapabilitiesGet = _CapabilitiesGet
Version.CapabilitiesReport = _CapabilitiesReport
Version.ZwaveSoftwareGet = _ZwaveSoftwareGet
Version.ZwaveSoftwareReport = _ZwaveSoftwareReport

Version._lut = {
  [0] = { -- dynamically versioned constructors
    [Version.GET] = Version.Get,
    [Version.REPORT] = Version.Report,
    [Version.COMMAND_CLASS_GET] = Version.CommandClassGet,
    [Version.COMMAND_CLASS_REPORT] = Version.CommandClassReport,
    [Version.CAPABILITIES_GET] = Version.CapabilitiesGet,
    [Version.CAPABILITIES_REPORT] = Version.CapabilitiesReport,
    [Version.ZWAVE_SOFTWARE_GET] = Version.ZwaveSoftwareGet,
    [Version.ZWAVE_SOFTWARE_REPORT] = Version.ZwaveSoftwareReport
  },
  [1] = { -- version 1
    [Version.GET] = Version.GetV1,
    [Version.REPORT] = Version.ReportV1,
    [Version.COMMAND_CLASS_GET] = Version.CommandClassGetV1,
    [Version.COMMAND_CLASS_REPORT] = Version.CommandClassReportV1
  },
  [2] = { -- version 2
    [Version.GET] = Version.GetV1,
    [Version.REPORT] = Version.ReportV2,
    [Version.COMMAND_CLASS_GET] = Version.CommandClassGetV1,
    [Version.COMMAND_CLASS_REPORT] = Version.CommandClassReportV1
  },
  [3] = { -- version 3
    [Version.GET] = Version.GetV1,
    [Version.REPORT] = Version.ReportV2,
    [Version.COMMAND_CLASS_GET] = Version.CommandClassGetV1,
    [Version.COMMAND_CLASS_REPORT] = Version.CommandClassReportV1,
    [Version.CAPABILITIES_GET] = Version.CapabilitiesGetV3,
    [Version.CAPABILITIES_REPORT] = Version.CapabilitiesReportV3,
    [Version.ZWAVE_SOFTWARE_GET] = Version.ZwaveSoftwareGetV3,
    [Version.ZWAVE_SOFTWARE_REPORT] = Version.ZwaveSoftwareReportV3
  }
}

return Version
